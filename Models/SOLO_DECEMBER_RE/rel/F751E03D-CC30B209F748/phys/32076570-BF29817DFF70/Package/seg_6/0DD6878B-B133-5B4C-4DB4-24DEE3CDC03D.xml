<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_PROCESS_RRT_OIT_ITEMS" directorySegmentName="seg_6" id="0DD6878B-B133-5B4C-4DB4-24DEE3CDC03D">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_OIT_ITEMS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:36 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_PROCESS_RRT_OIT_ITEMS&lt;br/&gt;IS&lt;br/&gt;/*********************************************************************************************************************&lt;br/&gt;||      Program Name                 : pkg_vnt_process_rrt_oit_items&lt;br/&gt;||      CREATED BY                   : Knoll&lt;br/&gt;||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;||      SUBJECT AREA                 : Order&lt;br/&gt;||      DESCRIPITION                 : The package pkg_vnt_process_rrt_oit_items controls the processing of the&lt;br/&gt;||                                     Vantage RRT_OIT_ITEMS table and applying those updates to SOLODB.&lt;br/&gt;Change log:&lt;br/&gt;&lt;br/&gt;    Changed By                 Changed On             Changed Description&lt;br/&gt;----------------------------------------------------------------------------------------------------------------------&lt;br/&gt;    Cognizant                  10-OCT-2014            Standardization Changes&lt;br/&gt;***********************************************************************************************************************/&lt;br/&gt;   PROCEDURE process(p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;END pkg_vnt_process_rrt_oit_items;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_PROCESS_RRT_OIT_ITEMS" id="0DD6878B-B133-5B4C-4DB4-24DEE3CDC03D">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_OIT_ITEMS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:41 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_PROCESS_RRT_OIT_ITEMS&lt;br/&gt;IS&lt;br/&gt;/**************************************************************************************************************************************&lt;br/&gt;     ||      Program Name                 : pkg_vnt_process_rrt_oit_items&lt;br/&gt;     ||      CREATED BY                   : Knoll&lt;br/&gt;     ||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;     ||      SUBJECT AREA                 : Order&lt;br/&gt;     ||      DESCRIPITION                 : The package pkg_vnt_process_rrt_oit_items controls the processing of the&lt;br/&gt;     ||                                     Vantage RRT_OIT_ITEMS table and applying those updates to SOLODB.&lt;br/&gt;     || Change log:&lt;br/&gt;     || Changed By                 Changed On             Changed Description&lt;br/&gt;     || -----------------------    ---------------------- -------------------------------------------------------------&lt;br/&gt;     || Cognizant                  10-OCT-2014            Standardization Changes&lt;br/&gt;     || Senthil                    05-Jan-2015            Changed to use new xref table t_bus_interact_item_vnt_xref&lt;br/&gt;     || Cognizant                  09-Jan-2015            Data model change, Changed  bus_interact_type_cd and&lt;br/&gt;     ||                                                   request_type_cd.&lt;br/&gt;     || Cognizant                  30-Jan-2015            Code Fix done in the procedure process_work_ord_item for&lt;br/&gt;     ||                                                   T_BUS_INTERACT_ITEM.BUS_INTERACT_ID null issue fix&lt;br/&gt;     || Cognizant                  20-Feb-2015            For work orders bus_interact_item_typ_cd changed to &apos;WRKORD&apos;&lt;br/&gt;     || Cognizant                  25-Feb-2015            Changed the mapping of bus_interact_item_typ_cd in&lt;br/&gt;     ||                                                   t_bus_interact_item_vnt_xref to &apos;request_type_cd&apos; to sync with&lt;br/&gt;     ||                                                   t_bus_interact_item table&lt;br/&gt;     || Cognizant                  03-Mar-2015            Added procedure update_staging_ord to update the Error records&lt;br/&gt;     ||                                                   in the Delta table&lt;br/&gt;     || Cognizant                  31-Mar-2015            Code changes to remove the discrepancies between NRT/RRT , Initial&lt;br/&gt;     ||                                                   Load and Reconciliation&lt;br/&gt;     || Cognizant                  10-Apr-2015            Trim included for character column in cursor query.&lt;br/&gt;     || Cognizant                  13-Apr-2015            The column create_dttm added in the update statement of&lt;br/&gt;     ||                                                   t_work_order_item table&lt;br/&gt;     || Cognizant                  13-Apr-2015            Missing columns added in the Update of T_WORK_ORDER_ITEM&lt;br/&gt;     || Cognizant                  14-Apr-2015            Inner join changed to left for the table t_busn_intrn_vnt_job_xref&lt;br/&gt;     || Cognizant                  17-Apr-2015            Transformation logic of column item_status_roit modified.&lt;br/&gt;     || Venkataraman               22-APR-2014            Adding the Dunning Code to the T_ACCOUNT table&lt;br/&gt;     || Binoy                      28-APR-2014            Removed the column address_subtype_cd from the table t_account_address&lt;br/&gt;     || Binoy                      28-MAY-2015            Adding T_PARTY_ACCOUNT instead of T_CUSTOMER_ACCOUNT&lt;br/&gt;     ||                                                   Removed the column address_subtype_cd usage from the table&lt;br/&gt;     ||                                                   t_account_address.&lt;br/&gt;     || Binoy                      24-Jun-2015            Populate the data into the column ORIG_BUS_INTERACT_ITEM_ID.T_BILLING_PROD_INST&lt;br/&gt;     ||                                                   as part of XDW change.&lt;br/&gt;     || Binoy                      24-Jun-2015            Populate the data into the column BILLING_STATION_ID.T_ACCOUNT&lt;br/&gt;     ||                                                   as part of XDW change.&lt;br/&gt;   **************************************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name   CONSTANT t_unit_name := &apos;PKG_VNT_PROCESS_RRT_OIT_ITEMS&apos;;&lt;br/&gt;   c_bulk_errors         EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_rrt_oit_items&lt;br/&gt;   IS&lt;br/&gt;      SELECT   CASE&lt;br/&gt;                  WHEN roit.sys_roit = 8313&lt;br/&gt;                     THEN &apos;BRS&apos;&lt;br/&gt;                  ELSE &apos;VNT&apos;&lt;br/&gt;               END AS data_source_type_cd,&lt;br/&gt;               roit.ROWID AS ID, roit.record_load_cd, acct_xref.account_id,&lt;br/&gt;               cust_xref.party_id AS customer_id,&lt;br/&gt;               addr_xref.address_id AS service_address_id,&lt;br/&gt;               ord_xref.bus_interact_id AS ord_id,&lt;br/&gt;               job_xref.bus_interact_id AS job_id,&lt;br/&gt;               roit.sub_acct_no_roit AS sub_acct_num,&lt;br/&gt;               roit.cust_acct_no_roit AS cust_acct_num, roit.serv_id_roit,&lt;br/&gt;               roit.serv_id_roit AS source_system_id,&lt;br/&gt;&lt;br/&gt;               --pack.billing_product_id AS billing_package_product_id,&lt;br/&gt;               pack.billing_product_id AS package_billing_product_id,&lt;br/&gt;&lt;br/&gt;               --roit.bill_cde_roit AS billing_package_product_cd,&lt;br/&gt;               TRIM (roit.bill_cde_roit) AS package_billing_product_cd,&lt;br/&gt;&lt;br/&gt;               --serv.billing_product_id AS billing_service_product_id,&lt;br/&gt;               serv.billing_product_id AS service_billing_product_id,&lt;br/&gt;&lt;br/&gt;               --roit.serv_cde_roit AS billing_service_product_cd,&lt;br/&gt;               TRIM (roit.serv_cde_roit) AS service_billing_product_cd,&lt;br/&gt;               roit.bef_qty_roit, roit.aft_qty_roit AS billing_prod_inst_qty,&lt;br/&gt;&lt;br/&gt;               --Commented and modified as below as part of NRT-INnitial Load sync on 31-Mar-2015 -- Reveretd the changes on 17 APR as part of defect fix&lt;br/&gt;               NVL (TRIM (roit.item_status_roit), &apos;U&apos;) AS item_status_roit,&lt;br/&gt;&lt;br/&gt;               --TRIM(roit.item_status_roit) AS item_status_roit,&lt;br/&gt;               --Addeded below transformation as part of NRT-INnitial Load sync on 31-Mar-2015&lt;br/&gt;               TO_DATE (DECODE (roit.create_dte_roit,&lt;br/&gt;                                pkg_utility.c_null_date, NULL,&lt;br/&gt;                                roit.create_dte_roit&lt;br/&gt;                               )&lt;br/&gt;                       ) AS create_dttm,&lt;br/&gt;               TO_DATE&lt;br/&gt;                     (DECODE (roit.bill_start_dte_roit,&lt;br/&gt;                              pkg_utility.c_null_date, NULL,&lt;br/&gt;                              roit.bill_start_dte_roit&lt;br/&gt;                             )&lt;br/&gt;                     ) AS billing_start_dttm,&lt;br/&gt;               TO_DATE&lt;br/&gt;                  (DECODE (roit.connect_dte_roit,&lt;br/&gt;                           pkg_utility.c_null_date, NULL,&lt;br/&gt;                           roit.connect_dte_roit&lt;br/&gt;                          )&lt;br/&gt;                  ) AS blg_prod_inst_vld_st_dttm,&lt;br/&gt;               DECODE (roit.offer_id_roit,&lt;br/&gt;                       0, NULL,&lt;br/&gt;                       roit.offer_id_roit&lt;br/&gt;                      ) AS product_offering_id,&lt;br/&gt;               roit.order_no_roit, bi.bus_interact_type_cd,&lt;br/&gt;               r.request_type_cd, roit.bill_amt_roit,&lt;br/&gt;               TRIM (roit.acct_stage_roit) acct_stage_roit,&lt;br/&gt;               TRIM (roit.lob_acct_stage_roit) lob_acct_stage_roit,&lt;br/&gt;               TRIM (roit.lob_act_roit) lob_act_roit, roit.job_seq_no_roit,&lt;br/&gt;               item_xref.bus_interact_item_id,&lt;br/&gt;               bs.billing_station_id&lt;br/&gt;          FROM stg.vnt_rrt_oit_items roit LEFT OUTER JOIN t_account_vantage_xref acct_xref&lt;br/&gt;               ON acct_xref.sub_acct_num = roit.sub_acct_no_roit&lt;br/&gt;             AND acct_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;               ON cust_xref.cust_acct_num = roit.cust_acct_no_roit&lt;br/&gt;             AND cust_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_service_address_vantage_xref addr_xref&lt;br/&gt;               ON addr_xref.hs_key = roit.hse_key_roit&lt;br/&gt;             AND addr_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;               --INNER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;               ON ord_xref.ord_no = roit.order_no_roit&lt;br/&gt;             AND ord_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_busn_intrn_vnt_job_xref job_xref&lt;br/&gt;               --INNER JOIN t_busn_intrn_vnt_job_xref job_xref&lt;br/&gt;               ON job_xref.order_num = roit.order_no_roit&lt;br/&gt;             AND roit.job_seq_no_roit &gt; 0&lt;br/&gt;             AND job_xref.job_seq_num = roit.job_seq_no_roit&lt;br/&gt;             AND job_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_bus_interact bi&lt;br/&gt;               ON bi.bus_interact_id = ord_xref.bus_interact_id&lt;br/&gt;             AND bi.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_request r&lt;br/&gt;               ON r.request_interaction_id = ord_xref.bus_interact_id&lt;br/&gt;             AND r.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_billing_product pack&lt;br/&gt;               ON pack.billing_product_cd = roit.bill_cde_roit&lt;br/&gt;             AND pack.data_source_type_cd =&lt;br/&gt;                               CASE&lt;br/&gt;                                  WHEN roit.sys_roit = 8313&lt;br/&gt;                                     THEN &apos;BRS&apos;&lt;br/&gt;                                  ELSE &apos;VNT&apos;&lt;br/&gt;                               END&lt;br/&gt;             AND pack.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_billing_product serv&lt;br/&gt;               ON serv.billing_product_cd = roit.serv_cde_roit&lt;br/&gt;             AND serv.data_source_type_cd =&lt;br/&gt;                               CASE&lt;br/&gt;                                  WHEN roit.sys_roit = 8313&lt;br/&gt;                                     THEN &apos;BRS&apos;&lt;br/&gt;                                  ELSE &apos;VNT&apos;&lt;br/&gt;                               END&lt;br/&gt;             AND serv.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_bus_interact_item_vnt_xref item_xref&lt;br/&gt;               ON item_xref.order_num = roit.order_no_roit&lt;br/&gt;             AND item_xref.serv_id = roit.serv_id_roit&lt;br/&gt;               LEFT OUTER JOIN t_billing_station bs&lt;br/&gt;               ON bs.billing_station_level_1_cd = roit.sys_roit&lt;br/&gt;             AND bs.billing_station_level_2_cd = roit.prin_roit&lt;br/&gt;         WHERE roit.record_load_cd IS NULL&lt;br/&gt;      ORDER BY roit.pull_dte_roit,&lt;br/&gt;               DECODE (roit.pull_tme_slot_roit,&lt;br/&gt;                       1, pkg_utility.l_final_slot,&lt;br/&gt;                       roit.pull_tme_slot_roit&lt;br/&gt;                      ),&lt;br/&gt;               roit.sub_acct_no_roit;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE process_svc (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_ord_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_work_ord_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_billing_prod_inst (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_row_i           IN   t_billing_prod_inst%ROWTYPE,&lt;br/&gt;      p_audit_user_i         VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_account (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_bi_item_i       IN              t_bus_interact_item%ROWTYPE,&lt;br/&gt;      p_audit_user_i                    VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_special_request_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_bi_item_i       IN              t_bus_interact_item%ROWTYPE,&lt;br/&gt;      p_audit_user_i                    VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_bi_item_i       IN              t_bus_interact_item%ROWTYPE,&lt;br/&gt;      p_audit_user_i                    VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION account_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_sub_acct_num    IN   t_account_vantage_xref.sub_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_billing_prod_inst (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_billing_prod_inst%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact_item_vnt_xref (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_i    IN              cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact_item%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure process&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will open the cursor for processing the records for create stub account/&lt;br/&gt;      ||                       customer as needed to support the service/order item, service processing,order item&lt;br/&gt;      ||                       processing,work order item processing ,set the final value for record_load_cd, Update&lt;br/&gt;      the&lt;br/&gt;      ||                       staging rows with status and commit the batch.&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name            t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name         t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec          pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data          t_cursor_data_tbl;&lt;br/&gt;      l_svc_processed        VARCHAR2 (1);&lt;br/&gt;      l_ord_processed        VARCHAR2 (1);&lt;br/&gt;      l_work_ord_processed   VARCHAR2 (1);&lt;br/&gt;      l_process_record_cnt   NUMBER                            := 0;&lt;br/&gt;      l_error_record_cnt     NUMBER                            := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_rrt_oit_items%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_rrt_oit_items;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_rrt_oit_items;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_rrt_oit_items&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT pkg_utility.c_rt_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  IF (l_cursor_data (i).account_id IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     create_account (l_process_rec,&lt;br/&gt;                                     p_audit_user_i,&lt;br/&gt;                                     l_cursor_data (i)&lt;br/&gt;                                    );&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  IF (l_cursor_data (i).record_load_cd IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     IF (l_cursor_data (i).item_status_roit IN&lt;br/&gt;                                                         (&apos;B&apos;, &apos;C&apos;, &apos;O&apos;, &apos;P&apos;)&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        process_svc (l_process_rec,&lt;br/&gt;                                     p_audit_user_i,&lt;br/&gt;                                     l_cursor_data (i)&lt;br/&gt;                                    );&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     l_svc_processed := l_cursor_data (i).record_load_cd;&lt;br/&gt;&lt;br/&gt;                     --IF(l_cursor_data (i).job_seq_no_roit = 0 AND l_cursor_data (i).order_no_roit !=pkg_utility.c_dummy_order_no)&lt;br/&gt;                     IF (    l_cursor_data (i).job_seq_no_roit = 0&lt;br/&gt;                         AND l_cursor_data (i).order_no_roit !=&lt;br/&gt;                                                  pkg_utility.c_dummy_order_no&lt;br/&gt;                         AND NVL (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                  pkg_utility.c_stg_processed&lt;br/&gt;                                 ) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        process_ord_item (l_process_rec,&lt;br/&gt;                                          p_audit_user_i,&lt;br/&gt;                                          l_cursor_data (i)&lt;br/&gt;                                         );&lt;br/&gt;                        l_ord_processed := l_cursor_data (i).record_load_cd;&lt;br/&gt;                     ELSE&lt;br/&gt;                        l_ord_processed := pkg_utility.c_stg_processed;&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     --IF(l_cursor_data (i).job_seq_no_roit &gt; 0 AND l_cursor_data (i).order_no_roit !=pkg_utility.c_dummy_order_no)&lt;br/&gt;                     IF (    l_cursor_data (i).job_seq_no_roit &gt; 0&lt;br/&gt;                         AND l_cursor_data (i).order_no_roit !=&lt;br/&gt;                                                  pkg_utility.c_dummy_order_no&lt;br/&gt;                         AND NVL (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                  pkg_utility.c_stg_processed&lt;br/&gt;                                 ) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        process_work_ord_item (l_process_rec,&lt;br/&gt;                                               p_audit_user_i,&lt;br/&gt;                                               l_cursor_data (i)&lt;br/&gt;                                              );&lt;br/&gt;                        l_work_ord_processed :=&lt;br/&gt;                                              l_cursor_data (i).record_load_cd;&lt;br/&gt;                     ELSE&lt;br/&gt;                        l_work_ord_processed := pkg_utility.c_stg_processed;&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     IF (   l_svc_processed = pkg_utility.c_stg_error&lt;br/&gt;                         OR l_ord_processed = pkg_utility.c_stg_error&lt;br/&gt;                         OR l_work_ord_processed = pkg_utility.c_stg_error&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;                     ELSE&lt;br/&gt;                        l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                  pkg_utility.c_stg_processed;&lt;br/&gt;                     END IF;&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  update_staging (l_process_rec, l_cursor_data (i));&lt;br/&gt;                  COMMIT;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                         (l_process_rec,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                          || l_cursor_data (i).account_id&lt;br/&gt;                                          || &apos;, JOB_SEQ_NO_ROIT = &apos;&lt;br/&gt;                                          || l_cursor_data (i).job_seq_no_roit&lt;br/&gt;                                          || &apos;, SERV_ID_ROIT = &apos;&lt;br/&gt;                                          || l_cursor_data (i).serv_id_roit&lt;br/&gt;                                          || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                       pkg_utility.c_stg_error;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               --Capturing the Processed/error record count&lt;br/&gt;               SELECT   DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                NULL, 1,&lt;br/&gt;                                pkg_utility.c_stg_processed, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_process_record_cnt,&lt;br/&gt;                        DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                pkg_utility.c_stg_error, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_error_record_cnt&lt;br/&gt;                 INTO l_process_record_cnt,&lt;br/&gt;                      l_error_record_cnt&lt;br/&gt;                 FROM DUAL;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; pkg_utility.c_rt_batchsize;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_rrt_oit_items;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_rrt_oit_items%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_rrt_oit_items;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_account (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure create_account&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will create the account by looking-up account in the case where it was&lt;br/&gt;      ||                       created in this run,create account row,create account_vantage_xref,create account_address&lt;br/&gt;      ||                        relationship for service address,create customer if doesn&apos;t exist,party,customer,&lt;br/&gt;      ||                        party_vantage_xref and creating customer_account relationship&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name     t_unit_name := &apos;CREATE_ACCOUNT&apos;;&lt;br/&gt;      l_account_id    NUMBER;&lt;br/&gt;      l_customer_id   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos; , sub_acct_num=&apos;&lt;br/&gt;                             || p_cursor_row_io.sub_acct_num&lt;br/&gt;                            );&lt;br/&gt;      -- lookup account in the case where it was created in this run&lt;br/&gt;      l_account_id :=&lt;br/&gt;                account_exists (p_process_rec_i, p_cursor_row_io.sub_acct_num);&lt;br/&gt;&lt;br/&gt;      IF (l_account_id IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos;, ACCOUNT EXISTS&apos;&lt;br/&gt;                               );&lt;br/&gt;         p_cursor_row_io.account_id := l_account_id;&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      -- create account row&lt;br/&gt;      p_cursor_row_io.account_id :=&lt;br/&gt;         da_account.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd             =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   account_num                     =&gt; p_cursor_row_io.sub_acct_num,&lt;br/&gt;                   account_nm                      =&gt; NULL,&lt;br/&gt;                   account_open_dt                 =&gt; NULL,&lt;br/&gt;                   account_close_dt                =&gt; NULL,&lt;br/&gt;                   account_type_cd                 =&gt; NULL,&lt;br/&gt;                   account_purpose_subtype_cd      =&gt; &apos;BLG&apos;,&lt;br/&gt;                   subaccount_ind                  =&gt; 0,&lt;br/&gt;                   account_qualifier_cd            =&gt; NULL,&lt;br/&gt;                   billing_station_id              =&gt; p_cursor_row_io.billing_station_id,&lt;br/&gt;                   audit_user                      =&gt; p_audit_user_i,&lt;br/&gt;                   dunning_group_cd                =&gt; NULL&lt;br/&gt;                  );&lt;br/&gt;      -- create account_vantage_xref&lt;br/&gt;      da_account_vantage_xref.ADD&lt;br/&gt;                                (p_process_rec_i,&lt;br/&gt;                                 sub_acct_num      =&gt; p_cursor_row_io.sub_acct_num,&lt;br/&gt;                                 account_id        =&gt; p_cursor_row_io.account_id,&lt;br/&gt;                                 audit_user        =&gt; p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;&lt;br/&gt;      -- create account_address relationship for service address&lt;br/&gt;      IF (p_cursor_row_io.service_address_id IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         da_account_address.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  account_id                 =&gt; p_cursor_row_io.account_id,&lt;br/&gt;                  address_id                 =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;                  address_usage_type_cd      =&gt; &apos;SRVC&apos;,&lt;br/&gt;--                                              address_subtype_cd      =&gt; &apos;SRVC&apos;,  -- As part of the webservice gateway change&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      -- create customer if doesn&apos;t exist&lt;br/&gt;      l_customer_id :=&lt;br/&gt;              customer_exists (p_process_rec_i, p_cursor_row_io.cust_acct_num);&lt;br/&gt;&lt;br/&gt;      IF (l_customer_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos;, CREATING CUSTOMER&apos;&lt;br/&gt;                               );&lt;br/&gt;         -- party&lt;br/&gt;         p_cursor_row_io.customer_id :=&lt;br/&gt;            da_party.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;--                   party_nm                    =&gt; NULL,&lt;br/&gt;                   party_subtype_cd            =&gt; NULL,&lt;br/&gt;                   party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         -- customer&lt;br/&gt;         da_customer.ADD (p_process_rec_i,&lt;br/&gt;                          external_customer_id      =&gt; NULL,&lt;br/&gt;                          customer_id               =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                          first_contact_dt          =&gt; NULL,&lt;br/&gt;                          first_fulfillment         =&gt; NULL,&lt;br/&gt;                          first_payment             =&gt; NULL,&lt;br/&gt;                          audit_user                =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;         -- party_vantage_xref&lt;br/&gt;         da_party_vantage_xref.ADD&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                               cust_acct_num      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                               party_id           =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                               audit_user         =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;      ELSE&lt;br/&gt;         p_cursor_row_io.customer_id := l_customer_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      -- create customer_account relationship&lt;br/&gt;      IF (p_cursor_row_io.customer_id IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         da_party_account.ADD&lt;br/&gt;            (process_rec                =&gt; p_process_rec_i,&lt;br/&gt;             account_id                 =&gt; p_cursor_row_io.account_id,&lt;br/&gt;             party_id                   =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;             party_account_role_cd      =&gt; pkg_utility.c_party_account_role_cd_resp,&lt;br/&gt;             data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;             audit_user                 =&gt; p_audit_user_i&lt;br/&gt;            );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, account_id = &apos;&lt;br/&gt;                                    || p_cursor_row_io.account_id&lt;br/&gt;                                    || &apos;, cust_acct_num = &apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos;, sub_acct_num=&apos;&lt;br/&gt;                                    || p_cursor_row_io.sub_acct_num&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_account;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_svc (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure process_svc&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will process cvc by looking-up on t_billing_prod_inst,update existing&lt;br/&gt;      ||                       service,insert new service&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name           t_unit_name                      := &apos;PROCESS_SVC&apos;;&lt;br/&gt;      l_account_id          t_account_vantage_xref.account_id%TYPE;&lt;br/&gt;      l_billing_prod_inst   t_billing_prod_inst%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, sub_acct_num = &apos;&lt;br/&gt;                             || p_cursor_row_io.sub_acct_num&lt;br/&gt;                             || &apos;, account_id = &apos;&lt;br/&gt;                             || p_cursor_row_io.account_id&lt;br/&gt;                             || &apos;, billing_service_product_cd = &apos;&lt;br/&gt;                             || p_cursor_row_io.service_billing_product_cd&lt;br/&gt;                             || &apos;, serv_id_roit = &apos;&lt;br/&gt;                             || p_cursor_row_io.serv_id_roit&lt;br/&gt;                            );&lt;br/&gt;      -- lookup on t_billing_prod_inst&lt;br/&gt;      l_billing_prod_inst.account_id := p_cursor_row_io.account_id;&lt;br/&gt;      l_billing_prod_inst.billing_service_product_cd :=&lt;br/&gt;                                    p_cursor_row_io.service_billing_product_cd;&lt;br/&gt;      -- source system id is actually the serv_id field from the Vantage item tables;&lt;br/&gt;      -- we need to know which instance of the service code to look for, and there is no xref for&lt;br/&gt;      -- the billed instances (only the business interaction items), so it goes here for now&lt;br/&gt;      l_billing_prod_inst.source_system_id := p_cursor_row_io.source_system_id;&lt;br/&gt;&lt;br/&gt;      IF (get_billing_prod_inst (p_process_rec_i, l_billing_prod_inst))&lt;br/&gt;      THEN&lt;br/&gt;         -- update existing service&lt;br/&gt;         l_billing_prod_inst.billing_prod_inst_status_cd :=&lt;br/&gt;                                             p_cursor_row_io.item_status_roit;&lt;br/&gt;         l_billing_prod_inst.blg_prod_inst_vld_st_dttm :=&lt;br/&gt;                                    p_cursor_row_io.blg_prod_inst_vld_st_dttm;&lt;br/&gt;         l_billing_prod_inst.billing_start_dttm :=&lt;br/&gt;                                           p_cursor_row_io.billing_start_dttm;&lt;br/&gt;         l_billing_prod_inst.billing_prod_inst_qty :=&lt;br/&gt;                                        p_cursor_row_io.billing_prod_inst_qty;&lt;br/&gt;         l_billing_prod_inst.product_offering_id :=&lt;br/&gt;                                          p_cursor_row_io.product_offering_id;&lt;br/&gt;         l_billing_prod_inst.billing_package_product_cd :=&lt;br/&gt;                                   p_cursor_row_io.package_billing_product_cd;&lt;br/&gt;         l_billing_prod_inst.billing_package_product_id :=&lt;br/&gt;                                   p_cursor_row_io.package_billing_product_id;&lt;br/&gt;         l_billing_prod_inst.origin_bus_interact_item_id :=&lt;br/&gt;                                         p_cursor_row_io.bus_interact_item_id;&lt;br/&gt;         update_billing_prod_inst (p_process_rec_i,&lt;br/&gt;                                   l_billing_prod_inst,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;      ELSE&lt;br/&gt;         -- insert new service, if installed quantity &gt; 0&lt;br/&gt;         IF (p_cursor_row_io.billing_prod_inst_qty &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, insert &apos;&lt;br/&gt;                                   || p_cursor_row_io.service_billing_product_cd&lt;br/&gt;                                  );&lt;br/&gt;            da_billing_prod_inst.ADD&lt;br/&gt;               (process_rec                      =&gt; p_process_rec_i,&lt;br/&gt;                seasonal_start_dttm              =&gt; NULL,&lt;br/&gt;                seasonal_end_dttm                =&gt; NULL,&lt;br/&gt;                data_source_type_cd              =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                source_system_id                 =&gt; p_cursor_row_io.source_system_id,&lt;br/&gt;                origin_bus_interact_item_id      =&gt; p_cursor_row_io.bus_interact_item_id,&lt;br/&gt;                billing_package_product_id       =&gt; p_cursor_row_io.package_billing_product_id,&lt;br/&gt;                billing_package_product_cd       =&gt; p_cursor_row_io.package_billing_product_cd,&lt;br/&gt;                billing_service_product_id       =&gt; p_cursor_row_io.service_billing_product_id,&lt;br/&gt;                billing_service_product_cd       =&gt; p_cursor_row_io.service_billing_product_cd,&lt;br/&gt;                account_id                       =&gt; p_cursor_row_io.account_id,&lt;br/&gt;                product_offering_id              =&gt; p_cursor_row_io.product_offering_id,&lt;br/&gt;                billing_prod_inst_status_cd      =&gt; p_cursor_row_io.item_status_roit,&lt;br/&gt;                blg_prod_inst_vld_st_dttm        =&gt; p_cursor_row_io.blg_prod_inst_vld_st_dttm,&lt;br/&gt;                billing_start_dttm               =&gt; p_cursor_row_io.billing_start_dttm,&lt;br/&gt;                billing_prod_inst_qty            =&gt; p_cursor_row_io.billing_prod_inst_qty,&lt;br/&gt;                audit_user                       =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      p_cursor_row_io.record_load_cd := pkg_utility.c_stg_processed;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, sub_acct_num=&apos;&lt;br/&gt;                                || p_cursor_row_io.sub_acct_num&lt;br/&gt;                                || &apos;, account_id = &apos;&lt;br/&gt;                                || p_cursor_row_io.account_id&lt;br/&gt;                                || &apos;, billing_service_product_cd = &apos;&lt;br/&gt;                                || p_cursor_row_io.service_billing_product_cd&lt;br/&gt;                                || &apos;, serv_id_roit = &apos;&lt;br/&gt;                                || p_cursor_row_io.serv_id_roit&lt;br/&gt;                                || &apos;, exception = &apos;&lt;br/&gt;                                || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                               );&lt;br/&gt;   END process_svc;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_ord_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure process_ord_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will process order item with  prod_order_item,prod_order_item_status,&lt;br/&gt;      ||                        special_request_item and special_request_item_status&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name              t_unit_name              := &apos;PROCESS_ORD_ITEM&apos;;&lt;br/&gt;      l_account_id             NUMBER;&lt;br/&gt;      l_bus_interact_item      t_bus_interact_item%ROWTYPE;&lt;br/&gt;      l_bus_interact_item_id   t_bus_interact_item.bus_interact_item_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, order_no_roit = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no_roit&lt;br/&gt;                             || &apos;, serv_id_roit = &apos;&lt;br/&gt;                             || p_cursor_row_io.serv_id_roit&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.ord_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                           (p_process_rec_i,&lt;br/&gt;                               l_proc_name&lt;br/&gt;                            || &apos;, ORDER_NO_ROIT = &apos;&lt;br/&gt;                            || p_cursor_row_io.order_no_roit&lt;br/&gt;                            || &apos;, SERV_ID_ROIT = &apos;&lt;br/&gt;                            || p_cursor_row_io.serv_id_roit&lt;br/&gt;                            || &apos;, error = &apos;&lt;br/&gt;                            || &apos;ORDER NOT FOUND IN T_BUS_INTER_VANTAGE_ORD_XREF&apos;&lt;br/&gt;                           );&lt;br/&gt;         --Procedure name and record id added by Cognizant on 21-Nov-2014&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;      ELSE&lt;br/&gt;         -- ORDER ITEMS (product_order and special_request)&lt;br/&gt;         IF (p_cursor_row_io.request_type_cd IN&lt;br/&gt;                (pkg_utility.c_request_type_cd_prdord,&lt;br/&gt;                 pkg_utility.c_request_type_cd_splreq&lt;br/&gt;                )&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            IF (get_bus_interact_item_vnt_xref&lt;br/&gt;                                          (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                           p_cursor_row_i       =&gt; p_cursor_row_io,&lt;br/&gt;                                           p_row_io             =&gt; l_bus_interact_item&lt;br/&gt;                                          )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               -- update the item and status&lt;br/&gt;               IF (p_cursor_row_io.request_type_cd =&lt;br/&gt;                                          pkg_utility.c_request_type_cd_prdord&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  update_prod_order_item (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io,&lt;br/&gt;                                          l_bus_interact_item,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;               ELSIF (p_cursor_row_io.request_type_cd =&lt;br/&gt;                                          pkg_utility.c_request_type_cd_splreq&lt;br/&gt;                     )&lt;br/&gt;               THEN&lt;br/&gt;                  update_special_request_item (p_process_rec_i,&lt;br/&gt;                                               p_cursor_row_io,&lt;br/&gt;                                               l_bus_interact_item,&lt;br/&gt;                                               p_audit_user_i&lt;br/&gt;                                              );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               -- insert bus_interact_item&lt;br/&gt;               l_bus_interact_item_id :=&lt;br/&gt;                  da_bus_interact_item.ADD&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                      source_system_id               =&gt;    p_cursor_row_io.order_no_roit&lt;br/&gt;                                                        || p_cursor_row_io.serv_id_roit,&lt;br/&gt;                      bus_interact_id                =&gt; p_cursor_row_io.ord_id,&lt;br/&gt;                      bus_interact_item_type_cd      =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;               IF (p_cursor_row_io.request_type_cd =&lt;br/&gt;                                          pkg_utility.c_request_type_cd_prdord&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  -- prod_order_item&lt;br/&gt;                  da_prod_order_item.ADD&lt;br/&gt;                     (process_rec                       =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_item_id             =&gt; l_bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd               =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                      product_order_id                  =&gt; p_cursor_row_io.ord_id,&lt;br/&gt;                      account_id                        =&gt; p_cursor_row_io.account_id,&lt;br/&gt;                      before_item_qty                   =&gt; p_cursor_row_io.bef_qty_roit,&lt;br/&gt;                      after_item_qty                    =&gt; p_cursor_row_io.billing_prod_inst_qty,&lt;br/&gt;                      item_action_cd                    =&gt; NULL,&lt;br/&gt;                      package_billing_product_id        =&gt; p_cursor_row_io.package_billing_product_id,&lt;br/&gt;                      package_billing_product_cd        =&gt; p_cursor_row_io.package_billing_product_cd,&lt;br/&gt;                      service_billing_product_id        =&gt; p_cursor_row_io.service_billing_product_id,&lt;br/&gt;                      service_billing_product_cd        =&gt; p_cursor_row_io.service_billing_product_cd,&lt;br/&gt;                      billed_amt                        =&gt; p_cursor_row_io.bill_amt_roit,&lt;br/&gt;                      bill_start_dttm                   =&gt; p_cursor_row_io.billing_start_dttm,&lt;br/&gt;                      account_impact_cd                 =&gt; p_cursor_row_io.acct_stage_roit,&lt;br/&gt;                      line_of_business_impact_cd        =&gt; p_cursor_row_io.lob_acct_stage_roit,&lt;br/&gt;                      impacted_line_of_business_cd      =&gt; p_cursor_row_io.lob_act_roit,&lt;br/&gt;                      audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;                  IF p_cursor_row_io.item_status_roit IS NOT NULL&lt;br/&gt;                  THEN&lt;br/&gt;                     -- prod_order_item_status&lt;br/&gt;                     da_prod_order_item_status.ADD&lt;br/&gt;                        (process_rec                       =&gt; p_process_rec_i,&lt;br/&gt;                         product_order_item_id             =&gt; l_bus_interact_item_id,&lt;br/&gt;                         data_source_type_cd               =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                         product_order_item_status_cd      =&gt; p_cursor_row_io.item_status_roit,&lt;br/&gt;                         audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSIF (p_cursor_row_io.request_type_cd =&lt;br/&gt;                                          pkg_utility.c_request_type_cd_splreq&lt;br/&gt;                     )&lt;br/&gt;               THEN&lt;br/&gt;                  -- special_request_item&lt;br/&gt;                  da_special_request_item.ADD&lt;br/&gt;                     (process_rec                       =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_item_id           =&gt; l_bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd               =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                      special_request_order_id          =&gt; p_cursor_row_io.ord_id,&lt;br/&gt;                      account_id                        =&gt; p_cursor_row_io.account_id,&lt;br/&gt;                      before_item_qty                   =&gt; p_cursor_row_io.bef_qty_roit,&lt;br/&gt;                      after_item_qty                    =&gt; p_cursor_row_io.billing_prod_inst_qty,&lt;br/&gt;                      item_action_cd                    =&gt; NULL,&lt;br/&gt;                      package_billing_product_id        =&gt; p_cursor_row_io.package_billing_product_id,&lt;br/&gt;                      package_billing_product_cd        =&gt; p_cursor_row_io.package_billing_product_cd,&lt;br/&gt;                      service_billing_product_id        =&gt; p_cursor_row_io.service_billing_product_id,&lt;br/&gt;                      service_billing_product_cd        =&gt; p_cursor_row_io.service_billing_product_cd,&lt;br/&gt;                      account_impact_cd                 =&gt; p_cursor_row_io.acct_stage_roit,&lt;br/&gt;                      line_of_business_impact_cd        =&gt; p_cursor_row_io.lob_acct_stage_roit,&lt;br/&gt;                      impacted_line_of_business_cd      =&gt; p_cursor_row_io.lob_act_roit,&lt;br/&gt;                      audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;                  IF p_cursor_row_io.item_status_roit IS NOT NULL&lt;br/&gt;                  THEN&lt;br/&gt;                     -- special_request_item_status&lt;br/&gt;                     da_special_request_item_status.ADD&lt;br/&gt;                        (process_rec                         =&gt; p_process_rec_i,&lt;br/&gt;                         special_request_item_id             =&gt; l_bus_interact_item_id,&lt;br/&gt;                         data_source_type_cd                 =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                         special_request_item_status_cd      =&gt; p_cursor_row_io.item_status_roit,&lt;br/&gt;                         audit_user                          =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                  END IF;&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               da_bus_interact_item_vnt_xref.ADD&lt;br/&gt;                  (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                   order_num                      =&gt; p_cursor_row_io.order_no_roit,&lt;br/&gt;                   serv_id                        =&gt; p_cursor_row_io.serv_id_roit,&lt;br/&gt;                   bus_interact_item_id           =&gt; l_bus_interact_item_id,&lt;br/&gt;                   bus_interact_item_type_cd      =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, order_no_roit = &apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no_roit&lt;br/&gt;                                    || &apos;, serv_id_roit = &apos;&lt;br/&gt;                                    || p_cursor_row_io.serv_id_roit&lt;br/&gt;                                    || &apos;, ord_id = &apos;&lt;br/&gt;                                    || p_cursor_row_io.ord_id&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END process_ord_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_work_ord_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name                t_unit_name       := &apos;PROCESS_WORK_ORD_ITEM&apos;;&lt;br/&gt;      l_account_id               NUMBER;&lt;br/&gt;      l_bus_interact_item        t_bus_interact_item%ROWTYPE;&lt;br/&gt;      l_bus_interact_item_id     t_bus_interact_item.bus_interact_item_id%TYPE;&lt;br/&gt;      exp_null_bus_interact_id   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, order_no_roit = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no_roit&lt;br/&gt;                             || &apos;, job_seq_no_roit=&apos;&lt;br/&gt;                             || p_cursor_row_io.job_seq_no_roit&lt;br/&gt;                             || &apos;, serv_id_roit = &apos;&lt;br/&gt;                             || p_cursor_row_io.serv_id_roit&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.job_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, ORDER_NO_ROIT = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no_roit&lt;br/&gt;                             || &apos;, JOB_SEQ_NO_ROIT = &apos;&lt;br/&gt;                             || p_cursor_row_io.job_seq_no_roit&lt;br/&gt;                             || &apos;, SERV_ID_ROIT = &apos;&lt;br/&gt;                             || p_cursor_row_io.serv_id_roit&lt;br/&gt;                             || &apos; JOB_ID NOT FOUND IN T_BUSN_INTRN_VNT_JOB_XREF&apos;&lt;br/&gt;                            );&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         RAISE exp_null_bus_interact_id;&lt;br/&gt;      ELSE&lt;br/&gt;         -- get the work order item&lt;br/&gt;         IF (get_bus_interact_item_vnt_xref&lt;br/&gt;                                          (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                           p_cursor_row_i       =&gt; p_cursor_row_io,&lt;br/&gt;                                           p_row_io             =&gt; l_bus_interact_item&lt;br/&gt;                                          )&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            -- update&lt;br/&gt;            update_work_order_item (p_process_rec_i,&lt;br/&gt;                                    p_cursor_row_io,&lt;br/&gt;                                    l_bus_interact_item,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;         ELSE&lt;br/&gt;            IF p_cursor_row_io.job_id IS NOT NULL&lt;br/&gt;            THEN&lt;br/&gt;               -- insert bus_interact_item&lt;br/&gt;               l_bus_interact_item_id :=&lt;br/&gt;                  da_bus_interact_item.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                      source_system_id               =&gt;    p_cursor_row_io.order_no_roit&lt;br/&gt;                                                        || p_cursor_row_io.serv_id_roit,&lt;br/&gt;                      bus_interact_id                =&gt; p_cursor_row_io.job_id,&lt;br/&gt;                      bus_interact_item_type_cd      =&gt; pkg_utility.c_request_type_cd_wrkord,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               -- work_order_item&lt;br/&gt;               da_work_order_item.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_item_id                =&gt; l_bus_interact_item_id,&lt;br/&gt;                   data_source_type_cd               =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   work_order_id                     =&gt; p_cursor_row_io.job_id,&lt;br/&gt;                   account_id                        =&gt; p_cursor_row_io.account_id,&lt;br/&gt;                   --Commented and modified as below as part of NRT-INnitial Load sync on 31-Mar-2015&lt;br/&gt;                   --create_dttm                        =&gt; NULL,&lt;br/&gt;                   create_dttm                       =&gt; p_cursor_row_io.create_dttm,&lt;br/&gt;                   --NULL,&lt;br/&gt;                   sequence_num                      =&gt; p_cursor_row_io.job_seq_no_roit,&lt;br/&gt;                   before_item_qty                   =&gt; p_cursor_row_io.bef_qty_roit,&lt;br/&gt;                   after_item_qty                    =&gt; p_cursor_row_io.billing_prod_inst_qty,&lt;br/&gt;                   item_action_cd                    =&gt; NULL,&lt;br/&gt;                   package_billing_product_id        =&gt; p_cursor_row_io.package_billing_product_id,&lt;br/&gt;                   package_billing_product_cd        =&gt; p_cursor_row_io.package_billing_product_cd,&lt;br/&gt;                   service_billing_product_id        =&gt; p_cursor_row_io.service_billing_product_id,&lt;br/&gt;                   service_billing_product_cd        =&gt; p_cursor_row_io.service_billing_product_cd,&lt;br/&gt;                   account_impact_cd                 =&gt; p_cursor_row_io.acct_stage_roit,&lt;br/&gt;                   line_of_business_impact_cd        =&gt; p_cursor_row_io.lob_acct_stage_roit,&lt;br/&gt;                   impacted_line_of_business_cd      =&gt; p_cursor_row_io.lob_act_roit,&lt;br/&gt;                   audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;&lt;br/&gt;               IF p_cursor_row_io.item_status_roit IS NOT NULL&lt;br/&gt;               THEN&lt;br/&gt;                  -- work_order_item_status&lt;br/&gt;                  da_work_order_item_status.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      work_order_item_id             =&gt; l_bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                      work_order_item_status_cd      =&gt; p_cursor_row_io.item_status_roit,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               da_bus_interact_item_vnt_xref.ADD&lt;br/&gt;                  (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                   order_num                      =&gt; p_cursor_row_io.order_no_roit,&lt;br/&gt;                   serv_id                        =&gt; p_cursor_row_io.serv_id_roit,&lt;br/&gt;                   bus_interact_item_id           =&gt; l_bus_interact_item_id,&lt;br/&gt;                   bus_interact_item_type_cd      =&gt; pkg_utility.c_request_type_cd_wrkord,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            ELSE&lt;br/&gt;               RAISE exp_null_bus_interact_id;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_null_bus_interact_id&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (p_process_rec_i,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, order_no_roit=&apos;&lt;br/&gt;             || p_cursor_row_io.order_no_roit&lt;br/&gt;             || &apos;, job_seq_no_roit=&apos;&lt;br/&gt;             || p_cursor_row_io.job_seq_no_roit&lt;br/&gt;             || &apos;, serv_id_roit=&apos;&lt;br/&gt;             || p_cursor_row_io.serv_id_roit&lt;br/&gt;             || &apos; ,exception=&apos;&lt;br/&gt;             || &apos; BUS_INTERACT_ID is missing in T_BUSN_INTRN_VNT_JOB_XREF Table&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, order_no_roit=&apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no_roit&lt;br/&gt;                                    || &apos;, job_seq_no_roit=&apos;&lt;br/&gt;                                    || p_cursor_row_io.job_seq_no_roit&lt;br/&gt;                                    || &apos;, serv_id_roit=&apos;&lt;br/&gt;                                    || p_cursor_row_io.serv_id_roit&lt;br/&gt;                                    || &apos; ,exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END process_work_ord_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_billing_prod_inst (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_row_i           IN   t_billing_prod_inst%ROWTYPE,&lt;br/&gt;      p_audit_user_i         VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_billing_prod_inst&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update billing product inst.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_BILLING_PROD_INST&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, billing_prod_inst_id = &apos;&lt;br/&gt;                             || p_row_i.billing_prod_inst_id&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      UPDATE t_billing_prod_inst a&lt;br/&gt;         SET a.billing_prod_inst_status_cd =&lt;br/&gt;                                           p_row_i.billing_prod_inst_status_cd,&lt;br/&gt;             a.blg_prod_inst_vld_st_dttm = p_row_i.blg_prod_inst_vld_st_dttm,&lt;br/&gt;             a.billing_start_dttm = p_row_i.billing_start_dttm,&lt;br/&gt;             a.billing_prod_inst_qty = p_row_i.billing_prod_inst_qty,&lt;br/&gt;             a.product_offering_id = p_row_i.product_offering_id,&lt;br/&gt;             a.billing_package_product_cd = p_row_i.billing_package_product_cd,&lt;br/&gt;             a.billing_package_product_id = p_row_i.billing_package_product_id,&lt;br/&gt;             a.origin_bus_interact_item_id =&lt;br/&gt;                                           p_row_i.origin_bus_interact_item_id,&lt;br/&gt;             -- soft delete if qty has dropped to 0&lt;br/&gt;             a.record_stat =&lt;br/&gt;                 DECODE (p_row_i.billing_prod_inst_qty,&lt;br/&gt;                         0, &apos;D&apos;,&lt;br/&gt;                         a.record_stat&lt;br/&gt;                        ),&lt;br/&gt;             a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;             a.modified_by = p_audit_user_i&lt;br/&gt;       WHERE a.billing_prod_inst_id = p_row_i.billing_prod_inst_id;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_billing_prod_inst;&lt;br/&gt;&lt;br/&gt;   FUNCTION account_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_sub_acct_num    IN   t_account_vantage_xref.sub_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FUNCTION account_exists&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return xref.account_id&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name    t_unit_name                          := &apos;ACCOUNT_EXISTS&apos;;&lt;br/&gt;      l_account_id   t_account_vantage_xref.account_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, sub_acct_num=&apos;&lt;br/&gt;                             || p_sub_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT xref.account_id&lt;br/&gt;        INTO l_account_id&lt;br/&gt;        FROM t_account_vantage_xref xref&lt;br/&gt;       WHERE xref.sub_acct_num = p_sub_acct_num;&lt;br/&gt;&lt;br/&gt;      --AND xref.record_stat = pkg_utility.c_record_active;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, account found in t_account_vantage_xref&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_account_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos; &apos;&lt;br/&gt;                              || pkg_utility.c_proc_end_text&lt;br/&gt;                              || &apos;, account NOT found in t_account_vantage_xref&apos;&lt;br/&gt;                             );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END account_exists;&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FUNCTION customer_exists&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return xref.party_id&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                          := &apos;CUSTOMER_EXISTS&apos;;&lt;br/&gt;      l_party_id    t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num;&lt;br/&gt;&lt;br/&gt;      --AND xref.record_stat = pkg_utility.c_record_active;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, customer found in t_party_vantage_xref&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_party_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos; &apos;&lt;br/&gt;                               || pkg_utility.c_proc_end_text&lt;br/&gt;                               || &apos;, customer NOT found in t_party_vantage_xref&apos;&lt;br/&gt;                              );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END customer_exists;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_billing_prod_inst (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_billing_prod_inst%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FUNCTION get_billing_prod_inst&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_billing_prod_inst&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BILLING_PROD_INST&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, billing_service_product_cd=&apos;&lt;br/&gt;                             || p_row_io.billing_service_product_cd&lt;br/&gt;                             || &apos;, source_system_id=&apos;&lt;br/&gt;                             || p_row_io.source_system_id&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT *&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_billing_prod_inst a&lt;br/&gt;       WHERE a.account_id = p_row_io.account_id&lt;br/&gt;         AND a.billing_service_product_cd =&lt;br/&gt;                                           p_row_io.billing_service_product_cd&lt;br/&gt;         AND a.source_system_id = p_row_io.source_system_id;&lt;br/&gt;&lt;br/&gt;      --AND a.record_stat = pkg_utility.c_record_active;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, billing_prod_inst found&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos;, billing_prod_inst NOT found&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_billing_prod_inst;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact_item_vnt_xref (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_i    IN              cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact_item%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FUNCTION get_bus_interact_item_xfer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_bus_inter_itm_vnt_ord_xref&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BUS_INTERACT_ITEM_VNT_XREF&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, order_no=&apos;&lt;br/&gt;                             || p_cursor_row_i.order_no_roit&lt;br/&gt;                             || &apos;, p_serv_id=&apos;&lt;br/&gt;                             || p_cursor_row_i.serv_id_roit&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT a.*&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_bus_interact_item_vnt_xref xref INNER JOIN t_bus_interact_item a&lt;br/&gt;             ON a.bus_interact_item_id = xref.bus_interact_item_id&lt;br/&gt;       WHERE xref.order_num = p_cursor_row_i.order_no_roit&lt;br/&gt;         AND xref.serv_id = p_cursor_row_i.serv_id_roit;&lt;br/&gt;&lt;br/&gt;      --AND a.bus_interact_item_type_cd IN (&apos;PRORD&apos;, &apos;SPREQ&apos;)&lt;br/&gt;      --AND a.record_stat = pkg_utility.c_record_active;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, bus_inter_item_order found&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, bus_inter_item_order NOT found&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_bus_interact_item_vnt_xref;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_work_order_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_i    IN              cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact_item%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FUNCTION get_work_order_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_bus_interact_item&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_WORK_ORDER_ITEM&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_i.order_no_roit&lt;br/&gt;                             || &apos;, SERV_ID = &apos;&lt;br/&gt;                             || p_cursor_row_i.serv_id_roit&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT bii.*&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_bus_interact_item bii&lt;br/&gt;       WHERE bii.bus_interact_id = p_cursor_row_i.job_id&lt;br/&gt;         AND bii.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;         -- AND bii.bus_interact_item_type_cd = &apos;WO&apos; --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;         --AND bii.bus_interact_item_type_cd = pkg_utility.c_bus_interact_type_cd_req  --Modified on 20FEB2015 by Cognizant&lt;br/&gt;         AND bii.bus_interact_item_type_cd =&lt;br/&gt;                                          pkg_utility.c_request_type_cd_wrkord&lt;br/&gt;         AND bii.source_system_id =&lt;br/&gt;                   p_cursor_row_i.order_no_roit || p_cursor_row_i.serv_id_roit;&lt;br/&gt;&lt;br/&gt;      --AND bii.record_stat = pkg_utility.c_record_active;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; , ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_i.order_no_roit&lt;br/&gt;                             || &apos;, SERV_ID = &apos;&lt;br/&gt;                             || p_cursor_row_i.serv_id_roit&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, WORK_ORDER_ITEM FOUND&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; , ORDER_NO = &apos;&lt;br/&gt;                                || p_cursor_row_i.order_no_roit&lt;br/&gt;                                || &apos;, SERV_ID = &apos;&lt;br/&gt;                                || p_cursor_row_i.serv_id_roit&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, WORK_ORDER_ITEM NOT FOUND&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_work_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_bi_item_i       IN              t_bus_interact_item%ROWTYPE,&lt;br/&gt;      p_audit_user_i                    VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_prod_order_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update the t_prod_order_item table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_PROD_ORDER_ITEM&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, BUS_INTERACT_ITEM_ID = &apos;&lt;br/&gt;                             || p_bi_item_i.bus_interact_item_id&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      UPDATE t_prod_order_item a&lt;br/&gt;         SET a.before_item_qty = p_cursor_row_io.bef_qty_roit,&lt;br/&gt;             a.after_item_qty = p_cursor_row_io.billing_prod_inst_qty,&lt;br/&gt;             a.billed_amt = p_cursor_row_io.bill_amt_roit,&lt;br/&gt;             a.bill_start_dttm = p_cursor_row_io.billing_start_dttm,&lt;br/&gt;             a.account_impact_cd = p_cursor_row_io.acct_stage_roit,&lt;br/&gt;             a.line_of_business_impact_cd =&lt;br/&gt;                                           p_cursor_row_io.lob_acct_stage_roit,&lt;br/&gt;             a.impacted_line_of_business_cd = p_cursor_row_io.lob_act_roit,&lt;br/&gt;             a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;             a.modified_by = p_audit_user_i&lt;br/&gt;       WHERE a.product_order_item_id = p_bi_item_i.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;      UPDATE t_prod_order_item_status&lt;br/&gt;         SET product_order_item_status_cd = p_cursor_row_io.item_status_roit&lt;br/&gt;       WHERE product_order_item_id = p_bi_item_i.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_prod_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_special_request_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_bi_item_i       IN              t_bus_interact_item%ROWTYPE,&lt;br/&gt;      p_audit_user_i                    VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_special_request_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update the t_special_request_item table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_SPECIAL_REQUEST_ITEM&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, BUS_INTERACT_ITEM_ID = &apos;&lt;br/&gt;                             || p_bi_item_i.bus_interact_item_id&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      UPDATE t_special_request_item a&lt;br/&gt;         SET a.before_item_qty = p_cursor_row_io.bef_qty_roit,&lt;br/&gt;             a.after_item_qty = p_cursor_row_io.billing_prod_inst_qty,&lt;br/&gt;             a.account_impact_cd = p_cursor_row_io.acct_stage_roit,&lt;br/&gt;             a.line_of_business_impact_cd =&lt;br/&gt;                                           p_cursor_row_io.lob_acct_stage_roit,&lt;br/&gt;             a.impacted_line_of_business_cd = p_cursor_row_io.lob_act_roit,&lt;br/&gt;             a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;             a.modified_by = p_audit_user_i&lt;br/&gt;       WHERE a.special_request_item_id = p_bi_item_i.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;      UPDATE t_special_request_item_status&lt;br/&gt;         SET special_request_item_status_cd = p_cursor_row_io.item_status_roit&lt;br/&gt;       WHERE special_request_item_id = p_bi_item_i.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_special_request_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_item (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE,&lt;br/&gt;      p_bi_item_i       IN              t_bus_interact_item%ROWTYPE,&lt;br/&gt;      p_audit_user_i                    VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_work_order_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update the t_work_order_item table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_WORK_ORDER_ITEM&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, BUS_INTERACT_ITEM_ID = &apos;&lt;br/&gt;                             || p_bi_item_i.bus_interact_item_id&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      UPDATE t_work_order_item&lt;br/&gt;         SET before_item_qty = p_cursor_row_io.bef_qty_roit,&lt;br/&gt;             after_item_qty = p_cursor_row_io.billing_prod_inst_qty,&lt;br/&gt;             account_impact_cd = p_cursor_row_io.acct_stage_roit,&lt;br/&gt;             create_dttm = p_cursor_row_io.create_dttm,&lt;br/&gt;             line_of_business_impact_cd = p_cursor_row_io.lob_acct_stage_roit,&lt;br/&gt;             impacted_line_of_business_cd = p_cursor_row_io.lob_act_roit,&lt;br/&gt;             work_order_id = p_cursor_row_io.job_id,&lt;br/&gt;             account_id = p_cursor_row_io.account_id,&lt;br/&gt;             sequence_num = p_cursor_row_io.job_seq_no_roit,&lt;br/&gt;             package_billing_product_id =&lt;br/&gt;                                    p_cursor_row_io.package_billing_product_id,&lt;br/&gt;             package_billing_product_cd =&lt;br/&gt;                                    p_cursor_row_io.package_billing_product_cd,&lt;br/&gt;             service_billing_product_id =&lt;br/&gt;                                    p_cursor_row_io.service_billing_product_id,&lt;br/&gt;             service_billing_product_cd =&lt;br/&gt;                                    p_cursor_row_io.service_billing_product_cd,&lt;br/&gt;             modified_dttm = SYSTIMESTAMP,&lt;br/&gt;             modified_by = p_audit_user_i&lt;br/&gt;       WHERE work_order_item_id = p_bi_item_i.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;      UPDATE t_work_order_item_status&lt;br/&gt;         SET work_order_item_status_cd = p_cursor_row_io.item_status_roit&lt;br/&gt;       WHERE work_order_item_id = p_bi_item_i.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, BUS_INTERACT_ITEM_ID = &apos;&lt;br/&gt;                             || p_bi_item_i.bus_interact_item_id&lt;br/&gt;                            );&lt;br/&gt;   END update_work_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oit_items%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update the staging table.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_rrt_oit_items s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_row_io.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_row_io.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ORDER_NO_ROIT = &apos;&lt;br/&gt;                                       || p_cursor_row_io.order_no_roit&lt;br/&gt;                                       || &apos;, SERV_ID_ROIT = &apos;&lt;br/&gt;                                       || p_cursor_row_io.serv_id_roit&lt;br/&gt;                                       || &apos;, ORD_ID = &apos;&lt;br/&gt;                                       || p_cursor_row_io.ord_id&lt;br/&gt;                                       || &apos;, ROWID  = &apos;&lt;br/&gt;                                       || p_cursor_row_io.ID&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_process_rrt_oit_items;</source>
</body>
</PackageOracle>
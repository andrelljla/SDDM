<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_SCN_CONTACT" directorySegmentName="seg_6" id="272136BA-7EC8-3AFB-B0FA-39B7AFF80FE6">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_SCN_CONTACT</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:20:18 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_SCN_CONTACT&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name       : PKG_VNT_RECON_SCN_CONTACT&lt;br/&gt;   ||  Created By           : Karthik&lt;br/&gt;   ||  Created Date       : 12-Dec-2014&lt;br/&gt;   ||  Subject Area       : House&lt;br/&gt;   ||  Description         :This is for loading Service Address and House Base details for the Reconciliation process&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_delta (p_audit_user_i IN VARCHAR2);&lt;br/&gt;END pkg_vnt_recon_scn_contact;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_SCN_CONTACT" id="272136BA-7EC8-3AFB-B0FA-39B7AFF80FE6">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_SCN_CONTACT</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:20:22 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_SCN_CONTACT&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name       : PKG_VNT_RECON_SCN_CONTACT&lt;br/&gt;   ||  Created By         : Cognizant&lt;br/&gt;   ||  Created Date       : 12-JUNE-2015&lt;br/&gt;   ||  Subject Area       : House&lt;br/&gt;   ||  Description         :This is for loading Billing Address details from SCN CONTACT for the Reconciliation process&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||   Karthik          12-JUNE-2015     Handing duplicate data in insert_account_address procedure&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name    := &apos;PKG_VNT_RECON_SCN_CONTACT&apos;;&lt;br/&gt;   c_bulk_errors                EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   g_max_thread                 NUMBER                                   := 1;&lt;br/&gt;   g_reminder_thread            NUMBER                                   := 1;&lt;br/&gt;   g_batchsize                  NUMBER                                := 5000;&lt;br/&gt;   g_process_record_cnt         NUMBER                                   := 0;&lt;br/&gt;   g_error_record_cnt           NUMBER                                   := 0;&lt;br/&gt;   l_current_recon_start_time   stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;&lt;br/&gt;   -- Staged stg_vnt_contact for loading&lt;br/&gt;   CURSOR cur_stg_scn_contact&lt;br/&gt;   IS&lt;br/&gt;      SELECT SCN.ROWID AS ID, SCN.record_load_cd, xref.account_id account_id,&lt;br/&gt;             aa.address_id blg_add_id, ab.address_id srvc_add_id,&lt;br/&gt;             sub_acct_no_scn account_num,&lt;br/&gt;             UPPER (TRIM (bt_addr1_scn)) address_line_1_txt,&lt;br/&gt;             UPPER (TRIM (bt_addr2_scn)) address_line_2_txt,&lt;br/&gt;             UPPER (TRIM (bt_city_scn)) city_nm,&lt;br/&gt;             UPPER (TRIM (bt_state_scn)) territory_cd,&lt;br/&gt;             UPPER (TRIM (bt_postal_cde_scn)) postal_code_txt,&lt;br/&gt;             UPPER (TRIM (bt_country_scn)) country_cd,&lt;br/&gt;             NVL&lt;br/&gt;                (TRIM (bt_addr_inheritance_flg_scn),&lt;br/&gt;                 &apos;N&apos;&lt;br/&gt;                ) bt_addr_inheritance_flg_scn,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN sys_scn = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END data_source_type_cd&lt;br/&gt;        FROM stg.vnt_scn_contact_rec_delta SCN INNER JOIN chtr.t_account_vantage_xref xref&lt;br/&gt;             ON SCN.sub_acct_no_scn = xref.sub_acct_num&lt;br/&gt;             INNER JOIN chtr.t_account_address ab&lt;br/&gt;             ON xref.account_id = ab.account_id&lt;br/&gt;           AND ab.address_usage_type_cd = &apos;SRVC&apos;&lt;br/&gt;           AND ab.record_stat = &apos;A&apos;&lt;br/&gt;             LEFT OUTER JOIN chtr.t_account_address aa&lt;br/&gt;             ON xref.account_id = aa.account_id&lt;br/&gt;           AND aa.address_usage_type_cd = &apos;BLG&apos;&lt;br/&gt;           AND aa.record_stat = &apos;A&apos;&lt;br/&gt;       WHERE SCN.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (SCN.ROWID, LENGTH (SCN.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_scn_contact%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE create_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE soft_delete (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_scn_contact (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_delta (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure create_delta&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Create the scn_contact delta.&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name                    := &apos;CREATE_DELTA&apos;;&lt;br/&gt;      l_process_rec   chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_curr_cnt      NUMBER;&lt;br/&gt;      l_prev_cnt      NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      chtr.pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                      &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;      SELECT COUNT (1)&lt;br/&gt;        INTO l_curr_cnt&lt;br/&gt;        FROM stg.vnt_scn_contact;&lt;br/&gt;&lt;br/&gt;      SELECT COUNT (1)&lt;br/&gt;        INTO l_prev_cnt&lt;br/&gt;        FROM stg.vnt_scn_contact_rec_prev;&lt;br/&gt;&lt;br/&gt;      IF (l_curr_cnt = 0 OR l_prev_cnt = 0)&lt;br/&gt;      THEN&lt;br/&gt;         raise_application_error&lt;br/&gt;                          (-20001,&lt;br/&gt;                           &apos;Unable to create delta, prev or curr count is 0!&apos;&lt;br/&gt;                          );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      -- create the new delta rows&lt;br/&gt;      INSERT INTO stg.vnt_scn_contact_rec_delta&lt;br/&gt;                  (sys_scn, prin_scn, agnt_scn, bt_addr1_scn, bt_addr2_scn,&lt;br/&gt;                   bt_addr_inheritance_flg_scn, bt_city_scn, bt_country_scn,&lt;br/&gt;                   bt_state_scn, sub_acct_no_scn, bt_postal_cde_scn)&lt;br/&gt;         (SELECT sys_scn, prin_scn, agnt_scn, bt_addr1_scn, bt_addr2_scn,&lt;br/&gt;                 bt_addr_inheritance_flg_scn, bt_city_scn, bt_country_scn,&lt;br/&gt;                 bt_state_scn, sub_acct_no_scn, bt_postal_cde_scn&lt;br/&gt;            FROM (SELECT sys_scn, prin_scn, agnt_scn, bt_addr1_scn,&lt;br/&gt;                         bt_addr2_scn, bt_addr_inheritance_flg_scn,&lt;br/&gt;                         bt_city_scn, bt_country_scn, bt_state_scn,&lt;br/&gt;                         sub_acct_no_scn, bt_postal_cde_scn&lt;br/&gt;                    FROM stg.vnt_scn_contact curr&lt;br/&gt;                  MINUS&lt;br/&gt;                  SELECT sys_scn, prin_scn, agnt_scn, bt_addr1_scn,&lt;br/&gt;                         bt_addr2_scn, bt_addr_inheritance_flg_scn,&lt;br/&gt;                         bt_city_scn, bt_country_scn, bt_state_scn,&lt;br/&gt;                         sub_acct_no_scn, bt_postal_cde_scn&lt;br/&gt;                    FROM stg.vnt_scn_contact_rec_prev prev) delta&lt;br/&gt;           WHERE NOT EXISTS (SELECT 1&lt;br/&gt;                               FROM stg.vnt_scn_contact_rec_delta d1&lt;br/&gt;                              WHERE d1.sub_acct_no_scn = delta.sub_acct_no_scn));&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      chtr.pkg_logging.end_process (l_process_rec,&lt;br/&gt;                                    pkg_utility.c_process_success&lt;br/&gt;                                   );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         chtr.pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos;, exception=&apos;&lt;br/&gt;                                         || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                        );&lt;br/&gt;         chtr.pkg_logging.end_process (l_process_rec,&lt;br/&gt;                                       pkg_utility.c_process_error&lt;br/&gt;                                      );&lt;br/&gt;         RAISE;&lt;br/&gt;   END create_delta;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Billing Address details from VNT_SCN CONTACT for the Reconciliation process&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name                     := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data                 t_cursor_data_tbl;&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;            NULL;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      load_scn_contact (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                        p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                       );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_scn_contact (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;       /****************************************************************************************************************&lt;br/&gt;       ||  SubProgram Name    : LOAD_SCN_CONTACT&lt;br/&gt;       ||  Estimated Run Time :&lt;br/&gt;       ||  Description        : This is for loading Billing Address details from VNT_SCN CONTACT for the Reconciliation process&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;LOAD_SCN_CONTACT&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data   t_cursor_data_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_scn_contact%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_scn_contact;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_scn_contact;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_scn_contact&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               IF     l_cursor_data (i).srvc_add_id IS NULL&lt;br/&gt;                  AND l_cursor_data (i).bt_addr_inheritance_flg_scn = &apos;Y&apos;&lt;br/&gt;               THEN&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                                 (p_process_rec_i,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, Exception= &apos;&lt;br/&gt;                                  || &apos;Account not set up for the Service Yet&apos;&lt;br/&gt;                                  || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                  || l_cursor_data (i).account_num&lt;br/&gt;                                  || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                  || l_cursor_data (i).account_id&lt;br/&gt;                                  || &apos; ,ADDRESS_ID = &apos;&lt;br/&gt;                                  || l_cursor_data (i).blg_add_id&lt;br/&gt;                                  || &apos;, exception = &apos;&lt;br/&gt;                                  || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                 );&lt;br/&gt;                  l_cursor_data (i).record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               ELSIF (    l_cursor_data (i).bt_addr_inheritance_flg_scn = &apos;N&apos;&lt;br/&gt;                      AND (   l_cursor_data (i).blg_add_id =&lt;br/&gt;                                                 l_cursor_data (i).srvc_add_id&lt;br/&gt;                           OR l_cursor_data (i).blg_add_id IS NULL&lt;br/&gt;                          )&lt;br/&gt;                     )&lt;br/&gt;               THEN&lt;br/&gt;                  create_address (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               ELSIF (    l_cursor_data (i).blg_add_id &lt;&gt;&lt;br/&gt;                                                 l_cursor_data (i).srvc_add_id&lt;br/&gt;                      AND l_cursor_data (i).bt_addr_inheritance_flg_scn = &apos;Y&apos;&lt;br/&gt;                     )&lt;br/&gt;               THEN&lt;br/&gt;                  soft_delete (l_process_rec,&lt;br/&gt;                               l_cursor_data (i),&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;                  --Set Service address id as billing address id;&lt;br/&gt;                  l_cursor_data (i).blg_add_id :=&lt;br/&gt;                                                 l_cursor_data (i).srvc_add_id;&lt;br/&gt;               ELSIF (    l_cursor_data (i).blg_add_id IS NULL&lt;br/&gt;                      AND l_cursor_data (i).bt_addr_inheritance_flg_scn = &apos;Y&apos;&lt;br/&gt;                     )&lt;br/&gt;               THEN&lt;br/&gt;                  --Set Service address id as billing address id;&lt;br/&gt;                  l_cursor_data (i).blg_add_id :=&lt;br/&gt;                                                l_cursor_data (i).srvc_add_id;&lt;br/&gt;               ELSIF (    l_cursor_data (i).blg_add_id &lt;&gt;&lt;br/&gt;                                                 l_cursor_data (i).srvc_add_id&lt;br/&gt;                      AND l_cursor_data (i).bt_addr_inheritance_flg_scn = &apos;N&apos;&lt;br/&gt;                     )&lt;br/&gt;               THEN&lt;br/&gt;                  update_address (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               ELSE&lt;br/&gt;                  pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos;, &apos;&lt;br/&gt;                                         || &apos;, Do nothing - ACCOUNT_NUM = &apos;&lt;br/&gt;                                         || l_cursor_data (i).account_num&lt;br/&gt;                                         || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                         || l_cursor_data (i).account_id&lt;br/&gt;                                         || &apos; , ADDRESS_ID = &apos;&lt;br/&gt;                                         || l_cursor_data (i).blg_add_id&lt;br/&gt;                                        );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF NVL (l_cursor_data (i).record_load_cd,&lt;br/&gt;                       pkg_utility.c_stg_processed&lt;br/&gt;                      ) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;               THEN&lt;br/&gt;                  --insert_account_address&lt;br/&gt;                  insert_account_address (l_process_rec,&lt;br/&gt;                                          l_cursor_data (i),&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               -- Update the staging rows with status&lt;br/&gt;               update_staging (l_process_rec,&lt;br/&gt;                               l_cursor_data (i),&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_scn_contact;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_scn_contact%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_scn_contact;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         --l_cursor_data (i).record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END load_scn_contact;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : create_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Billing Address details from VNT_SCN CONTACT for the Reconciliation process&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;CREATE_ADDRESS&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data   t_cursor_data_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;      THEN&lt;br/&gt;         -- Insert locator&lt;br/&gt;         p_cursor_data_io.blg_add_id :=&lt;br/&gt;            da_locator.ADD (process_rec             =&gt; p_process_rec_i,&lt;br/&gt;                            locator_subtype_cd      =&gt; &apos;SSTRT&apos;,&lt;br/&gt;                            audit_user              =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;         -- Insert address&lt;br/&gt;         da_address.ADD&lt;br/&gt;                 (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                  address_id                    =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                  address_subtype_cd            =&gt; &apos;STRT&apos;,&lt;br/&gt;                  source_system_address_id      =&gt; NULL,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         -- Insert source_street_address&lt;br/&gt;         da_source_street_address.ADD&lt;br/&gt;                   (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                    source_street_address_id      =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                    address_line_1_txt            =&gt; p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                    address_line_2_txt            =&gt; p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                    address_line_3_txt            =&gt; NULL,&lt;br/&gt;                    city_nm                       =&gt; p_cursor_data_io.city_nm,&lt;br/&gt;                    territory_cd                  =&gt; p_cursor_data_io.territory_cd,&lt;br/&gt;                    country_cd                    =&gt; p_cursor_data_io.country_cd,&lt;br/&gt;                    postal_code_txt               =&gt; p_cursor_data_io.postal_code_txt,&lt;br/&gt;                    carrier_route_txt             =&gt; NULL,&lt;br/&gt;                    clean_street_address_id       =&gt; NULL,&lt;br/&gt;                    clean_po_box_id               =&gt; NULL,&lt;br/&gt;                    audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                   );&lt;br/&gt;         -- Insert street_address&lt;br/&gt;         da_street_address.ADD&lt;br/&gt;                 (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                  street_address_id         =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                  address_line_1_txt        =&gt; p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                  address_line_2_txt        =&gt; p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                  address_line_3_txt        =&gt; NULL,&lt;br/&gt;                  dwelling_type_cd          =&gt; NULL,&lt;br/&gt;                  carrier_route_txt         =&gt; NULL,&lt;br/&gt;                  city_id                   =&gt; NULL,&lt;br/&gt;                  territory_id              =&gt; NULL,&lt;br/&gt;                  country_id                =&gt; NULL,&lt;br/&gt;                  postal_code_id            =&gt; NULL,&lt;br/&gt;                  full_postal_code_txt      =&gt; p_cursor_data_io.postal_code_txt,&lt;br/&gt;                  valid_address_ind         =&gt; 0,&lt;br/&gt;                  serviceability_cd         =&gt; NULL,&lt;br/&gt;                  data_source_type_cd       =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                  source_id_text            =&gt; NULL,&lt;br/&gt;                  source_fta_id             =&gt; NULL,&lt;br/&gt;                  rate_center_id            =&gt; NULL,&lt;br/&gt;                  city_nm                   =&gt; p_cursor_data_io.city_nm,&lt;br/&gt;                  territory_cd              =&gt; p_cursor_data_io.territory_cd,&lt;br/&gt;                  country_cd                =&gt; p_cursor_data_io.country_cd,&lt;br/&gt;                  audit_user                =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_num&lt;br/&gt;                              || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_id&lt;br/&gt;                              || &apos; ,ADDRESS_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.blg_add_id&lt;br/&gt;                              || &apos; ,BT_ADDR_INHERITANCE_FLG_SCN = &apos;&lt;br/&gt;                              || p_cursor_data_io.bt_addr_inheritance_flg_scn&lt;br/&gt;                              || &apos;, exception = &apos;&lt;br/&gt;                              || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                             );&lt;br/&gt;         p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;   END create_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_ACCOUNT_ADDRESS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the target table&lt;br/&gt;      ||                       &apos;T_ACCOUNT_ADDRESS&apos;  as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                := &apos;INSERT_ACCOUNT_ADDRESS&apos;;&lt;br/&gt;      l_exist_count    NUMBER;&lt;br/&gt;      l_exist_count1   NUMBER;&lt;br/&gt;      l_aa_row         t_account_address%ROWTYPE;&lt;br/&gt;      l_audit_recon    stg.audit_recon_process%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (   NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) = pkg_utility.c_stg_error&lt;br/&gt;          OR p_cursor_data_io.blg_add_id IS NULL&lt;br/&gt;          OR p_cursor_data_io.account_id IS NULL&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;             (p_process_rec_i,&lt;br/&gt;                 l_proc_name&lt;br/&gt;              || &apos;, Account id or billing address id is null. ACCOUNT_NUM = &apos;&lt;br/&gt;              || p_cursor_data_io.account_num&lt;br/&gt;              || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;              || p_cursor_data_io.account_id&lt;br/&gt;              || &apos; ,ADDRESS_ID = &apos;&lt;br/&gt;              || p_cursor_data_io.blg_add_id&lt;br/&gt;              || &apos; ,BT_ADDR_INHERITANCE_FLG_SCN = &apos;&lt;br/&gt;              || p_cursor_data_io.bt_addr_inheritance_flg_scn&lt;br/&gt;              || &apos;, exception = &apos;&lt;br/&gt;             );&lt;br/&gt;      ELSE&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_start_text&lt;br/&gt;                                || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_num&lt;br/&gt;                                || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_id&lt;br/&gt;                                || &apos; , ADDRESS_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.blg_add_id&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         -- Check if the account has same billing address&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_aa_row&lt;br/&gt;              FROM t_account_address&lt;br/&gt;             WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;               AND address_usage_type_cd = &apos;BLG&apos;&lt;br/&gt;               AND address_id = p_cursor_data_io.blg_add_id;&lt;br/&gt;&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               l_exist_count := 0;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         IF l_exist_count = 1&lt;br/&gt;         THEN&lt;br/&gt;            --Activate the address back if inactive&lt;br/&gt;            IF (l_aa_row.record_stat &lt;&gt; pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               l_audit_recon.operation_perf :=&lt;br/&gt;                                           pkg_utility.c_recon_update_perform;&lt;br/&gt;               l_audit_recon.modif_values := &apos;(RECORD_STAT: D =&gt; A)&apos;;&lt;br/&gt;&lt;br/&gt;               UPDATE t_account_address&lt;br/&gt;                  SET record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND address_id = p_cursor_data_io.blg_add_id&lt;br/&gt;                  AND address_usage_type_cd = &apos;BLG&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            --Get current active Billing address&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT *&lt;br/&gt;                 INTO l_aa_row&lt;br/&gt;                 FROM t_account_address&lt;br/&gt;                WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND address_usage_type_cd = &apos;BLG&apos;&lt;br/&gt;                  AND record_stat = pkg_utility.c_record_active&lt;br/&gt;                  AND ROWNUM &lt; 2;&lt;br/&gt;&lt;br/&gt;               -- Used rownum in case more than one active billing address found&lt;br/&gt;               l_exist_count1 := 1;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  --No active billing address&lt;br/&gt;                  l_exist_count1 := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF l_exist_count1 = 1&lt;br/&gt;            THEN&lt;br/&gt;               --Update current active address id with new billing address id&lt;br/&gt;               UPDATE t_account_address&lt;br/&gt;                  SET address_id = p_cursor_data_io.blg_add_id,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND address_usage_type_cd = &apos;BLG&apos;&lt;br/&gt;                  AND address_id = l_aa_row.address_id;&lt;br/&gt;&lt;br/&gt;               l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;               l_audit_recon.modif_values :=&lt;br/&gt;                     &apos;(ADDRESS_ID:&apos;&lt;br/&gt;                  || l_aa_row.address_id&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.blg_add_id&lt;br/&gt;                  || &apos;),(RECORD_STAT:&apos;&lt;br/&gt;                  || l_aa_row.record_stat&lt;br/&gt;                  || &apos; =&gt; A)&apos;;&lt;br/&gt;            ELSE&lt;br/&gt;               --Update inactive row with new billing address id if any&lt;br/&gt;               -- Used rownum to Randomly update one row in case more than one inactive&lt;br/&gt;               UPDATE t_account_address&lt;br/&gt;                  SET address_id = p_cursor_data_io.blg_add_id,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND address_usage_type_cd = &apos;BLG&apos;&lt;br/&gt;                  AND ROWNUM &lt; 2;&lt;br/&gt;&lt;br/&gt;               IF SQL%ROWCOUNT = 0&lt;br/&gt;               THEN&lt;br/&gt;                  --No billing address found&lt;br/&gt;                  l_audit_recon.operation_perf :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_account_address.ADD&lt;br/&gt;                     (process_rec                =&gt; p_process_rec_i,&lt;br/&gt;                      account_id                 =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                      address_id                 =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                      address_usage_type_cd      =&gt; &apos;BLG&apos;,&lt;br/&gt;                      data_source_type_cd        =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               ELSE&lt;br/&gt;                  l_audit_recon.operation_perf :=&lt;br/&gt;                                           pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_audit_recon.modif_values :=&lt;br/&gt;                        &apos;(ADDRESS_ID:&apos;&lt;br/&gt;                     || &apos; ? =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.blg_add_id&lt;br/&gt;                     || &apos;),(RECORD_STAT: D =&gt; A)&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         -- Inactivate if any other Billing Address Id is active&lt;br/&gt;         UPDATE t_account_address&lt;br/&gt;            SET record_stat = pkg_utility.c_record_delete,&lt;br/&gt;                modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                modified_by = p_audit_user_i&lt;br/&gt;          WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;            AND address_id &lt;&gt; p_cursor_data_io.blg_add_id&lt;br/&gt;            AND address_usage_type_cd = &apos;BLG&apos;&lt;br/&gt;            AND record_stat = pkg_utility.c_record_active;&lt;br/&gt;&lt;br/&gt;         IF l_audit_recon.operation_perf IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_audit_recon.table_key :=&lt;br/&gt;                  &apos;ACCOUNT_ID = &apos;&lt;br/&gt;               || p_cursor_data_io.account_id&lt;br/&gt;               || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;               || p_cursor_data_io.blg_add_id&lt;br/&gt;               || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;               || &apos;BLG&apos;;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_ACCOUNT_ADDRESS&apos;,&lt;br/&gt;                             p_table_key            =&gt; l_audit_recon.table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_num&lt;br/&gt;                                || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_id&lt;br/&gt;                                || &apos; , ADDRESS_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.blg_add_id&lt;br/&gt;                               );&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_num&lt;br/&gt;                              || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_id&lt;br/&gt;                              || &apos; ,ADDRESS_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.blg_add_id&lt;br/&gt;                              || &apos; ,BT_ADDR_INHERITANCE_FLG_SCN = &apos;&lt;br/&gt;                              || p_cursor_data_io.bt_addr_inheritance_flg_scn&lt;br/&gt;                              || &apos;, exception = &apos;&lt;br/&gt;                              || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                             );&lt;br/&gt;   END insert_account_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE soft_delete (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : SOFT_DELETE&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Service Address details specifically into the target table &apos;t_locator&apos;&lt;br/&gt;      ||                       via Bilk Load Mechanism.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name           := &apos;SOFT_DELETE&apos;;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_exist                          NUMBER;&lt;br/&gt;      l_audit_recon                    stg.audit_recon_process%ROWTYPE;&lt;br/&gt;      l_locator_id                     t_locator.locator_id%TYPE;&lt;br/&gt;      exp_invalid_service_addr_entry   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                      pkg_utility.c_stg_error&lt;br/&gt;      THEN&lt;br/&gt;         l_exist := 1;&lt;br/&gt;         l_audit_recon.table_key := NULL;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_start_text&lt;br/&gt;                                || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.blg_add_id&lt;br/&gt;                               );&lt;br/&gt;         da_locator.del (process_rec      =&gt; p_process_rec_i,&lt;br/&gt;                         locator_id       =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                         audit_user       =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;         da_address.del (process_rec      =&gt; p_process_rec_i,&lt;br/&gt;                         address_id       =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                         audit_user       =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;         da_source_street_address.del&lt;br/&gt;                     (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                      source_street_address_id      =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                      audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;         da_street_address.del&lt;br/&gt;                            (process_rec            =&gt; p_process_rec_i,&lt;br/&gt;                             street_address_id      =&gt; p_cursor_data_io.blg_add_id,&lt;br/&gt;                             audit_user             =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;         l_audit_recon.operation_perf := pkg_utility.c_recon_update_perform;&lt;br/&gt;         l_audit_recon.modif_values :=&lt;br/&gt;                                   &apos;RECORD_STAT : (&apos; || &apos;A&apos; || &apos; =&gt; D&apos; || &apos; )&apos;;&lt;br/&gt;         l_audit_recon.table_key :=&lt;br/&gt;                         &apos;STREET_ADDRESS_ID = &apos; || p_cursor_data_io.blg_add_id;&lt;br/&gt;         pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_STREET_ADDRESS&apos;,&lt;br/&gt;                             p_table_key            =&gt; l_audit_recon.table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;         l_audit_recon.operation_perf := pkg_utility.c_recon_update_perform;&lt;br/&gt;         l_audit_recon.modif_values :=&lt;br/&gt;                                   &apos;RECORD_STAT : (&apos; || &apos;A&apos; || &apos; =&gt; D&apos; || &apos; )&apos;;&lt;br/&gt;         l_audit_recon.table_key :=&lt;br/&gt;                        &apos;ACCOUNT_ADDRESS_ID = &apos; || p_cursor_data_io.blg_add_id;&lt;br/&gt;         pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_ACCOUNT_ADDRESS&apos;,&lt;br/&gt;                             p_table_key            =&gt; l_audit_recon.table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;         COMMIT;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_num&lt;br/&gt;                              || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_id&lt;br/&gt;                              || &apos; ,ADDRESS_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.blg_add_id&lt;br/&gt;                              || &apos; ,BT_ADDR_INHERITANCE_FLG_SCN = &apos;&lt;br/&gt;                              || p_cursor_data_io.bt_addr_inheritance_flg_scn&lt;br/&gt;                              || &apos;, exception = &apos;&lt;br/&gt;                              || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                             );&lt;br/&gt;   END soft_delete;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : UPDATE_ADDRESS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Billing Address details from VNT_SCN CONTACT for the Reconciliation process&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name        := &apos;UPDATE_ADDRESS&apos;;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_exist                          NUMBER;&lt;br/&gt;      l_billing_address_id             t_address.address_id%TYPE;&lt;br/&gt;      l_locator_id                     t_locator.locator_id%TYPE;&lt;br/&gt;      l_ssa_row                        t_source_street_address%ROWTYPE;&lt;br/&gt;      l_sta_row                        t_street_address%ROWTYPE;&lt;br/&gt;      exp_invalid_service_addr_entry   EXCEPTION;&lt;br/&gt;      l_audit_recon                    stg.audit_recon_process%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                      pkg_utility.c_stg_error&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist := 1;&lt;br/&gt;            l_audit_recon.table_key := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.blg_add_id&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT *&lt;br/&gt;                 INTO l_ssa_row&lt;br/&gt;                 FROM t_source_street_address&lt;br/&gt;                WHERE source_street_address_id = p_cursor_data_io.blg_add_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            UPDATE t_source_street_address a&lt;br/&gt;               SET a.address_line_1_txt = p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                   a.address_line_2_txt = p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                   a.city_nm = p_cursor_data_io.city_nm,&lt;br/&gt;                   a.territory_cd = p_cursor_data_io.territory_cd,&lt;br/&gt;                   a.country_cd = p_cursor_data_io.country_cd,&lt;br/&gt;                   a.postal_code_txt = p_cursor_data_io.postal_code_txt,&lt;br/&gt;                   a.record_stat = &apos;A&apos;,&lt;br/&gt;                   a.modified_dttm = l_systimestamp,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.source_street_address_id = p_cursor_data_io.blg_add_id;&lt;br/&gt;&lt;br/&gt;            l_audit_recon.operation_perf := pkg_utility.c_recon_update_perform;&lt;br/&gt;            l_audit_recon.modif_values :=&lt;br/&gt;                  &apos;ADDRESS_LINE_1_TXT : (&apos;&lt;br/&gt;               || l_ssa_row.address_line_1_txt&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.address_line_1_txt&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;ADDRESS_LINE_2_TXT : (&apos;&lt;br/&gt;               || l_ssa_row.address_line_2_txt&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.address_line_2_txt&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;CITY_NM : (&apos;&lt;br/&gt;               || l_ssa_row.city_nm&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.city_nm&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;TERRITORY_CD : (&apos;&lt;br/&gt;               || l_ssa_row.territory_cd&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.territory_cd&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;COUNTRY_CD : (&apos;&lt;br/&gt;               || l_ssa_row.country_cd&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.country_cd&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;POSTAL_CODE_TXT : (&apos;&lt;br/&gt;               || l_ssa_row.postal_code_txt&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.postal_code_txt&lt;br/&gt;               || &apos; )RECORD_STAT : (&apos;&lt;br/&gt;               || l_ssa_row.record_stat&lt;br/&gt;               || &apos; =&gt; A&apos;&lt;br/&gt;               || &apos; )&apos;;&lt;br/&gt;            l_audit_recon.table_key :=&lt;br/&gt;                  &apos;SOURCE_STREET_ADDRESS_ID = &apos; || p_cursor_data_io.blg_add_id;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_SOURCE_STREET_ADDRESS&apos;,&lt;br/&gt;                             p_table_key            =&gt; l_audit_recon.table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;            COMMIT;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT *&lt;br/&gt;                 INTO l_sta_row&lt;br/&gt;                 FROM t_street_address a&lt;br/&gt;                WHERE a.street_address_id = p_cursor_data_io.blg_add_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            UPDATE t_street_address a&lt;br/&gt;               SET a.address_line_1_txt = p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                   a.address_line_2_txt = p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                   a.full_postal_code_txt = p_cursor_data_io.postal_code_txt,&lt;br/&gt;                   a.data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   a.valid_address_ind = &apos;0&apos;,&lt;br/&gt;                   a.record_stat = &apos;A&apos;,&lt;br/&gt;                   a.modified_dttm = l_systimestamp,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.street_address_id = p_cursor_data_io.blg_add_id;&lt;br/&gt;&lt;br/&gt;            l_audit_recon.operation_perf := pkg_utility.c_recon_update_perform;&lt;br/&gt;            l_audit_recon.modif_values :=&lt;br/&gt;                  &apos;ADDRESS_LINE_1_TXT : (&apos;&lt;br/&gt;               || l_sta_row.address_line_1_txt&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.address_line_1_txt&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;ADDRESS_LINE_2_TXT : (&apos;&lt;br/&gt;               || l_sta_row.address_line_2_txt&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.address_line_2_txt&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;FULL_POSTAL_CODE_TXT : (&apos;&lt;br/&gt;               || l_sta_row.full_postal_code_txt&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.postal_code_txt&lt;br/&gt;               || &apos; )&apos;&lt;br/&gt;               || &apos;VALID_ADDRESS_IND : (&apos;&lt;br/&gt;               || l_sta_row.valid_address_ind&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || &apos;0 )&apos;&lt;br/&gt;               || &apos; DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;               || l_sta_row.data_source_type_cd&lt;br/&gt;               || &apos; =&gt; &apos;&lt;br/&gt;               || p_cursor_data_io.data_source_type_cd&lt;br/&gt;               || &apos; ) RECORD_STAT : (&apos;&lt;br/&gt;               || l_sta_row.record_stat&lt;br/&gt;               || &apos; =&gt; A&apos;&lt;br/&gt;               || &apos; )&apos;;&lt;br/&gt;            l_audit_recon.table_key :=&lt;br/&gt;                         &apos;STREET_ADDRESS_ID = &apos; || p_cursor_data_io.blg_add_id;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_STREET_ADDRESS&apos;,&lt;br/&gt;                             p_table_key            =&gt; l_audit_recon.table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_num&lt;br/&gt;                              || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_id&lt;br/&gt;                              || &apos; ,ADDRESS_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.blg_add_id&lt;br/&gt;                              || &apos; ,BT_ADDR_INHERITANCE_FLG_SCN = &apos;&lt;br/&gt;                              || p_cursor_data_io.bt_addr_inheritance_flg_scn&lt;br/&gt;                              || &apos;, exception = &apos;&lt;br/&gt;                              || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                             );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_num&lt;br/&gt;                              || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.account_id&lt;br/&gt;                              || &apos; ,ADDRESS_ID = &apos;&lt;br/&gt;                              || p_cursor_data_io.blg_add_id&lt;br/&gt;                              || &apos; ,BT_ADDR_INHERITANCE_FLG_SCN = &apos;&lt;br/&gt;                              || p_cursor_data_io.bt_addr_inheritance_flg_scn&lt;br/&gt;                              || &apos;, exception = &apos;&lt;br/&gt;                              || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                             );&lt;br/&gt;   END update_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_scn_contact%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : UPDATE_STAGING&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for updating the staging table for the column Record_Cd_Load with value of &apos;P&apos;&lt;br/&gt;      ||                       which indicates the Finished state.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_i.record_load_cd, pkg_utility.c_stg_processed)&lt;br/&gt;         ) = pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_scn_contact_rec_delta s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_i.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, SUB_ACCT_NO_SBB = &apos;&lt;br/&gt;                                       || p_cursor_data_i.account_num&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_recon_scn_contact;</source>
</body>
</PackageOracle>
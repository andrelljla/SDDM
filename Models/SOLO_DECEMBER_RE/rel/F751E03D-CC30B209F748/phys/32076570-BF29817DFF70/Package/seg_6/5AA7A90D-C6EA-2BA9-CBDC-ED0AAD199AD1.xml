<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_CODEGEN" directorySegmentName="seg_6" id="5AA7A90D-C6EA-2BA9-CBDC-ED0AAD199AD1">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_CODEGEN</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:16:44 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_CODEGEN&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_codegen&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 01-Sep-2014&lt;br/&gt;||  Subject Area    : General&lt;br/&gt;||  Description     : The package pkg_codegen is for SOLO data access package generation.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||   calcott         27-JUN-2014         Initial development&lt;br/&gt;||   knoll           30-JUN-2014         Moved code into package&lt;br/&gt;||   Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;   PROCEDURE generate(&lt;br/&gt;         p_schema_i IN VARCHAR2,&lt;br/&gt;         p_table_name_i IN VARCHAR2) ;&lt;br/&gt;&lt;br/&gt;   PROCEDURE compile_package(&lt;br/&gt;         p_table_name_i IN VARCHAR2) ;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_code(&lt;br/&gt;         p_package_name_i IN VARCHAR2)&lt;br/&gt;      RETURN CLOB;&lt;br/&gt;&lt;br/&gt;END pkg_codegen;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_CODEGEN" id="5AA7A90D-C6EA-2BA9-CBDC-ED0AAD199AD1">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_CODEGEN</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:16:47 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_CODEGEN&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_codegen&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : General&lt;br/&gt;   ||  Description     : The package pkg_codegen is for SOLO data access package generation.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||   calcott         27-JUN-2014         Initial development&lt;br/&gt;   ||   knoll           30-JUN-2014         Moved code into package&lt;br/&gt;   ||   Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;TYPE t_parameter_list&lt;br/&gt;IS&lt;br/&gt;   TABLE OF VARCHAR2 (60) ;&lt;br/&gt;PROCEDURE ins_code(&lt;br/&gt;      p_package_name_i IN t_plsql_code.package_name%type,&lt;br/&gt;      p_line_io IN OUT t_plsql_code.line%type,&lt;br/&gt;      p_code_i IN t_plsql_code.code%type)&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure ins_code&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Insert into tbl_plsql_code table&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;BEGIN&lt;br/&gt;   INSERT&lt;br/&gt;   INTO&lt;br/&gt;      t_plsql_code tpc&lt;br/&gt;      (&lt;br/&gt;         tpc.package_name,&lt;br/&gt;         tpc.line,&lt;br/&gt;         tpc.code&lt;br/&gt;      )&lt;br/&gt;      VALUES&lt;br/&gt;      (&lt;br/&gt;         ins_code.p_package_name_i,&lt;br/&gt;         ins_code.p_line_io,&lt;br/&gt;         ins_code.p_code_i&lt;br/&gt;      ) ;&lt;br/&gt;&lt;br/&gt;   p_line_io := p_line_io + 1;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;   sys.dbms_output.put_line (&apos;exception in ins_code: &apos; || sys.dbms_utility.format_error_stack ()) ;&lt;br/&gt;   raise;&lt;br/&gt;END ins_code;&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Function get_code&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Return the generated code for a package as a clob.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;&lt;br/&gt;FUNCTION get_code&lt;br/&gt;   (&lt;br/&gt;      p_package_name_i IN VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   RETURN CLOB&lt;br/&gt;IS&lt;br/&gt;   l_code CLOB;&lt;br/&gt;BEGIN&lt;br/&gt;&lt;br/&gt;   FOR arow IN&lt;br/&gt;   (&lt;br/&gt;      SELECT&lt;br/&gt;         tpc.code || chr (10) AS code&lt;br/&gt;      FROM&lt;br/&gt;         t_plsql_code tpc&lt;br/&gt;      WHERE&lt;br/&gt;         tpc.package_name = lower(get_code.p_package_name_i)&lt;br/&gt;         AND code &lt;&gt; &apos;/&apos;&lt;br/&gt;      ORDER BY&lt;br/&gt;         tpc.line&lt;br/&gt;   )&lt;br/&gt;   LOOP&lt;br/&gt;      l_code := l_code || arow.code;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   RETURN l_code;&lt;br/&gt;&lt;br/&gt;END get_code;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure generate&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : If p_table_name_i is null, does all the tables.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;&lt;br/&gt;PROCEDURE generate&lt;br/&gt;   (&lt;br/&gt;      p_schema_i IN VARCHAR2,&lt;br/&gt;      p_table_name_i IN VARCHAR2&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;&lt;br/&gt;   CURSOR table_cur&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         at.table_name&lt;br/&gt;      FROM&lt;br/&gt;         all_tables at&lt;br/&gt;      WHERE&lt;br/&gt;         at.owner = generate.p_schema_i&lt;br/&gt;         AND at.table_name = NVL (generate.p_table_name_i, at.table_name)&lt;br/&gt;         AND at.table_name NOT IN (&apos;T_MSG_LOG&apos;, &apos;T_PROCESS_LOG&apos;, &apos;T_PROCESS_CONFIG&apos;, &apos;T_PLSQL_CODE&apos;)&lt;br/&gt;      ORDER BY&lt;br/&gt;         at.table_name ;&lt;br/&gt;&lt;br/&gt;   l_table_rec table_cur%rowtype;&lt;br/&gt;&lt;br/&gt;   CURSOR column_cur&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         atc.column_name,&lt;br/&gt;         -- strip any length attributes from the data type, e.g. TIMESTAMP(6) --&gt; TIMESTAMP&lt;br/&gt;         DECODE (instr (atc.data_type, &apos;(&apos;), 0, atc.data_type, SUBSTR (atc.data_type, 1, instr (atc.data_type, &apos;(&apos;) - 1&lt;br/&gt;         )) data_type,&lt;br/&gt;         atc.data_type_mod,&lt;br/&gt;         atc.nullable,&lt;br/&gt;         atc.data_default&lt;br/&gt;      FROM&lt;br/&gt;         all_tab_columns atc&lt;br/&gt;      WHERE&lt;br/&gt;         atc.owner = generate.p_schema_i&lt;br/&gt;         AND atc.table_name = l_table_rec.table_name;&lt;br/&gt;&lt;br/&gt;   l_column_rec column_cur%rowtype;&lt;br/&gt;&lt;br/&gt;   CURSOR pk_cur&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         aic.column_name,&lt;br/&gt;         -- strip any length attributes from the data type, e.g. TIMESTAMP(6) --&gt; TIMESTAMP&lt;br/&gt;         DECODE (instr (atc.data_type, &apos;(&apos;), 0, atc.data_type, SUBSTR (atc.data_type, 1, instr (atc.data_type, &apos;(&apos;) - 1&lt;br/&gt;         )) data_type&lt;br/&gt;      FROM&lt;br/&gt;         all_ind_columns aic,&lt;br/&gt;         all_tab_columns atc&lt;br/&gt;      WHERE&lt;br/&gt;         aic.index_owner = generate.p_schema_i&lt;br/&gt;         AND aic.table_name = l_table_rec.table_name&lt;br/&gt;         AND aic.index_name LIKE &apos;PK%&apos;&lt;br/&gt;         AND aic.index_owner = atc.owner&lt;br/&gt;         AND aic.table_name = atc.table_name&lt;br/&gt;         AND aic.column_name = atc.column_name;&lt;br/&gt;&lt;br/&gt;   l_parameters t_parameter_list;&lt;br/&gt;   l_parm_idx binary_integer;&lt;br/&gt;   l_parm VARCHAR2 (60) ;&lt;br/&gt;&lt;br/&gt;   l_pk_rec pk_cur%rowtype;&lt;br/&gt;&lt;br/&gt;   l_code VARCHAR2 (4000) ;&lt;br/&gt;   l_line INT;&lt;br/&gt;   l_package_name VARCHAR2 (30) ;&lt;br/&gt;   l_filename VARCHAR2 (100) ;&lt;br/&gt;&lt;br/&gt;   l_num_cols INT;&lt;br/&gt;   l_comma VARCHAR2 (1) ;&lt;br/&gt;   l_and VARCHAR2 (10) ;&lt;br/&gt;   l_empty_line VARCHAR2 (1) := &apos; &apos;;&lt;br/&gt;&lt;br/&gt;   l_pk_col VARCHAR2 (30) ;&lt;br/&gt;   l_pk_type VARCHAR (100) ;&lt;br/&gt;&lt;br/&gt;BEGIN&lt;br/&gt;   sys.dbms_output.put_line (&apos;truncating table&apos;) ;&lt;br/&gt;   EXECUTE immediate &apos;truncate table t_plsql_code&apos;;&lt;br/&gt;&lt;br/&gt;   sys.dbms_output.put_line (&apos;opening table cursor for: &apos; || p_schema_i) ;&lt;br/&gt;&lt;br/&gt;   IF(table_cur%ISOPEN) THEN&lt;br/&gt;      CLOSE table_cur;&lt;br/&gt;   END IF;&lt;br/&gt;   OPEN table_cur;&lt;br/&gt;&lt;br/&gt;   LOOP&lt;br/&gt;      FETCH table_cur INTO l_table_rec;&lt;br/&gt;      EXIT&lt;br/&gt;   WHEN table_cur%notfound;&lt;br/&gt;&lt;br/&gt;      sys.dbms_output.put_line (&apos;processing table: &apos; || l_table_rec.table_name) ;&lt;br/&gt;&lt;br/&gt;      -- Find the primary key id column for the table to be processed&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT&lt;br/&gt;            atc.column_name,&lt;br/&gt;            -- strip any length attributes from the data type, e.g. TIMESTAMP(6) --&gt; TIMESTAMP&lt;br/&gt;            DECODE (instr (atc.data_type, &apos;(&apos;), 0, atc.data_type, SUBSTR (atc.data_type, 1, instr (atc.data_type, &apos;(&apos;)&lt;br/&gt;            - 1)) data_type&lt;br/&gt;         INTO&lt;br/&gt;            generate.l_pk_col,&lt;br/&gt;            generate.l_pk_type&lt;br/&gt;         FROM&lt;br/&gt;            sys.all_ind_columns aic,&lt;br/&gt;            sys.all_tab_columns atc&lt;br/&gt;         WHERE&lt;br/&gt;            aic.index_owner = p_schema_i&lt;br/&gt;            AND aic.table_name = l_table_rec.table_name&lt;br/&gt;            AND aic.index_name LIKE &apos;PK%&apos;&lt;br/&gt;            AND aic.index_owner = atc.owner&lt;br/&gt;            AND aic.table_name = atc.table_name&lt;br/&gt;            AND aic.column_name = atc.column_name;&lt;br/&gt;      EXCEPTION&lt;br/&gt;      WHEN OTHERS THEN&lt;br/&gt;         l_pk_col := NULL;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate SPEC&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      l_line := 1;&lt;br/&gt;      l_package_name := &apos;da_&apos; || SUBSTR (lower (l_table_rec.table_name), 3, 27) ; -- skip the &apos;T_&apos; in the table name&lt;br/&gt;      l_filename := l_package_name || &apos;.pks&apos;;&lt;br/&gt;      l_code := &apos;CREATE OR REPLACE PACKAGE &apos; || l_package_name;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;/* Generated on &apos; || systimestamp || &apos; */&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code);&lt;br/&gt;&lt;br/&gt;      l_code := &apos;AS&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      ins_code (l_filename, l_line, l_empty_line) ;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate FUNCTION add SPEC&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      IF (l_pk_col IS NOT NULL AND l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)) THEN&lt;br/&gt;         l_code := &apos;   FUNCTION add (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            IF (l_column_rec.column_name NOT IN (&apos;RECORD_STAT&apos;, &apos;CREATED_DTTM&apos;, &apos;CREATED_BY&apos;, &apos;MODIFIED_DTTM&apos;,&lt;br/&gt;               &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;               IF (l_column_rec.column_name = l_pk_col) AND&lt;br/&gt;                  (&lt;br/&gt;                     l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)&lt;br/&gt;                  )&lt;br/&gt;                  THEN&lt;br/&gt;                  NULL;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_code := &apos;      &apos; || l_comma || lower (l_column_rec.column_name) || &apos; IN &apos; || l_column_rec.data_type&lt;br/&gt;                  ;&lt;br/&gt;                  ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;                  l_comma := &apos;,&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      &apos; || l_comma || &apos;audit_user IN VARCHAR2&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   ) return &apos; || l_pk_type || &apos;;&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate PROCEDURE add SPEC&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      l_code := &apos;   PROCEDURE add (&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_comma := &apos;,&apos;;&lt;br/&gt;      IF(column_cur%ISOPEN) THEN&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;      END IF;&lt;br/&gt;      OPEN column_cur;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH column_cur INTO l_column_rec;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN column_cur%notfound;&lt;br/&gt;         IF (l_column_rec.column_name NOT IN (&apos;RECORD_STAT&apos;, &apos;CREATED_DTTM&apos;, &apos;CREATED_BY&apos;, &apos;MODIFIED_DTTM&apos;,&lt;br/&gt;            &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;            IF (l_column_rec.column_name = l_pk_col) AND&lt;br/&gt;               (&lt;br/&gt;                  l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               NULL;&lt;br/&gt;            ELSE&lt;br/&gt;               l_code := &apos;      &apos; || l_comma || lower (l_column_rec.column_name) || &apos; IN &apos; || l_column_rec.data_type;&lt;br/&gt;               ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;               l_comma := &apos;,&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;      CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      &apos; || l_comma || &apos;audit_user IN VARCHAR2&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   );&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate PROCEDURE add SPEC with surrogate key&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      IF (l_pk_col IS NOT NULL AND l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)) THEN&lt;br/&gt;         l_code := &apos;   PROCEDURE add (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            IF (l_column_rec.column_name NOT IN (&apos;RECORD_STAT&apos;, &apos;CREATED_DTTM&apos;, &apos;CREATED_BY&apos;, &apos;MODIFIED_DTTM&apos;,&lt;br/&gt;               &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;&lt;br/&gt;               l_code := &apos;      &apos; || l_comma || lower (l_column_rec.column_name) || &apos; IN &apos; || l_column_rec.data_type;&lt;br/&gt;               ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;               l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;            END IF;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      &apos; || l_comma || &apos;audit_user IN VARCHAR2&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   );&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate PROCEDURE del SPEC&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      l_code := &apos;   PROCEDURE del (&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;      IF(pk_cur%ISOPEN) THEN&lt;br/&gt;         CLOSE pk_cur;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN pk_cur;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH pk_cur INTO l_pk_rec;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN pk_cur%notfound;&lt;br/&gt;         l_code := &apos;      &apos; || l_comma || lower (l_pk_rec.column_name) || &apos; IN &apos; || l_pk_rec.data_type;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;      END LOOP;&lt;br/&gt;      CLOSE pk_cur;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      &apos; || l_comma || &apos;audit_user IN VARCHAR2&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   );&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;END &apos; || l_package_name || &apos;;&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;/&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate BODY&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      l_filename := l_package_name || &apos;.pkb&apos;;&lt;br/&gt;      l_line := 1;&lt;br/&gt;      l_code := &apos;CREATE OR REPLACE PACKAGE BODY &apos; || l_package_name;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;/* Generated on &apos; || systimestamp || &apos; */&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code);&lt;br/&gt;&lt;br/&gt;      l_code := &apos;AS&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate FUNCTION add BODY&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      IF (l_pk_col IS NOT NULL AND l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)) THEN&lt;br/&gt;         l_code := &apos;   FUNCTION add (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         l_parameters := t_parameter_list () ;&lt;br/&gt;         l_parm_idx := 0;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            IF (l_column_rec.column_name NOT IN (&apos;RECORD_STAT&apos;, &apos;CREATED_DTTM&apos;, &apos;CREATED_BY&apos;, &apos;MODIFIED_DTTM&apos;,&lt;br/&gt;               &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;               IF (l_column_rec.column_name = l_pk_col) AND&lt;br/&gt;                  (&lt;br/&gt;                     l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)&lt;br/&gt;                  )&lt;br/&gt;                  THEN&lt;br/&gt;                  NULL;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_parm_idx := l_parm_idx + 1;&lt;br/&gt;                  l_parm := lower (l_column_rec.column_name) ;&lt;br/&gt;                  l_parameters.extend () ;&lt;br/&gt;                  l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;                  l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN &apos; || l_column_rec.data_type;&lt;br/&gt;                  ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;                  l_comma := &apos;,&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_parm_idx := l_parm_idx + 1;&lt;br/&gt;         l_parm := &apos;audit_user&apos;;&lt;br/&gt;         l_parameters.extend () ;&lt;br/&gt;         l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;         l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN VARCHAR2&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   ) RETURN &apos; || l_pk_type;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   IS&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      l_return_pk &apos; || l_pk_type || &apos;;&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   BEGIN&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;begin ]&apos; ||&lt;br/&gt;         l_package_name || q&apos;[.add(fx), parms=&apos;]&apos;;&lt;br/&gt;         FOR parm IN l_parameters.first..l_parameters.last&lt;br/&gt;         LOOP&lt;br/&gt;            l_code := l_code || &apos; || &apos; || l_parameters (parm) || q&apos;[ || &apos;|&apos;]&apos; ;&lt;br/&gt;         END LOOP;&lt;br/&gt;         l_code := l_code || &apos;);&apos; ;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      INSERT INTO &apos; || lower (p_schema_i) || &apos;.&apos; || lower (l_table_rec.table_name) || &apos; a&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;&apos;;&lt;br/&gt;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            l_line := l_line + 1;&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || &apos;a.&apos; || lower (l_column_rec.column_name) ;&lt;br/&gt;            ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;            l_comma := &apos;,&apos;;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      )&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      VALUES&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;&apos;;&lt;br/&gt;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            IF (l_column_rec.column_name = &apos;RECORD_STAT&apos;) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;&apos;&apos;A&apos;&apos;&apos;;&lt;br/&gt;            elsif (l_column_rec.column_name = &apos;CREATED_DTTM&apos;) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;SYSTIMESTAMP&apos;;&lt;br/&gt;            elsif (l_column_rec.column_name = &apos;CREATED_BY&apos;) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;add.audit_user&apos;;&lt;br/&gt;            elsif (l_column_rec.column_name IN (&apos;MODIFIED_DTTM&apos;, &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;NULL&apos;;&lt;br/&gt;            elsif (l_column_rec.column_name = l_pk_col) AND&lt;br/&gt;               (&lt;br/&gt;                  l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || lower (p_schema_i) || &apos;.s_&apos; || lower (SUBSTR(&lt;br/&gt;               l_column_rec.column_name, 1, 28)) || &apos;.NEXTVAL&apos;;&lt;br/&gt;            ELSE&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;add.&apos; || lower (l_column_rec.column_name) ;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;            l_comma := &apos;,&apos;;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      ) RETURNING &apos; || &apos;a.&apos; || lower (l_pk_col) || &apos; INTO l_return_pk;&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;end ]&apos; ||&lt;br/&gt;         l_package_name;&lt;br/&gt;         l_code := l_code || &apos;.add(fx)&apos; || q&apos;[&apos;);]&apos; ;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      RETURN &apos; || &apos;l_return_pk&apos; || &apos;;&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   END add;&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate PROCEDURE add BODY&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      l_code := &apos;   PROCEDURE add (&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;      IF(column_cur%ISOPEN) THEN&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN column_cur;&lt;br/&gt;      l_parameters := t_parameter_list () ;&lt;br/&gt;      l_parm_idx := 0;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH column_cur INTO l_column_rec;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN column_cur%notfound;&lt;br/&gt;         IF (l_column_rec.column_name NOT IN (&apos;RECORD_STAT&apos;, &apos;CREATED_DTTM&apos;, &apos;CREATED_BY&apos;, &apos;MODIFIED_DTTM&apos;,&lt;br/&gt;            &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;            IF (l_column_rec.column_name = l_pk_col) AND&lt;br/&gt;               (&lt;br/&gt;                  l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               NULL;&lt;br/&gt;            ELSE&lt;br/&gt;               l_parm_idx := l_parm_idx + 1;&lt;br/&gt;               l_parm := lower (l_column_rec.column_name) ;&lt;br/&gt;               l_parameters.extend () ;&lt;br/&gt;               l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;               l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN &apos; || l_column_rec.data_type;&lt;br/&gt;               ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;               l_comma := &apos;,&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;      CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;      l_parm_idx := l_parm_idx + 1;&lt;br/&gt;      l_parm := &apos;audit_user&apos;;&lt;br/&gt;      l_parameters.extend () ;&lt;br/&gt;      l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;      l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN VARCHAR2&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   )&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   IS&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   BEGIN&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;begin ]&apos; ||&lt;br/&gt;      l_package_name || q&apos;[.add, parms=&apos;]&apos;;&lt;br/&gt;      FOR parm IN l_parameters.first..l_parameters.last&lt;br/&gt;      LOOP&lt;br/&gt;         l_code := l_code || &apos; || &apos; || l_parameters (parm) || q&apos;[ || &apos;|&apos;]&apos; ;&lt;br/&gt;      END LOOP;&lt;br/&gt;      l_code := l_code || &apos;);&apos; ;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      INSERT INTO &apos; || lower (p_schema_i) || &apos;.&apos; || lower (l_table_rec.table_name) || &apos; a&apos; ;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      (&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_comma := &apos;&apos;;&lt;br/&gt;&lt;br/&gt;      IF(column_cur%ISOPEN) THEN&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;      OPEN column_cur;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH column_cur INTO l_column_rec;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN column_cur%notfound;&lt;br/&gt;         l_line := l_line + 1;&lt;br/&gt;         l_code := &apos;         &apos; || l_comma || &apos;a.&apos; || lower (l_column_rec.column_name) ;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;      END LOOP;&lt;br/&gt;      CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      )&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      VALUES&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      (&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_comma := &apos;&apos;;&lt;br/&gt;&lt;br/&gt;      IF(column_cur%ISOPEN) THEN&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN column_cur;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH column_cur INTO l_column_rec;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN column_cur%notfound;&lt;br/&gt;         IF (l_column_rec.column_name = &apos;RECORD_STAT&apos;) THEN&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || &apos;&apos;&apos;A&apos;&apos;&apos;;&lt;br/&gt;         elsif (l_column_rec.column_name = &apos;CREATED_DTTM&apos;) THEN&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || &apos;SYSTIMESTAMP&apos;;&lt;br/&gt;         elsif (l_column_rec.column_name = &apos;CREATED_BY&apos;) THEN&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || &apos;add.audit_user&apos;;&lt;br/&gt;         elsif (l_column_rec.column_name IN (&apos;MODIFIED_DTTM&apos;, &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || &apos;NULL&apos;;&lt;br/&gt;         elsif (l_column_rec.column_name = l_pk_col) AND&lt;br/&gt;            (&lt;br/&gt;               l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)&lt;br/&gt;            )&lt;br/&gt;            THEN&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || lower (p_schema_i) || &apos;.s_&apos; || lower (SUBSTR(l_column_rec.column_name,&lt;br/&gt;            1, 28)) || &apos;.NEXTVAL&apos;;&lt;br/&gt;         ELSE&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || &apos;add.&apos; || lower (l_column_rec.column_name) ;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;      END LOOP;&lt;br/&gt;      CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      );&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;end ]&apos; ||&lt;br/&gt;      l_package_name;&lt;br/&gt;      l_code := l_code || &apos;.add&apos; || q&apos;[&apos;);]&apos; ;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   END add;&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate PROCEDURE add BODY with surrogate key&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      IF (l_pk_col IS NOT NULL AND l_pk_type IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)) THEN&lt;br/&gt;         l_code := &apos;   PROCEDURE add (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         l_parameters := t_parameter_list () ;&lt;br/&gt;         l_parm_idx := 0;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            IF (l_column_rec.column_name NOT IN (&apos;RECORD_STAT&apos;, &apos;CREATED_DTTM&apos;, &apos;CREATED_BY&apos;, &apos;MODIFIED_DTTM&apos;,&lt;br/&gt;               &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;&lt;br/&gt;               l_parm_idx := l_parm_idx + 1;&lt;br/&gt;               l_parm := lower (l_column_rec.column_name) ;&lt;br/&gt;               l_parameters.extend () ;&lt;br/&gt;               l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;               l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN &apos; || l_column_rec.data_type;&lt;br/&gt;               ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;               l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;            END IF;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_parm_idx := l_parm_idx + 1;&lt;br/&gt;         l_parm := &apos;audit_user&apos;;&lt;br/&gt;         l_parameters.extend () ;&lt;br/&gt;         l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;         l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN VARCHAR2&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   )&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   IS&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   BEGIN&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;begin ]&apos; ||&lt;br/&gt;         l_package_name || q&apos;[.add, parms=&apos;]&apos;;&lt;br/&gt;         FOR parm IN l_parameters.first..l_parameters.last&lt;br/&gt;         LOOP&lt;br/&gt;            l_code := l_code || &apos; || &apos; || l_parameters (parm) || q&apos;[ || &apos;|&apos;]&apos; ;&lt;br/&gt;         END LOOP;&lt;br/&gt;         l_code := l_code || &apos;);&apos; ;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      INSERT INTO &apos; || lower (p_schema_i) || &apos;.&apos; || lower (l_table_rec.table_name) || &apos; a&apos; ;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;&apos;;&lt;br/&gt;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            l_line := l_line + 1;&lt;br/&gt;            l_code := &apos;         &apos; || l_comma || &apos;a.&apos; || lower (l_column_rec.column_name) ;&lt;br/&gt;            ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;            l_comma := &apos;,&apos;;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      )&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      VALUES&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      (&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_comma := &apos;&apos;;&lt;br/&gt;         IF(column_cur%ISOPEN) THEN&lt;br/&gt;            CLOSE column_cur;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN column_cur;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH column_cur INTO l_column_rec;&lt;br/&gt;            EXIT&lt;br/&gt;         WHEN column_cur%notfound;&lt;br/&gt;            IF (l_column_rec.column_name = &apos;RECORD_STAT&apos;) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;&apos;&apos;A&apos;&apos;&apos;;&lt;br/&gt;            elsif (l_column_rec.column_name = &apos;CREATED_DTTM&apos;) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;SYSTIMESTAMP&apos;;&lt;br/&gt;            elsif (l_column_rec.column_name = &apos;CREATED_BY&apos;) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;add.audit_user&apos;;&lt;br/&gt;            elsif (l_column_rec.column_name IN (&apos;MODIFIED_DTTM&apos;, &apos;MODIFIED_BY&apos;)) THEN&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;NULL&apos;;&lt;br/&gt;            ELSE&lt;br/&gt;               l_code := &apos;         &apos; || l_comma || &apos;add.&apos; || lower (l_column_rec.column_name) ;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;            l_comma := &apos;,&apos;;&lt;br/&gt;         END LOOP;&lt;br/&gt;         CLOSE column_cur;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      );&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;end ]&apos; ||&lt;br/&gt;         l_package_name;&lt;br/&gt;         l_code := l_code || &apos;.add&apos; || q&apos;[&apos;);]&apos; ;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := &apos;   END add;&apos;;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;         l_code := l_empty_line;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      /*&lt;br/&gt;      ||&lt;br/&gt;      || generate PROCEDURE del BODY&lt;br/&gt;      ||&lt;br/&gt;      */&lt;br/&gt;      l_code := &apos;   PROCEDURE del (&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      process_rec IN pkg_logging.t_process_rec&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_comma := &apos;,&apos;;&lt;br/&gt;&lt;br/&gt;      IF(pk_cur%ISOPEN) THEN&lt;br/&gt;         CLOSE pk_cur;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN pk_cur;&lt;br/&gt;      l_parameters := t_parameter_list () ;&lt;br/&gt;      l_parm_idx := 0;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH pk_cur INTO l_pk_rec;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN pk_cur%notfound;&lt;br/&gt;         l_parm_idx := l_parm_idx + 1;&lt;br/&gt;         l_parm := lower (l_pk_rec.column_name) ;&lt;br/&gt;         l_parameters.extend () ;&lt;br/&gt;         l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;         l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN &apos; || l_pk_rec.data_type;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;         l_comma := &apos;,&apos;;&lt;br/&gt;      END LOOP;&lt;br/&gt;      CLOSE pk_cur;&lt;br/&gt;&lt;br/&gt;      l_parm_idx := l_parm_idx + 1;&lt;br/&gt;      l_parm := &apos;audit_user&apos;;&lt;br/&gt;      l_parameters.extend () ;&lt;br/&gt;      l_parameters (l_parm_idx) := l_parm;&lt;br/&gt;      l_code := &apos;      &apos; || l_comma || l_parm || &apos; IN VARCHAR2&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   )&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   IS&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   BEGIN&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;begin ]&apos; ||&lt;br/&gt;      l_package_name || q&apos;[.del, parms=&apos;]&apos;;&lt;br/&gt;      FOR parm IN l_parameters.first..l_parameters.last&lt;br/&gt;      LOOP&lt;br/&gt;         l_code := l_code || &apos; || &apos; || l_parameters (parm) || q&apos;[ || &apos;|&apos;]&apos; ;&lt;br/&gt;      END LOOP;&lt;br/&gt;      l_code := l_code || &apos;);&apos; ;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      UPDATE &apos; || lower (p_schema_i) || &apos;.&apos; || lower (l_table_rec.table_name) || &apos; a&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      SET a.record_stat = &apos;&apos;D&apos;&apos;&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;          ,a.modified_dttm = SYSTIMESTAMP&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;          ,a.modified_by = del.audit_user&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_and := &apos;WHERE &apos;;&lt;br/&gt;&lt;br/&gt;      IF(pk_cur%ISOPEN) THEN&lt;br/&gt;         CLOSE pk_cur;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN pk_cur;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH&lt;br/&gt;            pk_cur&lt;br/&gt;         INTO&lt;br/&gt;            l_pk_rec;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN pk_cur%notfound;&lt;br/&gt;         l_line := l_line + 1;&lt;br/&gt;         l_code := &apos;      &apos; || l_and || &apos;a.&apos; || lower (l_pk_rec.column_name) || &apos; = del.&apos; || lower (&lt;br/&gt;         l_pk_rec.column_name) ;&lt;br/&gt;         ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;         l_and := &apos;AND &apos;;&lt;br/&gt;      END LOOP;&lt;br/&gt;      CLOSE pk_cur;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      ;&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;      &apos; || lower (p_schema_i) || &apos;.&apos; || q&apos;[pkg_logging.log_debug (process_rec, &apos;end ]&apos; ||&lt;br/&gt;      l_package_name;&lt;br/&gt;      l_code := l_code || &apos;.del&apos; || q&apos;[&apos;);]&apos; ;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;   END del;&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := l_empty_line;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;END &apos; || l_package_name || &apos;;&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      l_code := &apos;/&apos;;&lt;br/&gt;      ins_code (l_filename, l_line, l_code) ;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   sys.dbms_output.put_line (&apos;closing cursor&apos;) ;&lt;br/&gt;   CLOSE table_cur;&lt;br/&gt;&lt;br/&gt;   COMMIT;&lt;br/&gt;   sys.dbms_output.put_line (&apos;done&apos;) ;&lt;br/&gt;&lt;br/&gt;END generate;&lt;br/&gt;&lt;br/&gt;PROCEDURE compile_package(&lt;br/&gt;      p_table_name_i IN VARCHAR2)&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure compile_package&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Get the generated code from t_plsql_code,collect into a clob, and then compile.&lt;br/&gt;   ||                       If p_table_name_i is null, does all the tables.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_code CLOB;&lt;br/&gt;BEGIN&lt;br/&gt;   FOR arow IN&lt;br/&gt;   (&lt;br/&gt;      SELECT DISTINCT&lt;br/&gt;         package_name&lt;br/&gt;      FROM&lt;br/&gt;         t_plsql_code&lt;br/&gt;      WHERE&lt;br/&gt;         p_table_name_i IS NULL&lt;br/&gt;         OR package_name LIKE &apos;da_&apos; || lower (p_table_name_i) || &apos;.%&apos;&lt;br/&gt;      ORDER BY&lt;br/&gt;         package_name DESC -- specifications (.pks) first, bodies (.pkb) last&lt;br/&gt;   )&lt;br/&gt;   LOOP&lt;br/&gt;      sys.dbms_output.put_line (&apos;Compiling &apos; || arow.package_name) ;&lt;br/&gt;&lt;br/&gt;      l_code := get_code (arow.package_name) ;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         EXECUTE immediate l_code;&lt;br/&gt;      EXCEPTION&lt;br/&gt;      WHEN OTHERS THEN&lt;br/&gt;         sys.dbms_output.put_line (sys.dbms_utility.format_error_stack ()) ;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      DBMS_LOB.FREETEMPORARY (l_code) ;&lt;br/&gt;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;END compile_package;&lt;br/&gt;END pkg_codegen;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_OJB_JOBS" directorySegmentName="seg_6" id="317F2E64-7621-2404-F858-33B3044468CA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OJB_JOBS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:40 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_OJB_JOBS&lt;br/&gt;IS&lt;br/&gt;/**********************************************************************************************************************&lt;br/&gt;||      CREATED BY                   : Cognizant&lt;br/&gt;||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;||      ESTIMATED RUN TIME           :&lt;br/&gt;||      SUBJECT AREA                 : Order&lt;br/&gt;||      DESCRIPITION                 : The package pkg_vnt_process_rrt_ojb_jobs controls the processing of the&lt;br/&gt;||                                     Vantage RRT_OJB_JOBS table and applying those updates to SOLODB.&lt;br/&gt; Change log:&lt;br/&gt;&lt;br/&gt;  Changed By                 Changed On             Change Description&lt;br/&gt;-----------------------------------------------------------------------------------------------------------------------&lt;br/&gt;  ||  Cognizant                  24-JAN-2015            Standardization Changes #&lt;br/&gt;***********************************************************************************************************************/&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;        p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;        p_max_thread         NUMBER DEFAULT 1,&lt;br/&gt;        p_reminder_thread  NUMBER DEFAULT 1,&lt;br/&gt;        p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;      &lt;br/&gt;   );&lt;br/&gt;END PKG_VNT_RECON_OJB_JOBS;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_OJB_JOBS" id="317F2E64-7621-2404-F858-33B3044468CA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OJB_JOBS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:45 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_OJB_JOBS&lt;br/&gt;IS&lt;br/&gt;/**********************************************************************************************************************&lt;br/&gt;||      CREATED BY                   : Cognizant&lt;br/&gt;||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;||      ESTIMATED RUN TIME           :&lt;br/&gt;||      SUBJECT AREA                 : Order&lt;br/&gt;||      DESCRIPITION                 : The package pkg_vnt_process_rrt_ojb_jobs controls the processing of the&lt;br/&gt;||                                     Vantage RRT_OJB_JOBS table and applying those updates to SOLODB.&lt;br/&gt; Change log:&lt;br/&gt;&lt;br/&gt;  Changed By                 Changed On             Change Description&lt;br/&gt;-----------------------------------------------------------------------------------------------------------------------&lt;br/&gt;  ||  Cognizant                  24-JAN-2015            Standardization Changes&lt;br/&gt;  ||  Cognizant                  24-FEB-2015            Changed the population logic of  T_PROCESS_LOG_DETAIL table&lt;br/&gt;  ||  Cognizant                  25-FEB-2015            Incoroporated review comments&lt;br/&gt;  ||  Cognizant                  26-Feb-2015            Code fix - In population of T_BUS_INTERACT table, the derivation&lt;br/&gt;  ||                                                                 logic of Source System Id column changed from &quot;order_no_rojb&quot; to&lt;br/&gt;  ||                                                                 order_no_rojb || TO_CHAR(job_seq_no_rojb) AS src_sys_id&lt;br/&gt;  ||  Cognizant                  27-Feb-2015            Excluded the table T_BUS_INTERACT_PARTY_ROLE from Update&lt;br/&gt;  ||  Cognizant                  06-MAR-2015           Fix for SIT defect 27, column mapping changed for installer_type_cd,&lt;br/&gt;  ||                                                                    comment_val,total_work_units_scheduled_qty,work_order_class_cd&lt;br/&gt;  ||  Cognizant                  19-MAR-2015           Post production issue fix&lt;br/&gt; ||   Cognizant                  30-MAR-2015           Modified cursor query to support ROWID based multithreading&lt;br/&gt; ||   Cognizant                   07-Apr-2015           Code changes to remove the descrepanies between NRT/RRT , Initial Load and Reconciliation.&lt;br/&gt; ||   Cognizant                  10-Apr-2015             Trim included for character column in cursor query.&lt;br/&gt;||    Karthik                      29-Apr-2015            Modified the table structure of T_BUS_INTERACT to have a new column&lt;br/&gt;||                                                                  BUS_INTERACT_USAGE_TYPE_CD&lt;br/&gt;***********************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name                    CONSTANT t_unit_name&lt;br/&gt;                                                  := &apos;PKG_VNT_RECON_OJB_JOBS&apos;;&lt;br/&gt;   c_relation_request_cd_reqwo   CONSTANT VARCHAR2 (10)            := &apos;REQWO&apos;;&lt;br/&gt;   c_relation_request_cd_powo    CONSTANT VARCHAR2 (10)             := &apos;POWO&apos;;&lt;br/&gt;   c_bulk_errors                          EXCEPTION;&lt;br/&gt;   c_batchsize                   CONSTANT PLS_INTEGER                 := 1000;&lt;br/&gt;   l_audit_recon                          stg.audit_recon_process%ROWTYPE;&lt;br/&gt;   l_current_recon_start_time             stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;   l_table_key                            stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   l_log_ind                              CHAR (1);&lt;br/&gt;   g_max_thread                           NUMBER                         := 1;&lt;br/&gt;   g_reminder_thread                      NUMBER                         := 1;&lt;br/&gt;   g_batchsize                            NUMBER                      := 1000;&lt;br/&gt;   g_process_record_cnt                   NUMBER;&lt;br/&gt;   g_error_record_cnt                     NUMBER;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_recon_ojb_jobs&lt;br/&gt;   IS&lt;br/&gt;      SELECT CASE&lt;br/&gt;                WHEN rojb.sys_ojb = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             rojb.ROWID AS ID, rojb.record_load_cd,&lt;br/&gt;             cust_xref.party_id AS customer_id,&lt;br/&gt;             addr_xref.address_id AS service_address_id,&lt;br/&gt;             job_xref.bus_interact_id,&lt;br/&gt;             ord_xref.bus_interact_id AS ord_bus_interact_id,&lt;br/&gt;             rojb.cust_acct_no_ojb AS cust_acct_num,&lt;br/&gt;             rojb.hse_key_ojb,&lt;br/&gt;             rojb.order_no_ojb AS order_no,&lt;br/&gt;             rojb.job_seq_no_ojb AS sequence_num,&lt;br/&gt;             rojb.order_no_ojb || TO_CHAR (rojb.job_seq_no_ojb)&lt;br/&gt;                                                               AS src_sys_id,&lt;br/&gt;             DECODE (rojb.create_dte_ojb,&lt;br/&gt;                     pkg_utility.c_null_date, NULL,&lt;br/&gt;                     TO_CHAR (rojb.create_dte_ojb, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                    ) AS create_dttm,&lt;br/&gt;             DECODE (rojb.compl_dte_ojb,&lt;br/&gt;                     pkg_utility.c_null_date, NULL,&lt;br/&gt;                     TO_CHAR (rojb.compl_dte_ojb, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                    ) AS actual_completion_dttm,&lt;br/&gt;             TRIM (rojb.installer_typ_ojb) AS installer_type_cd,&lt;br/&gt;             TRIM (rojb.job_typ_ojb) AS work_order_type_cd,&lt;br/&gt;             DECODE (rojb.job_stat_ojb,&lt;br/&gt;                     &apos;C&apos;, TRIM (rojb.compl_cde_ojb),&lt;br/&gt;                     &apos;D&apos;, TRIM (rojb.compl_cde_ojb),&lt;br/&gt;                     NULL&lt;br/&gt;                    ) AS completion_cd,&lt;br/&gt;             DECODE (rojb.job_stat_ojb,&lt;br/&gt;                     &apos;X&apos;, TRIM (rojb.compl_cde_ojb),&lt;br/&gt;                     NULL&lt;br/&gt;                    ) AS cancel_cd,&lt;br/&gt;             TRIM (SUBSTR (rojb.compl_cde_ojb, 1, 3)) AS completion_cd1,&lt;br/&gt;             TRIM (SUBSTR (rojb.compl_cde_ojb, 4, 3)) AS completion_cd2,&lt;br/&gt;             TRIM (SUBSTR (rojb.compl_cde_ojb, 7, 3)) AS completion_cd3,&lt;br/&gt;             TRIM (SUBSTR (rojb.compl_cde_ojb, 10, 3)) AS completion_cd4,&lt;br/&gt;             TRIM (SUBSTR (rojb.compl_cde_ojb, 13, 3)) AS completion_cd5,&lt;br/&gt;             TRIM (SUBSTR (rojb.compl_cde_ojb, 16, 3)) AS completion_cd6,&lt;br/&gt;             TRIM (rojb.job_comments_ojb) AS comment_val,&lt;br/&gt;             rojb.tot_sched_units_ojb AS total_work_units_scheduled_qty,&lt;br/&gt;             TRIM (rojb.job_class_ojb) AS work_order_class_cd,&lt;br/&gt;&lt;br/&gt;             -- &apos;WO&apos; AS bus_interact_type_cd, --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;             pkg_utility.c_bus_interact_type_cd_req AS bus_interact_type_cd,&lt;br/&gt;             pkg_utility.c_request_type_cd_wrkord AS request_type_cd,&lt;br/&gt;             TRIM (rojb.job_stat_ojb) AS job_stat_rojb,&lt;br/&gt;             DECODE&lt;br/&gt;                  (r.request_type_cd,&lt;br/&gt;                   pkg_utility.c_request_type_cd_splreq, c_relation_request_cd_reqwo,&lt;br/&gt;                   pkg_utility.c_request_type_cd_prdord, c_relation_request_cd_powo,&lt;br/&gt;                   pkg_utility.c_relation_request_cd_tktwo&lt;br/&gt;                  ) AS relationship_cd,&lt;br/&gt;&lt;br/&gt;             --DECODE (bi.bus_interact_type_cd, &apos;SPREQ&apos;, &apos;Z&apos;, &apos;PRORD&apos;, &apos;W&apos;, &apos;TKT&apos;, &apos;T&apos;, &apos;T&apos; ) AS category_cd, --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;             DECODE (r.request_type_cd,&lt;br/&gt;                     pkg_utility.c_request_type_cd_splreq, &apos;Z&apos;,&lt;br/&gt;                     pkg_utility.c_request_type_cd_prdord, &apos;W&apos;,&lt;br/&gt;                     pkg_utility.c_bus_interact_type_cd_tkt, &apos;T&apos;,&lt;br/&gt;                     &apos;T&apos;&lt;br/&gt;                    ) AS category_cd,&lt;br/&gt;             DECODE&lt;br/&gt;                (rojb.create_dte_ojb,&lt;br/&gt;                 TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                 TO_TIMESTAMP (   TO_CHAR (rojb.create_dte_ojb, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                               || &apos;.&apos;&lt;br/&gt;                               || rojb.create_tme_ojb,&lt;br/&gt;                               &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                              )&lt;br/&gt;                ) order_create_ts,&lt;br/&gt;             DECODE&lt;br/&gt;                (rojb.compl_dte_ojb,&lt;br/&gt;                 TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                 TO_TIMESTAMP (   TO_CHAR (rojb.compl_dte_ojb, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                               || &apos;.&apos;&lt;br/&gt;                               || rojb.compl_tme_ojb,&lt;br/&gt;                               &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                              )&lt;br/&gt;                ) order_completion_ts&lt;br/&gt;        FROM stg.vnt_ojb_jobs_rec_delta rojb LEFT OUTER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;             ON cust_xref.cust_acct_num = rojb.cust_acct_no_ojb&lt;br/&gt;           AND cust_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_service_address_vantage_xref addr_xref&lt;br/&gt;             ON addr_xref.hs_key = rojb.hse_key_ojb&lt;br/&gt;           AND addr_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_busn_intrn_vnt_job_xref job_xref&lt;br/&gt;             ON job_xref.order_num = rojb.order_no_ojb&lt;br/&gt;           AND job_xref.job_seq_num = rojb.job_seq_no_ojb&lt;br/&gt;           AND job_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;             ON ord_xref.ord_no = rojb.order_no_ojb&lt;br/&gt;             --Commented below as to make the Dev code in sync with 02S SIT code on 23-FEB-2015 : Part 2 out of 3&lt;br/&gt;             --LEFT OUTER JOIN t_bus_interact bi&lt;br/&gt;             --ON bi.bus_interact_id = job_xref.bus_interact_id&lt;br/&gt;             --AND bi.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_request r&lt;br/&gt;             --Commented below as to make the Dev code in sync with 02S SIT code on 23-FEB-2015 : Part 3 out of 3&lt;br/&gt;             --ON r.request_interaction_id = bi.bus_interact_id&lt;br/&gt;             ON r.request_interaction_id = ord_xref.bus_interact_id&lt;br/&gt;       WHERE rojb.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (rojb.ROWID, LENGTH (rojb.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   --AND MOD(rojb.sys_ojb,g_max_thread ) = (g_reminder_thread - 1);&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_order_no        IN              t_busn_intrn_vnt_job_xref.order_num%TYPE,&lt;br/&gt;      p_sequence_no     IN              t_busn_intrn_vnt_job_xref.job_seq_num%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_completion (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_recon_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_recon_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   --PROCEDURE update_staging (&lt;br/&gt;   --   p_process_rec_i IN  pkg_logging.t_process_rec,&lt;br/&gt;   --   p_cursor_data_i IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;   --   p_audit_user_i   IN  VARCHAR2&lt;br/&gt;   --);&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /***************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure process&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This will procedure will open the cursor and process each record to create stub customer&lt;br/&gt;      ||                       as needed to support the job, update the order, create the order and committing the&lt;br/&gt;      ||                       batch.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name                  := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data                 t_cursor_data_tbl;&lt;br/&gt;      l_bus_interact                t_bus_interact%ROWTYPE;&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_recon_ojb_jobs%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_recon_ojb_jobs;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_recon_ojb_jobs;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_recon_ojb_jobs&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  create_customer (l_process_rec,&lt;br/&gt;                                   p_audit_user_i,&lt;br/&gt;                                   l_cursor_data (i)&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;                  IF (l_cursor_data (i).bus_interact_id IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     -- lookup the work order in case it was created earlier in the run&lt;br/&gt;                     IF (get_bus_interact (l_process_rec,&lt;br/&gt;                                           l_cursor_data (i).order_no,&lt;br/&gt;                                           l_cursor_data (i).sequence_num,&lt;br/&gt;                                           l_bus_interact&lt;br/&gt;                                          )&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        -- update the order&lt;br/&gt;                        l_cursor_data (i).bus_interact_id :=&lt;br/&gt;                                               l_bus_interact.bus_interact_id;&lt;br/&gt;                        l_cursor_data (i).bus_interact_type_cd :=&lt;br/&gt;                                          l_bus_interact.bus_interact_type_cd;&lt;br/&gt;                        update_work_order (l_process_rec,&lt;br/&gt;                                           p_audit_user_i,&lt;br/&gt;                                           l_cursor_data (i)&lt;br/&gt;                                          );&lt;br/&gt;                     ELSE&lt;br/&gt;                        -- create the order&lt;br/&gt;                        create_work_order (l_process_rec,&lt;br/&gt;                                           p_audit_user_i,&lt;br/&gt;                                           l_cursor_data (i)&lt;br/&gt;                                          );&lt;br/&gt;                     END IF;&lt;br/&gt;                  ELSE&lt;br/&gt;                     -- update the order&lt;br/&gt;                     update_work_order (l_process_rec,&lt;br/&gt;                                        p_audit_user_i,&lt;br/&gt;                                        l_cursor_data (i)&lt;br/&gt;                                       );&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  update_staging (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;                  COMMIT;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;                     g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                          (l_process_rec,&lt;br/&gt;                                              l_proc_name&lt;br/&gt;                                           || &apos;, ORDER_NO_OJB = &apos;&lt;br/&gt;                                           || l_cursor_data (i).order_no&lt;br/&gt;                                           || &apos;, JOB_SEQ_NO_OJB = &apos;&lt;br/&gt;                                           || l_cursor_data (i).sequence_num&lt;br/&gt;                                           || &apos;, exception = &apos;&lt;br/&gt;                                           || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                          );&lt;br/&gt;               END;&lt;br/&gt;            END LOOP;&lt;br/&gt;         -- Update the staging rows with status&lt;br/&gt;         --update_staging (l_process_rec, l_cursor_data,p_audit_user_i);&lt;br/&gt;         -- Commit the batch&lt;br/&gt;         --COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_recon_ojb_jobs;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_recon_ojb_jobs%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_recon_ojb_jobs;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_recon_ojb_jobs%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_recon_ojb_jobs;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_recon_ojb_jobs%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_recon_ojb_jobs;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                               );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure create_customer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will create customer if doesn&apos;t exist by adding party,customer and&lt;br/&gt;      ||                       party_vantage_xref records.&lt;br/&gt;      ********************************************************************************************************************/&lt;br/&gt;      l_proc_name     t_unit_name := &apos;CREATE_CUSTOMER&apos;;&lt;br/&gt;      l_account_id    NUMBER;&lt;br/&gt;      l_customer_id   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      -- create customer if doesn&apos;t exist&lt;br/&gt;      l_customer_id :=&lt;br/&gt;              customer_exists (p_process_rec_i, p_cursor_row_io.cust_acct_num);&lt;br/&gt;&lt;br/&gt;      IF (l_customer_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos;, creating customer&apos;&lt;br/&gt;                               );&lt;br/&gt;         p_cursor_row_io.customer_id :=&lt;br/&gt;            da_party.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;--                   party_nm                    =&gt; NULL,&lt;br/&gt;                   party_subtype_cd            =&gt; NULL,&lt;br/&gt;                   party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         da_customer.ADD (p_process_rec_i,&lt;br/&gt;                          external_customer_id      =&gt; NULL,&lt;br/&gt;                          customer_id               =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                          first_contact_dt          =&gt; NULL,&lt;br/&gt;                          first_fulfillment         =&gt; NULL,&lt;br/&gt;                          first_payment             =&gt; NULL,&lt;br/&gt;                          audit_user                =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;         da_party_vantage_xref.ADD&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                               cust_acct_num      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                               party_id           =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                               audit_user         =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;         l_table_key :=&lt;br/&gt;               &apos;CUST_ACCT_NUM = &apos;&lt;br/&gt;            || p_cursor_row_io.cust_acct_num&lt;br/&gt;            || &apos;, CUSTOMER_ID&apos;&lt;br/&gt;            || p_cursor_row_io.customer_id&lt;br/&gt;            || &apos;, ORDER_NO_OJB = &apos;&lt;br/&gt;            || p_cursor_row_io.order_no&lt;br/&gt;            || &apos;, JOB_SEQ_NO_OJB = &apos;&lt;br/&gt;            || p_cursor_row_io.sequence_num;&lt;br/&gt;         pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                      (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                       p_table_name           =&gt; &apos;T_CUSTOMER&apos;,&lt;br/&gt;                       p_table_key            =&gt; l_table_key,&lt;br/&gt;                       p_modif_values         =&gt; NULL,&lt;br/&gt;                       p_account_details      =&gt; NULL,&lt;br/&gt;                       p_operation_perf       =&gt; pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      ELSE&lt;br/&gt;         p_cursor_row_io.customer_id := l_customer_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, cust_acct_num = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, cust_acct_num = &apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_customer;&lt;br/&gt;&lt;br/&gt;--   PROCEDURE create_customer (&lt;br/&gt;--      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;--      p_audit_user_i    IN              t_userid,&lt;br/&gt;--      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;--   )&lt;br/&gt;--   IS&lt;br/&gt;--      /*******************************************************************************************************************&lt;br/&gt;--      ||  SubProgram Name    : Procedure create_customer&lt;br/&gt;--      ||  Estimated Run Time :&lt;br/&gt;--      ||  Description        : This procedure will create customer if doesn&apos;t exist by adding party,customer and&lt;br/&gt;--      ||                       party_vantage_xref records.&lt;br/&gt;--      *******************************************************************************************************************/&lt;br/&gt;--      l_proc_name                 t_unit_name := &apos;CREATE_CUSTOMER&apos;;&lt;br/&gt;--      l_party_row                 t_party%ROWTYPE;&lt;br/&gt;--      l_customer_row             t_customer%ROWTYPE;&lt;br/&gt;--      l_party_vantage_xref_row  t_party_vantage_xref%ROWTYPE;&lt;br/&gt;--      l_customer_id            t_customer.customer_id%TYPE;&lt;br/&gt;--      l_party_id               t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;--      l_account_id                NUMBER;&lt;br/&gt;--      l_log_status              VARCHAR2 (1);&lt;br/&gt;--&lt;br/&gt;--&lt;br/&gt;--   BEGIN&lt;br/&gt;--      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;--                                l_proc_name&lt;br/&gt;--                             || &apos;, &apos;&lt;br/&gt;--                             || pkg_utility.c_proc_start_text&lt;br/&gt;--                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;--                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;--                            );&lt;br/&gt;--&lt;br/&gt;--        BEGIN&lt;br/&gt;--&lt;br/&gt;--            SELECT xref.party_id ,c.customer_id&lt;br/&gt;--            INTO l_party_id,l_customer_id&lt;br/&gt;--            FROM t_party_vantage_xref xref&lt;br/&gt;--            INNER JOIN t_party p ON xref.party_id  =  p.party_id&lt;br/&gt;--            left JOIN t_customer c on xref.party_id =  c.customer_id&lt;br/&gt;--            WHERE  xref.cust_acct_num = p_cursor_row_io.cust_acct_num ;&lt;br/&gt;--&lt;br/&gt;--            EXCEPTION WHEN NO_DATA_FOUND THEN NULL;&lt;br/&gt;--&lt;br/&gt;--        END;&lt;br/&gt;--           p_cursor_row_io.customer_id := l_party_id;&lt;br/&gt;--&lt;br/&gt;--            IF l_party_id IS NULL THEN&lt;br/&gt;--&lt;br/&gt;--                p_cursor_row_io.customer_id :=&lt;br/&gt;--                da_party.ADD&lt;br/&gt;--                      (p_process_rec_i,&lt;br/&gt;--                       data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;--                       source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;--                       party_nm                    =&gt; NULL,&lt;br/&gt;--                       party_subtype_cd            =&gt; NULL,&lt;br/&gt;--                       party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;--                       audit_user                  =&gt; p_audit_user_i&lt;br/&gt;--                      );&lt;br/&gt;--                l_log_status := &apos;Y&apos;;&lt;br/&gt;--            END IF;&lt;br/&gt;--&lt;br/&gt;--        IF l_party_id  IS NULL THEN&lt;br/&gt;--          da_party_vantage_xref.ADD&lt;br/&gt;--                              (p_process_rec_i,&lt;br/&gt;--                               cust_acct_num      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;--                               party_id           =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;--                               audit_user         =&gt; p_audit_user_i&lt;br/&gt;--                              );&lt;br/&gt;--                              l_log_status := &apos;Y&apos;;&lt;br/&gt;--        END IF;&lt;br/&gt;--&lt;br/&gt;--        IF l_customer_id IS NULL THEN&lt;br/&gt;--            da_customer.ADD (p_process_rec_i,&lt;br/&gt;--                external_customer_id      =&gt; NULL,&lt;br/&gt;--                customer_id               =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;--                first_contact_dt          =&gt; NULL,&lt;br/&gt;--                first_fulfillment         =&gt; NULL,&lt;br/&gt;--                first_payment             =&gt; NULL,&lt;br/&gt;--                audit_user                =&gt; p_audit_user_i&lt;br/&gt;--                );&lt;br/&gt;--                l_log_status := &apos;Y&apos;;&lt;br/&gt;--        END IF;&lt;br/&gt;--&lt;br/&gt;--&lt;br/&gt;--        IF l_log_status = &apos;Y&apos; THEN&lt;br/&gt;--&lt;br/&gt;--            l_audit_recon.operation_perf := pkg_utility.c_recon_insert_perform;&lt;br/&gt;--            l_audit_recon.table_name := &apos;T_CUSTOMER&apos;;&lt;br/&gt;--            --l_audit_recon.table_name := &apos;T_PARTY_VANTAGE_XREF&apos;;&lt;br/&gt;--            --l_table_key := &apos;CUST_ACCT_NUM=&apos;|| p_cursor_row_io.cust_acct_num ||&apos;, CUSTOMER_ID&apos; || p_cursor_row_io.customer_id;&lt;br/&gt;--            l_table_key := &apos;CUST_ACCT_NUM=&apos; ||&lt;br/&gt;--                                  p_cursor_row_io.cust_acct_num ||&lt;br/&gt;--                                  &apos;, CUSTOMER_ID&apos; ||&lt;br/&gt;--                                  p_cursor_row_io.customer_id ||&lt;br/&gt;--                                  &apos;, ORDER_NO_OJB = &apos; ||&lt;br/&gt;--                                  p_cursor_row_io.order_no ||&lt;br/&gt;--                                  &apos;, JOB_SEQ_NO_OJB = &apos; ||&lt;br/&gt;--                                  p_cursor_row_io.sequence_num;&lt;br/&gt;--            --l_audit_recon.modif_values := &apos;DATA_SOURCE_TYPE_CD=&apos;|| p_cursor_row_io.data_source_type_cd ||&apos;, &apos;||&apos;AUDIT_USER=&apos;|| p_audit_user_i;&lt;br/&gt;--            l_audit_recon.modif_values := NULL;&lt;br/&gt;--&lt;br/&gt;--            pkg_vnt_recon_process.audit_recon_process_populate(p_process_rec_i =&gt; p_process_rec_i,&lt;br/&gt;--                                                                                           p_table_name =&gt; l_audit_recon.table_name,&lt;br/&gt;--                                                                                           p_table_key =&gt; l_table_key,&lt;br/&gt;--                                                                                           p_modif_values =&gt; l_audit_recon.modif_values,&lt;br/&gt;--                                                                                           p_account_details =&gt; NULL,&lt;br/&gt;--                                                                                           p_operation_perf =&gt; l_audit_recon.operation_perf,&lt;br/&gt;--                                                                                           p_audit_user_i =&gt; p_audit_user_i&lt;br/&gt;--                                                                                           );&lt;br/&gt;--        END IF;&lt;br/&gt;--&lt;br/&gt;--      pkg_logging.log_debug (p_process_rec_i,l_proc_name || &apos;, &apos;|| pkg_utility.c_proc_end_text);&lt;br/&gt;--&lt;br/&gt;--   EXCEPTION&lt;br/&gt;--      WHEN OTHERS&lt;br/&gt;--        THEN&lt;br/&gt;--           ROLLBACK;&lt;br/&gt;--           p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;--           pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;--                                       l_proc_name&lt;br/&gt;--                                    || &apos;, cust_acct_num=&apos;&lt;br/&gt;--                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;--                                    || &apos;, exception=&apos;&lt;br/&gt;--                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;--                                   );&lt;br/&gt;--   END create_customer;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function customer_exists&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the xref.party_id as output.&lt;br/&gt;      *******************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name   t_unit_name                          := &apos;CUSTOMER_EXISTS&apos;;&lt;br/&gt;      l_party_id    t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, customer found in t_party_vantage_xref&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_party_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos;, cust_acct_num=&apos;&lt;br/&gt;                               || p_cust_acct_num&lt;br/&gt;                               || &apos;, customer NOT found in t_party_vantage_xref&apos;&lt;br/&gt;                              );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END customer_exists;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_order_no        IN              t_busn_intrn_vnt_job_xref.order_num%TYPE,&lt;br/&gt;      p_sequence_no     IN              t_busn_intrn_vnt_job_xref.job_seq_num%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function get_bus_interact&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_busn_intrn_vnt_job_xref with TRUE in return..&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BUS_INTERACT&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, p_order_no=&apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT a.*&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_busn_intrn_vnt_job_xref xref INNER JOIN t_bus_interact a&lt;br/&gt;             ON a.bus_interact_id = xref.bus_interact_id&lt;br/&gt;       WHERE xref.order_num = p_order_no AND xref.job_seq_num = p_sequence_no;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, bus_interact found&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, p_order_no=&apos;&lt;br/&gt;                                || p_order_no&lt;br/&gt;                                || &apos;,p_sequence_no=&apos;&lt;br/&gt;                                || p_sequence_no&lt;br/&gt;                                || &apos;, bus_interact NOT found&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_bus_interact;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE create_work_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will create the work order by adding the records into bus_interact,&lt;br/&gt;      ||                       t_busn_intrn_vnt_job_xref,request,work_order,work_order_status and&lt;br/&gt;      ||                       work_order_completion/cancel.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name         t_unit_name                  := &apos;CREATE_WORK_ORDER&apos;;&lt;br/&gt;      l_bus_interact_id   t_bus_interact.bus_interact_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, bus_interact_type_cd = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_type_cd&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_row_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         l_bus_interact_id :=&lt;br/&gt;            da_bus_interact.ADD&lt;br/&gt;               (p_process_rec_i,&lt;br/&gt;                data_source_type_cd             =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                source_system_id                =&gt; p_cursor_row_io.src_sys_id,&lt;br/&gt;                bus_interact_type_cd            =&gt; p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;                bus_interact_usage_type_cd      =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                audit_user                      =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;         da_busn_intrn_vnt_job_xref.ADD&lt;br/&gt;                                 (p_process_rec_i,&lt;br/&gt;                                  order_num            =&gt; p_cursor_row_io.order_no,&lt;br/&gt;                                  job_seq_num          =&gt; p_cursor_row_io.sequence_num,&lt;br/&gt;                                  bus_interact_id      =&gt; l_bus_interact_id,&lt;br/&gt;                                  audit_user           =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;         da_request.ADD (p_process_rec_i,&lt;br/&gt;                         request_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                         request_type_cd             =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                         audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;         -- work_order&lt;br/&gt;         da_work_order.ADD&lt;br/&gt;            (p_process_rec_i,&lt;br/&gt;             create_dttm                         =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;             earliest_possible_comp_dttm         =&gt; NULL,&lt;br/&gt;             technician_work_start_dttm          =&gt; NULL,&lt;br/&gt;             technician_work_end_dttm            =&gt; NULL,&lt;br/&gt;             actual_completion_dttm              =&gt; p_cursor_row_io.order_completion_ts,&lt;br/&gt;--                        installer_type_cd                   =&gt; NULL,&lt;br/&gt;             installer_type_cd                   =&gt; p_cursor_row_io.installer_type_cd,&lt;br/&gt;             service_address_id                  =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;             work_order_type_cd                  =&gt; p_cursor_row_io.work_order_type_cd,&lt;br/&gt;             completion_cd                       =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;             cancel_cd                           =&gt; p_cursor_row_io.cancel_cd,&lt;br/&gt;             comment_val                         =&gt; p_cursor_row_io.comment_val,&lt;br/&gt;             total_work_units_scheduled_qty      =&gt; p_cursor_row_io.total_work_units_scheduled_qty,&lt;br/&gt;             work_order_class_cd                 =&gt; p_cursor_row_io.work_order_class_cd,&lt;br/&gt;--                        comment_val                         =&gt; NULL,&lt;br/&gt;--                        total_work_units_scheduled_qty      =&gt; NULL,&lt;br/&gt;--                        work_order_class_cd                 =&gt; NULL,&lt;br/&gt;             work_order_id                       =&gt; l_bus_interact_id,&lt;br/&gt;             data_source_type_cd                 =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;             sequence_num                        =&gt; p_cursor_row_io.sequence_num,&lt;br/&gt;             bill_start_dt                       =&gt; NULL,&lt;br/&gt;             bill_stop_dt                        =&gt; NULL,&lt;br/&gt;             audit_user                          =&gt; p_audit_user_i&lt;br/&gt;            );&lt;br/&gt;         -- work_order_status&lt;br/&gt;         da_work_order_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_status_cd      =&gt; p_cursor_row_io.job_stat_rojb,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         da_bus_interact_party_role.ADD&lt;br/&gt;                (p_process_rec_i,&lt;br/&gt;                 bus_interact_id             =&gt; l_bus_interact_id,&lt;br/&gt;                 party_id                    =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                 party_role_cd               =&gt; &apos;CUST&apos;,&lt;br/&gt;                 data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                 source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                 bus_interact_type_cd        =&gt; p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;                 effective_dttm              =&gt; NULL,&lt;br/&gt;                 audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                );&lt;br/&gt;         da_bus_interact_related.ADD&lt;br/&gt;             (p_process_rec_i,&lt;br/&gt;              parent_bus_interact_id            =&gt; p_cursor_row_io.ord_bus_interact_id,&lt;br/&gt;              child_bus_interact_id             =&gt; l_bus_interact_id,&lt;br/&gt;              bus_interact_relationship_cd      =&gt; p_cursor_row_io.relationship_cd,&lt;br/&gt;              data_source_type_cd               =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;              audit_user                        =&gt; p_audit_user_i&lt;br/&gt;             );&lt;br/&gt;&lt;br/&gt;         -- work_order_completion/cancel&lt;br/&gt;         IF (p_cursor_row_io.job_stat_rojb IN (&apos;C&apos;, &apos;D&apos;))&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                   data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                   code_sequence_num             =&gt; 1,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                   data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                   code_sequence_num             =&gt; 2,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                   data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                   code_sequence_num             =&gt; 3,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                   data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                   code_sequence_num             =&gt; 4,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                   data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                   code_sequence_num             =&gt; 5,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                   data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                   code_sequence_num             =&gt; 6,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSIF (p_cursor_row_io.job_stat_rojb = &apos;X&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num         =&gt; 1,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num         =&gt; 2,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num         =&gt; 3,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num         =&gt; 4,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num         =&gt; 5,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num         =&gt; 6,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         l_audit_recon.table_name := &apos;T_BUS_INTERACT&apos;;&lt;br/&gt;         l_table_key :=&lt;br/&gt;               &apos;BUS_INTERACT_ID = &apos;&lt;br/&gt;            || l_bus_interact_id&lt;br/&gt;            || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;            || p_cursor_row_io.order_no;&lt;br/&gt;         pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                      (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                       p_table_name           =&gt; &apos;T_BUS_INTERACT&apos;,&lt;br/&gt;                       p_table_key            =&gt; l_table_key,&lt;br/&gt;                       p_modif_values         =&gt; NULL,&lt;br/&gt;                       p_account_details      =&gt; NULL,&lt;br/&gt;                       p_operation_perf       =&gt; pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, bus_interact_id=&apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos;, bus_interact_type_cd=&apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_type_cd&lt;br/&gt;                                    || &apos; exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_work_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_work_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update the t_work_order and t_work_order_status table.&lt;br/&gt;      ||                       Also call to insert or update the tables t_work_order_completion and  t_work_order_cancel&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name                  t_unit_name         := &apos;UPDATE_WORK_ORDER&apos;;&lt;br/&gt;      l_work_order_row             t_work_order%ROWTYPE;&lt;br/&gt;      l_interact_party_role_row    t_bus_interact_party_role%ROWTYPE;&lt;br/&gt;      l_bus_interact_related_row   t_bus_interact_related%ROWTYPE;&lt;br/&gt;      l_request_row                t_request%ROWTYPE;&lt;br/&gt;      l_log_status                 VARCHAR (1);&lt;br/&gt;      l_table_name                 VARCHAR (150);&lt;br/&gt;      l_tgt_work_order_status_cd   t_work_order_status.work_order_status_cd%TYPE;&lt;br/&gt;      l_tgt_modified_dttm          t_work_order_status.modified_dttm%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                            );&lt;br/&gt;      l_audit_recon.operation_perf := NULL;&lt;br/&gt;      l_audit_recon.modif_values := NULL;&lt;br/&gt;      l_log_ind := &apos;N&apos;;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_row_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_request_row&lt;br/&gt;              FROM t_request&lt;br/&gt;             WHERE request_interaction_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_request.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   request_interaction_id      =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   request_type_cd             =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_work_order_row&lt;br/&gt;              FROM t_work_order&lt;br/&gt;             WHERE work_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;            IF     NVL (l_work_order_row.modified_dttm,&lt;br/&gt;                        pkg_utility.c_recon_null_dttm&lt;br/&gt;                       ) &lt; l_current_recon_start_time&lt;br/&gt;               AND (   NVL (l_work_order_row.create_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_dttm&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.order_create_ts,&lt;br/&gt;                               pkg_utility.c_recon_null_dttm&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_work_order_row.actual_completion_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_dttm&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.order_completion_ts,&lt;br/&gt;                               pkg_utility.c_recon_null_dttm&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_work_order_row.installer_type_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.installer_type_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_work_order_row.comment_val,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.comment_val,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_work_order_row.total_work_units_scheduled_qty,&lt;br/&gt;                            pkg_utility.c_recon_null_number&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.total_work_units_scheduled_qty,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_work_order_row.work_order_class_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.work_order_class_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_work_order_row.service_address_id,&lt;br/&gt;                            pkg_utility.c_recon_null_number&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.service_address_id,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              )&lt;br/&gt;                    OR l_work_order_row.work_order_type_cd &lt;&gt;&lt;br/&gt;                                            p_cursor_row_io.work_order_type_cd&lt;br/&gt;                    OR l_work_order_row.data_source_type_cd &lt;&gt;&lt;br/&gt;                                           p_cursor_row_io.data_source_type_cd&lt;br/&gt;                    OR NVL (l_work_order_row.completion_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.completion_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_work_order_row.cancel_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.cancel_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR l_work_order_row.sequence_num &lt;&gt;&lt;br/&gt;                                                  p_cursor_row_io.sequence_num&lt;br/&gt;                   )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_work_order&lt;br/&gt;                  SET create_dttm = p_cursor_row_io.order_create_ts,&lt;br/&gt;                      actual_completion_dttm =&lt;br/&gt;                                           p_cursor_row_io.order_completion_ts,&lt;br/&gt;                      installer_type_cd = p_cursor_row_io.installer_type_cd,&lt;br/&gt;                      service_address_id = p_cursor_row_io.service_address_id,&lt;br/&gt;                      work_order_type_cd = p_cursor_row_io.work_order_type_cd,&lt;br/&gt;                      completion_cd = p_cursor_row_io.completion_cd,&lt;br/&gt;                      cancel_cd = p_cursor_row_io.cancel_cd,&lt;br/&gt;                      comment_val = p_cursor_row_io.comment_val,&lt;br/&gt;                      total_work_units_scheduled_qty =&lt;br/&gt;                                p_cursor_row_io.total_work_units_scheduled_qty,&lt;br/&gt;                      work_order_class_cd =&lt;br/&gt;                                           p_cursor_row_io.work_order_class_cd,&lt;br/&gt;                      data_source_type_cd =&lt;br/&gt;                                           p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                      sequence_num = p_cursor_row_io.sequence_num,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE work_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;               l_log_ind := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_audit_recon.operation_perf := pkg_utility.c_recon_update_perform;&lt;br/&gt;            l_audit_recon.modif_values :=&lt;br/&gt;                  &apos;DATA_SOURCE_TYPE_CD = &apos;&lt;br/&gt;               || p_cursor_row_io.data_source_type_cd&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;WORK_ORDER_ID&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.job_stat_rojb&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;WORK_ORDER_TYPE_CD&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.work_order_type_cd&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;SOURCE_SYSTEM_ID&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.order_no&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;BUS_INTERACT_TYPE_CD&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.bus_interact_type_cd&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;BUS_INTERACT_ID&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.bus_interact_id;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   create_dttm                         =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;                   earliest_possible_comp_dttm         =&gt; NULL,&lt;br/&gt;                   technician_work_start_dttm          =&gt; NULL,&lt;br/&gt;                   technician_work_end_dttm            =&gt; NULL,&lt;br/&gt;                   actual_completion_dttm              =&gt; p_cursor_row_io.order_completion_ts,&lt;br/&gt;                   installer_type_cd                   =&gt; p_cursor_row_io.installer_type_cd,&lt;br/&gt;                   service_address_id                  =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;                   work_order_type_cd                  =&gt; p_cursor_row_io.work_order_type_cd,&lt;br/&gt;                   completion_cd                       =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;                   cancel_cd                           =&gt; p_cursor_row_io.cancel_cd,&lt;br/&gt;                   comment_val                         =&gt; p_cursor_row_io.comment_val,&lt;br/&gt;                   total_work_units_scheduled_qty      =&gt; p_cursor_row_io.total_work_units_scheduled_qty,&lt;br/&gt;                   work_order_class_cd                 =&gt; p_cursor_row_io.work_order_class_cd,&lt;br/&gt;                   work_order_id                       =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   data_source_type_cd                 =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   sequence_num                        =&gt; p_cursor_row_io.sequence_num,&lt;br/&gt;                   bill_start_dt                       =&gt; NULL,&lt;br/&gt;                   bill_stop_dt                        =&gt; NULL,&lt;br/&gt;                   audit_user                          =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_insert_perform;&lt;br/&gt;               l_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT work_order_status_cd, modified_dttm&lt;br/&gt;              INTO l_tgt_work_order_status_cd, l_tgt_modified_dttm&lt;br/&gt;              FROM t_work_order_status&lt;br/&gt;             WHERE work_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;            IF (    l_tgt_work_order_status_cd &lt;&gt;&lt;br/&gt;                                                 p_cursor_row_io.job_stat_rojb&lt;br/&gt;                AND NVL (l_tgt_modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_work_order_status&lt;br/&gt;                  SET work_order_status_cd = p_cursor_row_io.job_stat_rojb,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE work_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;               l_log_ind := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   work_order_status_cd      =&gt; p_cursor_row_io.job_stat_rojb,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_interact_party_role_row&lt;br/&gt;              FROM t_bus_interact_party_role&lt;br/&gt;             WHERE bus_interact_id = p_cursor_row_io.bus_interact_id&lt;br/&gt;               AND party_id = p_cursor_row_io.customer_id&lt;br/&gt;               AND party_role_cd = &apos;CUST&apos;;&lt;br/&gt;         -- UPDATE on T_BUS_INTERACT_PARTY_ROLE is not a valid scenario&lt;br/&gt;         --&lt;br/&gt;         --IF NVL(l_tgt_modified_dttm, pkg_utility.c_recon_null_dttm) &lt; l_current_recon_start_time AND&lt;br/&gt;         --    (NVL(l_interact_party_role_row.source_system_party_id, pkg_utility.c_recon_null_string) &lt;&gt;  NVL(p_cursor_row_io.cust_acct_num, pkg_utility.c_recon_null_string) OR&lt;br/&gt;         --     NVL(l_interact_party_role_row.bus_interact_type_cd, pkg_utility.c_recon_null_string) &lt;&gt;  NVL(p_cursor_row_io.bus_interact_type_cd, pkg_utility.c_recon_null_string)&lt;br/&gt;         --    )&lt;br/&gt;         --      THEN&lt;br/&gt;         --         UPDATE t_bus_interact_party_role&lt;br/&gt;         --            SET source_system_party_id = p_cursor_row_io.cust_acct_num,&lt;br/&gt;         --                  bus_interact_type_cd = p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;         --                  modified_dttm = SYSTIMESTAMP,&lt;br/&gt;         --                  modified_by = p_audit_user_i&lt;br/&gt;         --             WHERE  bus_interact_id = p_cursor_row_io.bus_interact_id&lt;br/&gt;         --               AND party_id = p_cursor_row_io.customer_id&lt;br/&gt;         --               AND party_role_cd = &apos;CUST&apos;;&lt;br/&gt;         --          l_log_ind := &apos;Y&apos;;&lt;br/&gt;         --END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_bus_interact_party_role.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   bus_interact_id             =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   party_id                    =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                   party_role_cd               =&gt; &apos;CUST&apos;,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                   bus_interact_type_cd        =&gt; p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;                   effective_dttm              =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_bus_interact_related_row&lt;br/&gt;              FROM t_bus_interact_related&lt;br/&gt;             WHERE parent_bus_interact_id =&lt;br/&gt;                                           p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;               AND child_bus_interact_id = p_cursor_row_io.bus_interact_id&lt;br/&gt;               AND bus_interact_relationship_cd =&lt;br/&gt;                                               p_cursor_row_io.relationship_cd;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_bus_interact_related.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   parent_bus_interact_id            =&gt; p_cursor_row_io.ord_bus_interact_id,&lt;br/&gt;                   child_bus_interact_id             =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   bus_interact_relationship_cd      =&gt; p_cursor_row_io.relationship_cd,&lt;br/&gt;                   data_source_type_cd               =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.job_stat_rojb IN (&apos;C&apos;, &apos;D&apos;))&lt;br/&gt;         THEN&lt;br/&gt;            update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd1,&lt;br/&gt;                                          1,&lt;br/&gt;                                          p_cursor_row_io,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd2,&lt;br/&gt;                                          2,&lt;br/&gt;                                          p_cursor_row_io,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd3,&lt;br/&gt;                                          3,&lt;br/&gt;                                          p_cursor_row_io,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd4,&lt;br/&gt;                                          4,&lt;br/&gt;                                          p_cursor_row_io,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd5,&lt;br/&gt;                                          5,&lt;br/&gt;                                          p_cursor_row_io,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd6,&lt;br/&gt;                                          6,&lt;br/&gt;                                          p_cursor_row_io,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;         ELSIF (p_cursor_row_io.job_stat_rojb = &apos;X&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd1,&lt;br/&gt;                                      1,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd2,&lt;br/&gt;                                      2,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd3,&lt;br/&gt;                                      3,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd4,&lt;br/&gt;                                      4,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd5,&lt;br/&gt;                                      5,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd6,&lt;br/&gt;                                      6,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (l_log_ind = &apos;Y&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            l_table_key :=&lt;br/&gt;                  &apos;BUS_INTERACT_ID = &apos;&lt;br/&gt;               || p_cursor_row_io.bus_interact_id&lt;br/&gt;               || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;               || p_cursor_row_io.order_no;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_WORK_ORDER&apos;,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, bus_interact_id=&apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos; ,exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END update_work_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_recon_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_work_order_cancel&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update work order cancel.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name     := &apos;UPDATE_WORK_ORDER_CANCEL&apos;;&lt;br/&gt;      l_cancel                  t_work_order_cancel%ROWTYPE;&lt;br/&gt;      l_tgt_code_sequence_num   t_work_order_cancel.code_sequence_num%TYPE;&lt;br/&gt;      l_tgt_modified_dttm       t_work_order_cancel.modified_dttm%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_row_i.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT a.*&lt;br/&gt;              INTO l_cancel&lt;br/&gt;              FROM t_work_order_cancel a&lt;br/&gt;             WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;            IF (p_code_i IS NULL)&lt;br/&gt;            THEN&lt;br/&gt;               IF (l_cancel.record_stat = pkg_utility.c_record_active)&lt;br/&gt;               THEN&lt;br/&gt;                  da_work_order_cancel.del&lt;br/&gt;                      (p_process_rec_i,&lt;br/&gt;                       work_order_id             =&gt; l_cancel.work_order_id,&lt;br/&gt;                       work_order_cancel_cd      =&gt; l_cancel.work_order_cancel_cd,&lt;br/&gt;                       data_source_type_cd       =&gt; l_cancel.data_source_type_cd,&lt;br/&gt;                       code_sequence_num         =&gt; l_cancel.code_sequence_num,&lt;br/&gt;                       audit_user                =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               SELECT code_sequence_num, modified_dttm&lt;br/&gt;                 INTO l_tgt_code_sequence_num, l_tgt_modified_dttm&lt;br/&gt;                 FROM t_work_order_cancel&lt;br/&gt;                WHERE work_order_id = p_bus_interact_id_i&lt;br/&gt;                  AND data_source_type_cd = l_cancel.data_source_type_cd&lt;br/&gt;                  AND work_order_cancel_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;               IF (    l_tgt_code_sequence_num &lt;&gt; p_sequence_i&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_work_order_cancel&lt;br/&gt;                     SET code_sequence_num = p_sequence_i,&lt;br/&gt;                         modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE work_order_id = p_bus_interact_id_i&lt;br/&gt;                     AND data_source_type_cd = l_cancel.data_source_type_cd&lt;br/&gt;                     AND work_order_cancel_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;                  l_log_ind := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                                 (p_process_rec_i,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos; &apos;&lt;br/&gt;                                  || pkg_utility.c_proc_end_text&lt;br/&gt;                                  || &apos; Record found in T_WORK_ORDER_CANCEL table&apos;&lt;br/&gt;                                 );&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               IF (p_code_i IS NOT NULL)&lt;br/&gt;               THEN&lt;br/&gt;                  da_work_order_cancel.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      work_order_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                      work_order_cancel_cd      =&gt; p_code_i,&lt;br/&gt;                      data_source_type_cd       =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                      code_sequence_num         =&gt; p_sequence_i,&lt;br/&gt;                      audit_user                =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos; &apos;&lt;br/&gt;                              || pkg_utility.c_proc_end_text&lt;br/&gt;                              || &apos; Record Not found in T_WORK_ORDER_CANCEL table&apos;&lt;br/&gt;                             );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END update_work_order_cancel;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_completion (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_recon_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_work_order_completion&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update work order completion.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name    t_unit_name            := &apos;UPDATE_WORK_ORDER_COMPLETION&apos;;&lt;br/&gt;      l_completion   t_work_order_completion%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                             || &apos;, p_code_i=&apos;&lt;br/&gt;                             || p_code_i&lt;br/&gt;                             || &apos;, p_sequence_i=&apos;&lt;br/&gt;                             || p_sequence_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_row_i.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT a.*&lt;br/&gt;                 INTO l_completion&lt;br/&gt;                 FROM t_work_order_completion a&lt;br/&gt;                WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;                  AND a.data_source_type_cd =&lt;br/&gt;                                            p_cursor_row_i.data_source_type_cd&lt;br/&gt;                  AND a.code_sequence_num = p_sequence_i&lt;br/&gt;                  AND a.work_order_category_cd = p_cursor_row_i.category_cd;&lt;br/&gt;&lt;br/&gt;               IF (l_completion.record_stat = pkg_utility.c_record_active)&lt;br/&gt;               THEN&lt;br/&gt;                  da_work_order_completion.del&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      work_order_id                 =&gt; l_completion.work_order_id,&lt;br/&gt;                      work_order_completion_cd      =&gt; l_completion.work_order_completion_cd,&lt;br/&gt;                      data_source_type_cd           =&gt; l_completion.data_source_type_cd,&lt;br/&gt;                      work_order_category_cd        =&gt; p_cursor_row_i.category_cd,&lt;br/&gt;                      audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  NULL;&lt;br/&gt;            --No data exist for the seq_num. So no action required&lt;br/&gt;            END;&lt;br/&gt;         ELSE&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT a.*&lt;br/&gt;                 INTO l_completion&lt;br/&gt;                 FROM t_work_order_completion a&lt;br/&gt;                WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;                  AND a.data_source_type_cd =&lt;br/&gt;                                            p_cursor_row_i.data_source_type_cd&lt;br/&gt;                  AND a.work_order_completion_cd = p_code_i&lt;br/&gt;                  AND a.work_order_category_cd = p_cursor_row_i.category_cd;&lt;br/&gt;&lt;br/&gt;               IF     NVL (l_completion.code_sequence_num, 0) &lt;&gt; p_sequence_i&lt;br/&gt;                  AND NVL (l_completion.modified_dttm,&lt;br/&gt;                           pkg_utility.c_recon_null_dttm&lt;br/&gt;                          ) &lt; l_current_recon_start_time&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_work_order_completion a&lt;br/&gt;                     SET a.code_sequence_num = p_sequence_i,&lt;br/&gt;                         a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                         a.modified_by = p_audit_user_i&lt;br/&gt;                   WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;                     AND a.data_source_type_cd =&lt;br/&gt;                                              l_completion.data_source_type_cd&lt;br/&gt;                     AND a.work_order_completion_cd = p_code_i&lt;br/&gt;                     AND a.work_order_category_cd = p_cursor_row_i.category_cd;&lt;br/&gt;&lt;br/&gt;                  l_log_ind := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_end_text&lt;br/&gt;                                     );&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  IF (p_code_i IS NOT NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     da_work_order_completion.ADD&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                         work_order_id                 =&gt; p_bus_interact_id_i,&lt;br/&gt;                         work_order_completion_cd      =&gt; p_code_i,&lt;br/&gt;                         data_source_type_cd           =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                         work_order_category_cd        =&gt; p_cursor_row_i.category_cd,&lt;br/&gt;                         code_sequence_num             =&gt; p_sequence_i,&lt;br/&gt;                         audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                  END IF;&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;   END update_work_order_completion;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_staging&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.vnt_ojb_jobs_rec_delta.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_ojb_jobs_rec_delta&lt;br/&gt;            SET record_load_cd =&lt;br/&gt;                   NVL (p_cursor_row_io.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_row_io.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ORDER_NO_OJB = &apos;&lt;br/&gt;                                       || p_cursor_row_io.order_no&lt;br/&gt;                                       || &apos;, JOB_SEQ_NO_OJB = &apos;&lt;br/&gt;                                       || p_cursor_row_io.sequence_num&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF NVL (p_cursor_row_io.record_load_cd, pkg_utility.c_stg_processed) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF p_cursor_row_io.record_load_cd = pkg_utility.c_stg_error&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;&lt;br/&gt;END pkg_vnt_recon_ojb_jobs;</source>
</body>
</PackageOracle>
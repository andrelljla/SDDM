<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_HSM_MEMO" directorySegmentName="seg_6" id="F06EBF4D-F37B-7286-635F-4EE4D53D31BA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_HSM_MEMO</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:18 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_HSM_MEMO&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  PROGRAM NAME    : PKG_VNT_RECON_HSM_MEMO&lt;br/&gt;||  CREATED BY      : Cognizant&lt;br/&gt;||  CREATED DATE    : Jun-2015&lt;br/&gt;||  SUBJECT AREA    : House&lt;br/&gt;||  DESCRIPTION     : Loads House Memo data from HSM_MEMO vantage table into CHTR table&lt;br/&gt;||&lt;br/&gt;||  CHANGE LOG:&lt;br/&gt;||  CHANGED BY            CHANGED ON        CHANGE DESCRIPTION&lt;br/&gt;||  --------------------------------------  ---------------------------------------------------------------------&lt;br/&gt;||&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE initial_load (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_delta (p_audit_user_i IN VARCHAR2);&lt;br/&gt;END pkg_vnt_recon_hsm_memo;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_HSM_MEMO" id="F06EBF4D-F37B-7286-635F-4EE4D53D31BA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_HSM_MEMO</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:20 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY CHTR.PKG_VNT_RECON_HSM_MEMO&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  PROGRAM NAME    : PKG_VNT_RECON_HSM_MEMO&lt;br/&gt;   ||  CREATED BY      : Cognizant&lt;br/&gt;   ||  CREATED DATE    : Jun-2015&lt;br/&gt;   ||  SUBJECT AREA    : House&lt;br/&gt;   ||  DESCRIPTION     : Loads House Memo data from HSM_MEMO vantage table into CHTR table&lt;br/&gt;   ||&lt;br/&gt;   ||  CHANGE LOG:&lt;br/&gt;   ||  CHANGED BY            CHANGED ON        CHANGE DESCRIPTION&lt;br/&gt;   ||  --------------------------------------  ---------------------------------------------------------------------&lt;br/&gt;   ||&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;   c_bulk_errors              EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   c_pkg_name    CONSTANT t_unit_name := &apos;PKG_VNT_RECON_HSM_MEMO&apos;;&lt;br/&gt;   l_delete_flag          NUMBER      := 0;&lt;br/&gt;   l_del_rec_count        NUMBER      := 0;&lt;br/&gt;   g_process_record_cnt   NUMBER      := 0;&lt;br/&gt;   g_error_record_cnt     NUMBER      := 0;&lt;br/&gt;   g_batchsize            NUMBER      := 10000;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_hsm_memo (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_hsm_memo (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_rowid            IN   VARCHAR2,&lt;br/&gt;      p_record_load_cd   IN   stg.vnt_ecs_cus_data.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_delta_chtr (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_delta (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SUBPROGRAM NAME    : PROCEDURE CREATE_DELTA&lt;br/&gt;   ||  ESTIMATED RUN TIME :&lt;br/&gt;   ||  DESCRIPTION        : CREATE THE EQP_BASE DELTA.&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name                    := &apos;CREATE_DELTA&apos;;&lt;br/&gt;      l_process_rec   chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_curr_cnt      NUMBER;&lt;br/&gt;      l_prev_cnt      NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      chtr.pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                      &apos;P_AUDIT_USER_I=&apos; || p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;      DELETE FROM stg.vnt_hsm_memo_rec_stg;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;&lt;br/&gt;      INSERT INTO stg.vnt_hsm_memo_rec_stg&lt;br/&gt;                  (sys_hsm, prin_hsm, hse_key_hsm, memo_no_hsm, memo_hsm)&lt;br/&gt;         (SELECT sys_hsm, prin_hsm, hse_key_hsm, memo_no_hsm, memo_hsm&lt;br/&gt;            FROM stg.vnt_hsm_memo&lt;br/&gt;          MINUS&lt;br/&gt;          SELECT sys_hsm, prin_hsm, hse_key_hsm, memo_no_hsm, memo_hsm&lt;br/&gt;            FROM stg.vnt_hsm_memo_rec_prev)&lt;br/&gt;         UNION ALL&lt;br/&gt;         (SELECT sys_hsm, prin_hsm, hse_key_hsm, memo_no_hsm, memo_hsm&lt;br/&gt;            FROM stg.vnt_hsm_memo_rec_prev&lt;br/&gt;          MINUS&lt;br/&gt;          SELECT sys_hsm, prin_hsm, hse_key_hsm, memo_no_hsm, memo_hsm&lt;br/&gt;            FROM stg.vnt_hsm_memo);&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;&lt;br/&gt;      DELETE FROM stg.vnt_hsm_memo_rec_delta;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;&lt;br/&gt;      INSERT INTO stg.vnt_hsm_memo_rec_delta&lt;br/&gt;         SELECT *&lt;br/&gt;           FROM stg.vnt_hsm_memo hsm&lt;br/&gt;          WHERE EXISTS (SELECT 1&lt;br/&gt;                          FROM stg.vnt_hsm_memo_rec_stg rec&lt;br/&gt;                         WHERE hsm.hse_key_hsm = rec.hse_key_hsm&lt;br/&gt;                         );&lt;br/&gt;&lt;br/&gt;      chtr.pkg_logging.end_process (l_process_rec, &apos;SUCCESS&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         chtr.pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos;, EXCEPTION=&apos;&lt;br/&gt;                                         || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                        );&lt;br/&gt;         chtr.pkg_logging.end_process (l_process_rec, &apos;FAILURE&apos;);&lt;br/&gt;         RAISE;&lt;br/&gt;   END create_delta;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   AS&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_audit_user     t_userid;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_audit_user := NVL (p_audit_user_i, c_pkg_name);&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_process_name;&lt;br/&gt;      pkg_logging.begin_process (p_process_rec_io      =&gt; l_process_rec,&lt;br/&gt;                                 p_parm_in_i           =&gt;    &apos;, P_AUDIT_USER_I = &apos;&lt;br/&gt;                                                          || l_audit_user&lt;br/&gt;                                );&lt;br/&gt;      create_delta_chtr (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                         p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                        );&lt;br/&gt;      load_hsm_memo (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                     p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                    );&lt;br/&gt;      pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                               p_parm_out_i         =&gt; pkg_utility.c_process_success&lt;br/&gt;                              );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, EXCEPTION=&apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                  p_parm_out_i         =&gt; pkg_utility.c_process_error&lt;br/&gt;                                 );&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_hsm_memo (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SUBPROGRAM NAME    : LOAD_OFFERING&lt;br/&gt;      ||  ESTIMATED RUN TIME :&lt;br/&gt;      ||  DESCRIPTION        : THIS PROCEDURE IS TO LOAD SOLODB CORE REFERENCE TABLE T_OFFERING FROM THE&lt;br/&gt;      ||                       STAGING TABLE EPC_OFFER. THIS IS A INSERT/UPDATE PROCESS&lt;br/&gt;      ||                       WISH SOFT DELETE.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name         t_unit_name := &apos;LOAD_HSM_MEMO&apos;;&lt;br/&gt;      l_systimestamp      TIMESTAMP;&lt;br/&gt;      l_insert_count      NUMBER      := 0;&lt;br/&gt;      l_update_count      NUMBER      := 0;&lt;br/&gt;      l_delete_count      NUMBER      := 0;&lt;br/&gt;      l_exception_count   NUMBER      := 0;&lt;br/&gt;      l_memo_id           NUMBER;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_hsm_memo&lt;br/&gt;      IS&lt;br/&gt;         SELECT memo.memo_no_hsm AS memo_no_hsm, memo.memo_hsm AS memo_hsm,&lt;br/&gt;                memo.hse_key_hsm AS hse_key_hsm, memo.ROWID AS src_rwoid,&lt;br/&gt;                 xref.address_id AS address_id,&lt;br/&gt;                memo_tar.memo_no AS tar_memo_no,&lt;br/&gt;                -- memo_tar.address_id AS address_id,&lt;br/&gt;                memo_tar.memo_id AS memo_id, memo_tar.memo_txt AS memo_txt,&lt;br/&gt;                memo_tar.record_stat_tar AS record_stat&lt;br/&gt;           FROM stg.vnt_hsm_memo_rec_delta memo INNER JOIN  chtr.t_service_address_vantage_xref xref&lt;br/&gt;           on memo.hse_key_hsm = xref.hs_key&lt;br/&gt;                      FULL OUTER JOIN stg.stg_address_memo_delta memo_tar&lt;br/&gt;                ON memo.hse_key_hsm = memo_tar.hse_key_hsm&lt;br/&gt;                and memo_tar.address_id =  xref.address_id&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_hsm_memo&lt;br/&gt;      LOOP&lt;br/&gt;         BEGIN&lt;br/&gt;            l_delete_flag := 0;&lt;br/&gt;&lt;br/&gt;            IF (cur_rec.memo_id IS NULL and cur_rec.memo_no_hsm is not null)&lt;br/&gt;            THEN&lt;br/&gt;               -- INSERT NEW RECORDS&lt;br/&gt;               l_memo_id :=&lt;br/&gt;                  da_memo.ADD (process_rec       =&gt; p_process_rec_i,&lt;br/&gt;                               memo_type_cd      =&gt; &apos;ADDR&apos;,&lt;br/&gt;                               memo_persist      =&gt; &apos;Y&apos;,&lt;br/&gt;                               memo_seq_no       =&gt; cur_rec.memo_no_hsm,&lt;br/&gt;                               memo_txt          =&gt; cur_rec.memo_hsm,&lt;br/&gt;                               entered_by        =&gt; NULL,&lt;br/&gt;                               entered_dttm      =&gt; NULL,&lt;br/&gt;                               audit_user        =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               da_address_memo.ADD (process_rec      =&gt; p_process_rec_i,&lt;br/&gt;                                    memo_id          =&gt; l_memo_id,&lt;br/&gt;                                    address_id       =&gt; cur_rec.address_id,&lt;br/&gt;                                    audit_user       =&gt; p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                                (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                 p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                         || &apos;, HSE_KEY_HSM = &apos;&lt;br/&gt;                                                         || cur_rec.hse_key_hsm&lt;br/&gt;                                                         || &apos;, L_MEMO_ID = &apos;&lt;br/&gt;                                                         || NVL&lt;br/&gt;                                                               (cur_rec.address_id,&lt;br/&gt;                                                                l_memo_id&lt;br/&gt;                                                               )&lt;br/&gt;                                                         || &apos;, STATUS = NEW RECORD INSERTED&apos;&lt;br/&gt;                                );&lt;br/&gt;            ELSIF (    (cur_rec.memo_id IS NOT NULL and cur_rec.memo_no_hsm is not null )&lt;br/&gt;                   AND (cur_rec.memo_no_hsm = cur_rec.tar_memo_no)&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               IF (cur_rec.memo_hsm &lt;&gt; cur_rec.memo_txt)&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE chtr.t_memo&lt;br/&gt;                     SET memo_txt = cur_rec.memo_hsm,&lt;br/&gt;                         record_stat = &apos;A&apos;,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         modified_dttm = l_systimestamp&lt;br/&gt;                   WHERE memo_id = cur_rec.memo_id&lt;br/&gt;                     AND memo_seq_no = cur_rec.memo_no_hsm;&lt;br/&gt;&lt;br/&gt;                  l_update_count := l_update_count + 1;&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                                (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                 p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                         || &apos;, HSE_KEY_HSM = &apos;&lt;br/&gt;                                                         || cur_rec.hse_key_hsm&lt;br/&gt;                                                         || &apos;, L_MEMO_ID = &apos;&lt;br/&gt;                                                         || NVL&lt;br/&gt;                                                               (cur_rec.address_id,&lt;br/&gt;                                                                l_memo_id&lt;br/&gt;                                                               )&lt;br/&gt;                                                         || &apos;, STATUS = NEW RECORD INSERTED&apos;&lt;br/&gt;                                );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSIF     (cur_rec.record_stat = pkg_utility.c_record_active)&lt;br/&gt;                  AND (    (cur_rec.memo_id IS NOT NULL)&lt;br/&gt;                       AND (cur_rec.tar_memo_no IS not NULL)&lt;br/&gt;                       AND (cur_rec.memo_no_hsm is null)&lt;br/&gt;                       AND (cur_rec.hse_key_hsm IS NULL)&lt;br/&gt;                      )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE chtr.t_memo&lt;br/&gt;                  SET record_stat = &apos;D&apos;,&lt;br/&gt;                      modified_by = p_audit_user_i,&lt;br/&gt;                      modified_dttm = l_systimestamp&lt;br/&gt;                WHERE memo_id = cur_rec.memo_id&lt;br/&gt;                  AND memo_seq_no = cur_rec.tar_memo_no;&lt;br/&gt;&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               COMMIT;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_delete_flag = 0&lt;br/&gt;            THEN&lt;br/&gt;               update_stg_hsm_memo (p_process_rec_i,&lt;br/&gt;                                    cur_rec.src_rwoid,&lt;br/&gt;                                    chtr.pkg_utility.c_stg_processed,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, HSE_KEY_HSM = &apos;&lt;br/&gt;                                                  || cur_rec.hse_key_hsm&lt;br/&gt;                                                  || &apos;, L_MEMO_ID = &apos;&lt;br/&gt;                                                  || NVL (cur_rec.address_id,&lt;br/&gt;                                                          l_memo_id&lt;br/&gt;                                                         )&lt;br/&gt;                                                  || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;               update_stg_hsm_memo (p_process_rec_i,&lt;br/&gt;                                    cur_rec.src_rwoid,&lt;br/&gt;                                    chtr.pkg_utility.c_stg_error,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      --MAKING ENTRY TO THE PROCESS CHILD TABLE AGAINST TOTAL PROCESSED RECORD COUNT&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --MAKING ENTRY TO THE PROCESS CHILD TABLE AGAINST TOTAL ERROR RECORD COUNT&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END load_hsm_memo;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_hsm_memo (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_rowid            IN   VARCHAR2,&lt;br/&gt;      p_record_load_cd   IN   stg.vnt_ecs_cus_data.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SUBPROGRAM NAME    : PROCEDURE UPDATE_STG_CTD_DISPLAY&lt;br/&gt;      ||  ESTIMATED RUN TIME :&lt;br/&gt;      ||  DESCRIPTION        : THIS PROCEDURE WILL UPDATE STAGING TABLE STG.EPC_OFFER.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STG_HSM_MEMO&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.vnt_hsm_memo_rec_delta s&lt;br/&gt;         SET s.record_load_cd =&lt;br/&gt;                           NVL (p_record_load_cd, pkg_utility.c_stg_processed),&lt;br/&gt;             s.record_dttm = l_systimestamp&lt;br/&gt;       WHERE s.ROWID = p_rowid;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_stg_hsm_memo;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_delta_chtr (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      l_proc_name      t_unit_name := &apos;CREATE_DELTA_CHTR&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSDATE;&lt;br/&gt;&lt;br/&gt;      DELETE FROM stg.stg_address_memo_delta;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;&lt;br/&gt;      INSERT INTO stg.stg_address_memo_delta&lt;br/&gt;         SELECT DISTINCT memo_delta.hse_key_hsm AS hse_key_hsm,&lt;br/&gt;                         xref.address_id AS address_id,&lt;br/&gt;                         memo_tar.memo_id AS memo_id,&lt;br/&gt;                         memo_tar.memo_seq_no AS memo_no,&lt;br/&gt;                         memo_tar.memo_txt AS memo_txt,&lt;br/&gt;                         memo_tar.record_stat AS record_stat_tar,&lt;br/&gt;                         &apos; &apos; AS record_load,&lt;br/&gt;                         SYSTIMESTAMP AS record_load_dttm&lt;br/&gt;                    FROM stg.vnt_hsm_memo_rec_stg memo_delta INNER JOIN chtr.t_service_address_vantage_xref xref&lt;br/&gt;                         ON memo_delta.hse_key_hsm = xref.hs_key&lt;br/&gt;                         INNER JOIN chtr.t_address_memo addr_memo&lt;br/&gt;                         ON addr_memo.address_id = xref.address_id&lt;br/&gt;                         INNER JOIN chtr.t_memo memo_tar&lt;br/&gt;                         ON memo_tar.memo_id = addr_memo.memo_id&lt;br/&gt;                         ;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END create_delta_chtr;&lt;br/&gt;&lt;br/&gt;   PROCEDURE initial_load (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      CURSOR cur_stg_hsm_memo&lt;br/&gt;      IS&lt;br/&gt;         SELECT s_memo_id.NEXTVAL AS memo_id, hse_key_hsm AS hse_key,&lt;br/&gt;                addr_xref.address_id AS address_id, memo_no_hsm,&lt;br/&gt;                TRIM (memo_hsm) AS memo_hsm, memo.ROWID AS src_rwoid,&lt;br/&gt;                record_load_cd&lt;br/&gt;           FROM stg.vnt_hsm_memo_rec_prev memo INNER JOIN chtr.t_service_address_vantage_xref addr_xref&lt;br/&gt;                ON memo.hse_key_hsm = addr_xref.hs_key&lt;br/&gt;          WHERE memo.record_load_cd IS NULL;&lt;br/&gt;&lt;br/&gt;      TYPE t_cursor_data_tbl IS TABLE OF cur_stg_hsm_memo%ROWTYPE&lt;br/&gt;         INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_action         VARCHAR2 (1)                           := &apos;I&apos;;&lt;br/&gt;      l_proc_name      t_unit_name                          := &apos;INITIAL_LOAD&apos;;&lt;br/&gt;      l_process_name   chtr.t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;     l_process_rec.process_name := c_pkg_name;&lt;br/&gt;     chtr.pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                      &apos;P_AUDIT_USER_I=&apos; || p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_hsm_memo%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_hsm_memo;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_hsm_memo;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_hsm_memo&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  INSERT INTO chtr.t_memo&lt;br/&gt;                              (memo_id, memo_type_cd, memo_persist,&lt;br/&gt;                               memo_seq_no,&lt;br/&gt;                               memo_txt, record_stat,&lt;br/&gt;                               created_dttm, created_by&lt;br/&gt;                              )&lt;br/&gt;                       VALUES (l_cursor_data (i).memo_id, &apos;ADDR&apos;, &apos;Y&apos;,&lt;br/&gt;                               l_cursor_data (i).memo_no_hsm,&lt;br/&gt;                               l_cursor_data (i).memo_hsm, &apos;A&apos;,&lt;br/&gt;                               l_systimestamp, p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               COMMIT;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN c_bulk_errors&lt;br/&gt;               THEN&lt;br/&gt;                  l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;                  FOR i IN 1 .. l_errors&lt;br/&gt;                  LOOP&lt;br/&gt;                     l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;                     l_cursor_data (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                 chtr.pkg_utility.c_stg_error;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                               (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, hse_key=&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).hse_key&lt;br/&gt;                                || &apos;, MEMO_NO_HSM=&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).memo_no_hsm&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;                  END LOOP;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  INSERT INTO chtr.t_address_memo&lt;br/&gt;                              (memo_id,&lt;br/&gt;                               address_id, record_stat,&lt;br/&gt;                               created_dttm, created_by&lt;br/&gt;                              )&lt;br/&gt;                       VALUES (l_cursor_data (i).memo_id,&lt;br/&gt;                               l_cursor_data (i).address_id, &apos;A&apos;,&lt;br/&gt;                               l_systimestamp, p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               COMMIT;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN c_bulk_errors&lt;br/&gt;               THEN&lt;br/&gt;                  l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;                  FOR i IN 1 .. l_errors&lt;br/&gt;                  LOOP&lt;br/&gt;                     NULL;&lt;br/&gt;                     l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;                     l_cursor_data (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                 chtr.pkg_utility.c_stg_error;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                               (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, hse_key=&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).hse_key&lt;br/&gt;                                || &apos;, ADDRESS_ID=&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).address_id&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;                  END LOOP;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  UPDATE stg.vnt_hsm_memo_rec_prev s&lt;br/&gt;                     SET s.record_load_cd =&lt;br/&gt;                            NVL (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                 chtr.pkg_utility.c_stg_processed&lt;br/&gt;                                )&lt;br/&gt;                   WHERE ROWID = l_cursor_data (i).src_rwoid;&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_hsm_memo;&lt;br/&gt;&lt;br/&gt;      chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                 );&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_hsm_memo%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_hsm_memo;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END initial_load;&lt;br/&gt;END pkg_vnt_recon_hsm_memo;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_OCR_ORDER_COMP" directorySegmentName="seg_6" id="8EA338CF-91DB-30F1-35A0-C8F885F1FDC2">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OCR_ORDER_COMP</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:35 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_OCR_ORDER_COMP&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name   : PKG_VNT_RECON_OCR_ORDER_COMP&lt;br/&gt;   ||  Created By     : COGNIZANT&lt;br/&gt;   ||  Created Date   : 01-FEB-2015&lt;br/&gt;   ||  Subject Area   : Order&lt;br/&gt;   ||  Description    : The package PKG_VNT_RECON_OCR_ORDER_COMP controls the reconciliation of the&lt;br/&gt;   || Vantage vnt_ocr_order table and applying those updates to SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      09-FEB-2015     Standardization Changes and Removed c_record_active&lt;br/&gt;   ||     Cognizant      20-FEB-2015     Standardization Changes On Logging&lt;br/&gt;   ||                                                Added population of T_BUS_INTERACT_PARTY_ROLE &lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;      PROCEDURE process (&lt;br/&gt;      p_audit_user_i     IN  VARCHAR2,&lt;br/&gt;      p_max_thread       NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread  NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize        NUMBER DEFAULT 1000);&lt;br/&gt;END PKG_VNT_RECON_OCR_ORDER_COMP;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_OCR_ORDER_COMP" id="8EA338CF-91DB-30F1-35A0-C8F885F1FDC2">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OCR_ORDER_COMP</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:40 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_OCR_ORDER_COMP&lt;br/&gt;IS&lt;br/&gt;    /****************************************************************************************************************&lt;br/&gt;    ||  Program Name    : PKG_VNT_RECON_OCR_ORDER_COMP&lt;br/&gt;    ||  Created By      : Cognizant&lt;br/&gt;    ||  Created Date    : 01-FEB-2015&lt;br/&gt;    ||  Subject Area    : Order&lt;br/&gt;    ||  Description     : This is for recociliation of the  Order related data from the staging table&lt;br/&gt;    ||                   &apos;VNT_OCR_ORDER_COMP&apos;&lt;br/&gt;    ||  Change log:&lt;br/&gt;    ||&lt;br/&gt;    ||    Changed By      Changed On          Change Description&lt;br/&gt;    ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;    ||     Cognizant         09-FEB-2015      Standardization Changes and Removed c_record_active&lt;br/&gt;    ||     Cognizant         20-FEB-2015      Standardization Changes On Logging&lt;br/&gt;    ||                                                    Added population of T_BUS_INTERACT_PARTY_ROLE&lt;br/&gt;    ||    Cognizant         25-FEB-2015      Independent insert handled for t_bus_interact_party_role&lt;br/&gt;    ||    Cognizant         05-MAR-2015     ADDING REQ In The bus_interact_party_role (defect 42)&lt;br/&gt;    ||    Cognizant         06-MAR-2015     Audit logging issue  (defect 29)&lt;br/&gt;    ||    Cognizant        13-MAR-2015     Table t_bus_interact removed from cursor&lt;br/&gt;    ||    Cognizant        16-MAR-2015       Syching of column level population logic between Recon and Initial of NRT/RRT Packages&lt;br/&gt;    ||    Cognizant        19-MAR-2015      Post production issue fix&lt;br/&gt;    ||   Cognizant         30-MAR-2015      Modified cursor query to support ROWID based multithreading&lt;br/&gt;    ||   Cognizant         07-Apr-2015      Code changes to remove the descrepanies between NRT/RRT , Initial Load and Reconciliation.&lt;br/&gt;    ||   Cognizant         10-Apr-2015      Trim included for character column in cursor query.&lt;br/&gt;    ||   Karthik             29-Apr-2015       Modified the table structure of T_BUS_INTERACT to have a new column&lt;br/&gt;    ||                                                    BUS_INTERACT_USAGE_TYPE_CD&lt;br/&gt;    ||    Kamal             09-Jul-2015     commented out party_nm&lt;br/&gt;    ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_pkg_name             CONSTANT t_unit_name&lt;br/&gt;                                            := &apos;PKG_VNT_RECON_OCR_ORDER_COMP&apos;;&lt;br/&gt;   c_special_request_cd   CONSTANT VARCHAR2 (1)                        := &apos;M&apos;;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors                   EXCEPTION;&lt;br/&gt;   l_audit_recon                   stg.audit_recon_process%ROWTYPE;&lt;br/&gt;   l_current_recon_start_time      stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;   l_table_key                     stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   l_log_status                    VARCHAR2 (1);&lt;br/&gt;   g_process_record_cnt            NUMBER                                := 0;&lt;br/&gt;   g_error_record_cnt              NUMBER                                := 0;&lt;br/&gt;   g_max_thread                    NUMBER                                := 1;&lt;br/&gt;   g_reminder_thread               NUMBER                                := 1;&lt;br/&gt;   g_batchsize                     NUMBER                             := 1000;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged RRT_OCR_ORDER_COMP for processing&lt;br/&gt;   CURSOR cur_stg_recon_ocr_order&lt;br/&gt;   IS&lt;br/&gt;      SELECT                                               -- staging control&lt;br/&gt;             ocr.ROWID AS ID, ocr.record_load_cd,&lt;br/&gt;&lt;br/&gt;             -- surrogate keys&lt;br/&gt;             cust_xref.party_id AS customer_id,&lt;br/&gt;             addr_xref.address_id AS service_address_id,&lt;br/&gt;             ord_xref.bus_interact_id,&lt;br/&gt;&lt;br/&gt;             -- values&lt;br/&gt;             DECODE (ocr.ord_class_ocr,&lt;br/&gt;                     c_special_request_cd, chtr.pkg_utility.c_request_type_cd_splreq,&lt;br/&gt;                     chtr.pkg_utility.c_request_type_cd_prdord&lt;br/&gt;                    ) order_type_cd,&lt;br/&gt;             ocr.cust_acct_no_ocr AS cust_acct_num,&lt;br/&gt;             ocr.order_no_ocr AS order_no,&lt;br/&gt;             TRIM (ocr.ord_stat_ocr) AS ord_stat_ocr,&lt;br/&gt;&lt;br/&gt;             --bi.bus_interact_type_cd,  --commented in 12/03/15 by Cognizant&lt;br/&gt;             CASE&lt;br/&gt;                WHEN ocr.sys_ocr = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             TRIM (ocr.compl_cde_ocr) AS completion_cd,&lt;br/&gt;             TRIM (SUBSTR (ocr.compl_cde_ocr, 1, 3)) AS completion_cd1,&lt;br/&gt;             TRIM (SUBSTR (ocr.compl_cde_ocr, 4, 3)) AS completion_cd2,&lt;br/&gt;             TRIM (SUBSTR (ocr.compl_cde_ocr, 7, 3)) AS completion_cd3,&lt;br/&gt;             TRIM (SUBSTR (ocr.compl_cde_ocr, 10, 3)) AS completion_cd4,&lt;br/&gt;             TRIM (SUBSTR (ocr.compl_cde_ocr, 13, 3)) AS completion_cd5,&lt;br/&gt;             TRIM (SUBSTR (ocr.compl_cde_ocr, 16, 3)) AS completion_cd6,&lt;br/&gt;             TRIM (ocr.ord_rsn_ocr) AS reason_cd,&lt;br/&gt;             TRIM (SUBSTR (ocr.ord_rsn_ocr, 1, 2)) AS reason_cd1,&lt;br/&gt;             TRIM (SUBSTR (ocr.ord_rsn_ocr, 3, 2)) AS reason_cd2,&lt;br/&gt;             TRIM (SUBSTR (ocr.ord_rsn_ocr, 5, 2)) AS reason_cd3,&lt;br/&gt;             TRIM (SUBSTR (ocr.ord_rsn_ocr, 7, 2)) AS reason_cd4,&lt;br/&gt;             DECODE&lt;br/&gt;                (ocr.create_dte_ocr,&lt;br/&gt;                 TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                 TO_TIMESTAMP (   TO_CHAR (ocr.create_dte_ocr, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                               || &apos;.&apos;&lt;br/&gt;                               || ocr.create_tme_ocr,&lt;br/&gt;                               &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                              )&lt;br/&gt;                ) order_create_ts,&lt;br/&gt;             DECODE&lt;br/&gt;                (ocr.compl_dte_ocr,&lt;br/&gt;                 TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                 TO_TIMESTAMP (   TO_CHAR (ocr.compl_dte_ocr, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                               || &apos;.&apos;&lt;br/&gt;                               || ocr.compl_tme_ocr,&lt;br/&gt;                               &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                              )&lt;br/&gt;                ) order_completion_ts&lt;br/&gt;        FROM stg.vnt_ocr_order_comp_rec_delta ocr LEFT OUTER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;             ON cust_xref.cust_acct_num = ocr.cust_acct_no_ocr&lt;br/&gt;           AND cust_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_service_address_vantage_xref addr_xref&lt;br/&gt;             ON addr_xref.hs_key = ocr.hse_key_ocr&lt;br/&gt;           AND addr_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;             ON ord_xref.ord_no = ocr.order_no_ocr&lt;br/&gt;           AND ord_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             --LEFT OUTER JOIN t_bus_interact bi&lt;br/&gt;                --ON bi.bus_interact_id = ord_xref.bus_interact_id&lt;br/&gt;       --AND bi.record_stat = pkg_utility.c_record_active&lt;br/&gt;      WHERE  ocr.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (ocr.ROWID, LENGTH (ocr.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   --   AND MOD (OCR.SYS_OCR, g_max_thread) = (g_reminder_thread - 1);&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_recon_ocr_order%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ocr_order%ROWTYPE&lt;br/&gt;   --p_cursor_data_i   IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ocr_order%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ocr_order%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_completion (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_prod_order_completion.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_reason (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_prod_order_reason.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_completion (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_special_request_completion.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_reason (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_special_request_reason.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure process&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for Order details coming via Reconciliation mechanism. Will go for Update if the case already&lt;br/&gt;      ||                            exists and otherewise Inserts.&lt;br/&gt;      ****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name       t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name    t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec     pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data     t_cursor_data_tbl;&lt;br/&gt;      l_svc_processed   VARCHAR2 (1);&lt;br/&gt;      l_ord_processed   VARCHAR2 (1);&lt;br/&gt;      l_bus_interact    t_bus_interact%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_recon_ocr_order%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_recon_ocr_order;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      SELECT recon_start_dttm&lt;br/&gt;        INTO l_current_recon_start_time&lt;br/&gt;        FROM stg.recon_process_ctrl&lt;br/&gt;       WHERE record_stat = pkg_utility.c_stg_in_progress;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_recon_ocr_order;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_recon_ocr_order&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos; ,Processing order_no=&apos;&lt;br/&gt;                                         || l_cursor_data (i).order_no&lt;br/&gt;                                        );&lt;br/&gt;                  create_customer (l_process_rec,&lt;br/&gt;                                   p_audit_user_i,&lt;br/&gt;                                   l_cursor_data (i)&lt;br/&gt;                                  );&lt;br/&gt;                  create_order (l_process_rec,&lt;br/&gt;                                p_audit_user_i,&lt;br/&gt;                                l_cursor_data (i)&lt;br/&gt;                               );&lt;br/&gt;                  update_staging (l_process_rec, l_cursor_data (i));&lt;br/&gt;                  COMMIT;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                         (l_process_rec,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, order_no = &apos;&lt;br/&gt;                                          || l_cursor_data (i).order_no&lt;br/&gt;                                          || &apos;, bus_interact_id = &apos;&lt;br/&gt;                                          || l_cursor_data (i).bus_interact_id&lt;br/&gt;                                          || &apos;, exception=&apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                       pkg_utility.c_stg_error;&lt;br/&gt;               END;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_recon_ocr_order;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                               );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_recon_ocr_order%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_recon_ocr_order;&lt;br/&gt;         END IF;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ocr_order%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure create_customer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is creating new customer details if not already exists.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                t_unit_name             := &apos;CREATE_CUSTOMER&apos;;&lt;br/&gt;      l_account_id               NUMBER;&lt;br/&gt;      l_customer_id              NUMBER;&lt;br/&gt;      l_party_row                t_party%ROWTYPE;&lt;br/&gt;      l_customer_row             t_customer%ROWTYPE;&lt;br/&gt;      l_party_vantage_xref_row   t_party_vantage_xref%ROWTYPE;&lt;br/&gt;      l_log_status               VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      -- create customer if doesn&apos;t exist&lt;br/&gt;      l_customer_id :=&lt;br/&gt;              customer_exists (p_process_rec_i, p_cursor_row_io.cust_acct_num);&lt;br/&gt;&lt;br/&gt;      IF (l_customer_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos;, creating customer&apos;&lt;br/&gt;                               );&lt;br/&gt;         p_cursor_row_io.customer_id :=&lt;br/&gt;            da_party.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                   --party_nm                 =&gt; NULL,&lt;br/&gt;                   party_subtype_cd            =&gt; NULL,&lt;br/&gt;                   party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         da_party_vantage_xref.ADD&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                               cust_acct_num      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                               party_id           =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                               audit_user         =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;         l_log_status := &apos;Y&apos;;&lt;br/&gt;                 ---Commented  below and added above by Cognizant on 20-Feb-2014 to move this to the join in customer_exists&lt;br/&gt;/*&lt;br/&gt;         BEGIN&lt;br/&gt;&lt;br/&gt;          SELECT *&lt;br/&gt;              INTO l_party_row&lt;br/&gt;              FROM t_party a&lt;br/&gt;             WHERE a.source_system_party_id = p_cursor_row_io.cust_acct_num;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;            p_cursor_row_io.customer_id := l_party_row.party_id;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               p_cursor_row_io.customer_id :=&lt;br/&gt;                  da_party.ADD (&lt;br/&gt;                     p_process_rec_i,&lt;br/&gt;                     data_source_type_cd      =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                     source_system_party_id   =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                     party_nm                 =&gt; NULL,&lt;br/&gt;                     party_subtype_cd         =&gt; NULL,&lt;br/&gt;                     party_child_subtype_cd   =&gt; NULL,&lt;br/&gt;                     audit_user               =&gt; p_audit_user_i);&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;         END;*/&lt;br/&gt;      ELSE&lt;br/&gt;         p_cursor_row_io.customer_id := l_customer_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT *&lt;br/&gt;           INTO l_customer_row&lt;br/&gt;           FROM t_customer a&lt;br/&gt;          WHERE a.customer_id = p_cursor_row_io.customer_id;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            da_customer.ADD (p_process_rec_i,&lt;br/&gt;                             external_customer_id      =&gt; NULL,&lt;br/&gt;                             customer_id               =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                             first_contact_dt          =&gt; NULL,&lt;br/&gt;                             first_fulfillment         =&gt; NULL,&lt;br/&gt;                             first_payment             =&gt; NULL,&lt;br/&gt;                             audit_user                =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;            l_log_status := &apos;Y&apos;;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF l_log_status = &apos;Y&apos;&lt;br/&gt;      THEN&lt;br/&gt;         l_audit_recon.operation_perf := pkg_utility.c_recon_insert_perform;&lt;br/&gt;         l_audit_recon.table_name := &apos;T_CUSTOMER&apos;;&lt;br/&gt;         l_table_key :=&lt;br/&gt;               &apos;CUST_ACCT_NUM = &apos;&lt;br/&gt;            || p_cursor_row_io.cust_acct_num&lt;br/&gt;            || &apos;, CUSTOMER_ID = &apos;&lt;br/&gt;            || p_cursor_row_io.customer_id;&lt;br/&gt;--            l_audit_recon.modif_values :=&lt;br/&gt;--                  &apos;DATA_SOURCE_TYPE_CD = &apos;&lt;br/&gt;--               || p_cursor_row_io.data_source_type_cd&lt;br/&gt;--               || &apos;, &apos;&lt;br/&gt;--               || &apos;AUDIT_USER = &apos;&lt;br/&gt;--               || p_audit_user_i;&lt;br/&gt;         pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; l_audit_recon.table_name,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, cust_acct_num=&apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos;,customer_id=&apos;&lt;br/&gt;                                    || p_cursor_row_io.customer_id&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_customer;&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function customer_exists&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : Checking whethere the customer already exists.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                          := &apos;CUSTOMER_EXISTS&apos;;&lt;br/&gt;      l_party_id    t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;/*&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num--AND xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;      ;*/--Commented above and Added below by Cognizant on 20-Feb-2015&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref INNER JOIN t_party p&lt;br/&gt;             ON xref.party_id = p.party_id&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_party_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, cust_acct_num=&apos;&lt;br/&gt;                                || p_cust_acct_num&lt;br/&gt;                                || &apos;,customer NOT found in t_party_vantage_xref&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END customer_exists;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ocr_order%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure create_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Order details specifically into the target table&lt;br/&gt;      ||                       T_BUS_INTER_VANTAGE_ORD_XREF via Bulk Load Mechanism. Creates or Update the customer&lt;br/&gt;      ||                       records according to differenct Completion Codes.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name               := &apos;CREATE_ORDER&apos;;&lt;br/&gt;      l_current_special_request   t_special_request%ROWTYPE;&lt;br/&gt;      l_special_request_status    t_special_request_status%ROWTYPE;&lt;br/&gt;      l_current_request           t_request%ROWTYPE;&lt;br/&gt;      l_customer_order_row        t_customer_order%ROWTYPE;&lt;br/&gt;      l_prod_order_row            t_prod_order%ROWTYPE;&lt;br/&gt;      l_prod_order_status_row     t_prod_order_status%ROWTYPE;&lt;br/&gt;      l_bus_interact_row          t_bus_interact%ROWTYPE;&lt;br/&gt;      l_bus_interact_id           t_bus_interact.bus_interact_id%TYPE;&lt;br/&gt;      l_bus_interact_id_role      t_bus_interact_party_role.bus_interact_id%TYPE;&lt;br/&gt;      l_count                     NUMBER;&lt;br/&gt;      l_ins_up_ind                VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, order_no=&apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                            );&lt;br/&gt;      l_bus_interact_id := &apos;&apos;;&lt;br/&gt;      l_bus_interact_id_role := &apos;&apos;;&lt;br/&gt;      l_count := &apos;&apos;;&lt;br/&gt;      l_log_status := &apos;&apos;;&lt;br/&gt;      l_ins_up_ind := &apos;&apos;;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_bus_interact_row&lt;br/&gt;           FROM t_bus_inter_vantage_ord_xref xref INNER JOIN t_bus_interact a&lt;br/&gt;                ON a.bus_interact_id = xref.bus_interact_id&lt;br/&gt;                --INNER JOIN t_request b  -- Modified by Cognizant on 25FEB2015&lt;br/&gt;--                LEFT JOIN t_request b&lt;br/&gt;--                   ON b.request_interaction_id = a.bus_interact_id&lt;br/&gt;         WHERE  xref.ord_no = p_cursor_row_io.order_no;&lt;br/&gt;&lt;br/&gt;                -- AND a.bus_interact_type_cd IN (&apos;PRORD&apos;, &apos;SPREQ&apos;) --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;--                AND b.request_type_cd IN&lt;br/&gt;--                       (pkg_utility.c_request_type_cd_prdord,&lt;br/&gt;--                        pkg_utility.c_request_type_cd_splreq);&lt;br/&gt;&lt;br/&gt;         --AND b.record_stat = pkg_utility.c_record_active&lt;br/&gt;         l_bus_interact_id := p_cursor_row_io.bus_interact_id;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            -- bus_inter_vantage_ord_xref&lt;br/&gt;            l_bus_interact_id :=&lt;br/&gt;               da_bus_interact.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd             =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_id                =&gt; p_cursor_row_io.order_no,&lt;br/&gt;                   --   bus_interact_type_cd   =&gt; p_cursor_row_io.order_type_cd,  -- Commented on 23-FEB to sync with production code&lt;br/&gt;                   bus_interact_type_cd            =&gt; pkg_utility.c_bus_interact_type_cd_req,&lt;br/&gt;                   bus_interact_usage_type_cd      =&gt; p_cursor_row_io.order_type_cd,&lt;br/&gt;                   audit_user                      =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            p_cursor_row_io.bus_interact_id := l_bus_interact_id;&lt;br/&gt;                             -- Added on 23FEB as part of  SIT defect (18) fix&lt;br/&gt;            -- Creating new customers&lt;br/&gt;            da_bus_inter_vantage_ord_xref.ADD&lt;br/&gt;                                        (p_process_rec_i,&lt;br/&gt;                                         ord_no               =&gt; p_cursor_row_io.order_no,&lt;br/&gt;                                         bus_interact_id      =&gt; l_bus_interact_id,&lt;br/&gt;                                         audit_user           =&gt; p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;            l_log_status := &apos;Y&apos;;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (l_log_status = &apos;Y&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         l_ins_up_ind := &apos;I&apos;;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_current_request&lt;br/&gt;           FROM t_request a&lt;br/&gt;          WHERE request_interaction_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;         IF (    NVL (l_current_request.request_type_cd,&lt;br/&gt;                      pkg_utility.c_recon_null_string&lt;br/&gt;                     ) &lt;&gt;&lt;br/&gt;                    NVL (p_cursor_row_io.order_type_cd,&lt;br/&gt;                         pkg_utility.c_recon_null_string&lt;br/&gt;                        )&lt;br/&gt;             AND NVL (l_current_request.modified_dttm,&lt;br/&gt;                      pkg_utility.c_recon_null_dttm&lt;br/&gt;                     ) &lt; l_current_recon_start_time&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE t_request&lt;br/&gt;               SET request_type_cd = p_cursor_row_io.order_type_cd,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE request_interaction_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;            IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;            THEN&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            da_request.ADD (p_process_rec_i,&lt;br/&gt;                            request_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                            request_type_cd             =&gt; p_cursor_row_io.order_type_cd,&lt;br/&gt;                            audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;            l_log_status := &apos;Y&apos;;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT bus_interact_id&lt;br/&gt;           INTO l_bus_interact_id_role&lt;br/&gt;           FROM t_bus_interact_party_role&lt;br/&gt;          WHERE bus_interact_id = l_bus_interact_id&lt;br/&gt;            AND party_id = p_cursor_row_io.customer_id&lt;br/&gt;            AND party_role_cd = &apos;CUST&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            da_bus_interact_party_role.ADD&lt;br/&gt;                                         -- Added by Cognizant on 20 FEB 2014&lt;br/&gt;               (p_process_rec_i,&lt;br/&gt;                bus_interact_id             =&gt; l_bus_interact_id,&lt;br/&gt;                party_id                    =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                party_role_cd               =&gt; &apos;CUST&apos;,&lt;br/&gt;                data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                -- bus_interact_type_cd        =&gt; p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;                bus_interact_type_cd        =&gt; pkg_utility.c_bus_interact_type_cd_req,&lt;br/&gt;                                                                   --Defect 42&lt;br/&gt;                effective_dttm              =&gt; NULL,&lt;br/&gt;                audit_user                  =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;            l_log_status := &apos;Y&apos;;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      -- product_order&lt;br/&gt;      IF (p_cursor_row_io.order_type_cd = pkg_utility.c_request_type_cd_prdord&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_customer_order_row&lt;br/&gt;              FROM t_customer_order a&lt;br/&gt;             WHERE a.customer_order_id = l_bus_interact_id;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_customer_order.ADD&lt;br/&gt;                                 (p_process_rec_i,&lt;br/&gt;                                  customer_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                                  customer_id                   =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                                  customer_order_type_cd        =&gt; NULL,&lt;br/&gt;                                  customer_order_action_cd      =&gt; NULL,&lt;br/&gt;                                  assigned_priority_cd          =&gt; NULL,&lt;br/&gt;                                  due_dt                        =&gt; NULL,&lt;br/&gt;                                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_prod_order_row&lt;br/&gt;              FROM t_prod_order a&lt;br/&gt;             WHERE a.product_order_id = l_bus_interact_id;&lt;br/&gt;&lt;br/&gt;            IF     (   NVL (l_prod_order_row.actual_completion_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_dttm&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.order_completion_ts,&lt;br/&gt;                               pkg_utility.c_recon_null_dttm&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_prod_order_row.product_order_create_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_dttm&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.order_create_ts,&lt;br/&gt;                               pkg_utility.c_recon_null_dttm&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_prod_order_row.reason_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.reason_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_prod_order_row.completion_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.completion_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_prod_order_row.service_address_id,&lt;br/&gt;                            pkg_utility.c_recon_null_number&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_row_io.service_address_id,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              )&lt;br/&gt;                   )&lt;br/&gt;               AND NVL (l_prod_order_row.modified_dttm,&lt;br/&gt;                        pkg_utility.c_recon_null_dttm&lt;br/&gt;                       ) &lt; l_current_recon_start_time&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_prod_order&lt;br/&gt;                  SET actual_completion_dttm =&lt;br/&gt;                                           p_cursor_row_io.order_completion_ts,&lt;br/&gt;                      product_order_create_dttm =&lt;br/&gt;                                               p_cursor_row_io.order_create_ts,&lt;br/&gt;                      reason_cd = p_cursor_row_io.reason_cd,&lt;br/&gt;                      completion_cd = p_cursor_row_io.completion_cd,&lt;br/&gt;                      service_address_id = p_cursor_row_io.service_address_id,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE product_order_id = l_bus_interact_id;&lt;br/&gt;&lt;br/&gt;               --AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                 --     l_current_recon_start_time;&lt;br/&gt;               IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;               THEN&lt;br/&gt;                  l_log_status := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id               =&gt; l_bus_interact_id,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   actual_completion_dttm         =&gt; p_cursor_row_io.order_completion_ts,&lt;br/&gt;                   product_order_create_dttm      =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;                   requested_completion_dt        =&gt; NULL,&lt;br/&gt;                   reason_cd                      =&gt; p_cursor_row_io.reason_cd,&lt;br/&gt;                   completion_cd                  =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;                   dnis_cd                        =&gt; NULL,&lt;br/&gt;                   cancel_cd                      =&gt; NULL,&lt;br/&gt;                   service_address_id             =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;                   bill_stop_dt                   =&gt; NULL,&lt;br/&gt;                   bill_start_dt                  =&gt; NULL,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_prod_order_status_row&lt;br/&gt;              FROM t_prod_order_status a&lt;br/&gt;             WHERE a.product_order_id = l_bus_interact_id;&lt;br/&gt;&lt;br/&gt;            ---- Modified as part of post production isssue fix on 19MAR2015----&lt;br/&gt;            IF (    l_prod_order_status_row.product_order_status_cd &lt;&gt;&lt;br/&gt;                                                  p_cursor_row_io.ord_stat_ocr&lt;br/&gt;                AND NVL (l_prod_order_status_row.modified_dttm,&lt;br/&gt;                         pkg_utility.c_recon_null_dttm&lt;br/&gt;                        ) &lt; l_current_recon_start_time&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_prod_order_status a&lt;br/&gt;                  SET a.product_order_status_cd = p_cursor_row_io.ord_stat_ocr,&lt;br/&gt;                      a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;                      a.modified_by = p_audit_user_i&lt;br/&gt;                --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;               WHERE  a.product_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;               --AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time;&lt;br/&gt;               --AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                 --     l_current_recon_start_time;&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_status_cd      =&gt; p_cursor_row_io.ord_stat_ocr,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            update_prod_order_completion&lt;br/&gt;                                        (p_process_rec_i,&lt;br/&gt;                                         p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                         p_cursor_row_io.completion_cd1,&lt;br/&gt;                                         p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                         1,&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;            update_prod_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd2,&lt;br/&gt;                                          p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                          2,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_prod_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd3,&lt;br/&gt;                                          p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                          3,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_prod_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd4,&lt;br/&gt;                                          p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                          4,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_prod_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd5,&lt;br/&gt;                                          p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                          5,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_prod_order_completion (p_process_rec_i,&lt;br/&gt;                                          p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                          p_cursor_row_io.completion_cd6,&lt;br/&gt;                                          p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                          6,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.reason_cd1,&lt;br/&gt;                                      p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                      1,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.reason_cd2,&lt;br/&gt;                                      p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                      2,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.reason_cd3,&lt;br/&gt;                                      p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                      3,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.reason_cd4,&lt;br/&gt;                                      p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                      4,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;         --  l_log_status := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;      ELSE&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_current_special_request&lt;br/&gt;              FROM t_special_request a&lt;br/&gt;             WHERE a.special_request_id = l_bus_interact_id;&lt;br/&gt;&lt;br/&gt;            IF (    (   NVL (l_current_special_request.actual_completion_dttm,&lt;br/&gt;                             pkg_utility.c_recon_null_dttm&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.order_completion_ts,&lt;br/&gt;                                pkg_utility.c_recon_null_dttm&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_current_special_request.create_dttm,&lt;br/&gt;                             pkg_utility.c_recon_null_dttm&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.order_create_ts,&lt;br/&gt;                                pkg_utility.c_recon_null_dttm&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_current_special_request.reason_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.reason_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_current_special_request.completion_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.completion_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_current_special_request.service_address_id,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.service_address_id,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                    )&lt;br/&gt;                AND NVL (l_current_special_request.modified_dttm,&lt;br/&gt;                         pkg_utility.c_recon_null_dttm&lt;br/&gt;                        ) &lt; l_current_recon_start_time&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_special_request&lt;br/&gt;                  SET actual_completion_dttm =&lt;br/&gt;                                           p_cursor_row_io.order_completion_ts,&lt;br/&gt;                      create_dttm = p_cursor_row_io.order_create_ts,&lt;br/&gt;                      reason_cd = p_cursor_row_io.reason_cd,&lt;br/&gt;                      completion_cd = p_cursor_row_io.completion_cd,&lt;br/&gt;                      service_address_id = p_cursor_row_io.service_address_id,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE special_request_id = l_bus_interact_id;&lt;br/&gt;&lt;br/&gt;               -- AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                 --      l_current_recon_start_time;&lt;br/&gt;               IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;               THEN&lt;br/&gt;                  l_log_status := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id           =&gt; l_bus_interact_id,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   actual_completion_dttm       =&gt; p_cursor_row_io.order_completion_ts,&lt;br/&gt;                   create_dttm                  =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;                   requested_completion_dt      =&gt; NULL,&lt;br/&gt;                   reason_cd                    =&gt; p_cursor_row_io.reason_cd,&lt;br/&gt;                   completion_cd                =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;                   dnis_cd                      =&gt; NULL,&lt;br/&gt;                   cancel_cd                    =&gt; NULL,&lt;br/&gt;                   service_address_id           =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;                   bill_stop_dt                 =&gt; NULL,&lt;br/&gt;                   bill_start_dt                =&gt; NULL,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_special_request_status&lt;br/&gt;              FROM t_special_request_status a&lt;br/&gt;             WHERE a.special_request_id = l_bus_interact_id;&lt;br/&gt;&lt;br/&gt;            IF     l_special_request_status.special_request_status_cd &lt;&gt;&lt;br/&gt;                                                  p_cursor_row_io.ord_stat_ocr&lt;br/&gt;               AND NVL (l_special_request_status.modified_dttm,&lt;br/&gt;                        pkg_utility.c_recon_null_dttm&lt;br/&gt;                       ) &lt; l_current_recon_start_time&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_special_request_status a&lt;br/&gt;                  SET a.special_request_status_cd =&lt;br/&gt;                                                  p_cursor_row_io.ord_stat_ocr,&lt;br/&gt;                      a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;                      a.modified_by = p_audit_user_i&lt;br/&gt;                --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;               WHERE  a.special_request_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;               --AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time;&lt;br/&gt;               --AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                 --     l_current_recon_start_time;&lt;br/&gt;               IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;               THEN&lt;br/&gt;                  l_log_status := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_status_cd      =&gt; p_cursor_row_io.ord_stat_ocr,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         update_spec_req_completion (p_process_rec_i,&lt;br/&gt;                                     p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                     p_cursor_row_io.completion_cd1,&lt;br/&gt;                                     p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                     1,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         update_spec_req_completion (p_process_rec_i,&lt;br/&gt;                                     p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                     p_cursor_row_io.completion_cd2,&lt;br/&gt;                                     p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                     2,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         update_spec_req_completion (p_process_rec_i,&lt;br/&gt;                                     p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                     p_cursor_row_io.completion_cd3,&lt;br/&gt;                                     p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                     3,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         update_spec_req_completion (p_process_rec_i,&lt;br/&gt;                                     p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                     p_cursor_row_io.completion_cd4,&lt;br/&gt;                                     p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                     4,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         update_spec_req_completion (p_process_rec_i,&lt;br/&gt;                                     p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                     p_cursor_row_io.completion_cd5,&lt;br/&gt;                                     p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                     5,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         update_spec_req_completion (p_process_rec_i,&lt;br/&gt;                                     p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                     p_cursor_row_io.completion_cd6,&lt;br/&gt;                                     p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                     6,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd1,&lt;br/&gt;                                 p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                 1,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd2,&lt;br/&gt;                                 p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                 2,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd3,&lt;br/&gt;                                 p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                 3,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd4,&lt;br/&gt;                                 p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                                 4,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF l_log_status = &apos;Y&apos;&lt;br/&gt;      THEN&lt;br/&gt;         l_audit_recon.table_name := &apos;T_BUS_INTERACT&apos;;&lt;br/&gt;         l_table_key :=&lt;br/&gt;                      &apos;SOURCE_SYSTEM_ID&apos; || &apos; = &apos; || p_cursor_row_io.order_no;&lt;br/&gt;&lt;br/&gt;         IF l_ins_up_ind = &apos;I&apos;&lt;br/&gt;         THEN&lt;br/&gt;            l_audit_recon.operation_perf :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;            l_audit_recon.modif_values := &apos;&apos;;&lt;br/&gt;         ELSE&lt;br/&gt;            l_audit_recon.operation_perf :=&lt;br/&gt;                                           pkg_utility.c_recon_update_perform;&lt;br/&gt;            l_audit_recon.modif_values :=&lt;br/&gt;                  &apos;DATA_SOURCE_TYPE_CD&apos;&lt;br/&gt;               || &apos; = &apos;&lt;br/&gt;               || p_cursor_row_io.data_source_type_cd&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;SOURCE_SYSTEM_ID&apos;&lt;br/&gt;               || &apos; = &apos;&lt;br/&gt;               || p_cursor_row_io.order_no&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;bus_interact_type_cd&apos;&lt;br/&gt;               || &apos; = &apos;&lt;br/&gt;               || pkg_utility.c_bus_interact_type_cd_req&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;BUS_INTERACT_ID&apos;&lt;br/&gt;               || &apos; = &apos;&lt;br/&gt;               || l_bus_interact_id&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;AUDIT_USER = &apos;&lt;br/&gt;               || p_audit_user_i;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; l_audit_recon.table_name,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, order_no=&apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos;, bus_interact_id=&apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos;, bus_interact_type_cd= &apos;&lt;br/&gt;                                    || pkg_utility.c_bus_interact_type_cd_req&lt;br/&gt;                                    --  || p_cursor_row_io.order_type_cd-- Commented on 23-FEB to sync with production code&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_completion (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_prod_order_completion.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_prod_order_completion&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for changing Order details in the target table &apos;T_PROD_ORDER_COMPLETION&apos;.&lt;br/&gt;      || This will do soft DELETE, UPDATE and INSERT operations according to the scenario.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name    t_unit_name            := &apos;UPDATE_PROD_ORDER_COMPLETION&apos;;&lt;br/&gt;      l_completion   t_prod_order_completion%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_completion&lt;br/&gt;           FROM t_prod_order_completion a&lt;br/&gt;          WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_completion.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_completion.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id                 =&gt; l_completion.product_order_id,&lt;br/&gt;                   product_order_completion_cd      =&gt; l_completion.product_order_completion_cd,&lt;br/&gt;                   data_source_type_cd              =&gt; p_data_source_type_cd,&lt;br/&gt;                   code_sequence_num                =&gt; l_completion.code_sequence_num,&lt;br/&gt;                   audit_user                       =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_prod_order_completion a&lt;br/&gt;               SET a.product_order_completion_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i,&lt;br/&gt;                   a.record_stat = pkg_utility.c_record_active&lt;br/&gt;             WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i&lt;br/&gt;               AND a.product_order_completion_cd &lt;&gt; p_code_i&lt;br/&gt;               --               AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time;&lt;br/&gt;               AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time;&lt;br/&gt;&lt;br/&gt;            IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;            THEN&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_completion.ADD&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                product_order_id                 =&gt; p_bus_interact_id_i,&lt;br/&gt;                                product_order_completion_cd      =&gt; p_code_i,&lt;br/&gt;                                data_source_type_cd              =&gt; p_data_source_type_cd,&lt;br/&gt;                                code_sequence_num                =&gt; p_sequence_i,&lt;br/&gt;                                audit_user                       =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                         (p_process_rec_i,&lt;br/&gt;                             l_proc_name&lt;br/&gt;                          || &apos; &apos;&lt;br/&gt;                          || pkg_utility.c_proc_end_text&lt;br/&gt;                          || &apos; Record Not found in T_PROD_ORDER_COMPLETION Table&apos;&lt;br/&gt;                         );&lt;br/&gt;            END IF;&lt;br/&gt;      END;&lt;br/&gt;   END update_prod_order_completion;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_reason (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_prod_order_reason.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_prod_order_reason&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for changing Order details in the target table &apos;T_PROD_ORDER_REASON&apos;.&lt;br/&gt;      || This will do soft DELETE, UPDATE and INSERT operations according to the scenario.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                 := &apos;UPDATE_PROD_ORDER_REASON&apos;;&lt;br/&gt;      l_reason      t_prod_order_reason%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_reason&lt;br/&gt;           FROM t_prod_order_reason a&lt;br/&gt;          WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_reason.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_reason.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_reason.product_order_id,&lt;br/&gt;                   product_order_reason_cd      =&gt; l_reason.product_order_reason_cd,&lt;br/&gt;                   data_source_type_cd          =&gt; p_data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; l_reason.code_sequence_num,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_prod_order_reason a&lt;br/&gt;               SET a.product_order_reason_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i,&lt;br/&gt;                   a.record_stat = pkg_utility.c_record_active&lt;br/&gt;             WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i&lt;br/&gt;               AND a.product_order_reason_cd &lt;&gt; p_code_i&lt;br/&gt;               --               AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time;&lt;br/&gt;               AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time;&lt;br/&gt;&lt;br/&gt;            IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;            THEN&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos; Record found in T_PROD_ORDER_REASON table&apos;&lt;br/&gt;                               );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_reason.ADD&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                product_order_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                                product_order_reason_cd      =&gt; p_code_i,&lt;br/&gt;                                data_source_type_cd          =&gt; p_data_source_type_cd,&lt;br/&gt;                                code_sequence_num            =&gt; p_sequence_i,&lt;br/&gt;                                audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos; &apos;&lt;br/&gt;                              || pkg_utility.c_proc_end_text&lt;br/&gt;                              || &apos; Record Not found in T_PROD_ORDER_REASON table&apos;&lt;br/&gt;                             );&lt;br/&gt;      END;&lt;br/&gt;   END update_prod_order_reason;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_completion (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_special_request_completion.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_spec_req_completion&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for changing Order details in the target table &apos;T_SPECIAL_REQUEST_COMPLETION&apos;.&lt;br/&gt;      ||                            This will do soft DELETE, UPDATE and INSERT operations according to the scenario.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name    t_unit_name              := &apos;UPDATE_SPEC_REQ_COMPLETION&apos;;&lt;br/&gt;      l_completion   t_special_request_completion%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_completion&lt;br/&gt;           FROM t_special_request_completion a&lt;br/&gt;          WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_completion.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_completion.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id                 =&gt; l_completion.special_request_id,&lt;br/&gt;                   special_request_completion_cd      =&gt; l_completion.special_request_completion_cd,&lt;br/&gt;                   data_source_type_cd                =&gt; p_data_source_type_cd,&lt;br/&gt;                   code_sequence_num                  =&gt; l_completion.code_sequence_num,&lt;br/&gt;                   audit_user                         =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_special_request_completion a&lt;br/&gt;               SET a.special_request_completion_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i&lt;br/&gt;               AND a.special_request_completion_cd &lt;&gt; p_code_i&lt;br/&gt;               --               AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time;&lt;br/&gt;               AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time;&lt;br/&gt;&lt;br/&gt;            IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;            THEN&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos; &apos;&lt;br/&gt;                         || pkg_utility.c_proc_end_text&lt;br/&gt;                         || &apos; Record found in T_SPECIAL_REQUEST_COMPLETION table&apos;&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_completion.ADD&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                special_request_id                 =&gt; p_bus_interact_id_i,&lt;br/&gt;                                special_request_completion_cd      =&gt; p_code_i,&lt;br/&gt;                                data_source_type_cd                =&gt; p_data_source_type_cd,&lt;br/&gt;                                code_sequence_num                  =&gt; p_sequence_i,&lt;br/&gt;                                audit_user                         =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                    (p_process_rec_i,&lt;br/&gt;                        l_proc_name&lt;br/&gt;                     || &apos; &apos;&lt;br/&gt;                     || pkg_utility.c_proc_end_text&lt;br/&gt;                     || &apos; Record Not found in T_SPECIAL_REQUEST_COMPLETION table&apos;&lt;br/&gt;                    );&lt;br/&gt;            END IF;&lt;br/&gt;      END;&lt;br/&gt;   END update_spec_req_completion;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_reason (&lt;br/&gt;      p_process_rec_i         IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i     IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i                IN   VARCHAR2,&lt;br/&gt;      p_data_source_type_cd        t_special_request_reason.data_source_type_cd%TYPE,&lt;br/&gt;      p_sequence_i            IN   NUMBER,&lt;br/&gt;      p_audit_user_i          IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_spec_req_reason&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for changing Order details in the target table &apos;T_SPECIAL_REQUEST_REASON&apos;.&lt;br/&gt;      ||                            This will do soft DELETE, UPDATE and INSERT operations according to the scenario.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                   := &apos;UPDATE_SPEC_REQ_REASON&apos;;&lt;br/&gt;      l_reason      t_special_request_reason%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_reason&lt;br/&gt;           FROM t_special_request_reason a&lt;br/&gt;          WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_reason.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_reason.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_reason.special_request_id,&lt;br/&gt;                   special_request_reason_cd      =&gt; l_reason.special_request_reason_cd,&lt;br/&gt;                   data_source_type_cd            =&gt; p_data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; l_reason.code_sequence_num,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_special_request_reason a&lt;br/&gt;               SET a.special_request_reason_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i&lt;br/&gt;               AND a.special_request_reason_cd &lt;&gt; p_code_i&lt;br/&gt;               --AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time;&lt;br/&gt;               AND NVL (modified_dttm, pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time;&lt;br/&gt;&lt;br/&gt;            IF SQL%ROWCOUNT &gt; 0&lt;br/&gt;            THEN&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos; Record found in T_SPECIAL_REQUEST_REASON table&apos;&lt;br/&gt;                            );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_reason.ADD&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                special_request_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                                special_request_reason_cd      =&gt; p_code_i,&lt;br/&gt;                                data_source_type_cd            =&gt; p_data_source_type_cd,&lt;br/&gt;                                code_sequence_num              =&gt; p_sequence_i,&lt;br/&gt;                                audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;               l_log_status := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos; &apos;&lt;br/&gt;                         || pkg_utility.c_proc_end_text&lt;br/&gt;                         || &apos; Record Not found in T_SPECIAL_REQUEST_REASON table&apos;&lt;br/&gt;                        );&lt;br/&gt;      END;&lt;br/&gt;   END update_spec_req_reason;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_recon_ocr_order%ROWTYPE&lt;br/&gt;   --p_cursor_data_i   IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for Updating the Staging table &apos;VNT_RRT_OCR_ORDER_COMP&apos; with&lt;br/&gt;      ||                            &apos;Record_Load_cd&apos; = &apos;P&apos; for the successful reocrds.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_ocr_order_comp_rec_delta&lt;br/&gt;            SET record_load_cd =&lt;br/&gt;                   NVL (p_cursor_row_io.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_row_io.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                       || p_cursor_row_io.order_no&lt;br/&gt;                                       || &apos;ROWID  = &apos;&lt;br/&gt;                                       || p_cursor_row_io.ID&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_row_io.record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_cursor_row_io.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_recon_ocr_order_comp;</source>
</body>
</PackageOracle>
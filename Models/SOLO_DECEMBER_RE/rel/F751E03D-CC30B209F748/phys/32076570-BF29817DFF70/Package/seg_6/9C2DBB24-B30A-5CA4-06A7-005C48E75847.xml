<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_EQP_BASE" directorySegmentName="seg_6" id="9C2DBB24-B30A-5CA4-06A7-005C48E75847">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_EQP_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:11 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_EQP_BASE&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_recon_eqp_base&lt;br/&gt;||  Created By      : knoll&lt;br/&gt;||  Created Date    : FEB-2015&lt;br/&gt;||  Subject Area    : Equipment&lt;br/&gt;||  Description     : Update SOLO equipment with any eqp_base changes that were missed in NRT processing.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||  Karthik M          04/16/2015      Modified the Proc to add an entry into the T_PROCESS_LOG_DETAIL table&lt;br/&gt;||                                      and AUDIT_RECON_PROCESS&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;END pkg_vnt_recon_eqp_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_EQP_BASE" id="9C2DBB24-B30A-5CA4-06A7-005C48E75847">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_EQP_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:13 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_EQP_BASE&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_recon_eqp_base&lt;br/&gt;||  Created By      : knoll&lt;br/&gt;||  Created Date    : FEB-2015&lt;br/&gt;||  Subject Area    : Equipment&lt;br/&gt;||  Description     : Update SOLO equipment with any eqp_base changes that were missed in NRT processing.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||  Cognizant          04/17/2015      Adding  Delete and Fix Update on t_equip_prod_inst&lt;br/&gt;||  Karthik M          04/16/2015      Modified the Proc to add an entry into the T_PROCESS_LOG_DETAIL table&lt;br/&gt;                                                     and AUDIT_RECON_PROCESS&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name       := &apos;PKG_VNT_RECON_EQP_BASE&apos;;&lt;br/&gt;   g_recon_cutoff_time          TIMESTAMP;&lt;br/&gt;   g_process_record_cnt         NUMBER                                   := 0;&lt;br/&gt;   g_error_record_cnt           NUMBER                                   := 0;&lt;br/&gt;   g_batchsize                  NUMBER                                := 1000;&lt;br/&gt;   g_max_thread                 NUMBER                                   := 1;&lt;br/&gt;   g_reminder_thread            NUMBER                                   := 1;&lt;br/&gt;   l_audit_recon                stg.audit_recon_process%ROWTYPE;&lt;br/&gt;   l_current_recon_start_time   stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;   l_table_key                  stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   CURSOR cur_eqp_base_delta&lt;br/&gt;   IS&lt;br/&gt;      SELECT   delta.data_source_type_cd,&lt;br/&gt;               TRIM (delta.eqp_serial_eqp) eqp_serial_eqp,&lt;br/&gt;               TRIM (delta.eqp_stat_eqp) eqp_stat_eqp,&lt;br/&gt;               TRIM (delta.eqp_typ_eqp) eqp_typ_eqp,&lt;br/&gt;               TRIM (delta.eqp_model_eqp) eqp_model_eqp,&lt;br/&gt;               TRIM (delta.eqp_make_eqp) eqp_make_eqp,&lt;br/&gt;               TRIM (delta.eqp_cmpnt_eqp) eqp_cmpnt_eqp,&lt;br/&gt;               TRIM (delta.eqp_addr_eqp) eqp_addr_eqp,&lt;br/&gt;               TRIM (delta.estb_addr_eqp) estb_addr_eqp,&lt;br/&gt;               NVL (delta.ls_chg_dte_eqp, TRUNC (SYSDATE)) effective_date,&lt;br/&gt;               delta.ls_chg_tme_eqp effective_time, epi.equip_prod_inst_id,&lt;br/&gt;               ec.equip_component_id, ec.equip_esn_val,&lt;br/&gt;               ec.equip_component_type_cd, ec.equip_type_cd,&lt;br/&gt;               ec.equip_mac_address_id, ec.equip_sec_mac_address_id,&lt;br/&gt;               ecs.equip_status_cd&lt;br/&gt;          FROM stg.vnt_eqp_base_rec_delta delta INNER JOIN t_equip_prod_inst epi&lt;br/&gt;               ON epi.equipment_esn_val = TRIM (delta.eqp_serial_eqp)&lt;br/&gt;               LEFT OUTER JOIN t_equip_component ec&lt;br/&gt;               ON ec.equip_prod_inst_id = epi.equip_prod_inst_id&lt;br/&gt;             AND ec.equip_type_cd = TRIM (delta.eqp_typ_eqp)&lt;br/&gt;             AND ec.equip_component_type_cd = TRIM (delta.eqp_cmpnt_eqp)&lt;br/&gt;               LEFT OUTER JOIN t_equip_component_status ecs&lt;br/&gt;               ON ecs.equip_component_id = ec.equip_component_id&lt;br/&gt;         WHERE delta.record_load_cd IS NULL&lt;br/&gt;      -- To Fetch Insert Or Update Records..&lt;br/&gt;      ORDER BY eqp_serial_eqp;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_eqp_base_delta%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_eqp_base_delete&lt;br/&gt;   IS&lt;br/&gt;      SELECT DISTINCT TRIM (delta.eqp_serial_eqp) eqp_serial_eqp,&lt;br/&gt;                      TRIM (delta.eqp_stat_eqp) eqp_stat_eqp,&lt;br/&gt;                      TRIM (delta.eqp_typ_eqp) eqp_typ_eqp,&lt;br/&gt;                      TRIM (delta.eqp_cmpnt_eqp) eqp_cmpnt_eqp,&lt;br/&gt;                      ec.equip_prod_inst_id, ec.equip_component_id&lt;br/&gt;                 FROM stg.vnt_eqp_base_rec_delta delta INNER JOIN t_equip_component ec&lt;br/&gt;                      ON ec.equip_esn_val = TRIM (delta.eqp_serial_eqp)&lt;br/&gt;                    AND ec.equip_type_cd = TRIM (delta.eqp_typ_eqp)&lt;br/&gt;                    AND ec.equip_component_type_cd =&lt;br/&gt;                                                    TRIM (delta.eqp_cmpnt_eqp)&lt;br/&gt;                WHERE delta.record_load_cd = &apos;D&apos; AND ec.record_stat = &apos;A&apos;;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl_1 IS TABLE OF cur_eqp_base_delete%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_delete (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure process&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Process the eqp_base delta.&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name                t_unit_name                     := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_rec              pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data              t_cursor_data_tbl;&lt;br/&gt;      l_inserts                  NUMBER;&lt;br/&gt;      l_equip_component_id       t_equip_component.equip_component_id%TYPE;&lt;br/&gt;      l_equip_component_status   t_equip_component_status%ROWTYPE;&lt;br/&gt;      l_settop_box_instance      t_settop_box_instance%ROWTYPE;&lt;br/&gt;      l_equip_prod_inst          t_equip_prod_inst%ROWTYPE;&lt;br/&gt;      l_equipment_product_id     t_equip_product.equipment_product_id%TYPE;&lt;br/&gt;      l_delta_key                VARCHAR2 (64);&lt;br/&gt;      l_process_cnt              NUMBER                                  := 0;&lt;br/&gt;      l_insert_cnt               NUMBER                                  := 0;&lt;br/&gt;      l_update_cnt               NUMBER                                  := 0;&lt;br/&gt;      l_settop_update_cnt        NUMBER                                  := 0;&lt;br/&gt;      l_updated                  BOOLEAN;&lt;br/&gt;      l_delete_cnt               NUMBER                                  := 0;&lt;br/&gt;      l_exception_cnt            NUMBER                                  := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                    &apos;p_audit_user_i=&apos;&lt;br/&gt;                                 || p_audit_user_i&lt;br/&gt;                                 || &apos;, g_batchsize=&apos;&lt;br/&gt;                                 || g_batchsize&lt;br/&gt;                                 || &apos;, g_max_thread=&apos;&lt;br/&gt;                                 || g_max_thread&lt;br/&gt;                                 || &apos;, g_reminder_thread=&apos;&lt;br/&gt;                                 || g_reminder_thread&lt;br/&gt;                                );&lt;br/&gt;      -- only update rows that have created/updated times less than the cutoff&lt;br/&gt;      g_recon_cutoff_time := pkg_equip_utility.recon_cutoff_time ();&lt;br/&gt;&lt;br/&gt;      -- Karthik &lt; Changes starts here&gt;&lt;br/&gt;      SELECT recon_start_dttm&lt;br/&gt;        INTO l_current_recon_start_time&lt;br/&gt;        FROM stg.recon_process_ctrl&lt;br/&gt;       WHERE record_stat = pkg_utility.c_stg_in_progress;&lt;br/&gt;&lt;br/&gt;      -- Karthik &lt; Changes ends here&gt;&lt;br/&gt;&lt;br/&gt;      ---  Delete  Missing Records&lt;br/&gt;      process_delete (p_audit_user_i =&gt; p_audit_user_i);&lt;br/&gt;&lt;br/&gt;      -- process the delta rows&lt;br/&gt;      OPEN cur_eqp_base_delta;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_eqp_base_delta&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  l_process_cnt := l_process_cnt + 1;&lt;br/&gt;                  l_delta_key :=&lt;br/&gt;                        l_cursor_data (i).eqp_serial_eqp&lt;br/&gt;                     || &apos;:&apos;&lt;br/&gt;                     || l_cursor_data (i).eqp_typ_eqp&lt;br/&gt;                     || &apos;:&apos;&lt;br/&gt;                     || l_cursor_data (i).eqp_cmpnt_eqp;&lt;br/&gt;&lt;br/&gt;                  IF (l_cursor_data (i).equip_component_id IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     -- create new equipment component&lt;br/&gt;                     pkg_logging.log_debug&lt;br/&gt;                                       (l_process_rec,&lt;br/&gt;                                           l_proc_name&lt;br/&gt;                                        || &apos;, &apos;&lt;br/&gt;                                        || l_cursor_data (i).eqp_serial_eqp&lt;br/&gt;                                        || &apos;, inserting new equipment component&apos;&lt;br/&gt;                                       );&lt;br/&gt;&lt;br/&gt;                     INSERT INTO stg.work_queue_vnt_eqp&lt;br/&gt;                                 (keycol,&lt;br/&gt;                                  valcol&lt;br/&gt;                                 )&lt;br/&gt;                          VALUES (&apos;EQUIP_PROD_INST_ID&apos;,&lt;br/&gt;                                  l_cursor_data (i).equip_prod_inst_id&lt;br/&gt;                                 );&lt;br/&gt;&lt;br/&gt;                     l_equip_component_id :=&lt;br/&gt;                        da_equip_component.ADD&lt;br/&gt;                           (process_rec                   =&gt; l_process_rec,&lt;br/&gt;                            equip_prod_inst_id            =&gt; l_cursor_data (i).equip_prod_inst_id,&lt;br/&gt;                            equip_component_type_cd       =&gt; l_cursor_data (i).eqp_cmpnt_eqp,&lt;br/&gt;                            equip_type_cd                 =&gt; l_cursor_data (i).eqp_typ_eqp,&lt;br/&gt;                            data_source_type_cd           =&gt; l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                            equip_esn_val                 =&gt; l_cursor_data (i).eqp_serial_eqp,&lt;br/&gt;                            equip_mac_address_id          =&gt; l_cursor_data (i).eqp_addr_eqp,&lt;br/&gt;                            equip_sec_mac_address_id      =&gt; l_cursor_data (i).estb_addr_eqp,&lt;br/&gt;                            audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;                     da_equip_component_status.ADD&lt;br/&gt;                        (process_rec              =&gt; l_process_rec,&lt;br/&gt;                         equip_component_id       =&gt; l_equip_component_id,&lt;br/&gt;                         equip_status_cd          =&gt; l_cursor_data (i).eqp_stat_eqp,&lt;br/&gt;                         data_source_type_cd      =&gt; l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                         effective_dttm           =&gt; l_cursor_data (i).effective_date,&lt;br/&gt;                         audit_user               =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                     l_insert_cnt := l_insert_cnt + 1;&lt;br/&gt;                  ELSE&lt;br/&gt;                     -- update existing component&lt;br/&gt;                     l_updated := FALSE;&lt;br/&gt;&lt;br/&gt;                     -- mac addresses&lt;br/&gt;                     IF (   NVL (l_cursor_data (i).eqp_addr_eqp, &apos; &apos;) &lt;&gt;&lt;br/&gt;                               NVL (l_cursor_data (i).equip_mac_address_id,&lt;br/&gt;                                    &apos; &apos;&lt;br/&gt;                                   )&lt;br/&gt;                         OR NVL (l_cursor_data (i).estb_addr_eqp, &apos; &apos;) &lt;&gt;&lt;br/&gt;                               NVL (l_cursor_data (i).equip_sec_mac_address_id,&lt;br/&gt;                                    &apos; &apos;&lt;br/&gt;                                   )&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        pkg_logging.log_debug&lt;br/&gt;                              (l_process_rec,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos;, &apos;&lt;br/&gt;                               || l_cursor_data (i).eqp_serial_eqp&lt;br/&gt;                               || &apos;, updating equipment component mac addresses&apos;&lt;br/&gt;                              );&lt;br/&gt;&lt;br/&gt;                        INSERT INTO stg.work_queue_vnt_eqp&lt;br/&gt;                                    (keycol,&lt;br/&gt;                                     valcol&lt;br/&gt;                                    )&lt;br/&gt;                             VALUES (&apos;EQUIP_PROD_INST_ID&apos;,&lt;br/&gt;                                     l_cursor_data (i).equip_prod_inst_id&lt;br/&gt;                                    );&lt;br/&gt;&lt;br/&gt;                        UPDATE t_equip_component ec&lt;br/&gt;                           SET equip_mac_address_id =&lt;br/&gt;                                                l_cursor_data (i).eqp_addr_eqp,&lt;br/&gt;                               equip_sec_mac_address_id =&lt;br/&gt;                                               l_cursor_data (i).estb_addr_eqp,&lt;br/&gt;                               modified_dttm = SYSDATE,&lt;br/&gt;                               modified_by = p_audit_user_i,&lt;br/&gt;                               record_stat = &apos;A&apos;&lt;br/&gt;                         WHERE ec.equip_component_id =&lt;br/&gt;                                          l_cursor_data (i).equip_component_id&lt;br/&gt;                           AND created_dttm &lt; g_recon_cutoff_time&lt;br/&gt;                           AND NVL (modified_dttm, g_recon_cutoff_time) &lt;=&lt;br/&gt;                                                           g_recon_cutoff_time;&lt;br/&gt;&lt;br/&gt;                        l_updated := TRUE;&lt;br/&gt;                        -- Karthik &lt; Changes starts here &gt;&lt;br/&gt;                        -- The update to audit_recon_process goes here&lt;br/&gt;                        -- The parameters can be fetched from the cursor variable used in the above update&lt;br/&gt;                        l_audit_recon.table_name := &apos;T_EQUIP_COMPONENT&apos;;&lt;br/&gt;                        l_table_key :=&lt;br/&gt;                              &apos;EQUIP_COMPONENT_ID&apos;&lt;br/&gt;                           || &apos; = &apos;&lt;br/&gt;                           || l_cursor_data (i).equip_component_id;&lt;br/&gt;                        l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                        l_audit_recon.modif_values :=&lt;br/&gt;                              &apos;EQUIP_MAC_ADDRESS_ID&apos;&lt;br/&gt;                           || &apos;=&apos;&lt;br/&gt;                           || l_cursor_data (i).eqp_addr_eqp&lt;br/&gt;                           || &apos;, &apos;&lt;br/&gt;                           || &apos;EQUIP_SEC_MAC_ADDRESS_ID&apos;&lt;br/&gt;                           || &apos;=&apos;&lt;br/&gt;                           || l_cursor_data (i).estb_addr_eqp;&lt;br/&gt;                        pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_table_name           =&gt; l_audit_recon.table_name,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;                     -- Karthik &lt; Changes ends here &gt;&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     -- status&lt;br/&gt;                     IF (NVL (l_cursor_data (i).eqp_stat_eqp, &apos; &apos;) &lt;&gt;&lt;br/&gt;                                  NVL (l_cursor_data (i).equip_status_cd, &apos; &apos;)&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        BEGIN&lt;br/&gt;                           SELECT *&lt;br/&gt;                             INTO l_equip_component_status&lt;br/&gt;                             FROM t_equip_component_status ecs&lt;br/&gt;                            WHERE ecs.equip_component_id =&lt;br/&gt;                                          l_cursor_data (i).equip_component_id;&lt;br/&gt;                        EXCEPTION&lt;br/&gt;                           WHEN NO_DATA_FOUND&lt;br/&gt;                           THEN&lt;br/&gt;                              l_equip_component_status.equip_status_cd :=&lt;br/&gt;                                                                         NULL;&lt;br/&gt;                        END;&lt;br/&gt;&lt;br/&gt;                        pkg_logging.log_debug&lt;br/&gt;                                      (l_process_rec,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, &apos;&lt;br/&gt;                                       || l_cursor_data (i).eqp_serial_eqp&lt;br/&gt;                                       || &apos;, updating equipment component status&apos;&lt;br/&gt;                                      );&lt;br/&gt;&lt;br/&gt;                        IF (l_equip_component_status.equip_status_cd IS NULL&lt;br/&gt;                           )&lt;br/&gt;                        THEN&lt;br/&gt;                           da_equip_component_status.ADD&lt;br/&gt;                              (process_rec              =&gt; l_process_rec,&lt;br/&gt;                               equip_component_id       =&gt; l_cursor_data (i).equip_component_id,&lt;br/&gt;                               equip_status_cd          =&gt; l_cursor_data (i).eqp_stat_eqp,&lt;br/&gt;                               data_source_type_cd      =&gt; l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                               effective_dttm           =&gt; l_cursor_data (i).effective_date,&lt;br/&gt;                               audit_user               =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;                        ELSE&lt;br/&gt;                           UPDATE t_equip_component_status ecs&lt;br/&gt;                              SET equip_status_cd =&lt;br/&gt;                                                l_cursor_data (i).eqp_stat_eqp,&lt;br/&gt;                                  modified_by = p_audit_user_i,&lt;br/&gt;                                  modified_dttm = SYSDATE&lt;br/&gt;                            WHERE ecs.equip_component_id =&lt;br/&gt;                                          l_cursor_data (i).equip_component_id&lt;br/&gt;                              AND created_dttm &lt; g_recon_cutoff_time&lt;br/&gt;                              AND NVL (modified_dttm, g_recon_cutoff_time) &lt;=&lt;br/&gt;                                                           g_recon_cutoff_time;&lt;br/&gt;                        END IF;&lt;br/&gt;&lt;br/&gt;                        l_updated := TRUE;&lt;br/&gt;                        -- Karthik &lt; Changes starts here &gt;&lt;br/&gt;                        -- The update to audit_recon_process goes here&lt;br/&gt;                        -- The parameters can be fetched from the cursor variable used in the above update&lt;br/&gt;                        l_audit_recon.table_name := &apos;T_EQUIP_COMPONENT_STATUS&apos;;&lt;br/&gt;                        l_table_key :=&lt;br/&gt;                              &apos;EQUIP_COMPONENT_ID&apos;&lt;br/&gt;                           || &apos; = &apos;&lt;br/&gt;                           || l_cursor_data (i).equip_component_id;&lt;br/&gt;                        l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                        l_audit_recon.modif_values :=&lt;br/&gt;                              &apos;EQUIP_STATUS_CD&apos;&lt;br/&gt;                           || &apos;=&apos;&lt;br/&gt;                           || l_cursor_data (i).eqp_stat_eqp;&lt;br/&gt;                        pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_table_name           =&gt; l_audit_recon.table_name,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;                     -- Karthik &lt; Changes ends here &gt;&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     -- update t_equip_prod_inst starts&lt;br/&gt;                     BEGIN&lt;br/&gt;                        SELECT *&lt;br/&gt;                          INTO l_equip_prod_inst&lt;br/&gt;                          FROM t_equip_prod_inst epi&lt;br/&gt;                         WHERE epi.equip_prod_inst_id =&lt;br/&gt;                                          l_cursor_data (i).equip_prod_inst_id&lt;br/&gt;                           AND epi.equipment_esn_val =&lt;br/&gt;                                              l_cursor_data (i).eqp_serial_eqp;&lt;br/&gt;&lt;br/&gt;                        SELECT equipment_product_id&lt;br/&gt;                          INTO l_equipment_product_id&lt;br/&gt;                          FROM t_equip_product ep&lt;br/&gt;                         WHERE equipment_model_num =&lt;br/&gt;                                               l_cursor_data (i).eqp_model_eqp;&lt;br/&gt;&lt;br/&gt;                        IF (l_equip_prod_inst.equipment_product_id &lt;&gt;&lt;br/&gt;                                                        l_equipment_product_id&lt;br/&gt;                           )&lt;br/&gt;                        THEN&lt;br/&gt;                           UPDATE t_equip_prod_inst epi&lt;br/&gt;                              SET equipment_product_id =&lt;br/&gt;                                                        l_equipment_product_id,&lt;br/&gt;                                  modified_by = p_audit_user_i,&lt;br/&gt;                                  modified_dttm = SYSDATE&lt;br/&gt;                            WHERE epi.equip_prod_inst_id =&lt;br/&gt;                                          l_cursor_data (i).equip_prod_inst_id&lt;br/&gt;                              AND epi.equipment_esn_val =&lt;br/&gt;                                              l_cursor_data (i).eqp_serial_eqp;&lt;br/&gt;                        END IF;&lt;br/&gt;&lt;br/&gt;                        l_updated := TRUE;&lt;br/&gt;                     EXCEPTION&lt;br/&gt;                        WHEN NO_DATA_FOUND&lt;br/&gt;                        THEN&lt;br/&gt;                           NULL;&lt;br/&gt;                     END;&lt;br/&gt;&lt;br/&gt;                     -- update t_equip_prod_inst starts&lt;br/&gt;                     IF (l_updated)&lt;br/&gt;                     THEN&lt;br/&gt;                        l_update_cnt := l_update_cnt + 1;&lt;br/&gt;                     END IF;&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  -- update t_settop_box_instance&lt;br/&gt;                  BEGIN&lt;br/&gt;                     SELECT *&lt;br/&gt;                       INTO l_settop_box_instance&lt;br/&gt;                       FROM t_settop_box_instance sbi&lt;br/&gt;                      WHERE sbi.settop_box_instance_id =&lt;br/&gt;                                          l_cursor_data (i).equip_prod_inst_id&lt;br/&gt;                        AND sbi.serial_num = l_cursor_data (i).eqp_serial_eqp;&lt;br/&gt;&lt;br/&gt;                     IF (   l_settop_box_instance.manufacturer &lt;&gt;&lt;br/&gt;                                                l_cursor_data (i).eqp_make_eqp&lt;br/&gt;                         OR NVL (l_settop_box_instance.model_nm, &apos; &apos;) &lt;&gt;&lt;br/&gt;                                               l_cursor_data (i).eqp_model_eqp&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        -- Ignore any NRT updates for mfg and model&lt;br/&gt;                        UPDATE t_settop_box_instance sbi&lt;br/&gt;                           SET model_nm = l_cursor_data (i).eqp_model_eqp,&lt;br/&gt;                               manufacturer = l_cursor_data (i).eqp_make_eqp,&lt;br/&gt;                               cas_id =&lt;br/&gt;                                  DECODE (l_cursor_data (i).eqp_make_eqp,&lt;br/&gt;                                          &apos;WLDBX&apos;, &apos;UNKNOWN&apos;,&lt;br/&gt;                                          cas_id&lt;br/&gt;                                         ),&lt;br/&gt;                               modified_by = p_audit_user_i,&lt;br/&gt;                               modified_dttm = SYSDATE&lt;br/&gt;                         WHERE settop_box_instance_id =&lt;br/&gt;                                          l_cursor_data (i).equip_prod_inst_id;&lt;br/&gt;&lt;br/&gt;                        l_settop_update_cnt := l_settop_update_cnt + 1;&lt;br/&gt;                        -- Karthik &lt; Changes starts here &gt;&lt;br/&gt;                        -- The update to audit_recon_process goes here&lt;br/&gt;                        -- The parameters can be fetched from the cursor variable used in the above update&lt;br/&gt;                        l_audit_recon.table_name := &apos;T_SETTOP_BOX_INSTANCE&apos;;&lt;br/&gt;                        l_table_key :=&lt;br/&gt;                              &apos;SETTOP_BOX_INSTANCE_ID&apos;&lt;br/&gt;                           || &apos; = &apos;&lt;br/&gt;                           || l_cursor_data (i).equip_prod_inst_id;&lt;br/&gt;                        l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                        l_audit_recon.modif_values :=&lt;br/&gt;                              &apos;MODEL_NM : (&apos;&lt;br/&gt;                           || l_settop_box_instance.model_nm&lt;br/&gt;                           || &apos; =&gt; &apos;&lt;br/&gt;                           || &apos;, &apos;&lt;br/&gt;                           || l_cursor_data (i).eqp_model_eqp&lt;br/&gt;                           || &apos;), MANUFACTURER : (&apos;&lt;br/&gt;                           || l_settop_box_instance.manufacturer&lt;br/&gt;                           || &apos; =&gt; &apos;&lt;br/&gt;                           || l_cursor_data (i).eqp_make_eqp;&lt;br/&gt;                        pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_table_name           =&gt; l_audit_recon.table_name,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;                     -- Karthik &lt; Changes ends here &gt;&lt;br/&gt;                     END IF;&lt;br/&gt;                  EXCEPTION&lt;br/&gt;                     WHEN NO_DATA_FOUND&lt;br/&gt;                     THEN&lt;br/&gt;                        NULL;&lt;br/&gt;                  END;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exception_cnt := l_exception_cnt + 1;&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                          (l_process_rec,&lt;br/&gt;                                              l_proc_name&lt;br/&gt;                                           || &apos;, delta_key=&apos;&lt;br/&gt;                                           || l_delta_key&lt;br/&gt;                                           || &apos;, exception=&apos;&lt;br/&gt;                                           || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                          );&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         COMMIT;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; pkg_utility.c_rt_batchsize;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_eqp_base_delta;&lt;br/&gt;&lt;br/&gt;    -- Karthik &lt; Starts Here&gt;&lt;br/&gt;/*&lt;br/&gt;   pkg_logging.log_information (l_process_rec, &apos;processed=&apos; || l_process_cnt);&lt;br/&gt;   pkg_logging.log_information (l_process_rec, &apos;inserted=&apos; || l_insert_cnt);&lt;br/&gt;   pkg_logging.log_information (l_process_rec, &apos;updated=&apos; || l_update_cnt);&lt;br/&gt;   pkg_logging.log_information (l_process_rec, &apos;settop_box updated=&apos; || l_settop_update_cnt);&lt;br/&gt;&lt;br/&gt;*/&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_exception_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      -- Karthik &lt;Ends Here&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         IF (cur_eqp_base_delta%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_eqp_base_delta;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, delta_key=&apos;&lt;br/&gt;                                    || l_delta_key&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_delete (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name            VARCHAR2 (30)                := &apos;PROCESS_DELETE&apos;;&lt;br/&gt;      l_process_name         chtr.t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec          chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp         TIMESTAMP;&lt;br/&gt;      l_cursor_data          t_cursor_data_tbl_1;&lt;br/&gt;      l_process_record_cnt   NUMBER                                 := 0;&lt;br/&gt;      l_error_record_cnt     NUMBER                                 := 0;&lt;br/&gt;      l_delete_flag          NUMBER                                 := 0;&lt;br/&gt;      l_coll_idx             PLS_INTEGER;&lt;br/&gt;      c_bulk_errors          EXCEPTION;&lt;br/&gt;      l_errors               NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos; &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_start_text&lt;br/&gt;                                 );&lt;br/&gt;&lt;br/&gt;      IF chtr.pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_eqp_base_delete%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_eqp_base_delete;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_eqp_base_delete;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_eqp_base_delete&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  UPDATE chtr.t_equip_component&lt;br/&gt;                     SET record_stat = &apos;D&apos;,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         modified_dttm = l_systimestamp&lt;br/&gt;                   WHERE equip_component_id =&lt;br/&gt;                                          l_cursor_data (i).equip_component_id;&lt;br/&gt;               l_process_record_cnt := l_process_record_cnt + SQL%ROWCOUNT;&lt;br/&gt;               COMMIT;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;                  l_error_record_cnt := l_error_record_cnt + l_errors;&lt;br/&gt;&lt;br/&gt;                  FOR i IN 1 .. l_errors&lt;br/&gt;                  LOOP&lt;br/&gt;                     l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                               (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, Serial number =&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).eqp_serial_eqp&lt;br/&gt;                                || &apos;, Type Name =&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).eqp_typ_eqp&lt;br/&gt;                                || &apos;, Component Name =&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).eqp_cmpnt_eqp&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;                  END LOOP;&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR chtr.pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      IF (cur_eqp_base_delete%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_eqp_base_delete;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;-&apos;&lt;br/&gt;                                                     || pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt;    l_proc_name&lt;br/&gt;                                                       || &apos;-&apos;&lt;br/&gt;                                                       || pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos; &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                 );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         chtr.pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos;, exception=&apos;&lt;br/&gt;                                         || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                        );&lt;br/&gt;         chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos; &apos;&lt;br/&gt;                                     || chtr.pkg_utility.c_process_error&lt;br/&gt;                                    );&lt;br/&gt;         RAISE;&lt;br/&gt;&lt;br/&gt;         IF (cur_eqp_base_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_eqp_base_delete;&lt;br/&gt;         END IF;&lt;br/&gt;   END process_delete;&lt;br/&gt;END pkg_vnt_recon_eqp_base;</source>
</body>
</PackageOracle>
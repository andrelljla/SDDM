<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_HSE_BASE" directorySegmentName="seg_6" id="80EDE1D6-6457-3248-8203-094EE1C33780">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_HSE_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:13 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_HSE_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name       : PKG_VNT_RECON_HSE_BASE&lt;br/&gt;   ||  Created By         : Cognizant&lt;br/&gt;   ||  Created Date       : 12-Dec-2014&lt;br/&gt;   ||  Subject Area       : House&lt;br/&gt;   ||  Description         :This is for loading Service Address and House Base details for the Reconciliation process&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_max_thread         NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread  NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;END PKG_VNT_RECON_HSE_BASE;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_HSE_BASE" id="80EDE1D6-6457-3248-8203-094EE1C33780">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_HSE_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:17 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_HSE_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name       : PKG_VNT_RECON_HSE_BASE&lt;br/&gt;   ||  Created By         : Cognizant&lt;br/&gt;   ||  Created Date       : 23-Dec-2014&lt;br/&gt;   ||  Subject Area       : House&lt;br/&gt;   ||  Description         :This is for loading Service Address and House Base details for the Reconciliation process&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||   Cognizant        30-MAR-2015      Modified cursor query to support ROWID based multithreading&lt;br/&gt;   ||   Cognizant        15-MAY-2015      Batch Processing introduced as part of performance improvement&lt;br/&gt;   ||   Senthil          22-Jun-2015      Address Model Change. Removed usage of t_service_address.&lt;br/&gt;   ||&lt;br/&gt;   ||   Cognizant     23-JUNE-2015    Modify to handle Source FTA&lt;br/&gt;   ||   Cognizant      09-JULY-2015      Modify t_street_address Handle&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name       := &apos;PKG_VNT_RECON_HSE_BASE&apos;;&lt;br/&gt;   c_bulk_errors                EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   g_max_thread                 NUMBER                                   := 1;&lt;br/&gt;   g_reminder_thread            NUMBER                                   := 1;&lt;br/&gt;   g_batchsize                  NUMBER                                := 1000;&lt;br/&gt;   g_process_record_cnt         NUMBER                                   := 0;&lt;br/&gt;   g_error_record_cnt           NUMBER                                   := 0;&lt;br/&gt;   l_current_recon_start_time   stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;&lt;br/&gt;   -- Staged HSE_BASE for loading&lt;br/&gt;   CURSOR cur_stg_hse_base&lt;br/&gt;   IS&lt;br/&gt;      SELECT hse.ROWID AS ID, hse.record_load_cd,&lt;br/&gt;             xref.address_id AS address_id, hse.hse_key_hse AS hse_key,&lt;br/&gt;             UPPER (TRIM (hse.addr1_hse)) AS address_line_1_txt,&lt;br/&gt;             UPPER (TRIM (hse.res_addr_2_hse)) AS address_line_2_txt,&lt;br/&gt;             UPPER (TRIM (hse.res_city_hse)) AS city_nm,&lt;br/&gt;             UPPER (TRIM (hse.res_state_hse)) AS territory_cd,&lt;br/&gt;             pkg_utility.c_country_code_usa AS country_cd,&lt;br/&gt;             TRIM (postal_cde_hse) AS postal_code_txt,&lt;br/&gt;             hse.hse_key_hse AS source_system_address_id,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN hse.sys_hse = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             TRIM (hse.dwell_typ_hse) AS dwelling_type_cd,&lt;br/&gt;             TRIM (hse.hse_stat_hse) AS serviceability_cd,&lt;br/&gt;             s.source_fta_id AS source_fta_id, &apos;I&apos; AS address_upd_status&lt;br/&gt;        FROM stg.vnt_hse_base_rec_delta hse LEFT OUTER JOIN t_service_address_vantage_xref xref&lt;br/&gt;             ON xref.hs_key = hse.hse_key_hse&lt;br/&gt;             LEFT OUTER JOIN t_billing_station bill&lt;br/&gt;             ON bill.billing_station_level_1_cd = TO_CHAR (hse.sys_hse)&lt;br/&gt;           AND bill.billing_station_level_2_cd = TO_CHAR (hse.prin_hse)&lt;br/&gt;           AND bill.billing_provider_nm =&lt;br/&gt;                              (CASE&lt;br/&gt;                                  WHEN hse.sys_hse = 8313&lt;br/&gt;                                     THEN &apos;BRS&apos;&lt;br/&gt;                                  ELSE &apos;VNT&apos;&lt;br/&gt;                               END&lt;br/&gt;                              )&lt;br/&gt;             LEFT OUTER JOIN t_source_fta s&lt;br/&gt;             ON bill.billing_station_id = s.billing_station_id&lt;br/&gt;           AND LPAD (TO_CHAR (hse.agnt_hse), 4, &apos;0&apos;) = s.source_fta_cd&lt;br/&gt;       WHERE hse.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (hse.ROWID, LENGTH (hse.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_hse_base%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE insert_service_address_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_source_street_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_street_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_hse_base (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Service Address and House Base details from&lt;br/&gt;      ||                       the staging table &apos;vnt_hse_base&apos;.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name                     := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data                 t_cursor_data_tbl;&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      load_hse_base (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                     p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                    );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_hse_base (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD_HSE_BASE&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading House Base details from the staging table &apos; vnt_hse_base&apos;. House Base&lt;br/&gt;      ||                       details corresponds to for case of record_load_cd = &apos;I&apos; in VNT_HSE_BASE staging table&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;LOAD_HSE_BASE&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data   t_cursor_data_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_hse_base%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_hse_base;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_hse_base;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_hse_base&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               IF l_cursor_data (i).address_id IS NULL&lt;br/&gt;               THEN&lt;br/&gt;                  -- Double check Service id not created by another row&lt;br/&gt;                  BEGIN&lt;br/&gt;                     SELECT address_id&lt;br/&gt;                       INTO l_cursor_data (i).address_id&lt;br/&gt;                       FROM t_service_address_vantage_xref xref&lt;br/&gt;                      WHERE xref.hs_key = l_cursor_data (i).hse_key;&lt;br/&gt;                  EXCEPTION&lt;br/&gt;                     WHEN NO_DATA_FOUND&lt;br/&gt;                     THEN&lt;br/&gt;                        l_cursor_data (i).address_id := NULL;&lt;br/&gt;                  END;&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF l_cursor_data (i).address_id IS NULL&lt;br/&gt;               THEN&lt;br/&gt;                  -- Insert locator&lt;br/&gt;                  l_cursor_data (i).address_id := s_locator_id.NEXTVAL;&lt;br/&gt;                  da_locator.ADD (process_rec             =&gt; p_process_rec_i,&lt;br/&gt;                                  locator_id              =&gt; l_cursor_data (i).address_id,&lt;br/&gt;                                  locator_subtype_cd      =&gt; &apos;SSTRT&apos;,&lt;br/&gt;                                  audit_user              =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;                  -- Insert address&lt;br/&gt;                  da_address.ADD&lt;br/&gt;                     (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                      address_id                    =&gt; l_cursor_data (i).address_id,&lt;br/&gt;                      data_source_type_cd           =&gt; l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                      address_subtype_cd            =&gt; &apos;STRT&apos;,&lt;br/&gt;                      source_system_address_id      =&gt; l_cursor_data (i).hse_key,&lt;br/&gt;                      audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;                  -- Insert service_address_vantage_xref&lt;br/&gt;                  insert_service_address_xref (l_process_rec,&lt;br/&gt;                                               l_cursor_data (i),&lt;br/&gt;                                               p_audit_user_i&lt;br/&gt;                                              );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               -- Insert source_street_address&lt;br/&gt;               insert_source_street_address (l_process_rec,&lt;br/&gt;                                             l_cursor_data (i),&lt;br/&gt;                                             p_audit_user_i&lt;br/&gt;                                            );&lt;br/&gt;               -- Insert street_address&lt;br/&gt;               insert_street_address (l_process_rec,&lt;br/&gt;                                      l_cursor_data (i),&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;               -- Update the staging rows with status&lt;br/&gt;               update_staging (l_process_rec,&lt;br/&gt;                               l_cursor_data (i),&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               -- Commit the batch&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_hse_base;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_hse_base%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_hse_base;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END load_hse_base;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_source_street_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_SOURCE_STREET_ADDRESS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading House Base details specifically into the target table&lt;br/&gt;      ||                       &apos;t_source_street_address&apos; via Bilk Load Mechanism. House Base details corresponds to&lt;br/&gt;      ||                       case of record_load_cd = &apos;I&apos;&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name          := &apos;INSERT_SOURCE_STREET_ADDRESS&apos;;&lt;br/&gt;      l_ssa_row        t_source_street_address%ROWTYPE;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;      l_exist          NUMBER;&lt;br/&gt;      l_table_key      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_audit_recon    stg.audit_recon_process%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist := 1;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, SOURCE_STREET_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.address_id&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT *&lt;br/&gt;                 INTO l_ssa_row&lt;br/&gt;                 FROM t_source_street_address&lt;br/&gt;                WHERE source_street_address_id = p_cursor_data_io.address_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist = 0)&lt;br/&gt;            THEN&lt;br/&gt;               da_source_street_address.ADD&lt;br/&gt;                  (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                   source_street_address_id      =&gt; p_cursor_data_io.address_id,&lt;br/&gt;                   address_line_1_txt            =&gt; p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                   address_line_2_txt            =&gt; p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                   address_line_3_txt            =&gt; NULL,&lt;br/&gt;                   city_nm                       =&gt; p_cursor_data_io.city_nm,&lt;br/&gt;                   territory_cd                  =&gt; p_cursor_data_io.territory_cd,&lt;br/&gt;                   country_cd                    =&gt; p_cursor_data_io.country_cd,&lt;br/&gt;                   postal_code_txt               =&gt; p_cursor_data_io.postal_code_txt,&lt;br/&gt;                   carrier_route_txt             =&gt; NULL,&lt;br/&gt;                   clean_street_address_id       =&gt; NULL,&lt;br/&gt;                   clean_po_box_id               =&gt; NULL,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_insert_perform;&lt;br/&gt;            ELSE&lt;br/&gt;               IF (    NVL (l_ssa_row.modified_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                   AND (   NVL (l_ssa_row.address_line_1_txt,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_ssa_row.address_line_2_txt,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_ssa_row.city_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.city_nm,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_ssa_row.territory_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.territory_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_ssa_row.country_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.country_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_ssa_row.postal_code_txt,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.postal_code_txt,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR l_ssa_row.record_stat &lt;&gt; &apos;A&apos;&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_source_street_address a&lt;br/&gt;                     SET a.address_line_1_txt =&lt;br/&gt;                                           p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                         a.address_line_2_txt =&lt;br/&gt;                                           p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                         a.city_nm = p_cursor_data_io.city_nm,&lt;br/&gt;                         a.territory_cd = p_cursor_data_io.territory_cd,&lt;br/&gt;                         a.country_cd = p_cursor_data_io.country_cd,&lt;br/&gt;                         a.postal_code_txt = p_cursor_data_io.postal_code_txt,&lt;br/&gt;                         a.record_stat = &apos;A&apos;,&lt;br/&gt;                         a.modified_dttm = l_systimestamp,&lt;br/&gt;                         a.modified_by = p_audit_user_i&lt;br/&gt;                   WHERE a.source_street_address_id =&lt;br/&gt;                                                   p_cursor_data_io.address_id;&lt;br/&gt;&lt;br/&gt;                  p_cursor_data_io.address_upd_status := &apos;U&apos;;&lt;br/&gt;                  --Modify t_street_address Handle&lt;br/&gt;                  l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_audit_recon.modif_values :=&lt;br/&gt;                        &apos;ADDRESS_LINE_1_TXT : (&apos;&lt;br/&gt;                     || l_ssa_row.address_line_1_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.address_line_1_txt&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;ADDRESS_LINE_2_TXT : (&apos;&lt;br/&gt;                     || l_ssa_row.address_line_2_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.address_line_2_txt&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;CITY_NM : (&apos;&lt;br/&gt;                     || l_ssa_row.city_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.city_nm&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;TERRITORY_CD : (&apos;&lt;br/&gt;                     || l_ssa_row.territory_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.territory_cd&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;COUNTRY_CD : (&apos;&lt;br/&gt;                     || l_ssa_row.country_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.country_cd&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;POSTAL_CODE_TXT : (&apos;&lt;br/&gt;                     || l_ssa_row.postal_code_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.postal_code_txt&lt;br/&gt;                     || &apos; )RECORD_STAT : (&apos;&lt;br/&gt;                     || l_ssa_row.record_stat&lt;br/&gt;                     || &apos; =&gt; A&apos;&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_audit_recon.operation_perf IN&lt;br/&gt;                  (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                   pkg_utility.c_recon_update_perform&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;SOURCE_STREET_ADDRESS_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.address_id&lt;br/&gt;                  || &apos;, HSE_KEY = &apos;&lt;br/&gt;                  || p_cursor_data_io.hse_key;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_SOURCE_STREET_ADDRESS&apos;,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, source_street_address_id = &apos;&lt;br/&gt;                                          || p_cursor_data_io.address_id&lt;br/&gt;                                          || &apos;, HSE_KEY = &apos;&lt;br/&gt;                                          || p_cursor_data_io.hse_key&lt;br/&gt;                                          || &apos;, exception = &apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END insert_source_street_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_street_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_STREET_ADDRESS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading House Base details specifically into the target table&lt;br/&gt;      ||                       &apos;t_street_address&apos; via Bilk Load Mechanism. House Base details corresponds to cases of&lt;br/&gt;      ||                       record_load_cd = &apos;I&apos; in VNT_HSE_BASE staging table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name           t_unit_name            := &apos;INSERT_STREET_ADDRESS&apos;;&lt;br/&gt;      l_sta_row             t_street_address%ROWTYPE;&lt;br/&gt;      l_systimestamp        TIMESTAMP;&lt;br/&gt;      l_exist               NUMBER;&lt;br/&gt;      l_table_key           stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_audit_recon         stg.audit_recon_process%ROWTYPE;&lt;br/&gt;      l_valid_address_ind   VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_audit_recon.table_name := &apos;T_STREET_ADDRESS&apos;;&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist := 1;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, STREET_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.address_id&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT *&lt;br/&gt;                 INTO l_sta_row&lt;br/&gt;                 FROM t_street_address a&lt;br/&gt;                WHERE a.street_address_id = p_cursor_data_io.address_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.address_upd_status = &apos;U&apos;&lt;br/&gt;            THEN&lt;br/&gt;               l_valid_address_ind := &apos;0&apos;;&lt;br/&gt;            ELSE&lt;br/&gt;               l_valid_address_ind := l_sta_row.valid_address_ind;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_exist = 0)&lt;br/&gt;            THEN&lt;br/&gt;               da_street_address.ADD&lt;br/&gt;                  (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                   street_address_id         =&gt; p_cursor_data_io.address_id,&lt;br/&gt;                   address_line_1_txt        =&gt; p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                   address_line_2_txt        =&gt; p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                   address_line_3_txt        =&gt; NULL,&lt;br/&gt;                   dwelling_type_cd          =&gt; p_cursor_data_io.dwelling_type_cd,&lt;br/&gt;                   carrier_route_txt         =&gt; NULL,&lt;br/&gt;                   city_id                   =&gt; NULL,&lt;br/&gt;                   territory_id              =&gt; NULL,&lt;br/&gt;                   country_id                =&gt; NULL,&lt;br/&gt;                   postal_code_id            =&gt; NULL,&lt;br/&gt;                   full_postal_code_txt      =&gt; p_cursor_data_io.postal_code_txt,&lt;br/&gt;                   valid_address_ind         =&gt; &apos;0&apos;,&lt;br/&gt;                   serviceability_cd         =&gt; p_cursor_data_io.serviceability_cd,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   source_id_text            =&gt; NULL,&lt;br/&gt;                   source_fta_id             =&gt; p_cursor_data_io.source_fta_id,&lt;br/&gt;                   rate_center_id            =&gt; NULL,&lt;br/&gt;                   city_nm                   =&gt; p_cursor_data_io.city_nm,&lt;br/&gt;                   territory_cd              =&gt; p_cursor_data_io.territory_cd,&lt;br/&gt;                   country_cd                =&gt; p_cursor_data_io.country_cd,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_insert_perform;&lt;br/&gt;            ELSE&lt;br/&gt;               --Commeted for Modify t_street_address Handle&lt;br/&gt;                 /* IF (    NVL (l_sta_row.modified_dttm,&lt;br/&gt;                               pkg_utility.c_recon_null_date&lt;br/&gt;                              ) &lt; l_current_recon_start_time&lt;br/&gt;                      AND (   NVL (l_sta_row.address_line_1_txt,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                           OR NVL (l_sta_row.address_line_2_txt,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                           OR NVL (l_sta_row.dwelling_type_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.dwelling_type_cd,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                           OR NVL (l_sta_row.full_postal_code_txt,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.postal_code_txt,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                           OR NVL (l_sta_row.valid_address_ind,&lt;br/&gt;                                   pkg_utility.c_recon_null_number&lt;br/&gt;                                  ) &lt;&gt; 0&lt;br/&gt;                           OR NVL (l_sta_row.data_source_type_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                           OR NVL (l_sta_row.serviceability_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.serviceability_cd,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;&lt;br/&gt;                             OR NVL (l_sta_row.city_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.city_id,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                               OR NVL (l_sta_row.territory_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.territory_id,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                                  OR NVL (l_sta_row.country_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.country_cd,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                                      OR NVL (l_sta_row.postal_code_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.postal_code_id,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;&lt;br/&gt;                           OR l_sta_row.record_stat &lt;&gt; &apos;A&apos;&lt;br/&gt;                          )&lt;br/&gt;                     )*/&lt;br/&gt;&lt;br/&gt;               -- Commented to  Modify t_street_address Handle&lt;br/&gt;               IF (   p_cursor_data_io.address_upd_status = &apos;U&apos;&lt;br/&gt;                   OR NVL (l_sta_row.dwelling_type_cd,&lt;br/&gt;                           pkg_utility.c_recon_null_string&lt;br/&gt;                          ) &lt;&gt;&lt;br/&gt;                         NVL (p_cursor_data_io.dwelling_type_cd,&lt;br/&gt;                              pkg_utility.c_recon_null_string&lt;br/&gt;                             )&lt;br/&gt;                   OR NVL (l_sta_row.serviceability_cd,&lt;br/&gt;                           pkg_utility.c_recon_null_string&lt;br/&gt;                          ) &lt;&gt;&lt;br/&gt;                         NVL (p_cursor_data_io.serviceability_cd,&lt;br/&gt;                              pkg_utility.c_recon_null_string&lt;br/&gt;                             )&lt;br/&gt;                   OR NVL (l_sta_row.source_fta_id,&lt;br/&gt;                           pkg_utility.c_recon_null_number&lt;br/&gt;                          ) &lt;&gt;&lt;br/&gt;                         NVL (p_cursor_data_io.source_fta_id,&lt;br/&gt;                              pkg_utility.c_recon_null_number&lt;br/&gt;                             )&lt;br/&gt;                   OR l_sta_row.record_stat &lt;&gt; &apos;A&apos;&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_street_address a&lt;br/&gt;                     SET a.address_line_1_txt =&lt;br/&gt;                                           p_cursor_data_io.address_line_1_txt,&lt;br/&gt;                         a.address_line_2_txt =&lt;br/&gt;                                           p_cursor_data_io.address_line_2_txt,&lt;br/&gt;                         a.dwelling_type_cd =&lt;br/&gt;                                             p_cursor_data_io.dwelling_type_cd,&lt;br/&gt;                         a.full_postal_code_txt =&lt;br/&gt;                                              p_cursor_data_io.postal_code_txt,&lt;br/&gt;                         a.data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                         a.serviceability_cd =&lt;br/&gt;                                            p_cursor_data_io.serviceability_cd,&lt;br/&gt;                         a.valid_address_ind = l_valid_address_ind,&lt;br/&gt;                         a.city_nm = p_cursor_data_io.city_nm,&lt;br/&gt;                         a.territory_cd = p_cursor_data_io.territory_cd,&lt;br/&gt;                         a.country_cd = p_cursor_data_io.country_cd,&lt;br/&gt;                         a.record_stat = &apos;A&apos;,&lt;br/&gt;                         a.modified_by = p_audit_user_i,&lt;br/&gt;                         a.modified_dttm = l_systimestamp&lt;br/&gt;                   WHERE a.street_address_id = p_cursor_data_io.address_id;&lt;br/&gt;&lt;br/&gt;                  l_audit_recon.operation_perf :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_audit_recon.modif_values :=&lt;br/&gt;                        &apos;ADDRESS_LINE_1_TXT : (&apos;&lt;br/&gt;                     || l_sta_row.address_line_1_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.address_line_1_txt&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;ADDRESS_LINE_2_TXT : (&apos;&lt;br/&gt;                     || l_sta_row.address_line_2_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.address_line_2_txt&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;DWELLING_TYPE_CD : (&apos;&lt;br/&gt;                     || l_sta_row.dwelling_type_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.dwelling_type_cd&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;FULL_POSTAL_CODE_TXT : (&apos;&lt;br/&gt;                     || l_sta_row.full_postal_code_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.postal_code_txt&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;VALID_ADDRESS_IND : (&apos;&lt;br/&gt;                     || l_sta_row.valid_address_ind&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || &apos;0 )&apos;&lt;br/&gt;                     || &apos;SERVICEABILITY_CD : (&apos;&lt;br/&gt;                     || l_sta_row.serviceability_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.serviceability_cd&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos; DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                     || l_sta_row.data_source_type_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                     || &apos; ) RECORD_STAT : (&apos;&lt;br/&gt;                     || l_sta_row.record_stat&lt;br/&gt;                     || &apos; =&gt; A&apos;&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos; SOURCE_FTA_ID : (&apos;&lt;br/&gt;                     || l_sta_row.source_fta_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.source_fta_id&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_audit_recon.operation_perf IN&lt;br/&gt;                  (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                   pkg_utility.c_recon_update_perform&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;street_address_id = &apos;&lt;br/&gt;                  || p_cursor_data_io.address_id&lt;br/&gt;                  || &apos;, HSE_KEY = &apos;&lt;br/&gt;                  || p_cursor_data_io.hse_key;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; l_audit_recon.table_name,&lt;br/&gt;                             p_table_key            =&gt; l_table_key,&lt;br/&gt;                             p_modif_values         =&gt; l_audit_recon.modif_values,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_audit_recon.operation_perf,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, street_address_id = &apos;&lt;br/&gt;                                          || p_cursor_data_io.address_id&lt;br/&gt;                                          || &apos;, HSE_KEY = &apos;&lt;br/&gt;                                          || p_cursor_data_io.hse_key&lt;br/&gt;                                          || &apos;, exception = &apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END insert_street_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_service_address_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_SERVICE_ADDRESS_XREF&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Service Address details specifically into the target table&lt;br/&gt;      ||                       &apos;t_service_address_vantage_xref&apos; via Bilk Load Mechanism. Service Address details&lt;br/&gt;      ||                       corresponds to for case of record_load_cd = NULL in VNT_HSE_BASE staging table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name  := &apos;INSERT_SERVICE_ADDRESS_XREF&apos;;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_audit_recon             stg.audit_recon_process%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      l_audit_recon.operation_perf := NULL;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                 pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_start_text&lt;br/&gt;                                      || &apos;, hse_key = &apos;&lt;br/&gt;                                      || p_cursor_data_io.hse_key&lt;br/&gt;                                     );&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_service_address_vantage_xre.ADD&lt;br/&gt;                                   (process_rec      =&gt; p_process_rec_i,&lt;br/&gt;                                    hs_key           =&gt; p_cursor_data_io.hse_key,&lt;br/&gt;                                    address_id       =&gt; p_cursor_data_io.address_id,&lt;br/&gt;                                    audit_user       =&gt; p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_table_name           =&gt; &apos;T_SERVICE_ADDRESS_VANTAGE_XREF&apos;,&lt;br/&gt;                             p_table_key            =&gt;    &apos;HSE_KEY = &apos;&lt;br/&gt;                                                       || p_cursor_data_io.hse_key,&lt;br/&gt;                             p_modif_values         =&gt; NULL,&lt;br/&gt;                             p_account_details      =&gt; NULL,&lt;br/&gt;                             p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                             p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_end_text&lt;br/&gt;                                      || &apos;, hse_key = &apos;&lt;br/&gt;                                      || p_cursor_data_io.hse_key&lt;br/&gt;                                     );&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                                          (p_process_rec_i,&lt;br/&gt;                                              l_proc_name&lt;br/&gt;                                           || &apos;, hse_key = &apos;&lt;br/&gt;                                           || p_cursor_data_io.hse_key&lt;br/&gt;                                           || &apos;, exception=&apos;&lt;br/&gt;                                           || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                          );&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                               );&lt;br/&gt;      END;&lt;br/&gt;   END insert_service_address_xref;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_hse_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : UPDATE_STAGING&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for updating the staging table &apos;VNT_HSE_BASE&apos; for the column Record_Cd_Load with&lt;br/&gt;      ||                       value of &apos;P&apos; which indicates the Finished state.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_hse_base_rec_delta s&lt;br/&gt;            SET s.record_load_cd = pkg_utility.c_stg_processed,&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID&lt;br/&gt;            AND s.record_load_cd = pkg_utility.c_stg_in_progress;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_i.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, HSE_KEY = &apos;&lt;br/&gt;                                       || p_cursor_data_i.hse_key&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_i.record_load_cd, pkg_utility.c_stg_in_progress)&lt;br/&gt;         ) = pkg_utility.c_stg_in_progress&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_recon_hse_base;</source>
</body>
</PackageOracle>
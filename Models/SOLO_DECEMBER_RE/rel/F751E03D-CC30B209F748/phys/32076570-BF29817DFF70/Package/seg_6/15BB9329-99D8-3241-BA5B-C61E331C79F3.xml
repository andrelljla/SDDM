<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_OPI_OPEN_ITEM" directorySegmentName="seg_6" id="15BB9329-99D8-3241-BA5B-C61E331C79F3">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OPI_OPEN_ITEM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:06 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_OPI_OPEN_ITEM&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_OPI_OPEN_ITEM&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 04 - aug - 2014&lt;br/&gt;   ||  Subject Area    : General&lt;br/&gt;   ||  Description     : The package pkg_vnt_load_opi_open_item controls the initial load of the&lt;br/&gt;   ||                                                Vantage opi_open_item table into SOLODB.&lt;br/&gt;   ||   Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 );&lt;br/&gt;END pkg_vnt_load_opi_open_item;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_OPI_OPEN_ITEM" id="15BB9329-99D8-3241-BA5B-C61E331C79F3">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OPI_OPEN_ITEM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:09 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_OPI_OPEN_ITEM&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_OPI_OPEN_ITEM&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 04 - Aug - 2014&lt;br/&gt;   ||  Subject Area    : General&lt;br/&gt;   ||  Description     : The package pkg_vnt_load_opi_open_item controls the initial load of the&lt;br/&gt;   ||                    Vantage opi_open_item table into SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ||     knoll          05-Dec-2014     Changed FILTER_ITEM_FOR_ORDER so that items are treated as either&lt;br/&gt;   ||                                    prod_order/special_request items or work_order items, not both.&lt;br/&gt;   ||     knoll          10-Dec-2014     Fixed a bug in work order item insert.&lt;br/&gt;   ||&lt;br/&gt;   ||     Senthil        13-Dec-2014     Changed FILTER_ITEM_FOR_ORDER. Added check to ignore WO items if no WO&lt;br/&gt;   ||                                     (job_bus_interact_id IS NOT NULL)&lt;br/&gt;   ||&lt;br/&gt;   ||     Senthil        05-Jan-2015      Changed to use new xref table t_bus_interact_item_vnt_xref&lt;br/&gt;   ||&lt;br/&gt;   ||     Senthil        07-Jan-2015    Static data change for bus_interact_type_cd column in t_bus_interaction table&lt;br/&gt;   ||                                          and request_type_cd column in t_request table&lt;br/&gt;   ||   Cognizant      07-Apr-2015    Code changes to remove the descrepanies between NRT/RRT , Initial Load and Reconciliation&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed     CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_in_progress   CONSTANT VARCHAR2 (1) := &apos;I&apos;;&lt;br/&gt;   c_stg_error         CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name  := &apos;PKG_VNT_LOAD_OPI_OPEN_ITEM&apos;;&lt;br/&gt;   c_null_date         CONSTANT DATE      := TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;);&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors                EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread                NUMBER       := 1;&lt;br/&gt;   g_max_thread                 NUMBER       := 1;&lt;br/&gt;   g_batchsize                  NUMBER       := 1000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged for loading order items&lt;br/&gt;   CURSOR cur_stg_opi_open_item&lt;br/&gt;   IS&lt;br/&gt;      SELECT CASE&lt;br/&gt;                WHEN opi.sys_opi = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             opi.ROWID AS ID, opi.record_load_cd,&lt;br/&gt;             s_bus_interact_item_id.NEXTVAL AS bus_interact_item_id,&lt;br/&gt;             ord_xref.bus_interact_id, acct_xref.account_id,&lt;br/&gt;             job_xref.bus_interact_id job_bus_interact_id, opi.serv_id_opi,&lt;br/&gt;             opi.order_no_opi || opi.serv_id_opi AS source_system_id,&lt;br/&gt;             opi.order_no_opi AS ord_no,&lt;br/&gt;             DECODE (opi.job_seq_no_opi,&lt;br/&gt;                     0, r.request_type_cd,&lt;br/&gt;                     &apos;WRKORD&apos;&lt;br/&gt;                    ) AS bus_interact_item_type_cd,&lt;br/&gt;             opi.bef_qty_opi AS before_item_qty,&lt;br/&gt;             opi.aft_qty_opi AS after_item_qty,&lt;br/&gt;             opi.bill_cde_opi AS package_billing_product_cd,&lt;br/&gt;             opi.serv_cde_opi AS service_billing_product_cd,&lt;br/&gt;             pack.billing_product_id AS billing_package_product_id,&lt;br/&gt;             serv.billing_product_id AS billing_service_product_id,&lt;br/&gt;             opi.bill_amt_opi AS billed_amt,&lt;br/&gt;             opi.acct_stage_opi AS account_impact_cd,&lt;br/&gt;             opi.lob_acct_stage_opi AS line_of_business_impact_cd,&lt;br/&gt;&lt;br/&gt;             --opi.bill_from_dte_opi AS bill_start_dttm,&lt;br/&gt;             TO_DATE (DECODE (opi.bill_from_dte_opi,&lt;br/&gt;                              TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                              opi.bill_from_dte_opi&lt;br/&gt;                             )&lt;br/&gt;                     ) AS bill_start_dttm,&lt;br/&gt;             opi.lob_act_opi AS impacted_line_of_business_cd,&lt;br/&gt;             NVL (TRIM (opi.item_status_opi),&lt;br/&gt;                  &apos;U&apos;&lt;br/&gt;                 ) AS product_order_item_status_cd,&lt;br/&gt;             opi.job_seq_no_opi AS sequence_num,&lt;br/&gt;             opi.create_dte_opi AS create_dttm&lt;br/&gt;        FROM stg.vnt_opi_open_item opi INNER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;             ON ord_xref.ord_no = opi.order_no_opi&lt;br/&gt;             INNER JOIN t_bus_interact bi&lt;br/&gt;             ON bi.bus_interact_id = ord_xref.bus_interact_id&lt;br/&gt;             INNER JOIN t_request r&lt;br/&gt;             ON r.request_interaction_id = bi.bus_interact_id&lt;br/&gt;             INNER JOIN t_account_vantage_xref acct_xref&lt;br/&gt;             ON acct_xref.sub_acct_num = opi.sub_acct_no_opi&lt;br/&gt;             LEFT OUTER JOIN t_billing_product pack&lt;br/&gt;             ON pack.billing_product_cd = opi.bill_cde_opi&lt;br/&gt;           AND pack.data_source_type_cd =&lt;br/&gt;                                 CASE&lt;br/&gt;                                    WHEN opi.sys_opi = 8313&lt;br/&gt;                                       THEN &apos;BRS&apos;&lt;br/&gt;                                    ELSE &apos;VNT&apos;&lt;br/&gt;                                 END&lt;br/&gt;           AND pack.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_billing_product serv&lt;br/&gt;             ON serv.billing_product_cd = opi.serv_cde_opi&lt;br/&gt;           AND serv.data_source_type_cd =&lt;br/&gt;                                 CASE&lt;br/&gt;                                    WHEN opi.sys_opi = 8313&lt;br/&gt;                                       THEN &apos;BRS&apos;&lt;br/&gt;                                    ELSE &apos;VNT&apos;&lt;br/&gt;                                 END&lt;br/&gt;           AND pack.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_busn_intrn_vnt_job_xref job_xref&lt;br/&gt;             ON (    job_xref.order_num = opi.order_no_opi&lt;br/&gt;                 AND job_xref.job_seq_num = opi.job_seq_no_opi&lt;br/&gt;                 AND opi.job_seq_no_opi &gt; 0&lt;br/&gt;                )&lt;br/&gt;       WHERE opi.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (opi.ROWID, LENGTH (opi.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_this_thread - 1)&lt;br/&gt;         AND NOT EXISTS (&lt;br/&gt;                SELECT NULL&lt;br/&gt;                  FROM stg.vnt_oci_cur_item oci&lt;br/&gt;                 WHERE oci.sub_acct_no_oci = opi.sub_acct_no_opi&lt;br/&gt;                   AND oci.order_no_oci = opi.order_no_opi&lt;br/&gt;                   AND oci.job_seq_no_oci = opi.job_seq_no_opi&lt;br/&gt;                   AND oci.serv_id_oci = serv_id_opi);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_opi_open_item%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_ptr_tbl IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE insert_bus_interact_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_bus_inter_item_vnt_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_item_for_order (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i       IN   t_cursor_data_tbl,&lt;br/&gt;      p_select_order_type   IN   t_bus_interact.bus_interact_type_cd%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_this_thread         NUMBER DEFAULT 1,&lt;br/&gt;      p_max_thread          NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE LOAD open the Cursor and execute the records in loop&lt;br/&gt;      ||                       of WORK_ORDER_ITEM,SPECIAL_REQUEST_ITEMA , PRODUCT_ORDER_ITEM and bus_interact_item.&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr     t_ptr_tbl;  -- for filtering items in the cursor table&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      g_this_thread := p_this_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;Processed Canceled&apos;);&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF cur_stg_opi_open_item%ISOPEN&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_opi_open_item;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_opi_open_item;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_opi_open_item&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- Insert bus_interact_item&lt;br/&gt;            insert_bus_interact_item (l_process_rec, l_cursor_data);&lt;br/&gt;            -- PRODUCT_ORDER_ITEM&lt;br/&gt;            -- Filter product order items&lt;br/&gt;            l_filter_ptr :=&lt;br/&gt;               filter_item_for_order (l_process_rec, l_cursor_data, &apos;PRDORD&apos;);&lt;br/&gt;            insert_bus_inter_item_vnt_xref (l_process_rec,&lt;br/&gt;                                            l_cursor_data,&lt;br/&gt;                                            l_filter_ptr&lt;br/&gt;                                           );&lt;br/&gt;            insert_prod_order_item (l_process_rec, l_cursor_data,&lt;br/&gt;                                    l_filter_ptr);&lt;br/&gt;            insert_prod_order_item_status (l_process_rec,&lt;br/&gt;                                           l_cursor_data,&lt;br/&gt;                                           l_filter_ptr&lt;br/&gt;                                          );&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- SPECIAL_REQUEST_ITEM&lt;br/&gt;            -- Filter special request items&lt;br/&gt;            l_filter_ptr :=&lt;br/&gt;                filter_item_for_order (l_process_rec, l_cursor_data, &apos;SPLREQ&apos;);&lt;br/&gt;            insert_bus_inter_item_vnt_xref (l_process_rec,&lt;br/&gt;                                            l_cursor_data,&lt;br/&gt;                                            l_filter_ptr&lt;br/&gt;                                           );&lt;br/&gt;            insert_special_req_item (l_process_rec,&lt;br/&gt;                                     l_cursor_data,&lt;br/&gt;                                     l_filter_ptr&lt;br/&gt;                                    );&lt;br/&gt;            insert_special_req_item_status (l_process_rec,&lt;br/&gt;                                            l_cursor_data,&lt;br/&gt;                                            l_filter_ptr&lt;br/&gt;                                           );&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- WORK_ORDER_ITEM&lt;br/&gt;            -- Filter work order items&lt;br/&gt;            l_filter_ptr :=&lt;br/&gt;                filter_item_for_order (l_process_rec, l_cursor_data, &apos;WRKORD&apos;);&lt;br/&gt;            ---------------------------------------------- Added below by Cognizant  On 16-Feb-2015&lt;br/&gt;            insert_bus_inter_item_vnt_xref (l_process_rec,&lt;br/&gt;                                            l_cursor_data,&lt;br/&gt;                                            l_filter_ptr&lt;br/&gt;                                           );&lt;br/&gt;            ---------------------------------------------- Added by Cognizant  On 16-Feb-2015&lt;br/&gt;            insert_work_order_item (l_process_rec, l_cursor_data,&lt;br/&gt;                                    l_filter_ptr);&lt;br/&gt;            insert_work_order_item_status (l_process_rec,&lt;br/&gt;                                           l_cursor_data,&lt;br/&gt;                                           l_filter_ptr&lt;br/&gt;                                          );&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_opi_open_item;&lt;br/&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;&lt;br/&gt;         IF cur_stg_opi_open_item%ISOPEN&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_opi_open_item;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_bus_interact_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_BUS_INTERACT_ITEM&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_bus_interact_item will load the table &apos;t_bus_interact_item&apos;.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_BUS_INTERACT_ITEM&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_bus_interact_item a&lt;br/&gt;                        (a.bus_interact_item_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.source_system_id,&lt;br/&gt;                         a.bus_interact_id,&lt;br/&gt;                         a.bus_interact_item_type_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).source_system_id,&lt;br/&gt;                         DECODE&lt;br/&gt;                               (p_cursor_data_io (i).bus_interact_item_type_cd,&lt;br/&gt;                                &apos;WRKORD&apos;, p_cursor_data_io (i).job_bus_interact_id,&lt;br/&gt;                                p_cursor_data_io (i).bus_interact_id&lt;br/&gt;                               ),&lt;br/&gt;                         p_cursor_data_io (i).bus_interact_item_type_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                             || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                             || &apos;, exception=&apos;&lt;br/&gt;                             || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                            );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_bus_interact_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_bus_inter_item_vnt_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : insert_bus_inter_item_vnt_xref&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE will load the table t_bus_interact_item_vnt_xref&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;insert_bus_inter_item_vnt_xref&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_bus_interact_item_vnt_xref a&lt;br/&gt;                        (a.order_num,&lt;br/&gt;                         a.serv_id,&lt;br/&gt;                         a.bus_interact_item_id,&lt;br/&gt;                         a.bus_interact_item_type_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).ord_no,&lt;br/&gt;                         p_cursor_data_io (i).serv_id_opi,&lt;br/&gt;                         p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).bus_interact_item_type_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx :=&lt;br/&gt;                           p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                             || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                             || &apos;, exception=&apos;&lt;br/&gt;                             || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                            );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_bus_inter_item_vnt_xref;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_PROD_ORDER_ITEM&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_prod_order_item will load the table t_prod_order_item.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_PROD_ORDER_ITEM&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_prod_order_item a&lt;br/&gt;                        (a.product_order_item_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.product_order_id,&lt;br/&gt;                         a.account_id,&lt;br/&gt;                         a.before_item_qty,&lt;br/&gt;                         a.after_item_qty, a.item_action_cd,&lt;br/&gt;                         a.package_billing_product_id,&lt;br/&gt;                         a.package_billing_product_cd,&lt;br/&gt;                         a.service_billing_product_id,&lt;br/&gt;                         a.service_billing_product_cd,&lt;br/&gt;                         a.billed_amt,&lt;br/&gt;                         a.bill_start_dttm,&lt;br/&gt;                         a.account_impact_cd,&lt;br/&gt;                         a.line_of_business_impact_cd,&lt;br/&gt;                         a.impacted_line_of_business_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;                         p_cursor_data_io (i).account_id,&lt;br/&gt;                         p_cursor_data_io (i).before_item_qty,&lt;br/&gt;                         p_cursor_data_io (i).after_item_qty, NULL,&lt;br/&gt;                         -- ADD, CHG, DEL in xdw&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of package_product_id&lt;br/&gt;                         --NULL,&lt;br/&gt;                         p_cursor_data_io (i).billing_package_product_id,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of package_product_id&lt;br/&gt;                         p_cursor_data_io (i).package_billing_product_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of service_product_id&lt;br/&gt;                         --NULL,&lt;br/&gt;                         p_cursor_data_io (i).billing_service_product_id,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of service_product_id&lt;br/&gt;                         p_cursor_data_io (i).service_billing_product_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of billed_amt&lt;br/&gt;                         --NULL,&lt;br/&gt;                         p_cursor_data_io (i).billed_amt,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of billed_amt&lt;br/&gt;                         p_cursor_data_io (i).bill_start_dttm,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of account_impact_cd and line_of_business_impact_cd&lt;br/&gt;                         --NULL, NULL,&lt;br/&gt;                         p_cursor_data_io (i).account_impact_cd,&lt;br/&gt;                         p_cursor_data_io (i).line_of_business_impact_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of account_impact_cd and line_of_business_impact_cd&lt;br/&gt;                         p_cursor_data_io (i).impacted_line_of_business_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx :=&lt;br/&gt;                           p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                             || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                             || &apos;, exception=&apos;&lt;br/&gt;                             || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                            );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_prod_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_PROD_ORDER_ITEM_STATUS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_prod_order_item_status will load the table t_prod_order_item_status.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_PROD_ORDER_ITEM_STATUS&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_prod_order_item_status a&lt;br/&gt;                        (a.product_order_item_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.product_order_item_status_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).product_order_item_status_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx :=&lt;br/&gt;                           p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i,&lt;br/&gt;                             l_proc_name&lt;br/&gt;                          || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                          || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                          || &apos;, product_order_item_status_cd=&apos;&lt;br/&gt;                          || p_cursor_data_io (i).product_order_item_status_cd&lt;br/&gt;                          || &apos;, exception=&apos;&lt;br/&gt;                          || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                         );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_prod_order_item_status;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_SPECIAL_REQ_ITEM&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_special_req_item will load the tablet_special_request_item.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_SPECIAL_REQ_ITEM&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_special_request_item a&lt;br/&gt;                        (a.special_request_item_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.special_request_order_id,&lt;br/&gt;                         a.account_id,&lt;br/&gt;                         a.before_item_qty,&lt;br/&gt;                         a.after_item_qty, a.item_action_cd,&lt;br/&gt;                         a.package_billing_product_id,&lt;br/&gt;                         a.package_billing_product_cd,&lt;br/&gt;                         a.service_billing_product_id,&lt;br/&gt;                         a.service_billing_product_cd,&lt;br/&gt;                         a.account_impact_cd,&lt;br/&gt;                         a.line_of_business_impact_cd,&lt;br/&gt;                         a.impacted_line_of_business_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;                         p_cursor_data_io (i).account_id,&lt;br/&gt;                         p_cursor_data_io (i).before_item_qty,&lt;br/&gt;                         p_cursor_data_io (i).after_item_qty, NULL,&lt;br/&gt;                         -- ADD, CHG, DEL in xdw&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of package_product_id&lt;br/&gt;                         --NULL,&lt;br/&gt;                         p_cursor_data_io (i).billing_package_product_id,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of package_product_id&lt;br/&gt;                         p_cursor_data_io (i).package_billing_product_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of service_product_id&lt;br/&gt;                         --NULL,&lt;br/&gt;                         p_cursor_data_io (i).billing_service_product_id,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of service_product_id&lt;br/&gt;                         p_cursor_data_io (i).service_billing_product_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of account_impact_cd and line_of_business_impact_cd&lt;br/&gt;                         --NULL, NULL,&lt;br/&gt;                         p_cursor_data_io (i).account_impact_cd,&lt;br/&gt;                         p_cursor_data_io (i).line_of_business_impact_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of account_impact_cd and line_of_business_impact_cd&lt;br/&gt;                         p_cursor_data_io (i).impacted_line_of_business_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx :=&lt;br/&gt;                           p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                             || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                             || &apos;, exception=&apos;&lt;br/&gt;                             || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                            );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_special_req_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_SPECIAL_REQ_ITEM_STATUS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_special_req_item_status will load the table &apos;&lt;br/&gt;      t_special_request_item_status&apos;.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_SPECIAL_REQ_ITEM_STATUS&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_special_request_item_status a&lt;br/&gt;                        (a.special_request_item_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.special_request_item_status_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).product_order_item_status_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx :=&lt;br/&gt;                           p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                             || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                             || &apos;, exception=&apos;&lt;br/&gt;                             || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                            );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_special_req_item_status;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_WORK_ORDER_ITEM&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_work_order_item will load the table t_work_order_item.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_WORK_ORDER_ITEM&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_work_order_item a&lt;br/&gt;                        (a.work_order_item_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.work_order_id,&lt;br/&gt;                         a.account_id,&lt;br/&gt;                         a.create_dttm,&lt;br/&gt;                         a.sequence_num,&lt;br/&gt;                         a.before_item_qty,&lt;br/&gt;                         a.after_item_qty, a.item_action_cd,&lt;br/&gt;                         a.package_billing_product_id,&lt;br/&gt;                         a.package_billing_product_cd,&lt;br/&gt;                         a.service_billing_product_id,&lt;br/&gt;                         a.service_billing_product_cd,&lt;br/&gt;                         a.account_impact_cd,&lt;br/&gt;                         a.line_of_business_impact_cd,&lt;br/&gt;                         a.impacted_line_of_business_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).job_bus_interact_id,&lt;br/&gt;                         p_cursor_data_io (i).account_id,&lt;br/&gt;                         p_cursor_data_io (i).create_dttm,&lt;br/&gt;                         p_cursor_data_io (i).sequence_num,&lt;br/&gt;                         p_cursor_data_io (i).before_item_qty,&lt;br/&gt;                         p_cursor_data_io (i).after_item_qty, NULL,&lt;br/&gt;                         -- ADD, CHG, DEL in xdw&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of package_product_id&lt;br/&gt;                         --NULL,&lt;br/&gt;                         p_cursor_data_io (i).billing_package_product_id,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of package_product_id&lt;br/&gt;                         p_cursor_data_io (i).package_billing_product_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of service_product_id&lt;br/&gt;                         --NULL,&lt;br/&gt;                         p_cursor_data_io (i).billing_service_product_id,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of service_product_id&lt;br/&gt;                         p_cursor_data_io (i).service_billing_product_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: Starts addition of account_impact_cd and line_of_business_impact_cd&lt;br/&gt;                         --NULL, NULL,&lt;br/&gt;                         p_cursor_data_io (i).account_impact_cd,&lt;br/&gt;                         p_cursor_data_io (i).line_of_business_impact_cd,&lt;br/&gt;                         -- 31-Mar-2015            UAT Defect Fix: End addition of account_impact_cd and line_of_business_impact_cd&lt;br/&gt;                         p_cursor_data_io (i).impacted_line_of_business_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx :=&lt;br/&gt;                           p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                             || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                             || &apos;, exception=&apos;&lt;br/&gt;                             || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                            );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_work_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_WORK_ORDER_ITEM_STATUS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_work_order_item_status will load the table &apos;t_work_order_item_status&apos;.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_WORK_ORDER_ITEM_STATUS&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_work_order_item_status a&lt;br/&gt;                        (a.work_order_item_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.work_order_item_status_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).product_order_item_status_cd,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx :=&lt;br/&gt;                           p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                             || p_cursor_data_io (l_coll_idx).source_system_id&lt;br/&gt;                             || &apos;, exception=&apos;&lt;br/&gt;                             || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                            );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_work_order_item_status;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE update_staging will update the table  stg.vnt_opi_open_item.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.vnt_opi_open_item s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                     NVL (p_cursor_data_i (i).record_load_cd, c_stg_processed),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END update_staging;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_item_for_order (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i       IN   t_cursor_data_tbl,&lt;br/&gt;      p_select_order_type   IN   t_bus_interact.bus_interact_type_cd%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FILTER_ITEM_FOR_ORDER&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The function filter_item_for_order will return the filter item for order&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;FILTER_ITEM_FOR_ORDER&apos;;&lt;br/&gt;      l_temp        t_ptr_tbl;&lt;br/&gt;      l_idx         PLS_INTEGER := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         IF (p_cursor_data_i (i).bus_interact_item_type_cd =&lt;br/&gt;                                                           p_select_order_type&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_select_order_type = &apos;WRKORD&apos;)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    p_cursor_data_i (i).sequence_num &gt; 0&lt;br/&gt;                   AND p_cursor_data_i (i).job_bus_interact_id IS NOT NULL&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_idx := l_idx + 1;&lt;br/&gt;                  l_temp (l_idx) := i;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               IF (p_cursor_data_i (i).sequence_num = 0)&lt;br/&gt;               THEN&lt;br/&gt;                  l_idx := l_idx + 1;&lt;br/&gt;                  l_temp (l_idx) := i;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;      RETURN l_temp;&lt;br/&gt;   END filter_item_for_order;&lt;br/&gt;END pkg_vnt_load_opi_open_item;</source>
</body>
</PackageOracle>
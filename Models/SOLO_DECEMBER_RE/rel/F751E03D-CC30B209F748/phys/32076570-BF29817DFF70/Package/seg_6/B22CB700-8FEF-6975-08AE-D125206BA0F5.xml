<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_DST_LOAD_REF_CODES" directorySegmentName="seg_6" id="B22CB700-8FEF-6975-08AE-D125206BA0F5">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_DST_LOAD_REF_CODES</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:16:51 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_DST_LOAD_REF_CODES&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_dst_load_ref_codes&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 02-Dec-2014&lt;br/&gt;||  Subject Area    : General&lt;br/&gt;||  Description     : The package is a wrapper package which loads reference code tables&lt;br/&gt;||                         into SOLODB Core Area from Data Standard Tables in SOLODB Staging area.&lt;br/&gt;||&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;   PROCEDURE PROCESS (p_audit_user_i IN VARCHAR2);&lt;br/&gt;END pkg_dst_load_ref_codes;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_DST_LOAD_REF_CODES" id="B22CB700-8FEF-6975-08AE-D125206BA0F5">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_DST_LOAD_REF_CODES</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:07 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_DST_LOAD_REF_CODES&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_dst_load_ref_codes&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 02-Dec-2014&lt;br/&gt;   ||  Subject Area    : General&lt;br/&gt;   ||  Description     : The package is a wrapper package which loads reference code tables&lt;br/&gt;   ||                    into SOLODB Core Area from Data Standard Tables in SOLODB Staging area.&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||  Changed By            Changed On               Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name   CONSTANT t_unit_name := &apos;PKG_DST_LOAD_REF_CODES&apos;;&lt;br/&gt;&lt;br/&gt;   PROCEDURE account_qualifier (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE prod_order_cancel_code (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE prod_order_completion_code (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE prod_order_reason_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE serviceability (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE dwelling_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE dwelling_type_category (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE work_order_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE special_request_cancel_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE special_request_compl_code (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE special_request_reason_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE ticket_cancel_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE ticket_completion_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE ticket_reason_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE work_order_cancel_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE work_order_completion_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE billing_product_group (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE billing_product (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE product (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE equip_component_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE equip_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   AS&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_audit_user     t_userid;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_audit_user := NVL (p_audit_user_i, c_pkg_name);&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (p_process_rec_io      =&gt; l_process_rec,&lt;br/&gt;                                 p_parm_in_i           =&gt;    &apos;p_audit_user_i=&apos;&lt;br/&gt;                                                          || l_audit_user&lt;br/&gt;                                );&lt;br/&gt;      account_qualifier (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                         p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                        );&lt;br/&gt;      prod_order_cancel_code (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                              p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                             );&lt;br/&gt;      prod_order_completion_code (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                  p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                                 );&lt;br/&gt;      prod_order_reason_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                            p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                           );&lt;br/&gt;      serviceability (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                      p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                     );&lt;br/&gt;      dwelling_type_category (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                              p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                             );&lt;br/&gt;      dwelling_type (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                     p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                    );&lt;br/&gt;      work_order_type (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                       p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                      );&lt;br/&gt;      special_request_cancel_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                 p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                                );&lt;br/&gt;      special_request_compl_code (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                  p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                                 );&lt;br/&gt;      special_request_reason_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                 p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                                );&lt;br/&gt;      ticket_cancel_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                        p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                       );&lt;br/&gt;      ticket_completion_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                            p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                           );&lt;br/&gt;      ticket_reason_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                        p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                       );&lt;br/&gt;      work_order_cancel_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                            p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                           );&lt;br/&gt;      work_order_completion_cd (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                               );&lt;br/&gt;      billing_product_group (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                             p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                            );&lt;br/&gt;      billing_product (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                       p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                      );&lt;br/&gt;      product (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;               p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;              );&lt;br/&gt;      equip_component_type (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                            p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                           );&lt;br/&gt;      equip_type (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                  p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                 );&lt;br/&gt;      pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                               p_parm_out_i         =&gt; pkg_utility.c_process_success&lt;br/&gt;                              );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, exception=&apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                  p_parm_out_i         =&gt; pkg_utility.c_process_error&lt;br/&gt;                                 );&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE account_qualifier (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : account_qualifier&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_ACCOUNT_QUALIFIER from the Data&lt;br/&gt;      ||                       Standard Staging table DST_SUBSCRIBER_ATTRIBUTE__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name          := &apos;ACCOUNT_QUALIFIER&apos;;&lt;br/&gt;      l_stg_ref_cd                t_account_qualifier.account_qualifier_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_account_qualifier.account_qualifier_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.account_qualifier_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.account_qualifier_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.account_qualifier_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_subscriber_attribute__c a&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND a.is_active__c = 1) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_account_qualifier t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.account_qualifier_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_account_qualifier.ADD&lt;br/&gt;                   (process_rec                      =&gt; p_process_rec_i,&lt;br/&gt;                    account_qualifier_cd             =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                    data_source_type_cd              =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                    account_qualifier_desc           =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                    account_qualifier_long_desc      =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                    audit_user                       =&gt; p_audit_user_i&lt;br/&gt;                   );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_account_qualifier&lt;br/&gt;                  SET account_qualifier_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      account_qualifier_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE account_qualifier_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_account_qualifier.del&lt;br/&gt;                     (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                      account_qualifier_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd       =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END account_qualifier;&lt;br/&gt;&lt;br/&gt;   PROCEDURE prod_order_cancel_code (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : prod_order_cancel_code&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_prod_order_cancel_code from the Data&lt;br/&gt;      ||                       Standard Staging table dst_rsn_res_std_note_cd__c. This is a insert-or-update process&lt;br/&gt;      ||                       wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name     := &apos;PROD_ORDER_CANCEL_CODE&apos;;&lt;br/&gt;      l_stg_ref_cd                t_prod_order_cancel_code.product_order_cancel_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_prod_order_cancel_code.product_order_cancel_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.product_order_cancel_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.cancel_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.cancel_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND UPPER (record_category__c) =&lt;br/&gt;                                                    &apos;WORK ORDER CANCEL REASON&apos;&lt;br/&gt;                    AND is_active__c = 1) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_prod_order_cancel_code t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.product_order_cancel_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel_code.ADD&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_cancel_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd          =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      cancel_desc                  =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc             =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_prod_order_cancel_code&lt;br/&gt;                  SET cancel_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE product_order_cancel_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel_code.del&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_cancel_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd          =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END prod_order_cancel_code;&lt;br/&gt;&lt;br/&gt;   PROCEDURE prod_order_completion_code (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : prod_order_completion_code&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_prod_order_completion_code&lt;br/&gt;      ||                       from the Data Standard Staging table dst_rsn_res_std_note_cd__c.&lt;br/&gt;      ||                       This is a insert-or-update process wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name := &apos;PROD_ORDER_COMPLETION_CODE&apos;;&lt;br/&gt;      l_stg_ref_cd                t_prod_order_completion_code.product_order_completion_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_prod_order_completion_code.product_order_completion_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.product_order_completion_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.completion_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.completion_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE (REGEXP_REPLACE (d.long_description__c,&lt;br/&gt;                                                    &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                    &apos; &apos;&lt;br/&gt;                                                   ),&lt;br/&gt;                                    &apos;[^[:print:]]&apos;,&lt;br/&gt;                                    &apos;&apos;&lt;br/&gt;                                   )&lt;br/&gt;                   ) AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1&lt;br/&gt;                    AND UPPER (record_category__c) = &apos;WORK ORDER REASON&apos;) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_prod_order_completion_code t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.product_order_completion_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_completion_code.ADD&lt;br/&gt;                     (process_rec                      =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_completion_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd              =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      completion_desc                  =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      completion_long_desc             =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                       =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_prod_order_completion_code&lt;br/&gt;                  SET completion_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      completion_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE product_order_completion_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_completion_code.del&lt;br/&gt;                     (process_rec                      =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_completion_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd              =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                       =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END prod_order_completion_code;&lt;br/&gt;&lt;br/&gt;   PROCEDURE prod_order_reason_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : prod_order_reason_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_prod_order_reason_cd from&lt;br/&gt;      ||                       the Data Standard Staging table dst_rsn_res_std_note_cd__c.&lt;br/&gt;      ||                       This is a insert-or-update process wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name       := &apos;PROD_ORDER_REASON_CD&apos;;&lt;br/&gt;      l_stg_ref_cd                t_prod_order_reason_cd.product_order_reason_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_prod_order_reason_cd.product_order_reason_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.product_order_reason_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.reason_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE (REGEXP_REPLACE (t.reason_long_desc,&lt;br/&gt;                                                    &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                    &apos; &apos;&lt;br/&gt;                                                   ),&lt;br/&gt;                                    &apos;[^[:print:]]&apos;,&lt;br/&gt;                                    &apos;&apos;&lt;br/&gt;                                   )&lt;br/&gt;                   ) AS tgt_ref_long_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE (REGEXP_REPLACE (d.long_description__c,&lt;br/&gt;                                                    &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                    &apos; &apos;&lt;br/&gt;                                                   ),&lt;br/&gt;                                    &apos;[^[:print:]]&apos;,&lt;br/&gt;                                    &apos;&apos;&lt;br/&gt;                                   )&lt;br/&gt;                   ) AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND UPPER (record_category__c) = &apos;WORK ORDER REASON&apos;&lt;br/&gt;                    AND is_active__c = 1) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_prod_order_reason_cd t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.product_order_reason_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_reason_cd.ADD&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_reason_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd          =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      reason_desc                  =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      reason_long_desc             =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_prod_order_reason_cd&lt;br/&gt;                  SET reason_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      reason_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE product_order_reason_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_reason_cd.del&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_reason_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd          =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END prod_order_reason_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE serviceability (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : serviceability&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_serviceability from the Data&lt;br/&gt;      ||                       Standard Staging table DST_SUBSCRIBER_ATTRIBUTE__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name             := &apos;SERVICEABILITY&apos;;&lt;br/&gt;      l_stg_ref_cd                t_serviceability.serviceability_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_serviceability.serviceability_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.serviceability_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.serviceability_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.servicability_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                d.data_source_type_cd AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT ha.code__c, ha.description__c,&lt;br/&gt;                        ha.long_description__c, ha.billing_id__c,&lt;br/&gt;                        ha.is_active__c,&lt;br/&gt;                        ha.data_source_type_cd&lt;br/&gt;                   FROM (SELECT code__c, description__c,&lt;br/&gt;                        long_description__c, billing_id__c,&lt;br/&gt;                        is_active__c,&lt;br/&gt;                CASE&lt;br/&gt;                              WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                                  THEN &apos;VNT&apos;&lt;br/&gt;                             WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                                  THEN &apos;BRS&apos;&lt;br/&gt;                         END AS data_source_type_cd,&lt;br/&gt;                         ROW_NUMBER () OVER (PARTITION BY CASE&lt;br/&gt;                                                             WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                                                             WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                                                          END, code__c&lt;br/&gt;                                             ORDER BY lastmodifieddate DESC,&lt;br/&gt;                                                      systemmodstamp DESC,&lt;br/&gt;                                                      description__c,&lt;br/&gt;                                                      description__c) AS row_num&lt;br/&gt;                           FROM stg.dst_house_attribute__c&lt;br/&gt;                          WHERE CASE&lt;br/&gt;                                   WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                                      THEN &apos;VNT&apos;&lt;br/&gt;                                   WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                                      THEN &apos;BRS&apos;&lt;br/&gt;                                END IN (SELECT data_source_type_cd&lt;br/&gt;                                          FROM t_data_source_type&lt;br/&gt;                                         WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                            AND is_active__c = 1&lt;br/&gt;                            AND record_category__c = &apos;House Status&apos;&lt;br/&gt;                            AND (start_date__c &gt; TRUNC(SYSDATE)&lt;br/&gt;                            OR   stop_date__c IS NULL)&lt;br/&gt;                            ) ha&lt;br/&gt;                            WHERE row_num = 1) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_serviceability t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.serviceability_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_serviceability.ADD&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      serviceability_cd            =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd          =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      serviceability_desc          =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      servicability_long_desc      =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_serviceability&lt;br/&gt;                  SET serviceability_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      servicability_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE serviceability_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_serviceability.del&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      serviceability_cd        =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END serviceability;&lt;br/&gt;&lt;br/&gt;   PROCEDURE dwelling_type_category (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : dwelling_type_category&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_dwelling_type_category from&lt;br/&gt;      ||                       the Data Standard Staging table DST_HOUSE_ATTRIBUTE__C, DST_RECORDTYPE.&lt;br/&gt;      ||                       This is a insert-or-update process wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name     := &apos;DWELLING_TYPE_CATEGORY&apos;;&lt;br/&gt;      l_tgt_ref_cd                t_dwelling_type_category.dwelling_type_category_cd%TYPE;&lt;br/&gt;      l_stg_ref_cd                t_dwelling_type_category.dwelling_type_category_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.dwelling_type_category_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.dwelling_type_category__c) AS stg_ref_cd,&lt;br/&gt;                t.dwelling_type_category_desc AS tgt_ref_desc,&lt;br/&gt;                d.dwelling_type_category__c AS stg_ref_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT DISTINCT ha.dwelling_type_category__c,&lt;br/&gt;                                 ha.billing_id__c, ha.is_active__c&lt;br/&gt;                            FROM (SELECT *&lt;br/&gt;                                    FROM stg.dst_house_attribute__c&lt;br/&gt;                                   WHERE CASE&lt;br/&gt;                                            WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                                               THEN &apos;VNT&apos;&lt;br/&gt;                                            WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                                               THEN &apos;BRS&apos;&lt;br/&gt;                                         END IN (SELECT data_source_type_cd&lt;br/&gt;                                                   FROM t_data_source_type&lt;br/&gt;                                                  WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                                     AND is_active__c = 1&lt;br/&gt;                                     AND TRIM (dwelling_type_category__c) IS NOT NULL&lt;br/&gt;                                     AND record_category__c = &apos;Dwelling Type&apos;) ha) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_dwelling_type_category t&lt;br/&gt;                ON TRIM (d.dwelling_type_category__c) =&lt;br/&gt;                                            TRIM (t.dwelling_type_category_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_dwelling_type_category.ADD&lt;br/&gt;                     (process_rec                      =&gt; p_process_rec_i,&lt;br/&gt;                      dwelling_type_category_cd        =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd              =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      dwelling_type_category_desc      =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      audit_user                       =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_dwelling_type_category&lt;br/&gt;                  SET dwelling_type_category_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE dwelling_type_category_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_dwelling_type_category.del&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      dwelling_type_category_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd            =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END dwelling_type_category;&lt;br/&gt;&lt;br/&gt;   PROCEDURE dwelling_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : dwelling_type&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_dwelling_type from the Data&lt;br/&gt;      ||                       Standard Staging tables DST_HOUSE_ATTRIBUTE__C, DST_RECORDTYPE .&lt;br/&gt;      ||                       This is a insert-or-update process wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name              := &apos;DWELLING_TYPE&apos;;&lt;br/&gt;      l_stg_ref_cd                t_dwelling_type.dwelling_type_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_dwelling_type.dwelling_type_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.dwelling_type_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.dwelling_type_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE&lt;br/&gt;                                  (REGEXP_REPLACE (t.dwelling_type_long_desc,&lt;br/&gt;                                                   &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                   &apos; &apos;&lt;br/&gt;                                                  ),&lt;br/&gt;                                   &apos;[^[:print:]]&apos;,&lt;br/&gt;                                   &apos;&apos;&lt;br/&gt;                                  )&lt;br/&gt;                   ) AS tgt_ref_long_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE (REGEXP_REPLACE (d.long_description__c,&lt;br/&gt;                                                    &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                    &apos; &apos;&lt;br/&gt;                                                   ),&lt;br/&gt;                                    &apos;[^[:print:]]&apos;,&lt;br/&gt;                                    &apos;&apos;&lt;br/&gt;                                   )&lt;br/&gt;                   ) AS stg_ref_long_desc,&lt;br/&gt;                d.dwelling_type_category__c AS stg_ref_type_ctgry_cd,&lt;br/&gt;                t.dwelling_type_category_cd AS tgt_ref_type_ctgry_cd,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT ha.code__c, ha.description__c,&lt;br/&gt;                        ha.long_description__c, ha.dwelling_type_category__c,&lt;br/&gt;                        ha.billing_id__c, ha.is_active__c&lt;br/&gt;                   FROM (SELECT *&lt;br/&gt;                           FROM stg.dst_house_attribute__c&lt;br/&gt;                          WHERE CASE&lt;br/&gt;                                   WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                                      THEN &apos;VNT&apos;&lt;br/&gt;                                   WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                                      THEN &apos;BRS&apos;&lt;br/&gt;                                END IN (SELECT data_source_type_cd&lt;br/&gt;                                          FROM t_data_source_type&lt;br/&gt;                                         WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                            AND is_active__c = 1&lt;br/&gt;                            AND record_category__c = &apos;Dwelling Type&apos;) ha) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_dwelling_type t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.dwelling_type_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_dwelling_type.ADD&lt;br/&gt;                  (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                   dwelling_type_cd               =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                   data_source_type_cd            =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                   dwelling_type_desc             =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                   dwelling_type_long_desc        =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                   dwelling_type_category_cd      =&gt; cur_rec.stg_ref_type_ctgry_cd,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_dwelling_type&lt;br/&gt;                  SET dwelling_type_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      dwelling_type_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE dwelling_type_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_dwelling_type.del&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      dwelling_type_cd         =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END dwelling_type;&lt;br/&gt;&lt;br/&gt;   PROCEDURE work_order_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : work_order_type&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_work_order_type from the Data&lt;br/&gt;      ||                       Standard Staging table DST_RSN_RES_STD_NOTE_CD__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name            := &apos;WORK_ORDER_TYPE&apos;;&lt;br/&gt;      l_stg_ref_cd                t_work_order_type.work_order_type_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_work_order_type.work_order_type_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.work_order_type_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.order_type_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.order_type_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1&lt;br/&gt;                    AND UPPER (record_category__c) = &apos;WORK ORDER TYPE&apos;) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_work_order_type t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.work_order_type_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_type.ADD&lt;br/&gt;                     (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                      work_order_type_cd        =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd       =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      order_type_desc           =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      order_type_long_desc      =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_work_order_type&lt;br/&gt;                  SET order_type_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      order_type_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE work_order_type_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_type.del&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      work_order_type_cd       =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END work_order_type;&lt;br/&gt;&lt;br/&gt;   PROCEDURE special_request_cancel_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : special_request_cancel_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_SPECIAL_REQUEST_CANCEL_CD&lt;br/&gt;      ||                       from the Data Standard Staging table RSN_RES_STD_NOTE_CD__C.&lt;br/&gt;      ||                       This is a insert-or-update process with soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name  := &apos;SPECIAL_REQUEST_CANCEL_CD&apos;;&lt;br/&gt;      l_stg_ref_cd                t_special_request_cancel_cd.special_request_cancel_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_special_request_cancel_cd.special_request_cancel_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.special_request_cancel_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.cancel_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.cancel_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND UPPER (record_category__c) =&lt;br/&gt;                                                    &apos;WORK ORDER CANCEL REASON&apos;&lt;br/&gt;                    AND is_active__c = 1) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_special_request_cancel_cd t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.special_request_cancel_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel_cd.ADD&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_cancel_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd            =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      cancel_desc                    =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc               =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_special_request_cancel_cd&lt;br/&gt;                  SET cancel_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE special_request_cancel_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel_cd.del&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_cancel_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd            =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END special_request_cancel_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE special_request_compl_code (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : special_request_compl_code&lt;br/&gt;&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_SPECIAL_REQUEST_COMPL_CODE&lt;br/&gt;      ||                       from the Data Standard Staging table RSN_RES_STD_NOTE_CD__C.&lt;br/&gt;      ||                       This is a insert-or-update process wish soft delete.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name := &apos;SPECIAL_REQUEST_COMPL_CODE&apos;;&lt;br/&gt;      l_stg_ref_cd                t_special_request_compl_code.special_request_completion_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_special_request_compl_code.special_request_completion_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.special_request_completion_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.completion_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE (REGEXP_REPLACE (t.completion_long_desc,&lt;br/&gt;                                                    &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                    &apos; &apos;&lt;br/&gt;                                                   ),&lt;br/&gt;                                    &apos;[^[:print:]]&apos;,&lt;br/&gt;                                    &apos;&apos;&lt;br/&gt;                                   )&lt;br/&gt;                   ) AS tgt_ref_long_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE (REGEXP_REPLACE (d.long_description__c,&lt;br/&gt;                                                    &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                    &apos; &apos;&lt;br/&gt;                                                   ),&lt;br/&gt;                                    &apos;[^[:print:]]&apos;,&lt;br/&gt;                                    &apos;&apos;&lt;br/&gt;                                   )&lt;br/&gt;                   ) AS stg_ref_long_desc,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND UPPER (record_category__c) =&lt;br/&gt;                                                  &apos;SPECIAL REQUEST RESOLUTION&apos;&lt;br/&gt;                    AND is_active__c = 1) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_special_request_compl_code t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.special_request_completion_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_compl_code.ADD&lt;br/&gt;                     (process_rec                        =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_completion_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd                =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      completion_desc                    =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      completion_long_desc               =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                         =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_special_request_compl_code&lt;br/&gt;                  SET completion_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      completion_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE special_request_completion_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_compl_code.del&lt;br/&gt;                     (process_rec                        =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_completion_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd                =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                         =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END special_request_compl_code;&lt;br/&gt;&lt;br/&gt;   PROCEDURE special_request_reason_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : special_request_reason_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_SPECIAL_REQUEST_REASON_CD&lt;br/&gt;      ||                       from the Data  Standard Staging table RSN_RES_STD_NOTE_CD__C.&lt;br/&gt;      ||                       This is a insert-or-update process wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name  := &apos;SPECIAL_REQUEST_REASON_CD&apos;;&lt;br/&gt;      l_stg_ref_cd                t_special_request_reason_cd.special_request_reason_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_special_request_reason_cd.special_request_reason_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.special_request_reason_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.reason_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.reason_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1&lt;br/&gt;                    AND UPPER (record_category__c) = &apos;SPECIAL REQUEST REASON&apos;) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_special_request_reason_cd t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.special_request_reason_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_reason_cd.ADD&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_reason_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd            =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      reason_desc                    =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      reason_long_desc               =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_special_request_reason_cd&lt;br/&gt;                  SET reason_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      reason_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE special_request_reason_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_reason_cd.del&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_reason_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd            =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END special_request_reason_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE ticket_cancel_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : ticket_cancel_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_TICKET_CANCEL_CD from the Data&lt;br/&gt;      ||                       Standard Staging table RSN_RES_STD_NOTE_CD__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name           := &apos;TICKET_CANCEL_CD&apos;;&lt;br/&gt;      l_stg_ref_cd                t_ticket_cancel_cd.ticket_cancel_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_ticket_cancel_cd.ticket_cancel_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.ticket_cancel_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.cancel_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.cancel_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1&lt;br/&gt;                    AND UPPER (record_category__c) =&lt;br/&gt;                                                    &apos;WORK ORDER CANCEL REASON&apos;) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_ticket_cancel_cd t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.ticket_cancel_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_cancel_cd.ADD&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      ticket_cancel_cd         =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      cancel_desc              =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc         =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_ticket_cancel_cd&lt;br/&gt;                  SET cancel_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE ticket_cancel_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_cancel_cd.del&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      ticket_cancel_cd         =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END ticket_cancel_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE ticket_completion_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : ticket_completion_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_TICKET_COMPLETION_CD from the Data&lt;br/&gt;      ||                       Standard Staging table RSN_RES_STD_NOTE_CD__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name       := &apos;TICKET_COMPLETION_CD&apos;;&lt;br/&gt;      l_stg_ref_cd                t_ticket_completion_cd.ticket_completion_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_ticket_completion_cd.ticket_completion_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.ticket_completion_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.completion_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.completion_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                TRIM&lt;br/&gt;                   (REGEXP_REPLACE (REGEXP_REPLACE (d.long_description__c,&lt;br/&gt;                                                    &apos;[\t\r\n\v\f|]&apos;,&lt;br/&gt;                                                    &apos; &apos;&lt;br/&gt;                                                   ),&lt;br/&gt;                                    &apos;[^[:print:]]&apos;,&lt;br/&gt;                                    &apos;&apos;&lt;br/&gt;                                   )&lt;br/&gt;                   ) AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1&lt;br/&gt;                    AND UPPER (record_category__c) = &apos;TROUBLE CALL RESOLUTION&apos;) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_ticket_completion_cd t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.ticket_completion_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_completion_cd.ADD&lt;br/&gt;                     (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                      ticket_completion_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd       =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      completion_desc           =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      completion_long_desc      =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_ticket_completion_cd&lt;br/&gt;                  SET completion_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      completion_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE ticket_completion_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_completion_cd.del&lt;br/&gt;                     (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                      ticket_completion_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd       =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END ticket_completion_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE ticket_reason_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : ticket_reason_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_TICKET_REASON_CD from the Data&lt;br/&gt;      ||                       Standard Staging table RSN_RES_STD_NOTE_CD__C. This is a insert-or-update process&lt;br/&gt;      ||                       wish soft delete.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name           := &apos;TICKET_REASON_CD&apos;;&lt;br/&gt;      l_stg_ref_cd                t_ticket_reason_cd.ticket_reason_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_ticket_reason_cd.ticket_reason_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.ticket_reason_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.reason_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.reason_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1&lt;br/&gt;                    AND UPPER (record_category__c) = &apos;TROUBLE CALL REASON&apos;) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_ticket_reason_cd t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.ticket_reason_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_reason_cd.ADD&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      ticket_reason_cd         =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      reason_desc              =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      reason_long_desc         =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_ticket_reason_cd&lt;br/&gt;                  SET reason_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      reason_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE ticket_reason_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_reason_cd.del&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      ticket_reason_cd         =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END ticket_reason_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE work_order_cancel_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : work_order_cancel_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_WORK_ORDER_CANCEL_CD from the&lt;br/&gt;      ||                       Data Standard Staging table RSN_RES_STD_NOTE_CD__C. This is a insert-or-update process&lt;br/&gt;      ||                       wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name       := &apos;WORK_ORDER_CANCEL_CD&apos;;&lt;br/&gt;      l_stg_ref_cd                t_work_order_cancel_cd.work_order_cancel_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_work_order_cancel_cd.work_order_cancel_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.work_order_cancel_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.code__c) AS stg_ref_cd,&lt;br/&gt;                t.cancel_desc AS tgt_ref_desc,&lt;br/&gt;                d.description__c AS stg_ref_desc,&lt;br/&gt;                t.cancel_long_desc AS tgt_ref_long_desc,&lt;br/&gt;                d.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                      THEN &apos;VNT&apos;&lt;br/&gt;                   WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                END AS stg_data_source_type_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd&lt;br/&gt;           FROM (SELECT *&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1&lt;br/&gt;                    AND UPPER (record_category__c) =&lt;br/&gt;                                                    &apos;WORK ORDER CANCEL REASON&apos;) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_work_order_cancel_cd t&lt;br/&gt;                ON TRIM (d.code__c) = TRIM (t.work_order_cancel_cd)&lt;br/&gt;              AND (CASE&lt;br/&gt;                      WHEN d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                         THEN &apos;VNT&apos;&lt;br/&gt;                      WHEN d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                         THEN &apos;BRS&apos;&lt;br/&gt;                   END&lt;br/&gt;                  ) = t.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel_cd.ADD&lt;br/&gt;                     (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                      work_order_cancel_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd       =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      cancel_desc               =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc          =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_work_order_cancel_cd&lt;br/&gt;                  SET cancel_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      cancel_long_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE work_order_cancel_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel_cd.del&lt;br/&gt;                     (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                      work_order_cancel_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd       =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END work_order_cancel_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE work_order_completion_cd (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : work_order_completion_cd&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_WORK_ORDER_COMPLETION_CD from the Data&lt;br/&gt;      ||                       Standard Staging table DST_SUBSCRIBER_ATTRIBUTE__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name&lt;br/&gt;                                                := &apos;WORK_ORDER_COMPLETION_CD&apos;;&lt;br/&gt;      l_stg_work_order_completion_cd   t_work_order_completion_cd.work_order_completion_cd%TYPE;&lt;br/&gt;      l_stg_work_order_category_cd     t_work_order_completion_cd.work_order_category_cd%TYPE;&lt;br/&gt;      l_stg_data_source_type_cd        t_work_order_completion_cd.data_source_type_cd%TYPE;&lt;br/&gt;      l_tgt_work_order_completion_cd   t_work_order_completion_cd.work_order_completion_cd%TYPE;&lt;br/&gt;      l_tgt_work_order_category_cd     t_work_order_completion_cd.work_order_category_cd%TYPE;&lt;br/&gt;      l_tgt_data_source_type_cd        t_work_order_completion_cd.data_source_type_cd%TYPE;&lt;br/&gt;      l_systimestamp                   TIMESTAMP              := SYSTIMESTAMP;&lt;br/&gt;      l_insert_count                   NUMBER                            := 0;&lt;br/&gt;      l_update_count                   NUMBER                            := 0;&lt;br/&gt;      l_delete_count                   NUMBER                            := 0;&lt;br/&gt;      l_exception_count                NUMBER                            := 0;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT s.work_order_completion_cd AS stg_work_order_completion_cd,&lt;br/&gt;                s.work_order_category_cd AS stg_work_order_category_cd,&lt;br/&gt;                s.data_source_type_cd AS stg_data_source_type_cd,&lt;br/&gt;                s.completion_desc AS stg_completion_desc,&lt;br/&gt;                s.completion_long_desc AS stg_completion_long_desc,&lt;br/&gt;                s.record_stat AS stg_record_stat,&lt;br/&gt;                t.work_order_completion_cd AS tgt_work_order_completion_cd,&lt;br/&gt;                t.work_order_category_cd AS tgt_work_order_category_cd,&lt;br/&gt;                t.data_source_type_cd AS tgt_data_source_type_cd,&lt;br/&gt;                t.completion_desc AS tgt_completion_desc,&lt;br/&gt;                t.completion_long_desc AS tgt_completion_long_desc,&lt;br/&gt;                t.record_stat AS tgt_record_stat&lt;br/&gt;           FROM (SELECT TRIM (src.code__c) work_order_completion_cd,&lt;br/&gt;                        CASE&lt;br/&gt;                           WHEN UPPER&lt;br/&gt;                                  (src.record_category__c&lt;br/&gt;                                  ) = &apos;SPECIAL REQUEST RESOLUTION&apos;&lt;br/&gt;                              THEN &apos;Z&apos;&lt;br/&gt;                           WHEN UPPER (src.record_category__c) =&lt;br/&gt;                                                     &apos;TROUBLE CALL RESOLUTION&apos;&lt;br/&gt;                              THEN &apos;T&apos;&lt;br/&gt;                           WHEN UPPER (src.record_category__c) =&lt;br/&gt;                                                           &apos;WORK ORDER REASON&apos;&lt;br/&gt;                              THEN &apos;W&apos;&lt;br/&gt;                        END AS work_order_category_cd,&lt;br/&gt;                        CASE&lt;br/&gt;                           WHEN src.billing_id__c =&lt;br/&gt;                                                 &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN src.billing_id__c =&lt;br/&gt;                                                 &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END AS data_source_type_cd,&lt;br/&gt;                        src.description__c AS completion_desc,&lt;br/&gt;                        src.long_description__c AS completion_long_desc,&lt;br/&gt;                        DECODE (src.is_active__c,&lt;br/&gt;                                1, &apos;A&apos;,&lt;br/&gt;                                0, &apos;D&apos;&lt;br/&gt;                               ) AS record_stat,&lt;br/&gt;                        src.recordtypeid&lt;br/&gt;                   FROM stg.dst_rsn_res_std_note_cd__c src&lt;br/&gt;                  WHERE CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND src.is_active__c = 1&lt;br/&gt;                    AND UPPER (src.record_category__c) IN&lt;br/&gt;                           (&apos;SPECIAL REQUEST RESOLUTION&apos;,&lt;br/&gt;                            &apos;TROUBLE CALL RESOLUTION&apos;, &apos;WORK ORDER REASON&apos;)) s&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_work_order_completion_cd t&lt;br/&gt;                ON s.work_order_completion_cd = t.work_order_completion_cd&lt;br/&gt;              AND s.data_source_type_cd = t.data_source_type_cd&lt;br/&gt;              AND s.work_order_category_cd = t.work_order_category_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_stg_work_order_completion_cd :=&lt;br/&gt;                                         cur_rec.stg_work_order_completion_cd;&lt;br/&gt;         l_stg_work_order_category_cd := cur_rec.stg_work_order_category_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_work_order_completion_cd :=&lt;br/&gt;                                         cur_rec.tgt_work_order_completion_cd;&lt;br/&gt;         l_tgt_work_order_category_cd := cur_rec.tgt_work_order_category_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF     (    cur_rec.tgt_work_order_completion_cd IS NULL&lt;br/&gt;                    AND cur_rec.stg_work_order_completion_cd IS NOT NULL&lt;br/&gt;                   )&lt;br/&gt;               AND (    cur_rec.tgt_work_order_category_cd IS NULL&lt;br/&gt;                    AND cur_rec.stg_work_order_category_cd IS NOT NULL&lt;br/&gt;                   )&lt;br/&gt;               AND (    cur_rec.tgt_data_source_type_cd IS NULL&lt;br/&gt;                    AND cur_rec.stg_data_source_type_cd IS NOT NULL&lt;br/&gt;                   )&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion_cd.ADD&lt;br/&gt;                  (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                   work_order_completion_cd      =&gt; cur_rec.stg_work_order_completion_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; cur_rec.stg_work_order_category_cd,&lt;br/&gt;                   data_source_type_cd           =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                   completion_desc               =&gt; cur_rec.stg_completion_desc,&lt;br/&gt;                   completion_long_desc          =&gt; cur_rec.stg_completion_long_desc,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                          (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                           p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                   || &apos;, stg_work_order_completion_cd = &apos;&lt;br/&gt;                                                   || l_stg_work_order_completion_cd&lt;br/&gt;                                                   || &apos;, tgt_work_order_completion_cd = &apos;&lt;br/&gt;                                                   || l_tgt_work_order_completion_cd&lt;br/&gt;                                                   || &apos;, stg_work_order_category_cd = &apos;&lt;br/&gt;                                                   || l_stg_work_order_category_cd&lt;br/&gt;                                                   || &apos;, tgt_work_order_category_cd = &apos;&lt;br/&gt;                                                   || l_tgt_work_order_category_cd&lt;br/&gt;                                                   || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                   || l_stg_data_source_type_cd&lt;br/&gt;                                                   || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                   || l_tgt_data_source_type_cd&lt;br/&gt;                                                   || &apos; Status = Record Inserted&apos;&lt;br/&gt;                          );&lt;br/&gt;            ELSIF (    (    cur_rec.stg_work_order_completion_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_work_order_category_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_data_source_type_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.stg_completion_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                     NVL (cur_rec.tgt_completion_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.stg_completion_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                NVL (cur_rec.tgt_completion_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.stg_record_stat, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                         NVL (cur_rec.tgt_record_stat, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               -- Update changes in existing records&lt;br/&gt;               UPDATE t_work_order_completion_cd&lt;br/&gt;                  SET completion_desc = cur_rec.stg_completion_desc,&lt;br/&gt;                      completion_long_desc = cur_rec.stg_completion_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE work_order_completion_cd =&lt;br/&gt;                                          cur_rec.tgt_work_order_completion_cd&lt;br/&gt;                  AND work_order_category_cd =&lt;br/&gt;                                            cur_rec.tgt_work_order_category_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                          (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                           p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                   || &apos;, stg_work_order_completion_cd = &apos;&lt;br/&gt;                                                   || l_stg_work_order_completion_cd&lt;br/&gt;                                                   || &apos;, tgt_work_order_completion_cd = &apos;&lt;br/&gt;                                                   || l_tgt_work_order_completion_cd&lt;br/&gt;                                                   || &apos;, stg_work_order_category_cd = &apos;&lt;br/&gt;                                                   || l_stg_work_order_category_cd&lt;br/&gt;                                                   || &apos;, tgt_work_order_category_cd = &apos;&lt;br/&gt;                                                   || l_tgt_work_order_category_cd&lt;br/&gt;                                                   || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                   || l_stg_data_source_type_cd&lt;br/&gt;                                                   || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                   || l_tgt_data_source_type_cd&lt;br/&gt;                                                   || &apos; Status = Record Updated&apos;&lt;br/&gt;                          );&lt;br/&gt;            ELSIF (    cur_rec.stg_record_stat IS NULL&lt;br/&gt;                   AND cur_rec.tgt_record_stat IS NOT NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_record_stat, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               -- Soft delete records&lt;br/&gt;               da_work_order_completion_cd.del&lt;br/&gt;                  (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                   work_order_completion_cd      =&gt; cur_rec.tgt_work_order_completion_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; cur_rec.tgt_work_order_category_cd,&lt;br/&gt;                   data_source_type_cd           =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                          (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                           p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                   || &apos;, stg_work_order_completion_cd = &apos;&lt;br/&gt;                                                   || l_stg_work_order_completion_cd&lt;br/&gt;                                                   || &apos;, tgt_work_order_completion_cd = &apos;&lt;br/&gt;                                                   || l_tgt_work_order_completion_cd&lt;br/&gt;                                                   || &apos;, stg_work_order_category_cd = &apos;&lt;br/&gt;                                                   || l_stg_work_order_category_cd&lt;br/&gt;                                                   || &apos;, tgt_work_order_category_cd = &apos;&lt;br/&gt;                                                   || l_tgt_work_order_category_cd&lt;br/&gt;                                                   || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                   || l_stg_data_source_type_cd&lt;br/&gt;                                                   || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                   || l_tgt_data_source_type_cd&lt;br/&gt;                                                   || &apos; Status = Record Deleted&apos;&lt;br/&gt;                          );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                     (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                      p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                              || &apos;, stg_work_order_completion_cd = &apos;&lt;br/&gt;                                              || l_stg_work_order_completion_cd&lt;br/&gt;                                              || &apos;, tgt_work_order_completion_cd = &apos;&lt;br/&gt;                                              || l_tgt_work_order_completion_cd&lt;br/&gt;                                              || &apos;, stg_work_order_category_cd = &apos;&lt;br/&gt;                                              || l_stg_work_order_category_cd&lt;br/&gt;                                              || &apos;, tgt_work_order_category_cd = &apos;&lt;br/&gt;                                              || l_tgt_work_order_category_cd&lt;br/&gt;                                              || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                              || l_stg_data_source_type_cd&lt;br/&gt;                                              || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                              || l_tgt_data_source_type_cd&lt;br/&gt;                                              || &apos; exception = &apos;&lt;br/&gt;                                              || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                     );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                     (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                      p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                              || &apos;, stg_work_order_completion_cd = &apos;&lt;br/&gt;                                              || l_stg_work_order_completion_cd&lt;br/&gt;                                              || &apos;, tgt_work_order_completion_cd = &apos;&lt;br/&gt;                                              || l_tgt_work_order_completion_cd&lt;br/&gt;                                              || &apos;, stg_work_order_category_cd = &apos;&lt;br/&gt;                                              || l_stg_work_order_category_cd&lt;br/&gt;                                              || &apos;, tgt_work_order_category_cd = &apos;&lt;br/&gt;                                              || l_tgt_work_order_category_cd&lt;br/&gt;                                              || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                              || l_stg_data_source_type_cd&lt;br/&gt;                                              || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                              || l_tgt_data_source_type_cd&lt;br/&gt;                                              || &apos; exception = &apos;&lt;br/&gt;                                              || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                     );&lt;br/&gt;   END work_order_completion_cd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE billing_product_group (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : billing_product_group&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_billing_product_group from the Data&lt;br/&gt;      ||                       Standard Staging table DST_SUBSCRIBER_ATTRIBUTE__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name             t_unit_name          := &apos;BILLING_PRODUCT_GROUP&apos;;&lt;br/&gt;      l_tgt_dtl_prod_grp_nm   t_billing_product_group.detail_product_group_nm%TYPE;&lt;br/&gt;      l_stg_dtl_prod_grp_nm   t_billing_product_group.detail_product_group_nm%TYPE;&lt;br/&gt;      l_systimestamp          TIMESTAMP;&lt;br/&gt;      l_insert_count          NUMBER                                     := 0;&lt;br/&gt;      l_update_count          NUMBER                                     := 0;&lt;br/&gt;      l_delete_count          NUMBER                                     := 0;&lt;br/&gt;      l_exception_count       NUMBER                                     := 0;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.detail_product_group_nm) AS tgt_dtl_prod_grp_nm,&lt;br/&gt;                TRIM (p.dtl_prod_grp_nm) AS stg_dtl_prod_grp_nm,&lt;br/&gt;                t.summary_product_group_nm AS tgt_sum_prod_grp_nm,&lt;br/&gt;                p.sum_prod_grp_nm AS stg_sum_prod_grp_nm,&lt;br/&gt;                t.lob_nm AS tgt_lob_nm, p.dtl_lob_nm AS stg_lob_nm,&lt;br/&gt;                t.record_stat AS tgt_status,&lt;br/&gt;                DECODE (p.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_status&lt;br/&gt;           FROM (SELECT dtl.dtl_prod_grp_nm, smm.sum_prod_grp_nm,&lt;br/&gt;                        dtl.dtl_lob_nm, dtl.is_active__c&lt;br/&gt;                   FROM (SELECT NAME AS dtl_prod_grp_nm,&lt;br/&gt;                                summary_product_category__c&lt;br/&gt;                                                     AS dtl_sum_prod_catg_cd,&lt;br/&gt;                                line_of_business__c AS dtl_lob_nm,&lt;br/&gt;                                is_active__c&lt;br/&gt;                           FROM stg.dst_product_category__c&lt;br/&gt;                          WHERE billing_id__c = &apos;DS&apos;&lt;br/&gt;                            AND record_category__c = &apos;Detail Product Category&apos;&lt;br/&gt;                            AND is_active__c = 1) dtl&lt;br/&gt;                        INNER JOIN&lt;br/&gt;                        (SELECT NAME AS sum_prod_grp_nm, ID AS sum_id&lt;br/&gt;                           FROM stg.dst_product_category__c&lt;br/&gt;                          WHERE billing_id__c = &apos;DS&apos;&lt;br/&gt;                            AND record_category__c =&lt;br/&gt;                                                    &apos;Summary Product Category&apos;&lt;br/&gt;                            AND is_active__c = 1) smm&lt;br/&gt;                        ON dtl.dtl_sum_prod_catg_cd = smm.sum_id&lt;br/&gt;                        ) p&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_billing_product_group t&lt;br/&gt;                ON TRIM (p.dtl_prod_grp_nm) = TRIM (t.detail_product_group_nm)&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_dtl_prod_grp_nm := cur_rec.tgt_dtl_prod_grp_nm;&lt;br/&gt;         l_stg_dtl_prod_grp_nm := cur_rec.stg_dtl_prod_grp_nm;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (    cur_rec.tgt_dtl_prod_grp_nm IS NULL&lt;br/&gt;                AND cur_rec.stg_dtl_prod_grp_nm IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_billing_product_group.ADD&lt;br/&gt;                    (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                     detail_product_group_nm       =&gt; cur_rec.stg_dtl_prod_grp_nm,&lt;br/&gt;                     summary_product_group_nm      =&gt; cur_rec.stg_sum_prod_grp_nm,&lt;br/&gt;                     lob_nm                        =&gt; cur_rec.stg_lob_nm,&lt;br/&gt;                     audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                    );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                              || l_stg_dtl_prod_grp_nm&lt;br/&gt;                                                              || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                              || l_tgt_dtl_prod_grp_nm&lt;br/&gt;                                                              || &apos; Status = Record Inserted&apos;&lt;br/&gt;                                     );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_dtl_prod_grp_nm IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_dtl_prod_grp_nm IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_sum_prod_grp_nm, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                     NVL (cur_rec.stg_sum_prod_grp_nm, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                              NVL (cur_rec.stg_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_billing_product_group&lt;br/&gt;                  SET summary_product_group_nm = cur_rec.stg_sum_prod_grp_nm,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE detail_product_group_nm = cur_rec.tgt_dtl_prod_grp_nm;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                              || l_stg_dtl_prod_grp_nm&lt;br/&gt;                                                              || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                              || l_tgt_dtl_prod_grp_nm&lt;br/&gt;                                                              || &apos; Status = Record Updated&apos;&lt;br/&gt;                                     );&lt;br/&gt;            ELSIF (    cur_rec.tgt_dtl_prod_grp_nm IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_dtl_prod_grp_nm IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_billing_product_group.del&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      detail_product_group_nm      =&gt; cur_rec.tgt_dtl_prod_grp_nm,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                              || l_stg_dtl_prod_grp_nm&lt;br/&gt;                                                              || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                              || l_tgt_dtl_prod_grp_nm&lt;br/&gt;                                                              || &apos; Status = Record Deleted&apos;&lt;br/&gt;                                     );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_dtl_prod_grp_nm&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_dtl_prod_grp_nm&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_dtl_prod_grp_nm&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_dtl_prod_grp_nm&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END billing_product_group;&lt;br/&gt;&lt;br/&gt;   PROCEDURE billing_product (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : billing_product&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table t_billing_product from the Data&lt;br/&gt;      ||                       Standard Staging table DST_SUBSCRIBER_ATTRIBUTE__C. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name         t_unit_name                    := &apos;BILLING_PRODUCT&apos;;&lt;br/&gt;      l_stg_ref_cd        t_billing_product.billing_product_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd        t_billing_product.billing_product_cd%TYPE;&lt;br/&gt;      l_systimestamp      TIMESTAMP;&lt;br/&gt;      l_insert_count      NUMBER                                      := 0;&lt;br/&gt;      l_update_count      NUMBER                                      := 0;&lt;br/&gt;      l_delete_count      NUMBER                                      := 0;&lt;br/&gt;      l_exception_count   NUMBER                                      := 0;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (t.billing_product_cd) AS tgt_ref_cd,&lt;br/&gt;                TRIM (d.blg_prod_cd) AS stg_ref_cd,&lt;br/&gt;                t.billing_product_description AS tgt_ref_desc,&lt;br/&gt;                d.blg_prod_desc AS stg_ref_desc,&lt;br/&gt;                t.billing_product_long_descr AS tgt_ref_long_desc,&lt;br/&gt;                d.blg_prod_long_desc AS stg_ref_long_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status,&lt;br/&gt;                DECODE (d.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                t.billing_product_id AS tgt_billing_product_id,&lt;br/&gt;                d.detail_product_group_nm, d.blg_prod_cd_type_nm,&lt;br/&gt;                d.data_src_type_cd, d.src_sys_id, d.blg_prod_cust_type_nm,&lt;br/&gt;                d.lob_nm, d.sbscr_srvc_cnt_ind, d.gl_acct_nm,&lt;br/&gt;                d.hsd_speed_desc&lt;br/&gt;           FROM (SELECT p.blg_prod_cd, p.blg_prod_desc, p.blg_prod_long_desc,&lt;br/&gt;                        p.data_src_type_cd, p.src_sys_id,&lt;br/&gt;                        p.blg_prod_cust_type_nm, p.sbscr_srvc_cnt_ind,&lt;br/&gt;                        p.gl_acct_nm, p.hsd_speed_desc,&lt;br/&gt;                        p.blg_prod_cd_type_nm, q.detail_product_group_nm,&lt;br/&gt;                        p.lob_nm, p.is_active__c&lt;br/&gt;                   FROM (SELECT CASE&lt;br/&gt;                                   WHEN billing_id__c =&lt;br/&gt;                                                    &apos;CHR&apos;&lt;br/&gt;                                      THEN &apos;VNT&apos;&lt;br/&gt;                                   WHEN billing_id__c =&lt;br/&gt;                                                    &apos;MSI&apos;&lt;br/&gt;                                      THEN &apos;BRS&apos;&lt;br/&gt;                                   ELSE NULL&lt;br/&gt;                                END AS data_src_type_cd,&lt;br/&gt;                                a.ID AS src_sys_id, a.code__c AS blg_prod_cd,&lt;br/&gt;                                a.description__c AS blg_prod_desc,&lt;br/&gt;                                a.long_description__c AS blg_prod_long_desc,&lt;br/&gt;                                a.customer_type__c AS blg_prod_cust_type_nm,&lt;br/&gt;                                (CASE&lt;br/&gt;                                    WHEN UPPER&lt;br/&gt;                                              (a.subscriber_service_count_flag) =&lt;br/&gt;                                                                         &apos;YES&apos;&lt;br/&gt;                                       THEN 1&lt;br/&gt;                                    ELSE 0&lt;br/&gt;                                 END&lt;br/&gt;                                ) AS sbscr_srvc_cnt_ind,&lt;br/&gt;                                a.lu_gl_account__c AS gl_acct_nm,&lt;br/&gt;                                a.hsd_speed__c AS hsd_speed_desc,&lt;br/&gt;                                a.product_type__c AS product_type__c,&lt;br/&gt;                                a.detail_product_category__c&lt;br/&gt;                                               AS detail_product_category__c,&lt;br/&gt;                                a.code_type__c AS blg_prod_cd_type_nm,&lt;br/&gt;                                a.line_of_business__c AS lob_nm,&lt;br/&gt;                                a.is_active__c&lt;br/&gt;                           FROM stg.dst_service_code__c a&lt;br/&gt;                          WHERE a.is_active__c = 1&lt;br/&gt;                            AND CASE&lt;br/&gt;                                   WHEN a.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                                      THEN &apos;VNT&apos;&lt;br/&gt;                                   WHEN a.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                                      THEN &apos;BRS&apos;&lt;br/&gt;                                END IN (SELECT data_source_type_cd&lt;br/&gt;                                          FROM t_data_source_type&lt;br/&gt;                                         WHERE record_stat = &apos;A&apos;)) p&lt;br/&gt;                        LEFT OUTER JOIN&lt;br/&gt;                        (SELECT b.ID, a.detail_product_group_nm&lt;br/&gt;                           FROM t_billing_product_group a INNER JOIN stg.dst_product_category__c b&lt;br/&gt;                                ON UPPER (a.detail_product_group_nm) =&lt;br/&gt;                                                             UPPER (b.code__c)&lt;br/&gt;                              AND UPPER (b.record_category__c) =&lt;br/&gt;                                                     &apos;DETAIL PRODUCT CATEGORY&apos;&lt;br/&gt;                              AND b.is_active__c = 1&lt;br/&gt;                                ) q ON p.detail_product_category__c = q.ID&lt;br/&gt;                        ) d&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_billing_product t&lt;br/&gt;                ON TRIM (t.billing_product_cd) = TRIM (d.blg_prod_cd)&lt;br/&gt;              AND t.data_source_type_cd = d.data_src_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_billing_product.ADD&lt;br/&gt;                  (process_rec                       =&gt; p_process_rec_i,&lt;br/&gt;                   detail_product_group_nm           =&gt; cur_rec.detail_product_group_nm,&lt;br/&gt;                   billing_product_code_type_nm      =&gt; cur_rec.blg_prod_cd_type_nm,&lt;br/&gt;                   billing_product_id                =&gt; chtr.s_billing_product_id.NEXTVAL,&lt;br/&gt;                   data_source_type_cd               =&gt; cur_rec.data_src_type_cd,&lt;br/&gt;                   source_system_id                  =&gt; cur_rec.src_sys_id,&lt;br/&gt;                   billing_product_cd                =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                   billing_product_description       =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                   billing_product_long_descr        =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                   billing_product_cust_type_nm      =&gt; cur_rec.blg_prod_cust_type_nm,&lt;br/&gt;                   line_of_business_nm               =&gt; cur_rec.lob_nm,&lt;br/&gt;                   subscriber_service_count_ind      =&gt; cur_rec.sbscr_srvc_cnt_ind,&lt;br/&gt;                   gl_account_nm                     =&gt; cur_rec.gl_acct_nm,&lt;br/&gt;                   hsd_speed_desc                    =&gt; cur_rec.hsd_speed_desc,&lt;br/&gt;                   audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                              || l_stg_ref_cd&lt;br/&gt;                                                              || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                              || l_tgt_ref_cd&lt;br/&gt;                                                              || &apos; Status = Record Inserted&apos;&lt;br/&gt;                                     );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_billing_product&lt;br/&gt;                  SET data_source_type_cd = cur_rec.data_src_type_cd,&lt;br/&gt;                      source_system_id = cur_rec.src_sys_id,&lt;br/&gt;                      billing_product_description = cur_rec.stg_ref_desc,&lt;br/&gt;                      billing_product_long_descr = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      billing_product_cust_type_nm =&lt;br/&gt;                                                 cur_rec.blg_prod_cust_type_nm,&lt;br/&gt;                      line_of_business_nm = cur_rec.lob_nm,&lt;br/&gt;                      subscriber_service_count_ind =&lt;br/&gt;                                                    cur_rec.sbscr_srvc_cnt_ind,&lt;br/&gt;                      gl_account_nm = cur_rec.gl_acct_nm,&lt;br/&gt;                      hsd_speed_desc = cur_rec.hsd_speed_desc,&lt;br/&gt;                      detail_product_group_nm =&lt;br/&gt;                                               cur_rec.detail_product_group_nm,&lt;br/&gt;                      billing_product_code_type_nm =&lt;br/&gt;                                                   cur_rec.blg_prod_cd_type_nm,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE billing_product_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND billing_product_id = cur_rec.tgt_billing_product_id;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                              || l_stg_ref_cd&lt;br/&gt;                                                              || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                              || l_tgt_ref_cd&lt;br/&gt;                                                              || &apos; Status = Record Updated&apos;&lt;br/&gt;                                     );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_billing_product.del&lt;br/&gt;                       (process_rec             =&gt; p_process_rec_i,&lt;br/&gt;                        billing_product_id      =&gt; cur_rec.tgt_billing_product_id,&lt;br/&gt;                        audit_user              =&gt; p_audit_user_i&lt;br/&gt;                       );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                              || l_stg_ref_cd&lt;br/&gt;                                                              || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                              || l_tgt_ref_cd&lt;br/&gt;                                                              || &apos; Status = Record Deleted&apos;&lt;br/&gt;                                     );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END billing_product;&lt;br/&gt;&lt;br/&gt;   PROCEDURE product (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : product&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_PRODUCT from the Data&lt;br/&gt;      ||                       Standard Staging table DST EQUIPMENT__C. This is a insert-or-update&lt;br/&gt;      ||                       process wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name         t_unit_name                 := &apos;PRODUCT&apos;;&lt;br/&gt;      l_stg_ref_cd        t_product.product_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd        t_product.product_cd%TYPE;&lt;br/&gt;      l_systimestamp      TIMESTAMP;&lt;br/&gt;      l_insert_count      NUMBER                      := 0;&lt;br/&gt;      l_update_count      NUMBER                      := 0;&lt;br/&gt;      l_delete_count      NUMBER                      := 0;&lt;br/&gt;      l_exception_count   NUMBER                      := 0;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT s.prod_cd AS stg_ref_cd, s.prod_nm AS stg_prod_nm,&lt;br/&gt;                s.prod_desc AS stg_prod_desc,&lt;br/&gt;                DECODE (s.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                t.product_id AS tgt_prod_id, t.product_cd AS tgt_ref_cd,&lt;br/&gt;                t.product_nm AS tgt_prod_nm, t.product_desc AS tgt_prod_desc,&lt;br/&gt;                t.record_stat AS tgt_ref_status&lt;br/&gt;           FROM (SELECT dst.model AS prod_cd, dst.description__c AS prod_nm,&lt;br/&gt;                        dst.long_description__c AS prod_desc,&lt;br/&gt;                        dst.is_active__c&lt;br/&gt;                   FROM (SELECT a.code__c AS model, a.description__c,&lt;br/&gt;                                a.long_description__c, a.is_active__c&lt;br/&gt;                           FROM stg.dst_equipment__c a&lt;br/&gt;                          WHERE a.code_table__c = &apos;OM&apos;&lt;br/&gt;                            AND CASE&lt;br/&gt;                                   WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                                      THEN &apos;VNT&apos;&lt;br/&gt;                                   WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                                      THEN &apos;BRS&apos;&lt;br/&gt;                                END IN (SELECT data_source_type_cd&lt;br/&gt;                                          FROM t_data_source_type&lt;br/&gt;                                         WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                            AND a.is_active__c = 1) dst) s&lt;br/&gt;                INNER JOIN&lt;br/&gt;                t_product t ON t.product_cd = s.prod_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            /*IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_product.add&lt;br/&gt;                    (process_rec         =&gt; p_process_rec_i,&lt;br/&gt;                     data_source_type_cd =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                     product_cd          =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                     product_nm          =&gt; cur_rec.stg_prod_nm,&lt;br/&gt;                     product_desc        =&gt; cur_rec.stg_prod_desc,&lt;br/&gt;                     product_type_cd     =&gt; cur_rec.stg_prod_type_cd,&lt;br/&gt;                     product_class_cd    =&gt; cur_rec.stg_prod_cls_cd,&lt;br/&gt;                     supplier_party_id   =&gt; cur_rec.stg_mfr_cd,&lt;br/&gt;                     billing_product_id  =&gt; cur_rec.stg_blg_prod_id,&lt;br/&gt;                     audit_user          =&gt; p_audit_user_i&lt;br/&gt;                    );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;            ELS*/&lt;br/&gt;            IF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                     AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                    )&lt;br/&gt;                AND (   NVL (cur_rec.tgt_prod_nm, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                             NVL (cur_rec.stg_prod_nm, &apos;NULL&apos;)&lt;br/&gt;                     OR NVL (cur_rec.tgt_prod_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                           NVL (cur_rec.stg_prod_desc, &apos;NULL&apos;)&lt;br/&gt;                     OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                    )&lt;br/&gt;               )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_product&lt;br/&gt;                  SET product_nm = NVL (cur_rec.stg_prod_nm, product_nm),&lt;br/&gt;                      product_desc = NVL (cur_rec.stg_prod_desc, product_desc),&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE product_id = cur_rec.tgt_prod_id;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                              || l_stg_ref_cd&lt;br/&gt;                                                              || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                              || l_tgt_ref_cd&lt;br/&gt;                                                              || &apos; Status = Record Updated&apos;&lt;br/&gt;                                     );&lt;br/&gt;            /*ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt; pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_product.del&lt;br/&gt;                     (process_rec =&gt; p_process_rec_i,&lt;br/&gt;                      product_id  =&gt; cur_rec.tgt_prod_id,&lt;br/&gt;                      audit_user  =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;            */&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; NULL,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; NULL,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END product;&lt;br/&gt;&lt;br/&gt;   PROCEDURE equip_component_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : equip_component_type&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_EQUIP_COMPONENT_TYPE from the&lt;br/&gt;      ||                       Data Standard Staging table dst_equipment__c. This is a insert-or-update process&lt;br/&gt;      ||                       wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name       := &apos;EQUIP_COMPONENT_TYPE&apos;;&lt;br/&gt;      l_stg_ref_cd                t_equip_component_type.equip_component_type_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_equip_component_type.equip_component_type_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (p.code__c) AS stg_ref_cd,&lt;br/&gt;                p.data_src_type_cd AS stg_data_source_type_cd,&lt;br/&gt;                p.compt_desc AS stg_ref_desc,&lt;br/&gt;                p.compt_sum_desc AS stg_ref_long_desc,&lt;br/&gt;                DECODE (p.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                TRIM (a.equip_component_type_cd) AS tgt_ref_cd,&lt;br/&gt;                a.data_source_type_cd AS tgt_data_source_type_cd,&lt;br/&gt;                a.component_desc AS tgt_ref_desc,&lt;br/&gt;                a.component_summary_desc AS tgt_ref_long_desc,&lt;br/&gt;                a.record_stat AS tgt_ref_status&lt;br/&gt;           FROM ((SELECT data_src_type_cd, code__c, compt_desc,&lt;br/&gt;                         compt_sum_desc, is_active__c, row_num&lt;br/&gt;                    FROM (SELECT &apos;VNT&apos; AS data_src_type_cd,&lt;br/&gt;                                 CAST (d.code__c AS VARCHAR (60)) AS code__c,&lt;br/&gt;                                 CAST&lt;br/&gt;                                    (d.description__c AS VARCHAR (100)&lt;br/&gt;                                    ) AS compt_desc,&lt;br/&gt;                                 CAST&lt;br/&gt;                                    (s.description__c AS VARCHAR (100)&lt;br/&gt;                                    ) AS compt_sum_desc,&lt;br/&gt;                                 d.is_active__c,&lt;br/&gt;                                 ROW_NUMBER () OVER (PARTITION BY &apos;VNT&apos;, CAST&lt;br/&gt;                                                                           (d.code__c AS VARCHAR (60)&lt;br/&gt;                                                                           ) ORDER BY d.lastmodifieddate DESC,&lt;br/&gt;                                  d.systemmodstamp DESC,&lt;br/&gt;                                  d.description__c,&lt;br/&gt;                                  s.description__c) AS row_num&lt;br/&gt;                            FROM stg.dst_equipment__c d LEFT OUTER JOIN stg.dst_equipment__c s&lt;br/&gt;                                 ON d.equipment_type__c = s.ID&lt;br/&gt;                               AND s.code_table__c = &apos;ET&apos;&lt;br/&gt;                               AND s.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                               AND s.is_active__c = 1&lt;br/&gt;                           WHERE d.code_table__c = &apos;CD&apos;&lt;br/&gt;                             AND d.billing_id__c = &apos;CHR&apos;&lt;br/&gt;                             AND d.is_active__c = 1&lt;br/&gt;                             AND d.createddate =&lt;br/&gt;                                    (SELECT MAX (a.createddate)&lt;br/&gt;                                       FROM stg.dst_equipment__c a&lt;br/&gt;                                      WHERE a.code__c = d.code__c&lt;br/&gt;                                        AND a.billing_id__c = d.billing_id__c))&lt;br/&gt;                   WHERE row_num = 1)&lt;br/&gt;                 UNION&lt;br/&gt;                 (SELECT data_src_type_cd, code__c, compt_desc,&lt;br/&gt;                         compt_sum_desc, is_active__c, row_num&lt;br/&gt;                    FROM (SELECT &apos;BRS&apos; AS data_src_type_cd,&lt;br/&gt;                                 CAST (d.code__c AS VARCHAR (60)) AS code__c,&lt;br/&gt;                                 CAST&lt;br/&gt;                                    (d.description__c AS VARCHAR (100)&lt;br/&gt;                                    ) AS compt_desc,&lt;br/&gt;                                 CAST&lt;br/&gt;                                    (s.description__c AS VARCHAR (100)&lt;br/&gt;                                    ) AS compt_sum_desc,&lt;br/&gt;                                 d.is_active__c,&lt;br/&gt;                                 ROW_NUMBER () OVER (PARTITION BY &apos;BRS&apos;, CAST&lt;br/&gt;                                                                           (d.code__c AS VARCHAR (60)&lt;br/&gt;                                                                           ) ORDER BY d.lastmodifieddate DESC,&lt;br/&gt;                                  d.systemmodstamp DESC,&lt;br/&gt;                                  d.description__c,&lt;br/&gt;                                  s.description__c) AS row_num&lt;br/&gt;                            FROM stg.dst_equipment__c d LEFT OUTER JOIN stg.dst_equipment__c s&lt;br/&gt;                                 ON d.equipment_type__c = s.ID&lt;br/&gt;                               AND s.code_table__c = &apos;ET&apos;&lt;br/&gt;                               AND s.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                               AND s.is_active__c = 1&lt;br/&gt;                           WHERE d.code_table__c = &apos;CD&apos;&lt;br/&gt;                             AND d.billing_id__c = &apos;MSI&apos;&lt;br/&gt;                             AND d.is_active__c = 1&lt;br/&gt;                             AND d.createddate =&lt;br/&gt;                                    (SELECT MAX (a.createddate)&lt;br/&gt;                                       FROM stg.dst_equipment__c a&lt;br/&gt;                                      WHERE a.code__c = d.code__c&lt;br/&gt;                                        AND a.billing_id__c = d.billing_id__c))&lt;br/&gt;                   WHERE row_num = 1)) p&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_equip_component_type a&lt;br/&gt;                ON p.code__c = a.equip_component_type_cd&lt;br/&gt;              AND p.data_src_type_cd = a.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_equip_component_type.ADD&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      equip_component_type_cd      =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd          =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      component_desc               =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      component_summary_desc       =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_equip_component_type&lt;br/&gt;                  SET component_desc = cur_rec.stg_ref_desc,&lt;br/&gt;                      component_summary_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE equip_component_type_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_equip_component_type.del&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      equip_component_type_cd      =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd          =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END equip_component_type;&lt;br/&gt;&lt;br/&gt;   PROCEDURE equip_type (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : equip_type&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_EQUIP_TYPE from the&lt;br/&gt;      ||                       Data Standard Staging table dst_equipment__c. This is a insert-or-update process&lt;br/&gt;      ||                       wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name                 := &apos;EQUIP_TYPE&apos;;&lt;br/&gt;      l_stg_ref_cd                t_equip_type.equip_type_cd%TYPE;&lt;br/&gt;      l_tgt_ref_cd                t_equip_type.equip_type_cd%TYPE;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                            := 0;&lt;br/&gt;      l_update_count              NUMBER                            := 0;&lt;br/&gt;      l_delete_count              NUMBER                            := 0;&lt;br/&gt;      l_exception_count           NUMBER                            := 0;&lt;br/&gt;      l_stg_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;      l_tgt_data_source_type_cd   VARCHAR2 (5);&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_dst_sub_attr&lt;br/&gt;      IS&lt;br/&gt;         SELECT TRIM (p.code__c) AS stg_ref_cd,&lt;br/&gt;                p.data_src_type_cd AS stg_data_source_type_cd,&lt;br/&gt;                p.description__c AS stg_ref_desc,&lt;br/&gt;                p.long_description__c AS stg_ref_long_desc,&lt;br/&gt;                DECODE (p.is_active__c, 1, &apos;A&apos;, 0, &apos;D&apos;) AS stg_ref_status,&lt;br/&gt;                TRIM (a.equip_type_cd) AS tgt_ref_cd,&lt;br/&gt;                a.data_source_type_cd AS tgt_data_source_type_cd,&lt;br/&gt;                a.equip_type_name AS tgt_ref_desc,&lt;br/&gt;                a.equip_type_desc AS tgt_ref_long_desc,&lt;br/&gt;                a.record_stat AS tgt_ref_status&lt;br/&gt;           FROM (SELECT CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                           ELSE &apos;VNT&apos;&lt;br/&gt;                        END AS data_src_type_cd,&lt;br/&gt;                        code__c, description__c, long_description__c,&lt;br/&gt;                        is_active__c&lt;br/&gt;                   FROM stg.dst_equipment__c&lt;br/&gt;                  WHERE code_table__c = &apos;ET&apos;&lt;br/&gt;                    AND CASE&lt;br/&gt;                           WHEN billing_id__c = &apos;CHR&apos;&lt;br/&gt;                              THEN &apos;VNT&apos;&lt;br/&gt;                           WHEN billing_id__c = &apos;MSI&apos;&lt;br/&gt;                              THEN &apos;BRS&apos;&lt;br/&gt;                        END IN (SELECT data_source_type_cd&lt;br/&gt;                                  FROM t_data_source_type&lt;br/&gt;                                 WHERE record_stat = &apos;A&apos;)&lt;br/&gt;                    AND is_active__c = 1) p&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_equip_type a&lt;br/&gt;                ON p.code__c = a.equip_type_cd&lt;br/&gt;              AND p.data_src_type_cd = a.data_source_type_cd&lt;br/&gt;                ;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_dst_sub_attr&lt;br/&gt;      LOOP&lt;br/&gt;         l_tgt_ref_cd := cur_rec.tgt_ref_cd;&lt;br/&gt;         l_stg_ref_cd := cur_rec.stg_ref_cd;&lt;br/&gt;         l_stg_data_source_type_cd := cur_rec.stg_data_source_type_cd;&lt;br/&gt;         l_tgt_data_source_type_cd := cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (cur_rec.tgt_ref_cd IS NULL AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_equip_type.ADD&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      equip_type_cd            =&gt; cur_rec.stg_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.stg_data_source_type_cd,&lt;br/&gt;                      equip_type_name          =&gt; cur_rec.stg_ref_desc,&lt;br/&gt;                      equip_type_desc          =&gt; cur_rec.stg_ref_long_desc,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                        AND cur_rec.stg_ref_cd IS NOT NULL&lt;br/&gt;                       )&lt;br/&gt;                   AND (   NVL (cur_rec.tgt_ref_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                            NVL (cur_rec.stg_ref_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_long_desc, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                       NVL (cur_rec.stg_ref_long_desc, &apos;NULL&apos;)&lt;br/&gt;                        OR NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                          NVL (cur_rec.stg_ref_status, &apos;NULL&apos;)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            -- Update changes in existing records&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_equip_type&lt;br/&gt;                  SET equip_type_name = cur_rec.stg_ref_desc,&lt;br/&gt;                      equip_type_desc = cur_rec.stg_ref_long_desc,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE equip_type_cd = cur_rec.tgt_ref_cd&lt;br/&gt;                  AND data_source_type_cd = cur_rec.tgt_data_source_type_cd;&lt;br/&gt;&lt;br/&gt;               l_update_count := l_update_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    cur_rec.tgt_ref_cd IS NOT NULL&lt;br/&gt;                   AND cur_rec.stg_ref_cd IS NULL&lt;br/&gt;                   AND NVL (cur_rec.tgt_ref_status, &apos;NULL&apos;) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_delete&lt;br/&gt;                  )&lt;br/&gt;            -- Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               da_equip_type.del&lt;br/&gt;                     (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                      equip_type_cd            =&gt; cur_rec.tgt_ref_cd,&lt;br/&gt;                      data_source_type_cd      =&gt; cur_rec.tgt_data_source_type_cd,&lt;br/&gt;                      audit_user               =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                        || l_stg_ref_cd&lt;br/&gt;                                                        || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                        || l_tgt_ref_cd&lt;br/&gt;                                                        || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_stg_data_source_type_cd&lt;br/&gt;                                                        || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                        || l_tgt_data_source_type_cd&lt;br/&gt;                                                        || &apos; Status = Record Deleted&apos;&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         END;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, stg_ref_cd = &apos;&lt;br/&gt;                                                  || l_stg_ref_cd&lt;br/&gt;                                                  || &apos;, tgt_ref_cd = &apos;&lt;br/&gt;                                                  || l_tgt_ref_cd&lt;br/&gt;                                                  || &apos;, stg_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_stg_data_source_type_cd&lt;br/&gt;                                                  || &apos;, tgt_data_source_type_cd = &apos;&lt;br/&gt;                                                  || l_tgt_data_source_type_cd&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END equip_type;&lt;br/&gt;END pkg_dst_load_ref_codes;</source>
</body>
</PackageOracle>
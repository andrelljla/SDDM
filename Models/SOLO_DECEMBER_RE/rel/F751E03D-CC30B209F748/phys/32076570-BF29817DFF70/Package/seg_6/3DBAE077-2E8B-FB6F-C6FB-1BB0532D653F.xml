<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_EQP_BASE" directorySegmentName="seg_6" id="3DBAE077-2E8B-FB6F-C6FB-1BB0532D653F">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_EQP_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:34 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_EQP_BASE&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||Program Name    : pkg_vnt_load_eqp_base&lt;br/&gt;||Created By      : knoll&lt;br/&gt;||Created Date    : 01-Sep-2014&lt;br/&gt;||Subject Area    : Equipment&lt;br/&gt;||Description     : The package pkg_vnt_load_eqp_base controls the initial load of the Vantage&lt;br/&gt;||                  eqp_base table into SOLODB.&lt;br/&gt;||Change log      :&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;||     knoll          Feb-2015        Rework.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;PROCEDURE load(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize   NUMBER DEFAULT 5000);&lt;br/&gt;END pkg_vnt_load_eqp_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_EQP_BASE" id="3DBAE077-2E8B-FB6F-C6FB-1BB0532D653F">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_EQP_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:35 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_EQP_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_vnt_load_eqp_base&lt;br/&gt;   ||  Created By      : knoll&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : Equipment&lt;br/&gt;   ||  Description     : The package pkg_vnt_load_eqp_base controls the initial load of the Vantage&lt;br/&gt;   ||                    eqp_base table into SOLODB.  It also updates settop_box based on this load.&lt;br/&gt;   ||  Change log      :&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ||     knoll          15-Dec-2014     Equipment model changes&lt;br/&gt;   ||     Cognizant      10-Jan-2015     Added ROW_NUMBER logic in the cursor query to avoid duplicate data&lt;br/&gt;   ||     knoll          Feb-2015        Reworked.  Use il tables.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_in_progress CONSTANT VARCHAR2 (1) := &apos;I&apos;;&lt;br/&gt;   c_stg_error CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_pkg_name CONSTANT t_unit_name := &apos;PKG_VNT_LOAD_EQP_BASE&apos;;&lt;br/&gt;   c_null_date CONSTANT DATE := TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;);&lt;br/&gt;   c_ts_format CONSTANT VARCHAR2 (21) := &apos;YYYY.MM.DD.HH24.MI.SS&apos;;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread NUMBER := 1;&lt;br/&gt;   g_max_thread NUMBER := 1;&lt;br/&gt;   g_batchsize NUMBER := 1000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged eqp_base for loading&lt;br/&gt;   CURSOR cur_stg_eqp_base&lt;br/&gt;   IS&lt;br/&gt;      select s_equip_component_id.NEXTVAL AS equip_component_id,&lt;br/&gt;         a.* from&lt;br/&gt;      (&lt;br/&gt;      SELECT /*+ parallel(eqp,8) */&lt;br/&gt;         &apos;VNT&apos; AS data_source_type_cd,&lt;br/&gt;         eqp.ROWID AS ID,&lt;br/&gt;         eqp.record_load_cd,&lt;br/&gt;         epi.equip_prod_inst_id,&lt;br/&gt;         TRIM(eqp.eqp_cmpnt_eqp) AS equip_component_type_cd,&lt;br/&gt;         TRIM(eqp.eqp_typ_eqp) AS equip_type_cd,&lt;br/&gt;         TRIM(UPPER(eqp.eqp_serial_eqp)) AS equip_esn_val,&lt;br/&gt;         TRIM (eqp.eqp_stat_eqp) AS equip_status_cd,&lt;br/&gt;         REGEXP_REPLACE(TRIM(UPPER(eqp.eqp_addr_eqp)), &apos;[^a-zA-Z0-9]+&apos;, &apos;&apos; ) AS equip_mac_address_id,&lt;br/&gt;         REGEXP_REPLACE(TRIM(UPPER(eqp.estb_addr_eqp)), &apos;[^a-zA-Z0-9]+&apos;, &apos;&apos; ) AS equip_sec_mac_address_id,&lt;br/&gt;         DECODE(eqp.stat_chg_dte_eqp, c_null_date, NULL, TO_CHAR (eqp.stat_chg_dte_eqp, &apos;YYYY.MM.DD&apos;) ) AS&lt;br/&gt;         effective_date,&lt;br/&gt;         eqp.stat_chg_tme_eqp AS effective_time&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_eqp_base_il eqp&lt;br/&gt;      INNER JOIN t_equip_prod_inst epi&lt;br/&gt;      ON&lt;br/&gt;         (&lt;br/&gt;            epi.equipment_esn_val = TRIM (UPPER (eqp.eqp_serial_eqp))&lt;br/&gt;         )&lt;br/&gt;      INNER JOIN stg.vnt_nql_hist_il nql&lt;br/&gt;      ON&lt;br/&gt;         (&lt;br/&gt;            nql.sys_nql = eqp.sys_eqp&lt;br/&gt;            AND nql.prin_nql = eqp.prin_eqp&lt;br/&gt;            AND TRIM(UPPER(nql.eqp_serial_nql)) = TRIM(UPPER(eqp.eqp_serial_eqp))&lt;br/&gt;            AND TRIM(UPPER(nql.eqp_serial_nql)) = epi.equipment_esn_val&lt;br/&gt;         )&lt;br/&gt;      WHERE&lt;br/&gt;         eqp.record_load_cd IS NULL&lt;br/&gt;         AND nql.record_load_cd = c_stg_processed&lt;br/&gt;      UNION&lt;br/&gt;      SELECT /*+ parallel(eqp,8) */&lt;br/&gt;         &apos;VNT&apos; AS data_source_type_cd,&lt;br/&gt;         eqp.ROWID AS ID,&lt;br/&gt;         eqp.record_load_cd,&lt;br/&gt;         epi.equip_prod_inst_id,&lt;br/&gt;         TRIM (eqp.eqp_cmpnt_eqp) AS equip_component_type_cd,&lt;br/&gt;         TRIM (eqp.eqp_typ_eqp) AS equip_type_cd,&lt;br/&gt;         UPPER(TRIM(eqp.eqp_serial_eqp)) AS equip_esn_val,&lt;br/&gt;         TRIM (eqp.eqp_stat_eqp) AS equip_status_cd,&lt;br/&gt;         REGEXP_REPLACE (TRIM (UPPER (eqp.eqp_addr_eqp)), &apos;[^a-zA-Z0-9]+&apos;, &apos;&apos; ) AS equip_mac_address_id,&lt;br/&gt;         REGEXP_REPLACE (TRIM (UPPER (eqp.estb_addr_eqp)), &apos;[^a-zA-Z0-9]+&apos;, &apos;&apos; ) AS equip_sec_mac_address_id,&lt;br/&gt;         DECODE (eqp.stat_chg_dte_eqp, c_null_date, NULL, TO_CHAR (eqp.stat_chg_dte_eqp, &apos;YYYY.MM.DD&apos;) ) AS&lt;br/&gt;         effective_date,&lt;br/&gt;         eqp.stat_chg_tme_eqp AS effective_time&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_eqp_base_il eqp&lt;br/&gt;      INNER JOIN t_equip_prod_inst epi&lt;br/&gt;      ON&lt;br/&gt;         (&lt;br/&gt;            epi.equipment_esn_val = TRIM (UPPER (eqp.assoc_equip_eqp))&lt;br/&gt;         )&lt;br/&gt;      INNER JOIN stg.vnt_nql_hist_il nql&lt;br/&gt;      ON&lt;br/&gt;         (&lt;br/&gt;            nql.sys_nql = eqp.sys_eqp&lt;br/&gt;            AND nql.prin_nql = eqp.prin_eqp&lt;br/&gt;            AND TRIM(UPPER(nql.eqp_serial_nql)) = TRIM(UPPER(eqp.assoc_equip_eqp))&lt;br/&gt;            AND TRIM(UPPER(nql.eqp_serial_nql)) = epi.equipment_esn_val&lt;br/&gt;         )&lt;br/&gt;      WHERE&lt;br/&gt;         eqp.record_load_cd IS NULL&lt;br/&gt;         AND nql.record_load_cd = c_stg_processed&lt;br/&gt;      ) a;&lt;br/&gt;&lt;br/&gt;TYPE t_cursor_data_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF cur_stg_eqp_base%ROWTYPE INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;TYPE t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;PROCEDURE insert_equip_component(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_equip_component_status(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE LOAD(&lt;br/&gt;      p_audit_user_i IN VARCHAR2,&lt;br/&gt;      p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;      p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize NUMBER DEFAULT 5000 )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure LOAD&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The LOAD procedure will open the cursor and start executing for each record&lt;br/&gt;   ||                       for Insert&lt;br/&gt;   *****************************************************************************************************************&lt;br/&gt;   */&lt;br/&gt;   l_proc_name t_unit_name := &apos;LOAD&apos;;&lt;br/&gt;   l_process_name t_process_log.process_name%TYPE := c_pkg_name;&lt;br/&gt;   l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;   l_cursor_data t_cursor_data_tbl;&lt;br/&gt;   l_filter_ptr t_ptr_tbl; -- for filtering data in the cursor table&lt;br/&gt;BEGIN&lt;br/&gt;   l_process_rec.process_name := l_process_name;&lt;br/&gt;   pkg_logging.begin_process (l_process_rec, &apos;p_audit_user_i=&apos; || p_audit_user_i );&lt;br/&gt;   g_this_thread := p_this_thread;&lt;br/&gt;   g_max_thread := p_max_thread;&lt;br/&gt;   g_batchsize := p_batchsize;&lt;br/&gt;&lt;br/&gt;   IF pkg_utility.stopnow (c_pkg_name) THEN&lt;br/&gt;      RETURN;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   IF (cur_stg_eqp_base%ISOPEN) THEN&lt;br/&gt;      CLOSE cur_stg_eqp_base;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   OPEN cur_stg_eqp_base;&lt;br/&gt;&lt;br/&gt;   LOOP&lt;br/&gt;      FETCH&lt;br/&gt;         cur_stg_eqp_base BULK COLLECT&lt;br/&gt;      INTO&lt;br/&gt;         l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;      IF (l_cursor_data.COUNT () &gt; 0) THEN&lt;br/&gt;         -- Insert equip_component&lt;br/&gt;         insert_equip_component (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Insert equip_component_status&lt;br/&gt;         insert_equip_component_status (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Update the staging rows with status&lt;br/&gt;         update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Commit the batch&lt;br/&gt;         COMMIT;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      EXIT&lt;br/&gt;   WHEN l_cursor_data.COUNT () &lt; g_batchsize OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   CLOSE cur_stg_eqp_base;&lt;br/&gt;&lt;br/&gt;   pkg_logging.end_process (l_process_rec);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;   IF (cur_stg_eqp_base%ISOPEN) THEN&lt;br/&gt;      CLOSE cur_stg_eqp_base;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   ROLLBACK;&lt;br/&gt;   pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;   pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;   RAISE;&lt;br/&gt;END LOAD;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_equip_component(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_equip_component&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The insert_equip_component procedure will Insert product_instance rows from staging data&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_EQUIP_COMPONENT&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_equip_component a&lt;br/&gt;         (&lt;br/&gt;            a.equip_component_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.equip_type_cd,&lt;br/&gt;            a.equip_component_type_cd,&lt;br/&gt;            a.equip_esn_val,&lt;br/&gt;            a.equip_mac_address_id,&lt;br/&gt;            a.equip_prod_inst_id,&lt;br/&gt;            a.equip_sec_mac_address_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).equip_component_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).equip_type_cd,&lt;br/&gt;            p_cursor_data_io (i).equip_component_type_cd,&lt;br/&gt;            p_cursor_data_io (i).equip_esn_val,&lt;br/&gt;            p_cursor_data_io (i).equip_mac_address_id,&lt;br/&gt;            p_cursor_data_io (i).equip_prod_inst_id,&lt;br/&gt;            p_cursor_data_io (i).equip_sec_mac_address_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).equip_prod_inst_id || &apos;:&apos; || p_cursor_data_io (l_coll_idx).equip_esn_val || &apos;, exception=&apos; ||&lt;br/&gt;         SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_equip_component;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_equip_component_status&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_equip_component_status&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The insert_equip_component_status procedure will Insert equip_prod_inst rows from staging&lt;br/&gt;   data&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_EQUIP_COMPONENT_STATUS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_equip_component_status a&lt;br/&gt;         (&lt;br/&gt;            a.equip_component_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.effective_dttm,&lt;br/&gt;            a.equip_status_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).equip_component_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            DECODE (p_cursor_data_io (i).effective_date, NULL, NULL, TO_TIMESTAMP ( p_cursor_data_io (i).effective_date&lt;br/&gt;            || &apos;.&apos; || p_cursor_data_io (i).effective_time, c_ts_format ) ),&lt;br/&gt;            p_cursor_data_io (i).equip_status_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).equip_prod_inst_id || &apos;:&apos; || p_cursor_data_io (l_coll_idx).equip_esn_val || &apos;, exception=&apos; ||&lt;br/&gt;         SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_equip_component_status;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure load_initial_data&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The update_staging procedure will update the stg.vnt_eqp_base.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   UPDATE&lt;br/&gt;      stg.vnt_eqp_base_il s&lt;br/&gt;   SET&lt;br/&gt;      s.record_load_cd = NVL (p_cursor_data_i (i).record_load_cd, c_stg_processed),&lt;br/&gt;      s.record_dttm = SYSTIMESTAMP&lt;br/&gt;   WHERE&lt;br/&gt;      ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END update_staging;&lt;br/&gt;END pkg_vnt_load_eqp_base;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_OTR_TROUBLE_CALL" directorySegmentName="seg_6" id="17B84B7D-921A-6DDF-F080-FA6CC38723E1">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OTR_TROUBLE_CALL</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:58 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_OTR_TROUBLE_CALL&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_vnt_recon_otr_trouble_call&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 01-FEB-2015&lt;br/&gt;   ||  Subject Area    : General&lt;br/&gt;   ||  Description     : The package pkg_vnt_process_rrt_otr_ticket controls the reconciliation of the&lt;br/&gt;   || Vantage RRT_OTR_TROUBLE_CALL table and applying those updates to SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||    Changed by              Changed Date         Chang Description&lt;br/&gt;   ||    -----------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||  &lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_max_thread         NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread  NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;         );&lt;br/&gt;END PKG_VNT_RECON_OTR_TROUBLE_CALL;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_OTR_TROUBLE_CALL" id="17B84B7D-921A-6DDF-F080-FA6CC38723E1">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OTR_TROUBLE_CALL</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:20:03 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_OTR_TROUBLE_CALL&lt;br/&gt;IS&lt;br/&gt;   /*****************************************************************************************************************&lt;br/&gt;   ||  Program Name   : pkg_vnt_recon_otr_trouble_call&lt;br/&gt;   ||  Created By         : Cognizant&lt;br/&gt;   ||  Created Date      : 01-FEB-2015&lt;br/&gt;   ||  Subject Area      : Trouble Call&lt;br/&gt;   ||  Description         : The package pkg_vnt_recon_otr_trouble_call controls the processing of the reconcilation of&lt;br/&gt;   ||                               Vantage RRT_OTR_TROUBLE_CALL table and applying those updates to SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||  Changed By                 Changed On             Change Description&lt;br/&gt;   ||  -------------------------  --------------------   --------------------------------------------------------------&lt;br/&gt;   ||  Cognizant                  08-FEB-2015            Standardization Changes and removed c_record_active&lt;br/&gt;   ||  Cognizant                  24-FEB-2015            All updates modified to change the status of the record to ACTIVE&lt;br/&gt;   ||  Cognizant                  26-FEB-2015            Child table individual INSERT/UPDATE handled&lt;br/&gt;   ||  Cognizant                  27-FEB-2015            Removed update on t_bus_interact_party_role as per client comment&lt;br/&gt;   ||  Cognizant                  03-MAR-2015            INSERT_TICKET modified to map completion_dt to actual_completion_date&lt;br/&gt;   ||  Cognizant                  06-MAR-2015            Audit Logic incorporated&lt;br/&gt;   ||  Cognizant                  09-MAR-2015            Population of T_BUS_INTERACT_PARTY_ROLE.BUS_INTERACT_TYP_CD column changed to &apos;TKT&apos;&lt;br/&gt;   ||  Cognizant                  13-MAR-2015            Done synchronization between column population on&lt;br/&gt;   ||                                                    reconciliation and initial load.&lt;br/&gt;   ||  Cognizant                 16-Mar-2015             Syching of column level population logic between Recon and Initial of NRT/RRT Packages&lt;br/&gt;   ||  Cognizant                 07-Apr-2015             Modified cursor query to support ROWID based multithreading&lt;br/&gt;   ||  Cognizant                 07-Apr-2015             Code changes to remove the descrepanies between NRT/RRT , Initial Load and Reconciliation.&lt;br/&gt;   ||  Cognizant                 10-Apr-2015             Trim included for character column in cursor query.&lt;br/&gt;   ||  Karthik                    29-Apr-2015            Modified the table structure of T_BUS_INTERACT to have a new column&lt;br/&gt;   ||                                                    BUS_INTERACT_USAGE_TYPE_CD&lt;br/&gt;   ||  Cognizant                 01-May-2015             Removed unwanted table t_bus_inter_itm_vnt_ord_xref&lt;br/&gt;   ||  Kamal                     09-Jul-2015     commented out party_nm&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name             CONSTANT t_unit_name&lt;br/&gt;                                          := &apos;PKG_VNT_RECON_OTR_TROUBLE_CALL&apos;;&lt;br/&gt;   c_special_request_cd   CONSTANT VARCHAR2 (1)                        := &apos;M&apos;;&lt;br/&gt;   c_ticket_closed        CONSTANT VARCHAR2 (1)                        := &apos;C&apos;;&lt;br/&gt;   c_ticket_cancelled     CONSTANT VARCHAR2 (1)                        := &apos;X&apos;;&lt;br/&gt;   c_bulk_errors                   EXCEPTION;&lt;br/&gt;   g_operation_perf                VARCHAR2 (60);&lt;br/&gt;   g_modif_values                  VARCHAR2 (1000);&lt;br/&gt;   l_current_recon_start_time      stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;   l_table_key                     stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   g_log_ind                       CHAR (1);&lt;br/&gt;   g_process_record_cnt            NUMBER                                := 0;&lt;br/&gt;   g_error_record_cnt              NUMBER                                := 0;&lt;br/&gt;   g_max_thread                    NUMBER                                := 1;&lt;br/&gt;   g_reminder_thread               NUMBER                                := 1;&lt;br/&gt;   g_batchsize                     NUMBER                             := 1000;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_rrt_otr_ticket&lt;br/&gt;   IS&lt;br/&gt;      SELECT CASE&lt;br/&gt;                WHEN rotr.sys_otr = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             rotr.ROWID AS ID, TRIM (rotr.record_load_cd) record_load_cd,&lt;br/&gt;             cust_xref.party_id AS customer_id,&lt;br/&gt;             addr_xref.address_id AS service_address_id,&lt;br/&gt;             ord_xref.bus_interact_id,&lt;br/&gt;             TRIM (rotr.ord_class_otr) AS ord_class_rotr,&lt;br/&gt;             pkg_utility.c_bus_interact_type_cd_tkt AS order_type_cd,&lt;br/&gt;             rotr.cust_acct_no_otr AS cust_acct_num,&lt;br/&gt;             rotr.order_no_otr AS order_no,&lt;br/&gt;             TRIM (rotr.ord_stat_otr) AS ord_stat_otr,&lt;br/&gt;&lt;br/&gt;             --bi.bus_interact_type_cd,&lt;br/&gt;             &apos;TKT&apos; AS bus_interact_type_cd,&lt;br/&gt;             TRIM (rotr.compl_cde_otr) AS completion_cd,&lt;br/&gt;             TRIM (SUBSTR (rotr.compl_cde_otr, 1, 3)) AS completion_cd1,&lt;br/&gt;             TRIM (SUBSTR (rotr.compl_cde_otr, 4, 3)) AS completion_cd2,&lt;br/&gt;             TRIM (SUBSTR (rotr.compl_cde_otr, 7, 3)) AS completion_cd3,&lt;br/&gt;             TRIM (SUBSTR (rotr.compl_cde_otr, 10, 3)) AS completion_cd4,&lt;br/&gt;             TRIM (SUBSTR (rotr.compl_cde_otr, 13, 3)) AS completion_cd5,&lt;br/&gt;             TRIM (SUBSTR (rotr.compl_cde_otr, 16, 3)) AS completion_cd6,&lt;br/&gt;             TRIM (rotr.ord_rsn_otr) AS reason_cd,&lt;br/&gt;             TRIM (SUBSTR (rotr.ord_rsn_otr, 1, 2)) AS reason_cd1,&lt;br/&gt;             TRIM (SUBSTR (rotr.ord_rsn_otr, 3, 2)) AS reason_cd2,&lt;br/&gt;             TRIM (SUBSTR (rotr.ord_rsn_otr, 5, 2)) AS reason_cd3,&lt;br/&gt;             TRIM (SUBSTR (rotr.ord_rsn_otr, 7, 2)) AS reason_cd4,&lt;br/&gt;             TRIM (rotr.ord_comments_otr) AS comment_txt,&lt;br/&gt;             TRIM (rotr.custom_field02_otr) AS dnis_cd,&lt;br/&gt;             TO_TIMESTAMP&lt;br/&gt;                (DECODE (rotr.create_dte_otr,&lt;br/&gt;                         TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                         TO_TIMESTAMP (   TO_CHAR (rotr.create_dte_otr,&lt;br/&gt;                                                   &apos;YYYY.MM.DD&apos;&lt;br/&gt;                                                  )&lt;br/&gt;                                       || &apos;.&apos;&lt;br/&gt;                                       || rotr.create_tme_otr,&lt;br/&gt;                                       &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                                      )&lt;br/&gt;                        )&lt;br/&gt;                ) order_create_ts,&lt;br/&gt;             TO_TIMESTAMP&lt;br/&gt;                (DECODE (rotr.compl_dte_otr,&lt;br/&gt;                         TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                         TO_TIMESTAMP (   TO_CHAR (rotr.compl_dte_otr,&lt;br/&gt;                                                   &apos;YYYY.MM.DD&apos;&lt;br/&gt;                                                  )&lt;br/&gt;                                       || &apos;.&apos;&lt;br/&gt;                                       || rotr.compl_tme_otr,&lt;br/&gt;                                       &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                                      )&lt;br/&gt;                        )&lt;br/&gt;                ) order_completion_ts,&lt;br/&gt;             TO_DATE&lt;br/&gt;                  (DECODE (rotr.compl_dte_otr,&lt;br/&gt;                           pkg_utility.c_null_date, NULL,&lt;br/&gt;                           rotr.compl_dte_otr&lt;br/&gt;                          )&lt;br/&gt;                  ) AS actual_completion_date&lt;br/&gt;        FROM stg.vnt_otr_trouble_call_rec_delta rotr LEFT OUTER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;             ON cust_xref.cust_acct_num = rotr.cust_acct_no_otr&lt;br/&gt;           AND cust_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_service_address_vantage_xref addr_xref&lt;br/&gt;             ON addr_xref.hs_key = rotr.hse_key_otr&lt;br/&gt;           AND addr_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;             ON ord_xref.ord_no = rotr.order_no_otr&lt;br/&gt;           AND ord_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;       --LEFT OUTER JOIN t_bus_interact bi&lt;br/&gt;       --ON bi.bus_interact_id = ord_xref.bus_interact_id&lt;br/&gt;       --AND bi.record_stat = pkg_utility.c_record_active&lt;br/&gt;      WHERE  rotr.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (rotr.ROWID, LENGTH (rotr.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   --AND MOD(rotr.sys_otr,g_max_thread ) = (g_reminder_thread - 1);&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_rrt_otr_ticket%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      --p_cursor_data_i   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_ticket (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;--      p_order_no        IN              t_bus_inter_itm_vnt_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_order_no        IN              t_bus_inter_vantage_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket_completion (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket_reason (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure process&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This will open the cursor and process each record by creating stub customer as needed to&lt;br/&gt;      ||                       support the order, looking-up the ticket in case it was created earlier in the run&lt;br/&gt;      ||                       and create/Update the ticket by committing the batch.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name       t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name    t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec     pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data     t_cursor_data_tbl;&lt;br/&gt;      l_svc_processed   VARCHAR2 (1);&lt;br/&gt;      l_ord_processed   VARCHAR2 (1);&lt;br/&gt;      l_bus_interact    t_bus_interact%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      SELECT recon_start_dttm&lt;br/&gt;        INTO l_current_recon_start_time&lt;br/&gt;        FROM stg.recon_process_ctrl&lt;br/&gt;       WHERE record_stat = pkg_utility.c_stg_in_progress;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_rrt_otr_ticket%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_rrt_otr_ticket;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_rrt_otr_ticket;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_rrt_otr_ticket&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos; , order_no = &apos;&lt;br/&gt;                                         || l_cursor_data (i).order_no&lt;br/&gt;                                        );&lt;br/&gt;                  create_customer (l_process_rec,&lt;br/&gt;                                   p_audit_user_i,&lt;br/&gt;                                   l_cursor_data (i)&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;                  IF (l_cursor_data (i).bus_interact_id IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     IF (get_bus_interact (l_process_rec,&lt;br/&gt;                                           l_cursor_data (i).order_no,&lt;br/&gt;                                           l_bus_interact&lt;br/&gt;                                          )&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        -- update the ticket&lt;br/&gt;                        l_cursor_data (i).bus_interact_id :=&lt;br/&gt;                                               l_bus_interact.bus_interact_id;&lt;br/&gt;                        l_cursor_data (i).bus_interact_type_cd :=&lt;br/&gt;                                       pkg_utility.c_bus_interact_type_cd_tkt;&lt;br/&gt;                        update_ticket (l_process_rec,&lt;br/&gt;                                       l_cursor_data (i),&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;                     ELSE&lt;br/&gt;                        -- create the ticket&lt;br/&gt;                        create_ticket (l_process_rec,&lt;br/&gt;                                       l_cursor_data (i),&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;                     END IF;&lt;br/&gt;                  ELSE&lt;br/&gt;                     -- update the ticket&lt;br/&gt;                     update_ticket (l_process_rec,&lt;br/&gt;                                    l_cursor_data (i),&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  update_staging (l_process_rec, l_cursor_data (i));&lt;br/&gt;                  COMMIT;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                        (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos; ,ORDER_NO = &apos;&lt;br/&gt;                                         || l_cursor_data (i).order_no&lt;br/&gt;                                         || &apos;, CUSTOMER_ID = &apos;&lt;br/&gt;                                         || l_cursor_data (i).customer_id&lt;br/&gt;                                         || &apos;, L_CURRENT_RECON_START_TIME = &apos;&lt;br/&gt;                                         || l_current_recon_start_time&lt;br/&gt;                                         || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                         || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                        );&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                       pkg_utility.c_stg_error;&lt;br/&gt;               END;&lt;br/&gt;            END LOOP;&lt;br/&gt;          --update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;         --COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_rrt_otr_ticket;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_rrt_otr_ticket%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_rrt_otr_ticket;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;--      p_order_no        IN              t_bus_inter_itm_vnt_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_order_no        IN              t_bus_inter_vantage_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function get_bus_interact&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_bus_inter_vantage_ord_xref with &apos;TRUE&apos; in&lt;br/&gt;      ||                       return as Boolean.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BUS_INTERACT&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, P_ORDER_NO = &apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT a.*&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_bus_inter_vantage_ord_xref xref INNER JOIN t_bus_interact a&lt;br/&gt;             ON a.bus_interact_id = xref.bus_interact_id&lt;br/&gt;       WHERE xref.ord_no = p_order_no&lt;br/&gt;         AND a.bus_interact_type_cd = pkg_utility.c_bus_interact_type_cd_tkt;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, BUS_INTERACT FOUND FOR P_ORDER_NO = &apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, BUS_INTERACT &apos;&lt;br/&gt;                                || pkg_utility.c_not_found_text&lt;br/&gt;                                || &apos; FOR P_ORDER_NO = &apos;&lt;br/&gt;                                || p_order_no&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, exception = &apos;&lt;br/&gt;                                || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_bus_interact;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure create_customer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will create the customer by adding records to party,&lt;br/&gt;      ||                       customer and party_vantage_xref.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                t_unit_name             := &apos;CREATE_CUSTOMER&apos;;&lt;br/&gt;      l_party_row                t_party%ROWTYPE;&lt;br/&gt;      l_customer_row             t_customer%ROWTYPE;&lt;br/&gt;      l_party_vantage_xref_row   t_party_vantage_xref%ROWTYPE;&lt;br/&gt;      l_customer_id              t_customer.customer_id%TYPE;&lt;br/&gt;      l_party_id                 t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;      l_log_status               VARCHAR (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      l_customer_id :=&lt;br/&gt;              customer_exists (p_process_rec_i, p_cursor_row_io.cust_acct_num);&lt;br/&gt;&lt;br/&gt;      IF (l_customer_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos;, CREATING CUSTOMER&apos;&lt;br/&gt;                               );&lt;br/&gt;         p_cursor_row_io.customer_id :=&lt;br/&gt;            da_party.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                   --party_nm                      =&gt; NULL,&lt;br/&gt;                   party_subtype_cd            =&gt; NULL,&lt;br/&gt;                   party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         da_customer.ADD (p_process_rec_i,&lt;br/&gt;                          external_customer_id      =&gt; NULL,&lt;br/&gt;                          customer_id               =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                          first_contact_dt          =&gt; NULL,&lt;br/&gt;                          first_fulfillment         =&gt; NULL,&lt;br/&gt;                          first_payment             =&gt; NULL,&lt;br/&gt;                          audit_user                =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;         da_party_vantage_xref.ADD&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                               cust_acct_num      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                               party_id           =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                               audit_user         =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;         l_table_key :=&lt;br/&gt;               &apos;CUST_ACCT_NUM = &apos;&lt;br/&gt;            || p_cursor_row_io.cust_acct_num&lt;br/&gt;            || &apos;, CUSTOMER_ID = &apos;&lt;br/&gt;            || p_cursor_row_io.customer_id;&lt;br/&gt;         pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                      (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                       p_table_name           =&gt; &apos;T_CUSTOMER&apos;,&lt;br/&gt;                       p_table_key            =&gt; l_table_key,&lt;br/&gt;                       p_modif_values         =&gt; NULL,&lt;br/&gt;                       p_account_details      =&gt; NULL,&lt;br/&gt;                       p_operation_perf       =&gt; pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      ELSE&lt;br/&gt;         p_cursor_row_io.customer_id := l_customer_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos;, DATA_SOURCE_TYPE_CD = &apos;&lt;br/&gt;                                    || p_cursor_row_io.data_source_type_cd&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_customer;&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function customer_exists&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the xref.party_id.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                          := &apos;CUSTOMER_EXISTS&apos;;&lt;br/&gt;      l_party_id    t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num;&lt;br/&gt;&lt;br/&gt;      --AND xref.record_stat = pkg_utility.c_record_active;&lt;br/&gt;      pkg_logging.log_debug&lt;br/&gt;            (p_process_rec_i,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos; &apos;&lt;br/&gt;             || pkg_utility.c_proc_end_text&lt;br/&gt;             || &apos;, CUSTOMER FOUND IN T_PARTY_VANTAGE_XREF, P_CUST_ACCT_NUM = &apos;&lt;br/&gt;             || p_cust_acct_num&lt;br/&gt;            );&lt;br/&gt;      RETURN l_party_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                           (p_process_rec_i,&lt;br/&gt;                               l_proc_name&lt;br/&gt;                            || &apos; &apos;&lt;br/&gt;                            || pkg_utility.c_proc_end_text&lt;br/&gt;                            || &apos;, CUSTOMER &apos;&lt;br/&gt;                            || pkg_utility.c_not_found_text&lt;br/&gt;                            || &apos; IN T_PARTY_VANTAGE_XREF, P_CUST_ACCT_NUM = &apos;&lt;br/&gt;                            || p_cust_acct_num&lt;br/&gt;                           );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END customer_exists;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_ticket (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure create_ticket&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This Procedure will create ticket by inserting the records into the table&lt;br/&gt;      ||                       t_bus_inter_vantage_ord_xref by inserting details for ticket, ticket status,&lt;br/&gt;      ||                       prod_order_completion and prod_order_reason.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name         t_unit_name                      := &apos;CREATE_TICKET&apos;;&lt;br/&gt;      l_bus_interact_id   t_bus_interact.bus_interact_id%TYPE;&lt;br/&gt;      l_completion_cd     t_ticket.completion_cd%TYPE;&lt;br/&gt;      l_cancel_cd         t_ticket.cancel_cd%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                            );&lt;br/&gt;      l_bus_interact_id :=&lt;br/&gt;         da_bus_interact.ADD&lt;br/&gt;            (p_process_rec_i,&lt;br/&gt;             data_source_type_cd             =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;             source_system_id                =&gt; p_cursor_row_io.order_no,&lt;br/&gt;             bus_interact_type_cd            =&gt; pkg_utility.c_bus_interact_type_cd_tkt,&lt;br/&gt;             bus_interact_usage_type_cd      =&gt; pkg_utility.c_bus_interact_type_cd_tkt,&lt;br/&gt;             audit_user                      =&gt; p_audit_user_i&lt;br/&gt;            );&lt;br/&gt;      da_bus_inter_vantage_ord_xref.ADD (p_process_rec_i,&lt;br/&gt;                                         p_cursor_row_io.order_no,&lt;br/&gt;                                         l_bus_interact_id,&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;&lt;br/&gt;      SELECT DECODE (p_cursor_row_io.ord_stat_otr,&lt;br/&gt;                     c_ticket_closed, p_cursor_row_io.completion_cd,&lt;br/&gt;                     NULL&lt;br/&gt;                    ),&lt;br/&gt;             DECODE (p_cursor_row_io.ord_stat_otr,&lt;br/&gt;                     c_ticket_cancelled, p_cursor_row_io.completion_cd,&lt;br/&gt;                     NULL&lt;br/&gt;                    )&lt;br/&gt;        INTO l_completion_cd,&lt;br/&gt;             l_cancel_cd&lt;br/&gt;        FROM DUAL;&lt;br/&gt;&lt;br/&gt;      da_ticket.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   ticket_interaction_id          =&gt; l_bus_interact_id,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   --completion_dt                  =&gt; NULL,&lt;br/&gt;                   completion_dt                  =&gt; p_cursor_row_io.actual_completion_date,&lt;br/&gt;                   create_dttm                    =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;                   requested_completion_dttm      =&gt; NULL,&lt;br/&gt;                   reason_cd                      =&gt; p_cursor_row_io.reason_cd,&lt;br/&gt;                   --completion_cd                  =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;                   completion_cd                  =&gt; l_completion_cd,&lt;br/&gt;                   --dnis_cd                        =&gt; NULL,&lt;br/&gt;                   dnis_cd                        =&gt; p_cursor_row_io.dnis_cd,&lt;br/&gt;                   --cancel_cd                      =&gt; NULL,&lt;br/&gt;                   cancel_cd                      =&gt; l_cancel_cd,&lt;br/&gt;                   --comment_txt                    =&gt; NULL,&lt;br/&gt;                   comment_txt                    =&gt; p_cursor_row_io.comment_txt,&lt;br/&gt;                   service_address_id             =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;                   bill_start_dt                  =&gt; NULL,&lt;br/&gt;                   bill_stop_dt                   =&gt; NULL,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;      da_ticket_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                   ticket_status_cd           =&gt; p_cursor_row_io.ord_stat_otr,&lt;br/&gt;                   data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;      da_bus_interact_party_role.ADD&lt;br/&gt;              (p_process_rec_i,&lt;br/&gt;               bus_interact_id             =&gt; l_bus_interact_id,&lt;br/&gt;               party_id                    =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;               party_role_cd               =&gt; &apos;CUST&apos;,&lt;br/&gt;               data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;               source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;               --bus_interact_type_cd        =&gt; p_cursor_row_io.bus_interact_type_cd,  Commented on 9-MAR-2015&lt;br/&gt;               bus_interact_type_cd        =&gt; pkg_utility.c_bus_interact_type_cd_tkt,&lt;br/&gt;               effective_dttm              =&gt; NULL,&lt;br/&gt;               audit_user                  =&gt; p_audit_user_i&lt;br/&gt;              );&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.ord_stat_otr = &apos;C&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_completion_cd       =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 1,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_completion_cd       =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 2,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_completion_cd       =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 3,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_completion_cd       =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 4,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_completion_cd       =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 5,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_completion_cd       =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 6,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;      ELSIF (p_cursor_row_io.ord_stat_otr = &apos;X&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_cancel_cd           =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 1,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_cancel_cd           =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 2,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_cancel_cd           =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 3,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_cancel_cd           =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 4,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_cancel_cd           =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 5,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_ticket_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_cancel_cd           =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 6,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.reason_cd1 IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         da_ticket_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_reason_cd           =&gt; p_cursor_row_io.reason_cd1,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 1,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.reason_cd2 IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         da_ticket_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_reason_cd           =&gt; p_cursor_row_io.reason_cd2,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 2,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.reason_cd3 IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         da_ticket_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_reason_cd           =&gt; p_cursor_row_io.reason_cd3,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 3,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.reason_cd4 IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         da_ticket_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  ticket_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                  ticket_reason_cd           =&gt; p_cursor_row_io.reason_cd4,&lt;br/&gt;                  data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num          =&gt; 4,&lt;br/&gt;                  audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      l_table_key :=&lt;br/&gt;            &apos;BUS_INTERACT_ID = &apos;&lt;br/&gt;         || l_bus_interact_id&lt;br/&gt;         || &apos;, CUST_ACCT_NO_OTR = &apos;&lt;br/&gt;         || p_cursor_row_io.cust_acct_num&lt;br/&gt;         || &apos;, ORDER_NO_OTR = &apos;&lt;br/&gt;         || p_cursor_row_io.order_no&lt;br/&gt;         || &apos;,  ORD_STAT_ROTR = &apos;&lt;br/&gt;         || p_cursor_row_io.ord_stat_otr;&lt;br/&gt;      pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                      (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                       p_table_name           =&gt; &apos;T_BUS_INTERACT&apos;,&lt;br/&gt;                       p_table_key            =&gt; l_table_key,&lt;br/&gt;                       p_modif_values         =&gt; NULL,&lt;br/&gt;                       p_account_details      =&gt; NULL,&lt;br/&gt;                       p_operation_perf       =&gt; pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, order_no = &apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos;, l_bus_interact_id = &apos;&lt;br/&gt;                                    || l_bus_interact_id&lt;br/&gt;                                    || &apos;,  ord_stat_rotr = &apos;&lt;br/&gt;                                    || p_cursor_row_io.ord_stat_otr&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_ticket;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_ticket&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This Procedure will update the ticket by updating t_ticket_status table by updating the&lt;br/&gt;      ||                       tables related to completion/cancel codes and reason codes.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name              := &apos;UPDATE_TICKET&apos;;&lt;br/&gt;      l_ticket_row                t_ticket%ROWTYPE;&lt;br/&gt;      l_ticket_status_row         t_ticket_status%ROWTYPE;&lt;br/&gt;      l_interact_party_role_row   t_bus_interact_party_role%ROWTYPE;&lt;br/&gt;      l_completion_cd             t_ticket.completion_cd%TYPE;&lt;br/&gt;      l_cancel_cd                 t_ticket.cancel_cd%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                            );&lt;br/&gt;      g_operation_perf := NULL;&lt;br/&gt;      g_modif_values := NULL;&lt;br/&gt;      g_log_ind := &apos;N&apos;;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_row_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT DECODE (p_cursor_row_io.ord_stat_otr,&lt;br/&gt;                           c_ticket_closed, p_cursor_row_io.completion_cd,&lt;br/&gt;                           NULL&lt;br/&gt;                          ),&lt;br/&gt;                   DECODE (p_cursor_row_io.ord_stat_otr,&lt;br/&gt;                           c_ticket_cancelled, p_cursor_row_io.completion_cd,&lt;br/&gt;                           NULL&lt;br/&gt;                          )&lt;br/&gt;              INTO l_completion_cd,&lt;br/&gt;                   l_cancel_cd&lt;br/&gt;              FROM DUAL;&lt;br/&gt;&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_ticket_row&lt;br/&gt;              FROM t_ticket&lt;br/&gt;             WHERE ticket_interaction_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;            g_operation_perf := pkg_utility.c_recon_update_perform;&lt;br/&gt;            g_modif_values :=&lt;br/&gt;                  &apos;TICKET_INTERACTION_ID = &apos;&lt;br/&gt;               || p_cursor_row_io.bus_interact_id&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;DATA_SOURCE_TYPE_CD&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.data_source_type_cd&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;REASON_CD&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.reason_cd&lt;br/&gt;               || &apos;, &apos;&lt;br/&gt;               || &apos;SERVICE_ADDRESS_ID&apos;&lt;br/&gt;               || &apos;=&apos;&lt;br/&gt;               || p_cursor_row_io.service_address_id;&lt;br/&gt;&lt;br/&gt;            IF (    NVL (l_ticket_row.modified_dttm,&lt;br/&gt;                         pkg_utility.c_recon_null_dttm&lt;br/&gt;                        ) &lt; l_current_recon_start_time&lt;br/&gt;                AND (   NVL (l_ticket_row.completion_dt,&lt;br/&gt;                             pkg_utility.c_recon_null_date&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.actual_completion_date,&lt;br/&gt;                                pkg_utility.c_recon_null_date&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_ticket_row.create_dttm,&lt;br/&gt;                             pkg_utility.c_recon_null_dttm&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.order_create_ts,&lt;br/&gt;                                pkg_utility.c_recon_null_dttm&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_ticket_row.reason_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.reason_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_ticket_row.completion_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (l_completion_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_ticket_row.cancel_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                            NVL (l_cancel_cd, pkg_utility.c_recon_null_string)&lt;br/&gt;                     OR NVL (l_ticket_row.comment_txt,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.comment_txt,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_ticket_row.dnis_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.dnis_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                     OR NVL (l_ticket_row.service_address_id,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_row_io.service_address_id,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                    )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_ticket&lt;br/&gt;                  SET create_dttm = p_cursor_row_io.order_create_ts,&lt;br/&gt;                      reason_cd = p_cursor_row_io.reason_cd,&lt;br/&gt;                      --completion_cd                  = p_cursor_row_io.completion_cd,&lt;br/&gt;                      completion_cd = l_completion_cd,&lt;br/&gt;                      cancel_cd = l_cancel_cd,&lt;br/&gt;                      comment_txt = p_cursor_row_io.comment_txt,&lt;br/&gt;                      dnis_cd = p_cursor_row_io.dnis_cd,&lt;br/&gt;                      service_address_id = p_cursor_row_io.service_address_id,&lt;br/&gt;                      completion_dt = p_cursor_row_io.actual_completion_date,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active&lt;br/&gt;                WHERE ticket_interaction_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;               g_log_ind := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            g_operation_perf := pkg_utility.c_recon_update_perform;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   ticket_interaction_id          =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   --completion_dt                  =&gt; NULL,&lt;br/&gt;                   completion_dt                  =&gt; p_cursor_row_io.actual_completion_date,&lt;br/&gt;                   create_dttm                    =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;                   requested_completion_dttm      =&gt; NULL,&lt;br/&gt;                   reason_cd                      =&gt; p_cursor_row_io.reason_cd,&lt;br/&gt;                   --completion_cd                  =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;                   completion_cd                  =&gt; l_completion_cd,&lt;br/&gt;                   --dnis_cd                        =&gt; NULL,&lt;br/&gt;                   dnis_cd                        =&gt; p_cursor_row_io.dnis_cd,&lt;br/&gt;                   --cancel_cd                      =&gt; NULL,&lt;br/&gt;                   cancel_cd                      =&gt; l_cancel_cd,&lt;br/&gt;                   comment_txt                    =&gt; p_cursor_row_io.comment_txt,&lt;br/&gt;                   service_address_id             =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;                   bill_start_dt                  =&gt; NULL,&lt;br/&gt;                   bill_stop_dt                   =&gt; NULL,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               g_operation_perf := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               g_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_ticket_status_row&lt;br/&gt;              FROM t_ticket_status&lt;br/&gt;             WHERE ticket_interaction_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;            IF (    p_cursor_row_io.ord_stat_otr &lt;&gt;&lt;br/&gt;                                          l_ticket_status_row.ticket_status_cd&lt;br/&gt;                AND NVL (l_ticket_status_row.modified_dttm,&lt;br/&gt;                         pkg_utility.c_recon_null_dttm&lt;br/&gt;                        ) &lt; l_current_recon_start_time&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_ticket_status&lt;br/&gt;                  SET ticket_status_cd = p_cursor_row_io.ord_stat_otr,&lt;br/&gt;                      modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      modified_by = p_audit_user_i,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active&lt;br/&gt;                WHERE ticket_interaction_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;               g_log_ind := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   ticket_interaction_id      =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   ticket_status_cd           =&gt; p_cursor_row_io.ord_stat_otr,&lt;br/&gt;                   data_source_type_cd        =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               g_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_interact_party_role_row&lt;br/&gt;              FROM t_bus_interact_party_role&lt;br/&gt;             WHERE bus_interact_id = p_cursor_row_io.bus_interact_id&lt;br/&gt;               AND party_id = p_cursor_row_io.customer_id&lt;br/&gt;               AND party_role_cd = &apos;CUST&apos;;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               da_bus_interact_party_role.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   bus_interact_id             =&gt; p_cursor_row_io.bus_interact_id,&lt;br/&gt;                   party_id                    =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                   party_role_cd               =&gt; &apos;CUST&apos;,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                   --bus_interact_type_cd     =&gt; p_cursor_row_io.bus_interact_type_cd,  -- Commented on 9 Mar2015 by Cognizant&lt;br/&gt;                   bus_interact_type_cd        =&gt; pkg_utility.c_bus_interact_type_cd_tkt,&lt;br/&gt;                   effective_dttm              =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               g_operation_perf := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               g_log_ind := &apos;Y&apos;;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.ord_stat_otr = &apos;C&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            update_ticket_completion (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd1,&lt;br/&gt;                                      1,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_ticket_completion (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd2,&lt;br/&gt;                                      2,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_ticket_completion (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd3,&lt;br/&gt;                                      3,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_ticket_completion (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd4,&lt;br/&gt;                                      4,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_ticket_completion (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd5,&lt;br/&gt;                                      5,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_ticket_completion (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd6,&lt;br/&gt;                                      6,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;         ELSIF (p_cursor_row_io.ord_stat_otr = &apos;X&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            update_ticket_cancel (p_process_rec_i,&lt;br/&gt;                                  p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                  p_cursor_row_io.completion_cd1,&lt;br/&gt;                                  1,&lt;br/&gt;                                  p_cursor_row_io,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            update_ticket_cancel (p_process_rec_i,&lt;br/&gt;                                  p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                  p_cursor_row_io.completion_cd2,&lt;br/&gt;                                  2,&lt;br/&gt;                                  p_cursor_row_io,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            update_ticket_cancel (p_process_rec_i,&lt;br/&gt;                                  p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                  p_cursor_row_io.completion_cd3,&lt;br/&gt;                                  3,&lt;br/&gt;                                  p_cursor_row_io,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            update_ticket_cancel (p_process_rec_i,&lt;br/&gt;                                  p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                  p_cursor_row_io.completion_cd4,&lt;br/&gt;                                  4,&lt;br/&gt;                                  p_cursor_row_io,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            update_ticket_cancel (p_process_rec_i,&lt;br/&gt;                                  p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                  p_cursor_row_io.completion_cd5,&lt;br/&gt;                                  5,&lt;br/&gt;                                  p_cursor_row_io,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            update_ticket_cancel (p_process_rec_i,&lt;br/&gt;                                  p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                  p_cursor_row_io.completion_cd6,&lt;br/&gt;                                  6,&lt;br/&gt;                                  p_cursor_row_io,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         update_ticket_reason (p_process_rec_i,&lt;br/&gt;                               p_cursor_row_io.bus_interact_id,&lt;br/&gt;                               p_cursor_row_io.reason_cd1,&lt;br/&gt;                               1,&lt;br/&gt;                               p_cursor_row_io,&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;         update_ticket_reason (p_process_rec_i,&lt;br/&gt;                               p_cursor_row_io.bus_interact_id,&lt;br/&gt;                               p_cursor_row_io.reason_cd2,&lt;br/&gt;                               2,&lt;br/&gt;                               p_cursor_row_io,&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;         update_ticket_reason (p_process_rec_i,&lt;br/&gt;                               p_cursor_row_io.bus_interact_id,&lt;br/&gt;                               p_cursor_row_io.reason_cd3,&lt;br/&gt;                               3,&lt;br/&gt;                               p_cursor_row_io,&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;         update_ticket_reason (p_process_rec_i,&lt;br/&gt;                               p_cursor_row_io.bus_interact_id,&lt;br/&gt;                               p_cursor_row_io.reason_cd4,&lt;br/&gt;                               4,&lt;br/&gt;                               p_cursor_row_io,&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;&lt;br/&gt;         IF (g_log_ind = &apos;Y&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            l_table_key :=&lt;br/&gt;                  &apos;BUS_INTERACT_ID = &apos;&lt;br/&gt;               || p_cursor_row_io.bus_interact_id&lt;br/&gt;               || &apos;, TICKET_STATUS_CD = &apos;&lt;br/&gt;               || p_cursor_row_io.ord_stat_otr;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                        (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                         p_table_name           =&gt; &apos;T_TICKET&apos;,&lt;br/&gt;                                         p_table_key            =&gt; l_table_key,&lt;br/&gt;                                         p_modif_values         =&gt; g_modif_values,&lt;br/&gt;                                         p_account_details      =&gt; NULL,&lt;br/&gt;                                         p_operation_perf       =&gt; g_operation_perf,&lt;br/&gt;                                         p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, bus_interact_id = &apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos;, ord_stat_rotr = &apos;&lt;br/&gt;                                    || p_cursor_row_io.ord_stat_otr&lt;br/&gt;                                    || &apos; ,exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END update_ticket;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket_completion (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_ticket_completion&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This Procedure will update ticket by updating t_ticket_completion.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name    t_unit_name                := &apos;UPDATE_TICKET_COMPLETION&apos;;&lt;br/&gt;      l_completion   t_ticket_completion%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_row_i.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT a.*&lt;br/&gt;                 INTO l_completion&lt;br/&gt;                 FROM t_ticket_completion a&lt;br/&gt;                WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;                  AND a.data_source_type_cd =&lt;br/&gt;                                            p_cursor_row_i.data_source_type_cd&lt;br/&gt;                  AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;               IF (l_completion.record_stat = pkg_utility.c_record_active)&lt;br/&gt;               THEN&lt;br/&gt;                  da_ticket_completion.del&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      ticket_interaction_id      =&gt; l_completion.ticket_interaction_id,&lt;br/&gt;                      ticket_completion_cd       =&gt; l_completion.ticket_completion_cd,&lt;br/&gt;                      data_source_type_cd        =&gt; l_completion.data_source_type_cd,&lt;br/&gt;                      audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  NULL;&lt;br/&gt;            --No data exist for the seq_num. So no action required&lt;br/&gt;            END;&lt;br/&gt;         ELSE&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT a.*&lt;br/&gt;                 INTO l_completion&lt;br/&gt;                 FROM t_ticket_completion a&lt;br/&gt;                WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;                  AND a.data_source_type_cd =&lt;br/&gt;                                            p_cursor_row_i.data_source_type_cd&lt;br/&gt;                  AND a.ticket_completion_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;               IF (    NVL (l_completion.code_sequence_num, 0) &lt;&gt; p_sequence_i&lt;br/&gt;                   AND NVL (l_completion.modified_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_dttm&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_ticket_completion a&lt;br/&gt;                     SET a.code_sequence_num = p_sequence_i,&lt;br/&gt;                         a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                         a.modified_by = p_audit_user_i,&lt;br/&gt;                         a.record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;                     AND a.data_source_type_cd =&lt;br/&gt;                                              l_completion.data_source_type_cd&lt;br/&gt;                     AND a.ticket_completion_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;                  g_log_ind := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  IF (p_code_i IS NOT NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     da_ticket_completion.ADD&lt;br/&gt;                        (process_rec                =&gt; p_process_rec_i,&lt;br/&gt;                         ticket_interaction_id      =&gt; p_bus_interact_id_i,&lt;br/&gt;                         ticket_completion_cd       =&gt; p_code_i,&lt;br/&gt;                         data_source_type_cd        =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                         code_sequence_num          =&gt; p_sequence_i,&lt;br/&gt;                         audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                     g_log_ind := &apos;Y&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_ticket_completion;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_ticket_cancel&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This Procedure will update  ticket cancel by updating t_ticket_cancel.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name               := &apos;UPDATE_TICKET_CANCEL&apos;;&lt;br/&gt;      l_cancel      t_ticket_cancel%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (p_code_i IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT a.*&lt;br/&gt;              INTO l_cancel&lt;br/&gt;              FROM t_ticket_cancel a&lt;br/&gt;             WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;            IF (l_cancel.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_cancel.del&lt;br/&gt;                    (p_process_rec_i,&lt;br/&gt;                     ticket_interaction_id      =&gt; l_cancel.ticket_interaction_id,&lt;br/&gt;                     ticket_cancel_cd           =&gt; l_cancel.ticket_cancel_cd,&lt;br/&gt;                     data_source_type_cd        =&gt; l_cancel.data_source_type_cd,&lt;br/&gt;                     audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                    );&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               NULL;&lt;br/&gt;         --No data exist for the seq_num. So no action required&lt;br/&gt;         END;&lt;br/&gt;      ELSE&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT a.*&lt;br/&gt;              INTO l_cancel&lt;br/&gt;              FROM t_ticket_cancel a&lt;br/&gt;             WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;               AND a.ticket_cancel_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;            IF (    NVL (l_cancel.code_sequence_num,&lt;br/&gt;                         pkg_utility.c_recon_null_number&lt;br/&gt;                        ) &lt;&gt; p_sequence_i&lt;br/&gt;                AND NVL (l_cancel.modified_dttm,&lt;br/&gt;                         pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_ticket_cancel a&lt;br/&gt;                  SET a.code_sequence_num = p_sequence_i,&lt;br/&gt;                      a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      a.modified_by = p_audit_user_i,&lt;br/&gt;                      a.record_stat = pkg_utility.c_record_active&lt;br/&gt;                WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;                  AND a.data_source_type_cd = l_cancel.data_source_type_cd&lt;br/&gt;                  AND a.ticket_cancel_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;               g_log_ind := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               IF (p_code_i IS NOT NULL)&lt;br/&gt;               THEN&lt;br/&gt;                  da_ticket_cancel.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      ticket_interaction_id      =&gt; p_bus_interact_id_i,&lt;br/&gt;                      ticket_cancel_cd           =&gt; p_code_i,&lt;br/&gt;                      data_source_type_cd        =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                      code_sequence_num          =&gt; p_sequence_i,&lt;br/&gt;                      audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;                  g_log_ind := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_ticket_cancel;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_ticket_reason (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_otr_ticket%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_ticket_reason&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This Procedure will update ticket reason by updating t_ticket_reason.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name               := &apos;UPDATE_TICKET_REASON&apos;;&lt;br/&gt;      l_reason      t_ticket_reason%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (p_code_i IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT a.*&lt;br/&gt;              INTO l_reason&lt;br/&gt;              FROM t_ticket_reason a&lt;br/&gt;             WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;            IF (l_reason.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_ticket_reason.del&lt;br/&gt;                    (p_process_rec_i,&lt;br/&gt;                     ticket_interaction_id      =&gt; l_reason.ticket_interaction_id,&lt;br/&gt;                     ticket_reason_cd           =&gt; l_reason.ticket_reason_cd,&lt;br/&gt;                     data_source_type_cd        =&gt; l_reason.data_source_type_cd,&lt;br/&gt;                     audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                    );&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               NULL;&lt;br/&gt;         --No data exist for the seq_num. So no action required&lt;br/&gt;         END;&lt;br/&gt;      ELSE&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT a.*&lt;br/&gt;              INTO l_reason&lt;br/&gt;              FROM t_ticket_reason a&lt;br/&gt;             WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;               AND a.ticket_reason_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;            IF (    NVL (l_reason.code_sequence_num,&lt;br/&gt;                         pkg_utility.c_recon_null_number&lt;br/&gt;                        ) &lt;&gt; p_sequence_i&lt;br/&gt;                AND NVL (l_reason.modified_dttm,&lt;br/&gt;                         pkg_utility.c_recon_null_dttm) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_ticket_reason a&lt;br/&gt;                  SET a.code_sequence_num = p_sequence_i,&lt;br/&gt;                      a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      a.modified_by = p_audit_user_i,&lt;br/&gt;                      a.record_stat = pkg_utility.c_record_active&lt;br/&gt;                WHERE a.ticket_interaction_id = p_bus_interact_id_i&lt;br/&gt;                  AND a.data_source_type_cd = l_reason.data_source_type_cd&lt;br/&gt;                  AND a.ticket_reason_cd = p_code_i;&lt;br/&gt;&lt;br/&gt;               g_log_ind := &apos;Y&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               IF (p_code_i IS NOT NULL)&lt;br/&gt;               THEN&lt;br/&gt;                  da_ticket_reason.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      ticket_interaction_id      =&gt; p_bus_interact_id_i,&lt;br/&gt;                      ticket_reason_cd           =&gt; p_code_i,&lt;br/&gt;                      data_source_type_cd        =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                      code_sequence_num          =&gt; p_sequence_i,&lt;br/&gt;                      audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;                  g_log_ind := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_ticket_reason;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      --p_cursor_data_i   IN OUT NOCOPY  t_cursor_data_tbl&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_otr_ticket%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This Procedure will update the staging table vnt_otr_trouble_call_rec_delta.&lt;br/&gt;      *****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_otr_trouble_call_rec_delta&lt;br/&gt;            SET record_load_cd =&lt;br/&gt;                   NVL (p_cursor_row_io.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_row_io.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                       || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                       || &apos;, DATA_SOURCE_TYPE_CD = &apos;&lt;br/&gt;                                       || p_cursor_row_io.data_source_type_cd&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF NVL (p_cursor_row_io.record_load_cd, pkg_utility.c_stg_processed) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF p_cursor_row_io.record_load_cd = pkg_utility.c_stg_error&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_recon_otr_trouble_call;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_CUS_BASE" directorySegmentName="seg_6" id="C1AC8AB6-D19D-70A7-06EC-CC936EAE1510">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_CUS_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:28 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_CUS_BASE&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_load_cus_base&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 04-Aug-2014&lt;br/&gt;||  Subject Area    : Customer&lt;br/&gt;||  Description     : The Package Pkg_Vnt_Load_Cus_Base Controls The Initial Load Of The Vantage Cus_Base Table&lt;br/&gt;||                    Into Solodb. The Pkg Will Insert The Following Target Tables T_Party_Vantage_Xref,&lt;br/&gt;||                    T_Customer, T_Locator, T_Address, T_Email_Address, T_Elec_Address, T_Phone_Num,&lt;br/&gt;||                    T_Party_Address, T_Individual ,T_Organization.&lt;br/&gt;||                    This Is Updating The Staging One Staging Tables Also Stg.Vnt_Cus_Base&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      17-Nov-2014     Standardization Changes&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;  PROCEDURE load(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 );&lt;br/&gt;END pkg_vnt_load_cus_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_CUS_BASE" id="C1AC8AB6-D19D-70A7-06EC-CC936EAE1510">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_CUS_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:34 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_CUS_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_vnt_load_cus_base&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : Customer&lt;br/&gt;   ||  Description     : The package pkg_vnt_load_cus_base controls the initial load of the vantage&lt;br/&gt;   ||                    cus_base table into solodb. The pkg will insert the following target tables&lt;br/&gt;   ||                    t_party_vantage_xref,t_customer, t_locator, t_address, t_email_address, t_elec_address,&lt;br/&gt;   ||                    t_phone_num, t_party_address, t_individual ,t_organization this is updating the staging one&lt;br/&gt;   ||                    staging tables also stg.vnt_cus_base&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed   CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_status_h    CONSTANT VARCHAR2 (1) := &apos;H&apos;;&lt;br/&gt;   c_stg_status_w    CONSTANT VARCHAR2 (1) := &apos;W&apos;;&lt;br/&gt;   c_stg_error       CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_pkg_name        CONSTANT t_unit_name  := &apos;PKG_VNT_LOAD_CUS_BASE&apos;;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors              EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread              NUMBER       := 1;&lt;br/&gt;   g_max_thread               NUMBER       := 1;&lt;br/&gt;   g_batchsize                NUMBER       := 1000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged CUS_BASE for loading&lt;br/&gt;   CURSOR cur_stg_cus_base&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;             -- staging control data&lt;br/&gt;             cus.ROWID AS ID, cus.record_load_cd,&lt;br/&gt;&lt;br/&gt;             -- surrogate keys&lt;br/&gt;             s_party_id.NEXTVAL AS party_id,&lt;br/&gt;             s_address_id.NEXTVAL AS locator_id,&lt;br/&gt;&lt;br/&gt;             -- columns&lt;br/&gt;             &apos;ELEC&apos; AS address_subtype_cd,&lt;br/&gt;             cus.cust_acct_no_cus AS customer_account_num,&lt;br/&gt;             cus.addr1_cus AS address_line_txt_1,&lt;br/&gt;             cus.addr2_cus AS address_line_txt_2,&lt;br/&gt;             cus.cust_city_cus AS city_nm,&lt;br/&gt;             cus.cust_state_cus AS territory_cd,&lt;br/&gt;             cus.postal_cde_cus AS postal_code_txt,&lt;br/&gt;             TRIM (LOWER (cus.e_mail_addr_cus)) AS email_address,&lt;br/&gt;             TRIM (cus.e_mail_addr_stat_cus) AS email_address_stat,&lt;br/&gt;             TRIM&lt;br/&gt;                (LOWER (SUBSTR (cus.e_mail_addr_cus,&lt;br/&gt;                                1,&lt;br/&gt;                                INSTR (cus.e_mail_addr_cus, &apos;@&apos;, 1, 1) - 1&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                ) AS email_user_nm,&lt;br/&gt;             TRIM&lt;br/&gt;                (LOWER (SUBSTR (cus.e_mail_addr_cus,&lt;br/&gt;                                INSTR (cus.e_mail_addr_cus, &apos;@&apos;, 1, 1) + 1&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                ) AS elec_address_domain_nm,&lt;br/&gt;             TRIM&lt;br/&gt;                (LOWER (SUBSTR (cus.e_mail_addr_cus,&lt;br/&gt;                                INSTR (cus.e_mail_addr_cus, &apos;.&apos;, -1, 1)&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                ) AS domain_root_cd,&lt;br/&gt;             TRIM&lt;br/&gt;                (CASE&lt;br/&gt;                    WHEN INSTR (cus.cust_name_cus, &apos;*&apos;) &gt; 2&lt;br/&gt;                       THEN SUBSTR (cus.cust_name_cus,&lt;br/&gt;                                    1,&lt;br/&gt;                                    INSTR (cus.cust_name_cus, &apos;*&apos;) - 2&lt;br/&gt;                                   )&lt;br/&gt;                    ELSE cus.cust_name_cus&lt;br/&gt;                 END&lt;br/&gt;                ) AS party_nm,&lt;br/&gt;             cus.cust_title_cus AS name_prefix_txt,&lt;br/&gt;             TO_DATE (DECODE (cus.birthdate_cus,&lt;br/&gt;                              pkg_utility.c_null_date, NULL,&lt;br/&gt;                              cus.birthdate_cus&lt;br/&gt;                             )&lt;br/&gt;                     ) AS birth_dt,&lt;br/&gt;             DECODE (cus.cust_typ_cus,&lt;br/&gt;                     &apos;COM&apos;, &apos;ORGN&apos;,&lt;br/&gt;                     &apos;RES&apos;, &apos;INDIV&apos;,&lt;br/&gt;                     NULL&lt;br/&gt;                    ) AS party_subtype_cd,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN cus.sys_cus = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd&lt;br/&gt;        FROM stg.vnt_cus_base cus&lt;br/&gt;       WHERE cus.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (cus.ROWID, LENGTH (cus.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;   -- Load Home Phone number&lt;br/&gt;   CURSOR cur_stg_cus_base_home_ph&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;             -- staging control data&lt;br/&gt;             cus.ROWID AS ID, cus.record_load_cd,&lt;br/&gt;                                                 -- surrogate keys&lt;br/&gt;                                                 xref.party_id,&lt;br/&gt;             s_address_id.NEXTVAL AS locator_id,&lt;br/&gt;&lt;br/&gt;             -- columns&lt;br/&gt;             cus.cust_acct_no_cus AS customer_account_num,&lt;br/&gt;             &apos;PHN&apos; AS address_subtype_cd, TRIM (cus.phone_no1_cus) AS ph_num,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN cus.sys_cus = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd&lt;br/&gt;        FROM stg.vnt_cus_base cus JOIN t_party_vantage_xref xref&lt;br/&gt;             ON (xref.cust_acct_num = cus.cust_acct_no_cus)&lt;br/&gt;       WHERE cus.record_load_cd = c_stg_status_h&lt;br/&gt;         AND TRIM (phone_no1_cus) IS NOT NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (cus.ROWID, LENGTH (cus.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;   -- Load Work Phone number&lt;br/&gt;   CURSOR cur_stg_cus_base_work_ph&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;             -- staging control data&lt;br/&gt;             cus.ROWID AS ID, cus.record_load_cd,&lt;br/&gt;                                                 -- surrogate keys&lt;br/&gt;                                                 xref.party_id,&lt;br/&gt;             s_address_id.NEXTVAL AS locator_id,&lt;br/&gt;&lt;br/&gt;             -- columns&lt;br/&gt;             cus.cust_acct_no_cus AS customer_account_num,&lt;br/&gt;             &apos;PHN&apos; AS address_subtype_cd, TRIM (cus.phone_no2_cus) AS ph_num,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN cus.sys_cus = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd&lt;br/&gt;        FROM stg.vnt_cus_base cus JOIN t_party_vantage_xref xref&lt;br/&gt;             ON (xref.cust_acct_num = cus.cust_acct_no_cus)&lt;br/&gt;       WHERE cus.record_load_cd = c_stg_status_w&lt;br/&gt;         AND TRIM (cus.phone_no2_cus) IS NOT NULL&lt;br/&gt;         AND NVL (TRIM (cus.phone_no1_cus), &apos;0&apos;) &lt;&gt; TRIM (cus.phone_no2_cus)&lt;br/&gt;         AND MOD (ASCII (SUBSTR (cus.ROWID, LENGTH (cus.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_cus_base%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_rec IS RECORD (&lt;br/&gt;      ID                     ROWID,&lt;br/&gt;      record_load_cd         stg.vnt_cus_base.record_load_cd%TYPE,&lt;br/&gt;      party_id               t_party_vantage_xref.party_id%TYPE,&lt;br/&gt;      locator_id             t_locator.locator_id%TYPE,&lt;br/&gt;      customer_account_num   stg.vnt_cus_base.cust_acct_no_cus%TYPE,&lt;br/&gt;      address_subtype_cd     t_address.address_subtype_cd%TYPE,&lt;br/&gt;      ph_num                 t_phone_num.phone_num%TYPE,&lt;br/&gt;      data_source_type_cd    t_party.data_source_type_cd%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_ph_tbl IS TABLE OF t_cursor_data_rec&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_ptr_tbl IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE insert_party (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_vantage_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator_ph (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_ph_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address_ph (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_ph_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_elec_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_email_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_phone_num (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_ph_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address_ph (&lt;br/&gt;      p_process_rec_i           IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io          IN OUT NOCOPY   t_cursor_data_ph_tbl,&lt;br/&gt;      p_address_usage_type_cd   IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_individual (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_organization (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_cus (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_home (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_ph_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_work (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_ph_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_individual (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_organization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_email (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_cus (&lt;br/&gt;      p_process_rec_i        pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_home_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_work_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_this_thread         NUMBER DEFAULT 1,&lt;br/&gt;      p_max_thread          NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :The load procedure will call the important main other procedures load_cus&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      g_this_thread := p_this_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      load_cus (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;      load_home_phone (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                       p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      load_work_phone (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                       p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_cus (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_cus&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  load_cus procedure will open the cursor and execute each records for&lt;br/&gt;      ||                       party, party vantage xref,insert individual, insert organization,&lt;br/&gt;      ||                       customer,customer email,address as party address, Update the staging rows with status with&lt;br/&gt;      committing the batch.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD_CUS&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr     t_ptr_tbl;   -- for filtering data in the cursor table&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; Start&apos;);&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_cus_base%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_cus_base;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_cus_base;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_cus_base&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- party&lt;br/&gt;            insert_party (l_process_rec, l_cursor_data);&lt;br/&gt;            -- party vantage xref&lt;br/&gt;            insert_party_vantage_xref (l_process_rec, l_cursor_data);&lt;br/&gt;            -- insert individual&lt;br/&gt;            l_filter_ptr := filter_individual (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_individual (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- insert organization&lt;br/&gt;            l_filter_ptr :=&lt;br/&gt;                           filter_organization (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_organization (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- customer&lt;br/&gt;            insert_customer (l_process_rec, l_cursor_data);&lt;br/&gt;            -- customer email address as party address&lt;br/&gt;            l_filter_ptr := filter_email (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_locator (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            insert_address (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            insert_elec_address (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            insert_email_address (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            insert_party_address (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging_cus (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_cus_base;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; End&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_cus_base%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_cus_base;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END load_cus;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_home_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_home_phone&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  LOAD_Home_Phone procedure will load the customer home  phone number with&lt;br/&gt;      ||                       Update the staging rows with status.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD_HOME_PHONE&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data    t_cursor_data_ph_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; Start&apos;);&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_cus_base_home_ph%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_cus_base_home_ph;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_cus_base_home_ph;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_cus_base_home_ph&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- customer home  phone number&lt;br/&gt;            insert_locator_ph (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_address_ph (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_phone_num (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_party_address_ph (l_process_rec, l_cursor_data, &apos;HMPH&apos;);&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging_home (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_cus_base_home_ph;&lt;br/&gt;&lt;br/&gt;      --Update the rows which does not have Home Phone&lt;br/&gt;      UPDATE stg.vnt_cus_base s&lt;br/&gt;         SET s.record_load_cd = c_stg_status_w,&lt;br/&gt;             s.record_dttm = SYSTIMESTAMP&lt;br/&gt;       WHERE s.record_load_cd = c_stg_status_h;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; End&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_cus_base_home_ph%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_cus_base_home_ph;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END load_home_phone;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_work_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_work_phone&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  Load_Work_Phone procedure will load the customer work phone number and&lt;br/&gt;      ||                       Update the staging rows with status&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;LOAD_WORK_PHONE&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data   t_cursor_data_ph_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; Start&apos;);&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_cus_base_work_ph%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_cus_base_work_ph;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_cus_base_work_ph;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_cus_base_work_ph&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- customer work phone number&lt;br/&gt;            insert_locator_ph (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_address_ph (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_phone_num (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_party_address_ph (l_process_rec, l_cursor_data, &apos;WRKPH&apos;);&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging_work (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_cus_base_work_ph;&lt;br/&gt;&lt;br/&gt;      --Update the rows which has only Home Phone and no work phone&lt;br/&gt;      UPDATE stg.vnt_cus_base s&lt;br/&gt;         SET s.record_load_cd = c_stg_processed,&lt;br/&gt;             s.record_dttm = SYSTIMESTAMP&lt;br/&gt;       WHERE s.record_load_cd = c_stg_status_w;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; End&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_cus_base_work_ph%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_cus_base_work_ph;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END load_work_phone;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_party&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_party procedure will load t_party the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_PARTY&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_party a&lt;br/&gt;                        (a.party_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.source_system_party_id,&lt;br/&gt;                         a.party_nm,&lt;br/&gt;                         a.party_subtype_cd, a.party_child_subtype_cd,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).party_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).customer_account_num,&lt;br/&gt;                         p_cursor_data_io (i).party_nm,&lt;br/&gt;                         p_cursor_data_io (i).party_subtype_cd, NULL,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_party;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_vantage_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_party_vantage_xref&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_party_vantage_xref procedure will load t_party_vantage_xref the table&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_PARTY_VANTAGE_XREF&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_party_vantage_xref a&lt;br/&gt;                        (a.cust_acct_num,&lt;br/&gt;                         a.party_id, a.record_stat, a.created_dttm,&lt;br/&gt;                         a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).customer_account_num,&lt;br/&gt;                         p_cursor_data_io (i).party_id, &apos;A&apos;, SYSTIMESTAMP,&lt;br/&gt;                         c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_party_vantage_xref;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_customer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_customer procedure will load t_customer the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_CUSTOMER&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_customer a&lt;br/&gt;                        (a.customer_id, a.first_contact_dt,&lt;br/&gt;                         a.first_fulfillment, a.first_payment,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).party_id, NULL,&lt;br/&gt;                         NULL, NULL,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_customer;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_locator&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_locator procedure will load t_locator the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_LOCATOR&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_locator a&lt;br/&gt;                        (a.locator_id,&lt;br/&gt;                         a.locator_subtype_cd, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).locator_id,&lt;br/&gt;                         p_cursor_data_io (i).address_subtype_cd, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_locator;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator_ph (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_ph_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_locator_ph&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_locator_home procedure will load t_locator the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_LOCATOR_PH&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_locator a&lt;br/&gt;                        (a.locator_id,&lt;br/&gt;                         a.locator_subtype_cd, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).locator_id,&lt;br/&gt;                         p_cursor_data_io (i).address_subtype_cd, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_locator_ph;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_address procedure will load t_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_ADDRESS&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_address a&lt;br/&gt;                        (a.address_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.address_subtype_cd,&lt;br/&gt;                         a.source_system_address_id, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).locator_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).address_subtype_cd,&lt;br/&gt;                         p_cursor_data_io (i).email_address, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address_ph (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_ph_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_address_ph&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :  The  insert_address_ph procedure will load t_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_ADDRESS_PH&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_address a&lt;br/&gt;                        (a.address_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.address_subtype_cd,&lt;br/&gt;                         a.source_system_address_id, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).locator_id,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).address_subtype_cd,&lt;br/&gt;                         p_cursor_data_io (i).ph_num, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_address_ph;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_individual (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_individual&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_individual procedure will load t_individual the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_INDIVIDUAL&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                             || &apos;, filter_cnt=&apos;&lt;br/&gt;                             || p_filter_i.COUNT&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_individual a&lt;br/&gt;                        (a.individual_id,&lt;br/&gt;                         a.birth_dt,&lt;br/&gt;                         a.given_nm,&lt;br/&gt;                         a.middle_nm,&lt;br/&gt;                         a.family_nm,&lt;br/&gt;                         a.name_prefix_txt, a.name_suffix_txt,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).party_id,&lt;br/&gt;                         p_cursor_data_io (i).birth_dt,&lt;br/&gt;                         TRIM&lt;br/&gt;                            (TRIM&lt;br/&gt;                                (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                (p_cursor_data_io (i).party_nm,&lt;br/&gt;                                                 &apos;,[^,]+$&apos;&lt;br/&gt;                                                )&lt;br/&gt;                                )&lt;br/&gt;                            ),&lt;br/&gt;                         TRIM&lt;br/&gt;                            (TRIM&lt;br/&gt;                                (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                (p_cursor_data_io (i).party_nm,&lt;br/&gt;                                                 &apos;,[^,]+,&apos;&lt;br/&gt;                                                )&lt;br/&gt;                                )&lt;br/&gt;                            ),&lt;br/&gt;                         TRIM&lt;br/&gt;                            (TRIM&lt;br/&gt;                                (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                (p_cursor_data_io (i).party_nm,&lt;br/&gt;                                                 &apos;[^,]+,&apos;&lt;br/&gt;                                                )&lt;br/&gt;                                )&lt;br/&gt;                            ),&lt;br/&gt;                         p_cursor_data_io (i).name_prefix_txt, NULL,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_individual;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_organization (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_organization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_organization procedure will load t_organization the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_ORGANIZATION&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                             || &apos;, filter_cnt=&apos;&lt;br/&gt;                             || p_filter_i.COUNT&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_organization a&lt;br/&gt;                        (a.organization_id, a.parent_organization_id,&lt;br/&gt;                         a.organization_nm, a.active_organization_ind,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).party_id, NULL,&lt;br/&gt;                         p_cursor_data_io (i).party_nm, NULL,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_organization;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_elec_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_elec_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_elec_address procedure will load t_elec_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_ELEC_ADDRESS&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_elec_address a&lt;br/&gt;                        (a.elec_address_id, a.elec_address_subtype_cd,&lt;br/&gt;                         a.elec_address_txt,&lt;br/&gt;                         a.elec_address_domain_nm,&lt;br/&gt;                         a.domain_root_cd, a.valid_elec_address_ind,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).locator_id, &apos;EML&apos;,&lt;br/&gt;                         p_cursor_data_io (i).email_address,&lt;br/&gt;                         p_cursor_data_io (i).elec_address_domain_nm,&lt;br/&gt;                         p_cursor_data_io (i).domain_root_cd, 1,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                      (p_process_rec_i,&lt;br/&gt;                          l_proc_name&lt;br/&gt;                       || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                       || &apos;, locator_id=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).locator_id&lt;br/&gt;                       || &apos;, address_subtype_cd=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).address_subtype_cd&lt;br/&gt;                       || &apos;, email_address=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).email_address&lt;br/&gt;                       || &apos;, elec_address_domain_nm=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).elec_address_domain_nm&lt;br/&gt;                       || &apos;, domain_root_cd=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).domain_root_cd&lt;br/&gt;                       || &apos;, email_address_stat=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).email_address_stat&lt;br/&gt;                       || &apos;, exception=&apos;&lt;br/&gt;                       || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                      );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_elec_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_email_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_email_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_email_address procedure will load t_email_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_EMAIL_ADDRESS&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_email_address a&lt;br/&gt;                        (a.email_address_id,&lt;br/&gt;                         a.email_address_txt,&lt;br/&gt;                         a.user_nm,&lt;br/&gt;                         a.domain_nm, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).locator_id,&lt;br/&gt;                         p_cursor_data_io (i).email_address,&lt;br/&gt;                         p_cursor_data_io (i).email_user_nm,&lt;br/&gt;                         p_cursor_data_io (i).elec_address_domain_nm, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                      (p_process_rec_i,&lt;br/&gt;                          l_proc_name&lt;br/&gt;                       || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                       || &apos;, locator_id=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).locator_id&lt;br/&gt;                       || &apos;, email_address=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).email_address&lt;br/&gt;                       || &apos;, email_user_nm=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).email_user_nm&lt;br/&gt;                       || &apos;, elec_address_domain_nm=&apos;&lt;br/&gt;                       || p_cursor_data_io (l_coll_idx).elec_address_domain_nm&lt;br/&gt;                       || &apos;, exception=&apos;&lt;br/&gt;                       || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                      );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_email_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_phone_num (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_ph_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_phone_num&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_phone_num_ph procedure will load t_phone_num the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_PHONE_NUM_PH&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_phone_num a&lt;br/&gt;                        (a.telephone_num_id,&lt;br/&gt;                         a.phone_num, a.valid_telephone_num_ind,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).locator_id,&lt;br/&gt;                         p_cursor_data_io (i).ph_num, 1,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_phone_num;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_filter_i         IN              t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_party_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_party_address procedure will load t_party_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_PARTY_ADDRESS&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_party_address a&lt;br/&gt;                        (a.party_id,&lt;br/&gt;                         a.address_id, a.address_usage_type_cd,&lt;br/&gt;                         a.address_subtype_cd,&lt;br/&gt;                         a.data_source_type_cd, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).party_id,&lt;br/&gt;                         p_cursor_data_io (i).locator_id, &apos;EML&apos;,&lt;br/&gt;                         p_cursor_data_io (i).address_subtype_cd,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_party_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address_ph (&lt;br/&gt;      p_process_rec_i           IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io          IN OUT NOCOPY   t_cursor_data_ph_tbl,&lt;br/&gt;      p_address_usage_type_cd   IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_party_address_ph&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_party_address_ph procedure will load t_party_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;INSERT_PARTY_ADDRESS_PH&apos;;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;      l_success     NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO t_party_address a&lt;br/&gt;                        (a.party_id,&lt;br/&gt;                         a.address_id,&lt;br/&gt;                         a.address_usage_type_cd,&lt;br/&gt;                         a.address_subtype_cd,&lt;br/&gt;                         a.data_source_type_cd, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).party_id,&lt;br/&gt;                         p_cursor_data_io (i).locator_id,&lt;br/&gt;                         p_address_usage_type_cd,&lt;br/&gt;                         p_cursor_data_io (i).address_subtype_cd,&lt;br/&gt;                         p_cursor_data_io (i).data_source_type_cd, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, c_pkg_name&lt;br/&gt;                        );&lt;br/&gt;         l_success := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos;, bulk insert exception, key=&apos;&lt;br/&gt;                         || p_cursor_data_io (l_coll_idx).customer_account_num&lt;br/&gt;                         || &apos;, exception=&apos;&lt;br/&gt;                         || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                        );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; Inserted=&apos; || l_success&lt;br/&gt;                            );&lt;br/&gt;   END insert_party_address_ph;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_individual (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function filter_individual&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  filter_individual function will return the filter individual details.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;FILTER_INDIVIDUAL&apos;;&lt;br/&gt;      l_temp        t_ptr_tbl;&lt;br/&gt;      l_idx         PLS_INTEGER := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         IF (p_cursor_data_i (i).party_subtype_cd = &apos;INDIV&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            l_idx := l_idx + 1;&lt;br/&gt;            l_temp (l_idx) := i;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;      RETURN l_temp;&lt;br/&gt;   END filter_individual;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_organization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function filter_organization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  filter_organization function will return the filter organization details.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;FILTER_ORGANIZATION&apos;;&lt;br/&gt;      l_temp        t_ptr_tbl;&lt;br/&gt;      l_idx         PLS_INTEGER := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         IF (p_cursor_data_i (i).party_subtype_cd = &apos;ORGN&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            l_idx := l_idx + 1;&lt;br/&gt;            l_temp (l_idx) := i;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;      RETURN l_temp;&lt;br/&gt;   END filter_organization;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_email (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function filter_email&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  filter_email function will return filter email details.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;FILTER_EMAIL&apos;;&lt;br/&gt;      l_temp        t_ptr_tbl;&lt;br/&gt;      l_idx         PLS_INTEGER := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;      FOR i IN p_cursor_data_i.FIRST .. p_cursor_data_i.LAST&lt;br/&gt;      LOOP&lt;br/&gt;         IF     (p_cursor_data_i (i).email_address_stat = &apos;E&apos;)&lt;br/&gt;            AND REGEXP_LIKE&lt;br/&gt;                   (p_cursor_data_i (i).email_address,&lt;br/&gt;                    &apos;^[a-zA-Z0-9!#$%&apos;&apos;\*\+-/=\?^_`\{|\}~]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}$&apos;&lt;br/&gt;                   )&lt;br/&gt;         THEN&lt;br/&gt;            l_idx := l_idx + 1;&lt;br/&gt;            l_temp (l_idx) := i;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, Valid Email Count:&apos; || l_idx&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_temp;&lt;br/&gt;   END filter_email;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_cus (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_cus&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  update_staging_cus will update the stg.vnt_cus_base table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING_CUS&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.vnt_cus_base s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                      NVL (p_cursor_data_i (i).record_load_cd, c_stg_status_h),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   END update_staging_cus;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_home (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_ph_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_home&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  update_staging_home procedure will update  stg.vnt_cus_base the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING_HOME&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.vnt_cus_base s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   DECODE (p_cursor_data_i (i).record_load_cd,&lt;br/&gt;                           c_stg_status_h, c_stg_status_w,&lt;br/&gt;                           p_cursor_data_i (i).record_load_cd&lt;br/&gt;                          ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   END update_staging_home;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_work (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_ph_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_work&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  update_staging_Work procedure will upadate the  stg.vnt_cus_base the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING_WORK&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.vnt_cus_base s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   DECODE (p_cursor_data_i (i).record_load_cd,&lt;br/&gt;                           c_stg_status_w, c_stg_processed,&lt;br/&gt;                           p_cursor_data_i (i).record_load_cd&lt;br/&gt;                          ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   END update_staging_work;&lt;br/&gt;END pkg_vnt_load_cus_base;</source>
</body>
</PackageOracle>
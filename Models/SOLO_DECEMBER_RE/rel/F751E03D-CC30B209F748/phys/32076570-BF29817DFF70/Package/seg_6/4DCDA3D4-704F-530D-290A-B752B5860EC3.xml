<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_IDM" directorySegmentName="seg_6" id="4DCDA3D4-704F-530D-290A-B752B5860EC3">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_IDM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:15 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_IDM&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : PKG_IDM&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 14-JAN-2015&lt;br/&gt;||  Subject Area    : IDM&lt;br/&gt;||  Description     : Package created for integrating the IDM with SOLO DB&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||  Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||  1. Cognizant    Feb-23-2015     added new parameters p_max_thread, p_reminder_thread, p_batchsize in load_idm and p_old_account_id in process&lt;br/&gt;*****************************************************************************************************************/&lt;br/&gt;AS&lt;br/&gt;    PROCEDURE process (&lt;br/&gt;                      p_name_row                 stg.idm_name%ROWTYPE,&lt;br/&gt;                      p_old_account_id   IN      stg.idm_name.account_id%TYPE,&lt;br/&gt;                      p_old_namespace_id IN      stg.idm_name.namespace_id%TYPE,&lt;br/&gt;                      p_action           IN OUT  VARCHAR2,&lt;br/&gt;                      p_audit_user_i     IN      VARCHAR2,&lt;br/&gt;                      p_record_load_cd      OUT  VARCHAR2 );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_idm (p_audit_user_i      IN VARCHAR2,&lt;br/&gt;                       p_max_thread           NUMBER DEFAULT 1,&lt;br/&gt;                       p_reminder_thread      NUMBER DEFAULT 1,&lt;br/&gt;                       p_batchsize            NUMBER DEFAULT 1000);&lt;br/&gt;END pkg_idm;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_IDM" id="4DCDA3D4-704F-530D-290A-B752B5860EC3">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_IDM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:20 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_IDM&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : PKG_IDM&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 13-JAN-2015&lt;br/&gt;||  Subject Area    : IDM&lt;br/&gt;||  Description     : Package created for integrating the IDM with SOLO DB&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||  Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||  1. Cognizant    Feb-02-2015     Defect Fix with varriable c_null_string&lt;br/&gt;||  2. Cognizant    Feb-02-2015     Staging records marked as Processed or Exception&lt;br/&gt;||                                  Refer the column Reords record_load_cd.&lt;br/&gt;||  3. Cognizant    Feb-19-2015     Added MOD for parallel processing load_idm.&lt;br/&gt;||  4. Cognizant    Mar-04-2015     Added code for activating soft deleted records and code fix for&lt;br/&gt;||                                  soft delete when account id is null..&lt;br/&gt;||  5. Cognizant    Mar-04-2015     Added inner join while using table idm_account s and t_account_vantage_xref,&lt;br/&gt;||                                  also added new variables l_namepsace_id to log the namespace id.&lt;br/&gt;||  6. Cognizant    Mar-19-2015     Update the Insert logic to work on re-insert&lt;br/&gt;||                                  Update logic is changed to make update if there is no change for update&lt;br/&gt;||  7. Cognizant    Mar-20-2015     Update the Insert logic to activate soft deleted record if inserting&lt;br/&gt;||                                  same name id. Added nvl() in if condition.&lt;br/&gt;||  8. Karthik      May-07-2015     Removed the columns VERIFICATION_VALUE,ENCRYPTION_ALGORITHM,ENCRYPTION_KEY,PASSWORD&lt;br/&gt;||                                  from STG.IDM_NAME.&lt;br/&gt;||  9. Binoy        Jun-17-2015     Removed the column t_account_address.address_subtype_cd as part&lt;br/&gt;||                                  of the webservice changes.&lt;br/&gt;*****************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name                               t_unit_name          := &apos;PKG_IDM&apos;;&lt;br/&gt;   l_customer_login_id                      chtr.t_customer_login_idm_xref.customer_login_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   l_solo_account_id                        chtr.t_customer_login.account_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   l_solo_old_account_id                    chtr.t_customer_login.account_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   l_account_number                         stg.idm_account.account_number%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   l_locator_id                             chtr.t_locator.locator_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   l_namespace                              chtr.t_elec_address.elec_address_domain_nm%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   l_namespace_type                         chtr.t_account_address.address_usage_type_cd%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   l_valid_elec_address_ind                 chtr.t_elec_address.valid_elec_address_ind%TYPE;&lt;br/&gt;   l_address_id                             chtr.t_ip_addr.ip_address_id%TYPE;&lt;br/&gt;   l_account_id                             chtr.t_account.account_id%TYPE;&lt;br/&gt;   l_customer_login_idm_xref                chtr.t_customer_login_idm_xref%ROWTYPE;&lt;br/&gt;   g_max_thread                             NUMBER                       := 1;&lt;br/&gt;   g_reminder_thread                        NUMBER                       := 1;&lt;br/&gt;   g_batchsize                              NUMBER                    := 1000;&lt;br/&gt;   c_address_subtype_cd_elec       CONSTANT VARCHAR2 (10)           := &apos;ELEC&apos;;&lt;br/&gt;   c_data_source_type_cd_idm       CONSTANT VARCHAR2 (10)            := &apos;IDM&apos;;&lt;br/&gt;   c_elec_address_subtype_cd_eml   CONSTANT VARCHAR2 (10)            := &apos;EML&apos;;&lt;br/&gt;   c_record_active                 CONSTANT VARCHAR2 (1)               := &apos;A&apos;;&lt;br/&gt;   l_email_check                            NUMBER;&lt;br/&gt;   c_null_string                   CONSTANT VARCHAR2 (10)           := &apos;NULL&apos;;&lt;br/&gt;   c_idm_null_number               CONSTANT NUMBER (7)            := -9999999;&lt;br/&gt;   c_idm_null_date                 CONSTANT DATE&lt;br/&gt;                                          := TO_DATE (&apos;00110101&apos;, &apos;YYYYMMDD&apos;);&lt;br/&gt;   l_key_columns                            VARCHAR2 (2000)           := NULL;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_idm_name&lt;br/&gt;   IS&lt;br/&gt;      SELECT chtr.s_customer_login_id.NEXTVAL AS s_customer_login_id,&lt;br/&gt;             chtr.s_address_id.NEXTVAL AS s_address_id, n.name_id,&lt;br/&gt;             n.account_id, n.namespace_id, n.NAME, n.name_status,&lt;br/&gt;             n.expiration_dt, n.last_login_dt, n.last_login_ip,&lt;br/&gt;             n.remaining_logins, n.ROLE, n.contact_verified,&lt;br/&gt;             n.lock_expiration_dt, n.cpni_compliant, n.cpni_compliant_dt,&lt;br/&gt;             n.email_admin_policy, n.root_name, n.failed_attempt_counter,&lt;br/&gt;             n.record_status, a.account_number AS idm_account_number,&lt;br/&gt;             t.account_id AS solo_account_id,&lt;br/&gt;             UPPER (TRIM (ns.namespace_type)) namespace_type, ns.namespace,&lt;br/&gt;             n.ROWID AS ID, n.record_load_cd AS record_load_cd&lt;br/&gt;        FROM stg.idm_name n INNER JOIN stg.idm_account a&lt;br/&gt;             ON a.account_id = n.account_id&lt;br/&gt;             INNER JOIN stg.idm_namespace ns ON ns.namespace_id =&lt;br/&gt;                                                               n.namespace_id&lt;br/&gt;             INNER JOIN chtr.t_account_vantage_xref t&lt;br/&gt;             ON t.sub_acct_num = a.account_number&lt;br/&gt;       WHERE n.record_status = c_record_active&lt;br/&gt;         AND n.record_load_cd IS NULL&lt;br/&gt;         AND MOD (n.name_id, g_max_thread) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_idm_name%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer_login (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_elec_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_email_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer_login_idm_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_name_row                    stg.idm_name%ROWTYPE,&lt;br/&gt;      p_old_account_id     IN       stg.idm_name.account_id%TYPE,&lt;br/&gt;      p_old_namespace_id   IN       stg.idm_name.namespace_id%TYPE,&lt;br/&gt;      p_action             IN OUT   VARCHAR2,&lt;br/&gt;      p_audit_user_i       IN       VARCHAR2,&lt;br/&gt;      p_record_load_cd     OUT      VARCHAR2&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure IDM process&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The procedure is for inseting, updating and deleting the records into the&lt;br/&gt;||                       IDM SOLO t_customer_login, t_locator_id, t_address, t_elec_address, t_email_address,&lt;br/&gt;||                       t_account_address, t_customer_login_idm_xref&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name             t_unit_name                    := &apos;PROCESS_IDM&apos;;&lt;br/&gt;      l_process_name          chtr.t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec           chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_namepsace_id          stg.idm_namespace.namespace_id%TYPE;&lt;br/&gt;      p_curr_customer_login   chtr.t_customer_login%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;&lt;br/&gt;      IF p_name_row.account_id IS NULL AND p_action = &apos;U&apos;&lt;br/&gt;      THEN&lt;br/&gt;         p_action := &apos;D&apos;;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      -- l_key_columns := &apos;, STG.IDM_NAMESPACE : namespace_id=&apos;|| p_name_row.namespace_id;-- Commented for data logging issue&lt;br/&gt;      IF p_action = &apos;D&apos;&lt;br/&gt;      THEN&lt;br/&gt;         l_namepsace_id := p_old_namespace_id;&lt;br/&gt;      ELSE&lt;br/&gt;         l_namepsace_id := p_name_row.namespace_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      l_key_columns :=&lt;br/&gt;                      &apos;, STG.IDM_NAMESPACE : namespace_id= &apos; || l_namepsace_id;&lt;br/&gt;&lt;br/&gt;      -- Commented for data logging issue&lt;br/&gt;      SELECT namespace, UPPER (TRIM (namespace_type))&lt;br/&gt;        INTO l_namespace, l_namespace_type&lt;br/&gt;        FROM stg.idm_namespace&lt;br/&gt;--       WHERE namespace_id = DECODE(p_action,&apos;D&apos;,p_old_namespace_id,p_name_row.namespace_id);       -- Commented for data logging issue&lt;br/&gt;      WHERE  namespace_id = l_namepsace_id;&lt;br/&gt;&lt;br/&gt;      -- Commented for data logging issue&lt;br/&gt;      l_key_columns := NULL;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         l_key_columns :=&lt;br/&gt;               &apos;, CHTR.T_CUSTOMER_LOGIN_IDM_XREF : idm_name_id=&apos;&lt;br/&gt;            || p_name_row.name_id;&lt;br/&gt;&lt;br/&gt;         SELECT xref.*&lt;br/&gt;           INTO l_customer_login_idm_xref&lt;br/&gt;           FROM chtr.t_customer_login_idm_xref xref&lt;br/&gt;          WHERE xref.idm_name_id = p_name_row.name_id;&lt;br/&gt;&lt;br/&gt;         l_key_columns := NULL;&lt;br/&gt;&lt;br/&gt;         IF p_action = &apos;I&apos;&lt;br/&gt;         THEN&lt;br/&gt;            p_action := &apos;U&apos;;&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            l_key_columns := NULL;&lt;br/&gt;&lt;br/&gt;            IF p_action = &apos;U&apos;&lt;br/&gt;            THEN&lt;br/&gt;               p_action := &apos;I&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF     (p_action = &apos;I&apos; OR p_action = &apos;U&apos;)&lt;br/&gt;         AND p_name_row.account_id IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         l_key_columns :=&lt;br/&gt;               &apos;, STG.IDM_ACCOUNT, CHTR.T_ACCOUNT : account_id=&apos;&lt;br/&gt;            || p_name_row.account_id;&lt;br/&gt;&lt;br/&gt;         SELECT t.account_id&lt;br/&gt;           INTO l_solo_account_id&lt;br/&gt;           FROM stg.idm_account s&lt;br/&gt;                                 --LEFT OUTER JOIN chtr.t_account_vantage_xref t -- Commented for data fix&lt;br/&gt;                INNER JOIN chtr.t_account_vantage_xref t -- Added for data fix&lt;br/&gt;                ON t.sub_acct_num = s.account_number&lt;br/&gt;          WHERE s.account_id = p_name_row.account_id;&lt;br/&gt;&lt;br/&gt;         l_key_columns := NULL;&lt;br/&gt;       /*BEGIN&lt;br/&gt;         l_key_columns := &apos;, CHTR.T_CUSTOMER_LOGIN_IDM_XREF : idm_name_id=&apos;|| p_name_row.name_id;&lt;br/&gt;         SELECT xref.*&lt;br/&gt;           INTO l_customer_login_idm_xref&lt;br/&gt;           FROM chtr.t_customer_login_idm_xref xref&lt;br/&gt;          WHERE xref.idm_name_id = p_name_row.name_id;&lt;br/&gt;         l_key_columns := NULL;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;         l_key_columns := NULL;&lt;br/&gt;         IF p_action = &apos;U&apos; THEN&lt;br/&gt;            p_action := &apos;I&apos;;&lt;br/&gt;         END IF;&lt;br/&gt;      END;*/     -- Commented on 20/03/15&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF p_action = &apos;D&apos;&lt;br/&gt;      THEN&lt;br/&gt;         IF p_old_account_id IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_key_columns :=&lt;br/&gt;                  &apos;, STG.IDM_ACCOUNT, CHTR.T_ACCOUNT : OLD.account_id=&apos;&lt;br/&gt;               || p_old_account_id;&lt;br/&gt;&lt;br/&gt;            SELECT t.account_id&lt;br/&gt;              INTO l_solo_old_account_id&lt;br/&gt;              FROM stg.idm_account s INNER JOIN chtr.t_account_vantage_xref t&lt;br/&gt;                   ON t.sub_acct_num = s.account_number&lt;br/&gt;             WHERE s.account_id = p_old_account_id;&lt;br/&gt;         END IF;&lt;br/&gt;      /*BEGIN&lt;br/&gt;         l_key_columns := &apos;, CHTR.T_CUSTOMER_LOGIN_IDM_XREF : idm_name_id=&apos;|| p_name_row.name_id;&lt;br/&gt;         SELECT xref.*&lt;br/&gt;           INTO l_customer_login_idm_xref&lt;br/&gt;           FROM chtr.t_customer_login_idm_xref xref&lt;br/&gt;          WHERE xref.idm_name_id = p_name_row.name_id;&lt;br/&gt;         l_key_columns := NULL;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;         l_key_columns := NULL;&lt;br/&gt;         IF p_action = &apos;U&apos; THEN&lt;br/&gt;            p_action := &apos;I&apos;;&lt;br/&gt;         END IF;&lt;br/&gt;      END;*/-- Commented on 20/03/15&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF p_action = &apos;I&apos; AND p_name_row.account_id IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         l_customer_login_id :=&lt;br/&gt;            chtr.da_customer_login.ADD&lt;br/&gt;               (process_rec                         =&gt; l_process_rec,&lt;br/&gt;                cpni_compliant_ind                  =&gt; p_name_row.cpni_compliant,&lt;br/&gt;                cpni_compliant_dttm                 =&gt; p_name_row.cpni_compliant_dt,&lt;br/&gt;                encryption_algorithm_cd             =&gt; NULL,&lt;br/&gt;                email_administration_policy_nm      =&gt; p_name_row.email_admin_policy,&lt;br/&gt;                access_method_id                    =&gt; NULL,&lt;br/&gt;                account_id                          =&gt; l_solo_account_id,&lt;br/&gt;                namespace_id                        =&gt; p_name_row.namespace_id,&lt;br/&gt;                login_root_nm                       =&gt; p_name_row.root_name,&lt;br/&gt;                login_nm                            =&gt; p_name_row.NAME,&lt;br/&gt;                login_name_status_cd                =&gt; p_name_row.name_status,&lt;br/&gt;                encryption_key_txt                  =&gt; NULL,&lt;br/&gt;                password_txt                        =&gt; NULL,&lt;br/&gt;                login_status_cd                     =&gt; p_name_row.record_status,&lt;br/&gt;                login_expiration_dt                 =&gt; p_name_row.expiration_dt,&lt;br/&gt;                last_login_dt                       =&gt; p_name_row.last_login_dt,&lt;br/&gt;                last_login_ip_address_id            =&gt; NULL,&lt;br/&gt;                last_login_ip_address               =&gt; p_name_row.last_login_ip,&lt;br/&gt;                failed_login_attempt_cnt            =&gt; p_name_row.failed_attempt_counter,&lt;br/&gt;                remaining_login_attempt_cnt         =&gt; p_name_row.remaining_logins,&lt;br/&gt;                login_role_nm                       =&gt; p_name_row.ROLE,&lt;br/&gt;                contact_verification_cd             =&gt; p_name_row.contact_verified,&lt;br/&gt;                contact_verification_val            =&gt; NULL,&lt;br/&gt;                lock_expiration_dttm                =&gt; p_name_row.lock_expiration_dt,&lt;br/&gt;                audit_user                          =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;         l_locator_id :=&lt;br/&gt;            chtr.da_locator.ADD&lt;br/&gt;                             (process_rec             =&gt; l_process_rec,&lt;br/&gt;                              locator_subtype_cd      =&gt; c_address_subtype_cd_elec,&lt;br/&gt;                              audit_user              =&gt; p_audit_user_i&lt;br/&gt;                             );&lt;br/&gt;         chtr.da_address.ADD&lt;br/&gt;                            (process_rec                   =&gt; l_process_rec,&lt;br/&gt;                             address_id                    =&gt; l_locator_id,&lt;br/&gt;                             data_source_type_cd           =&gt; c_data_source_type_cd_idm,&lt;br/&gt;                             address_subtype_cd            =&gt; c_address_subtype_cd_elec,&lt;br/&gt;                             source_system_address_id      =&gt; p_name_row.name_id,&lt;br/&gt;                             audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;         chtr.da_customer_login_idm_xref.ADD&lt;br/&gt;                                    (process_rec            =&gt; l_process_rec,&lt;br/&gt;                                     idm_name_id            =&gt; p_name_row.name_id,&lt;br/&gt;                                     customer_login_id      =&gt; l_customer_login_id,&lt;br/&gt;                                     address_id             =&gt; l_locator_id,&lt;br/&gt;                                     audit_user             =&gt; p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         chtr.da_elec_address.ADD&lt;br/&gt;            (process_rec                  =&gt; l_process_rec,&lt;br/&gt;             elec_address_id              =&gt; l_locator_id,&lt;br/&gt;             elec_address_subtype_cd      =&gt; c_elec_address_subtype_cd_eml,&lt;br/&gt;             elec_address_txt             =&gt; p_name_row.NAME,&lt;br/&gt;             elec_address_domain_nm       =&gt; l_namespace,&lt;br/&gt;             domain_root_cd               =&gt; SUBSTR (l_namespace,&lt;br/&gt;                                                     INSTR (l_namespace,&lt;br/&gt;                                                            &apos;.&apos;,&lt;br/&gt;                                                            -1,&lt;br/&gt;                                                            1&lt;br/&gt;                                                           )&lt;br/&gt;                                                    ),&lt;br/&gt;             valid_elec_address_ind       =&gt; CASE&lt;br/&gt;                WHEN p_name_row.contact_verified = &apos;Y&apos;&lt;br/&gt;                   THEN 1&lt;br/&gt;                ELSE 0&lt;br/&gt;             END,&lt;br/&gt;             audit_user                   =&gt; p_audit_user_i&lt;br/&gt;            );&lt;br/&gt;&lt;br/&gt;         IF REGEXP_LIKE (p_name_row.NAME,&lt;br/&gt;                         &apos;[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}&apos;&lt;br/&gt;                        )&lt;br/&gt;         THEN&lt;br/&gt;            chtr.da_email_address.ADD (process_rec            =&gt; l_process_rec,&lt;br/&gt;                                       email_address_id       =&gt; l_locator_id,&lt;br/&gt;                                       email_address_txt      =&gt; p_name_row.NAME,&lt;br/&gt;                                       user_nm                =&gt; p_name_row.root_name,&lt;br/&gt;                                       domain_nm              =&gt; l_namespace,&lt;br/&gt;                                       audit_user             =&gt; p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         chtr.da_account_address.ADD&lt;br/&gt;                            (process_rec                =&gt; l_process_rec,&lt;br/&gt;                             account_id                 =&gt; l_solo_account_id,&lt;br/&gt;                             address_id                 =&gt; l_locator_id,&lt;br/&gt;                             address_usage_type_cd      =&gt; l_namespace_type,&lt;br/&gt;--                             address_subtype_cd         =&gt; c_address_subtype_cd_elec,  -- Commented as part of the webservice changes&lt;br/&gt;                             data_source_type_cd        =&gt; c_data_source_type_cd_idm,&lt;br/&gt;                             audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      ELSIF p_action = &apos;U&apos;&lt;br/&gt;      THEN&lt;br/&gt;         SELECT *&lt;br/&gt;           INTO p_curr_customer_login&lt;br/&gt;           FROM chtr.t_customer_login&lt;br/&gt;          WHERE customer_login_id =&lt;br/&gt;                                   l_customer_login_idm_xref.customer_login_id;&lt;br/&gt;&lt;br/&gt;         IF (   NVL (p_curr_customer_login.cpni_compliant_ind, c_null_string) &lt;&gt;&lt;br/&gt;                                NVL (p_name_row.cpni_compliant, c_null_string)&lt;br/&gt;             OR                                            --Added on 20/03/15&lt;br/&gt;                NVL (p_curr_customer_login.cpni_compliant_dttm,&lt;br/&gt;                     c_idm_null_date&lt;br/&gt;                    ) &lt;&gt; NVL (p_name_row.cpni_compliant_dt, c_idm_null_date)&lt;br/&gt;             OR                                            --Added on 20/03/15&lt;br/&gt;                --NVL (p_curr_customer_login.encryption_algorithm_cd, c_null_string) &lt;&gt; NVL (p_name_row.encryption_algorithm, c_null_string) OR  --Added on 20/03/15&lt;br/&gt;                NVL (p_curr_customer_login.email_administration_policy_nm,&lt;br/&gt;                     c_null_string&lt;br/&gt;                    ) &lt;&gt; NVL (p_name_row.email_admin_policy, c_null_string)&lt;br/&gt;             OR                                            --Added on 20/03/15&lt;br/&gt;                NVL (p_curr_customer_login.account_id, c_idm_null_number) &lt;&gt;&lt;br/&gt;                                    NVL (l_solo_account_id, c_idm_null_number)&lt;br/&gt;             OR NVL (p_curr_customer_login.namespace_id, c_idm_null_number) &lt;&gt;&lt;br/&gt;                              NVL (p_name_row.namespace_id, c_idm_null_number)&lt;br/&gt;             OR NVL (p_curr_customer_login.login_root_nm, c_null_string) &lt;&gt;&lt;br/&gt;                                     NVL (p_name_row.root_name, c_null_string)&lt;br/&gt;             OR NVL (p_curr_customer_login.login_nm, c_null_string) &lt;&gt;&lt;br/&gt;                                          NVL (p_name_row.NAME, c_null_string)&lt;br/&gt;             OR NVL (p_curr_customer_login.login_name_status_cd,&lt;br/&gt;                     c_null_string) &lt;&gt;&lt;br/&gt;                                   NVL (p_name_row.name_status, c_null_string)&lt;br/&gt;             OR&lt;br/&gt;                --NVL (p_curr_customer_login.encryption_key_txt, c_null_string) &lt;&gt; NVL (p_name_row.encryption_key, c_null_string) OR&lt;br/&gt;                --NVL (p_curr_customer_login.password_txt, c_null_string) &lt;&gt; NVL (p_name_row.PASSWORD, c_null_string) OR&lt;br/&gt;                NVL (p_curr_customer_login.login_status_cd, c_null_string) &lt;&gt;&lt;br/&gt;                                 NVL (p_name_row.record_status, c_null_string)&lt;br/&gt;             OR NVL (p_curr_customer_login.login_expiration_dt,&lt;br/&gt;                     c_idm_null_date&lt;br/&gt;                    ) &lt;&gt; NVL (p_name_row.expiration_dt, c_idm_null_date)&lt;br/&gt;             OR NVL (p_curr_customer_login.last_login_dt, c_idm_null_date) &lt;&gt;&lt;br/&gt;                               NVL (p_name_row.last_login_dt, c_idm_null_date)&lt;br/&gt;             OR NVL (p_curr_customer_login.last_login_ip_address,&lt;br/&gt;                     c_null_string&lt;br/&gt;                    ) &lt;&gt; NVL (p_name_row.last_login_ip, c_null_string)&lt;br/&gt;             OR NVL (p_curr_customer_login.failed_login_attempt_cnt,&lt;br/&gt;                     c_idm_null_number&lt;br/&gt;                    ) &lt;&gt;&lt;br/&gt;                    NVL (p_name_row.failed_attempt_counter, c_idm_null_number)&lt;br/&gt;             OR NVL (p_curr_customer_login.remaining_login_attempt_cnt,&lt;br/&gt;                     c_idm_null_number&lt;br/&gt;                    ) &lt;&gt; NVL (p_name_row.remaining_logins, c_idm_null_number)&lt;br/&gt;             OR NVL (p_curr_customer_login.login_role_nm, c_null_string) &lt;&gt;&lt;br/&gt;                                          NVL (p_name_row.ROLE, c_null_string)&lt;br/&gt;             OR NVL (p_curr_customer_login.contact_verification_cd,&lt;br/&gt;                     c_null_string&lt;br/&gt;                    ) &lt;&gt; NVL (p_name_row.contact_verified, c_null_string)&lt;br/&gt;             OR&lt;br/&gt;                --NVL (p_curr_customer_login.contact_verification_val, c_null_string) &lt;&gt; NVL (p_name_row.verification_value, c_null_string) OR&lt;br/&gt;                NVL (p_curr_customer_login.lock_expiration_dttm,&lt;br/&gt;                     c_idm_null_date&lt;br/&gt;                    ) &lt;&gt; NVL (p_name_row.lock_expiration_dt, c_idm_null_date)&lt;br/&gt;             OR NVL (p_curr_customer_login.record_stat, c_null_string) &lt;&gt;&lt;br/&gt;                                                               c_record_active&lt;br/&gt;            )&lt;br/&gt;         THEN                --Added record status and NVL() in if on 20/03/15&lt;br/&gt;            UPDATE chtr.t_customer_login&lt;br/&gt;               SET cpni_compliant_ind = p_name_row.cpni_compliant,&lt;br/&gt;                   cpni_compliant_dttm = p_name_row.cpni_compliant_dt,&lt;br/&gt;                   encryption_algorithm_cd = NULL,&lt;br/&gt;                   email_administration_policy_nm =&lt;br/&gt;                                                 p_name_row.email_admin_policy,&lt;br/&gt;                   access_method_id = NULL,&lt;br/&gt;                   account_id = l_solo_account_id,&lt;br/&gt;                   namespace_id = p_name_row.namespace_id,&lt;br/&gt;                   login_root_nm = p_name_row.root_name,&lt;br/&gt;                   login_nm = p_name_row.NAME,&lt;br/&gt;                   login_name_status_cd = p_name_row.name_status,&lt;br/&gt;                   encryption_key_txt = NULL,&lt;br/&gt;                   password_txt = NULL,&lt;br/&gt;                   login_status_cd = p_name_row.record_status,&lt;br/&gt;                   login_expiration_dt = p_name_row.expiration_dt,&lt;br/&gt;                   last_login_dt = p_name_row.last_login_dt,&lt;br/&gt;                   last_login_ip_address_id = NULL,&lt;br/&gt;                   last_login_ip_address = p_name_row.last_login_ip,&lt;br/&gt;                   failed_login_attempt_cnt =&lt;br/&gt;                                             p_name_row.failed_attempt_counter,&lt;br/&gt;                   remaining_login_attempt_cnt = p_name_row.remaining_logins,&lt;br/&gt;                   login_role_nm = p_name_row.ROLE,&lt;br/&gt;                   contact_verification_cd = p_name_row.contact_verified,&lt;br/&gt;                   contact_verification_val = NULL,&lt;br/&gt;                   lock_expiration_dttm = p_name_row.lock_expiration_dt,&lt;br/&gt;                   modified_by = p_audit_user_i,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   record_stat = c_record_active&lt;br/&gt;             WHERE customer_login_id =&lt;br/&gt;                                   l_customer_login_idm_xref.customer_login_id;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF l_customer_login_idm_xref.record_stat &lt;&gt; c_record_active&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_locator&lt;br/&gt;               SET modified_by = p_audit_user_i,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   record_stat = c_record_active&lt;br/&gt;             WHERE locator_id = l_customer_login_idm_xref.address_id;&lt;br/&gt;&lt;br/&gt;            UPDATE chtr.t_address&lt;br/&gt;               SET modified_by = p_audit_user_i,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   record_stat = c_record_active&lt;br/&gt;             WHERE address_id = l_customer_login_idm_xref.address_id;&lt;br/&gt;&lt;br/&gt;            UPDATE chtr.t_customer_login_idm_xref&lt;br/&gt;               SET modified_by = p_audit_user_i,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   record_stat = c_record_active&lt;br/&gt;             WHERE idm_name_id = p_name_row.name_id;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         UPDATE chtr.t_elec_address&lt;br/&gt;            SET elec_address_txt = p_name_row.NAME,&lt;br/&gt;                elec_address_domain_nm = l_namespace,&lt;br/&gt;                domain_root_cd =&lt;br/&gt;                          SUBSTR (l_namespace, INSTR (l_namespace, &apos;.&apos;, -1, 1)),&lt;br/&gt;                valid_elec_address_ind =&lt;br/&gt;                          CASE&lt;br/&gt;                             WHEN p_name_row.contact_verified = &apos;Y&apos;&lt;br/&gt;                                THEN 1&lt;br/&gt;                             ELSE 0&lt;br/&gt;                          END,&lt;br/&gt;                modified_by = p_audit_user_i,&lt;br/&gt;                modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                record_stat = c_record_active&lt;br/&gt;          WHERE elec_address_id = l_customer_login_idm_xref.address_id&lt;br/&gt;            AND (   NVL (elec_address_txt, c_null_string) &lt;&gt;&lt;br/&gt;                                          NVL (p_name_row.NAME, c_null_string)&lt;br/&gt;                 OR NVL (elec_address_domain_nm, c_null_string) &lt;&gt;&lt;br/&gt;                                              NVL (l_namespace, c_null_string)&lt;br/&gt;                 OR NVL (domain_root_cd, c_null_string) &lt;&gt;&lt;br/&gt;                       NVL (SUBSTR (l_namespace,&lt;br/&gt;                                    INSTR (l_namespace, &apos;.&apos;, -1, 1)&lt;br/&gt;                                   ),&lt;br/&gt;                            c_null_string&lt;br/&gt;                           )&lt;br/&gt;                 OR NVL (valid_elec_address_ind, c_idm_null_number) &lt;&gt;&lt;br/&gt;                       NVL (CASE&lt;br/&gt;                               WHEN p_name_row.contact_verified = &apos;Y&apos;&lt;br/&gt;                                  THEN 1&lt;br/&gt;                               ELSE 0&lt;br/&gt;                            END,&lt;br/&gt;                            c_idm_null_number&lt;br/&gt;                           )&lt;br/&gt;                 OR NVL (record_stat, c_null_string) &lt;&gt;&lt;br/&gt;                                          NVL (c_record_active, c_null_string)&lt;br/&gt;                );&lt;br/&gt;&lt;br/&gt;         IF REGEXP_LIKE (p_name_row.NAME,&lt;br/&gt;                         &apos;[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}&apos;&lt;br/&gt;                        )&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_email_address&lt;br/&gt;               SET email_address_txt = p_name_row.NAME,&lt;br/&gt;                   user_nm = p_name_row.root_name,&lt;br/&gt;                   domain_nm = l_namespace,&lt;br/&gt;                   modified_by = p_audit_user_i,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   record_stat = c_record_active&lt;br/&gt;             WHERE email_address_id = l_customer_login_idm_xref.address_id&lt;br/&gt;               AND (   NVL (email_address_txt, c_null_string) &lt;&gt;&lt;br/&gt;                                          NVL (p_name_row.NAME, c_null_string)&lt;br/&gt;                    OR NVL (user_nm, c_null_string) &lt;&gt;&lt;br/&gt;                                     NVL (p_name_row.root_name, c_null_string)&lt;br/&gt;                    OR NVL (domain_nm, c_null_string) &lt;&gt;&lt;br/&gt;                                              NVL (l_namespace, c_null_string)&lt;br/&gt;                    OR NVL (record_stat, c_null_string) &lt;&gt;&lt;br/&gt;                                          NVL (c_record_active, c_null_string)&lt;br/&gt;                   );&lt;br/&gt;         ELSE&lt;br/&gt;            l_email_check := NULL;&lt;br/&gt;            chtr.da_email_address.del&lt;br/&gt;                   (process_rec           =&gt; l_process_rec,&lt;br/&gt;                    email_address_id      =&gt; l_customer_login_idm_xref.address_id,&lt;br/&gt;                    audit_user            =&gt; p_audit_user_i&lt;br/&gt;                   );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         UPDATE chtr.t_account_address&lt;br/&gt;            SET account_id = l_solo_account_id,&lt;br/&gt;                address_usage_type_cd = l_namespace_type,&lt;br/&gt;                modified_by = p_audit_user_i,&lt;br/&gt;                modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                record_stat = c_record_active&lt;br/&gt;          WHERE address_id = l_customer_login_idm_xref.address_id&lt;br/&gt;            AND (   NVL (account_id, c_idm_null_number) &lt;&gt;&lt;br/&gt;                                    NVL (l_solo_account_id, c_idm_null_number)&lt;br/&gt;                 OR NVL (address_usage_type_cd, c_null_string) &lt;&gt;&lt;br/&gt;                                         NVL (l_namespace_type, c_null_string)&lt;br/&gt;                 OR NVL (record_stat, c_null_string) &lt;&gt;&lt;br/&gt;                                          NVL (c_record_active, c_null_string)&lt;br/&gt;                );&lt;br/&gt;      ELSIF p_action = &apos;D&apos;&lt;br/&gt;      THEN&lt;br/&gt;         chtr.da_customer_login.del&lt;br/&gt;            (process_rec            =&gt; l_process_rec,&lt;br/&gt;             customer_login_id      =&gt; l_customer_login_idm_xref.customer_login_id,&lt;br/&gt;             audit_user             =&gt; p_audit_user_i&lt;br/&gt;            );&lt;br/&gt;         chtr.da_locator.del&lt;br/&gt;                          (process_rec      =&gt; l_process_rec,&lt;br/&gt;                           locator_id       =&gt; l_customer_login_idm_xref.address_id,&lt;br/&gt;                           audit_user       =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;         chtr.da_address.del&lt;br/&gt;                          (process_rec      =&gt; l_process_rec,&lt;br/&gt;                           address_id       =&gt; l_customer_login_idm_xref.address_id,&lt;br/&gt;                           audit_user       =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;         chtr.da_customer_login_idm_xref.del&lt;br/&gt;                                           (process_rec      =&gt; l_process_rec,&lt;br/&gt;                                            idm_name_id      =&gt; p_name_row.name_id,&lt;br/&gt;                                            audit_user       =&gt; p_audit_user_i&lt;br/&gt;                                           );&lt;br/&gt;         chtr.da_elec_address.del&lt;br/&gt;                     (process_rec          =&gt; l_process_rec,&lt;br/&gt;                      elec_address_id      =&gt; l_customer_login_idm_xref.address_id,&lt;br/&gt;                      audit_user           =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;         chtr.da_email_address.del&lt;br/&gt;                    (process_rec           =&gt; l_process_rec,&lt;br/&gt;                     email_address_id      =&gt; l_customer_login_idm_xref.address_id,&lt;br/&gt;                     audit_user            =&gt; p_audit_user_i&lt;br/&gt;                    );&lt;br/&gt;         chtr.da_account_address.del&lt;br/&gt;                          (process_rec                =&gt; l_process_rec,&lt;br/&gt;                           account_id                 =&gt; l_solo_old_account_id,&lt;br/&gt;                           address_id                 =&gt; l_customer_login_idm_xref.address_id,&lt;br/&gt;                           address_usage_type_cd      =&gt; l_namespace_type,&lt;br/&gt;                           audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      p_record_load_cd := &apos;P&apos;;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         p_record_load_cd := &apos;E&apos;;&lt;br/&gt;         chtr.pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || l_key_columns&lt;br/&gt;                                         || &apos;, name_id=&apos;&lt;br/&gt;                                         || p_name_row.name_id&lt;br/&gt;                                         || &apos;, exception=&apos;&lt;br/&gt;                                         || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                        );&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_idm (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure IDM_INITIAL_LOAD&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : This is for loading the IDM SOLO tables during initial load.&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   AS&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl;&lt;br/&gt;      l_action         VARCHAR2 (1)                           := &apos;I&apos;;&lt;br/&gt;      l_proc_name      t_unit_name                            := &apos;LOAD_IDM&apos;;&lt;br/&gt;      l_process_name   chtr.t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      chtr.pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                      &apos;p_audit_user_i= &apos; || p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;      chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_start_text&lt;br/&gt;                                 );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      INSERT INTO chtr.t_namespace&lt;br/&gt;                  (namespace_id, namespace_type_nm, namespace_nm, record_stat,&lt;br/&gt;                   created_dttm, created_by, modified_dttm, modified_by)&lt;br/&gt;         SELECT a.namespace_id, a.namespace_type, a.namespace,&lt;br/&gt;                a.record_status, l_systimestamp, p_audit_user_i, NULL, NULL&lt;br/&gt;           FROM stg.idm_namespace a&lt;br/&gt;          WHERE a.record_status = c_record_active&lt;br/&gt;            AND NOT EXISTS (SELECT t.namespace_id&lt;br/&gt;                              FROM chtr.t_namespace t&lt;br/&gt;                             WHERE t.namespace_id = a.namespace_id);&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_idm_name%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_idm_name;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_idm_name;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_idm_name&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- insert customer login&lt;br/&gt;            insert_customer_login (p_process_rec_i       =&gt; l_process_rec,&lt;br/&gt;                                   p_cursor_data_io      =&gt; l_cursor_data,&lt;br/&gt;                                   p_audit_user_i        =&gt; p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;            -- insert locator&lt;br/&gt;            insert_locator (p_process_rec_i       =&gt; l_process_rec,&lt;br/&gt;                            p_cursor_data_io      =&gt; l_cursor_data,&lt;br/&gt;                            p_audit_user_i        =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;            -- insert address&lt;br/&gt;            insert_address (p_process_rec_i       =&gt; l_process_rec,&lt;br/&gt;                            p_cursor_data_io      =&gt; l_cursor_data,&lt;br/&gt;                            p_audit_user_i        =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;            -- insert customer login idm xref&lt;br/&gt;            insert_customer_login_idm_xref (p_process_rec_i       =&gt; l_process_rec,&lt;br/&gt;                                            p_cursor_data_io      =&gt; l_cursor_data,&lt;br/&gt;                                            p_audit_user_i        =&gt; p_audit_user_i&lt;br/&gt;                                           );&lt;br/&gt;            -- insert elec address&lt;br/&gt;            insert_elec_address (p_process_rec_i       =&gt; l_process_rec,&lt;br/&gt;                                 p_cursor_data_io      =&gt; l_cursor_data,&lt;br/&gt;                                 p_audit_user_i        =&gt; p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;            -- insert email address&lt;br/&gt;            insert_email_address (p_process_rec_i       =&gt; l_process_rec,&lt;br/&gt;                                  p_cursor_data_io      =&gt; l_cursor_data,&lt;br/&gt;                                  p_audit_user_i        =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            -- insert account address&lt;br/&gt;            insert_account_address (p_process_rec_i       =&gt; l_process_rec,&lt;br/&gt;                                    p_cursor_data_io      =&gt; l_cursor_data,&lt;br/&gt;                                    p_audit_user_i        =&gt; p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data, p_audit_user_i);&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_idm_name;&lt;br/&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, &apos;SUCCESS&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_idm_name%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_idm_name;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END load_idm;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer_login (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure insert_customer_login&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The insert_customer_login procedure will bulk Insert into t_customer_login&lt;br/&gt;||                       table rows from staging data.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;INSERT_CUSTOMER_LOGIN&apos;;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_customer_login&lt;br/&gt;                        (customer_login_id,&lt;br/&gt;                         cpni_compliant_ind,&lt;br/&gt;                         cpni_compliant_dttm, encryption_algorithm_cd,&lt;br/&gt;                         email_administration_policy_nm, access_method_id,&lt;br/&gt;                         account_id,&lt;br/&gt;                         namespace_id,&lt;br/&gt;                         login_root_nm,&lt;br/&gt;                         login_nm,&lt;br/&gt;                         login_name_status_cd, encryption_key_txt,&lt;br/&gt;                         password_txt, login_status_cd,&lt;br/&gt;                         login_expiration_dt,&lt;br/&gt;                         last_login_dt, last_login_ip_address_id,&lt;br/&gt;                         last_login_ip_address,&lt;br/&gt;                         failed_login_attempt_cnt,&lt;br/&gt;                         remaining_login_attempt_cnt,&lt;br/&gt;                         login_role_nm,&lt;br/&gt;                         contact_verification_cd, contact_verification_val,&lt;br/&gt;                         lock_expiration_dttm,&lt;br/&gt;                         record_stat, created_by, created_dttm,&lt;br/&gt;                         modified_dttm, modified_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).s_customer_login_id,&lt;br/&gt;                         p_cursor_data_io (i).cpni_compliant,&lt;br/&gt;                         p_cursor_data_io (i).cpni_compliant_dt, NULL,&lt;br/&gt;                         p_cursor_data_io (i).email_admin_policy, NULL,&lt;br/&gt;                         p_cursor_data_io (i).solo_account_id,&lt;br/&gt;                         p_cursor_data_io (i).namespace_id,&lt;br/&gt;                         p_cursor_data_io (i).root_name,&lt;br/&gt;                         p_cursor_data_io (i).NAME,&lt;br/&gt;                         p_cursor_data_io (i).name_status, NULL,&lt;br/&gt;                         NULL, p_cursor_data_io (i).record_status,&lt;br/&gt;                         p_cursor_data_io (i).expiration_dt,&lt;br/&gt;                         p_cursor_data_io (i).last_login_dt, NULL,&lt;br/&gt;                         p_cursor_data_io (i).last_login_ip,&lt;br/&gt;                         p_cursor_data_io (i).failed_attempt_counter,&lt;br/&gt;                         p_cursor_data_io (i).remaining_logins,&lt;br/&gt;                         p_cursor_data_io (i).ROLE,&lt;br/&gt;                         p_cursor_data_io (i).contact_verified, NULL,&lt;br/&gt;                         p_cursor_data_io (i).lock_expiration_dt,&lt;br/&gt;                         c_record_active, p_audit_user_i, l_systimestamp,&lt;br/&gt;                         NULL, NULL&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i,&lt;br/&gt;                             l_proc_name&lt;br/&gt;                          || &apos;, customer_login_id=&apos;&lt;br/&gt;                          || p_cursor_data_io (l_coll_idx).s_customer_login_id&lt;br/&gt;                          || &apos;, name_id=&apos;&lt;br/&gt;                          || p_cursor_data_io (l_coll_idx).name_id&lt;br/&gt;                          || &apos;, exception=&apos;&lt;br/&gt;                          || SQLERRM (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                         );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_customer_login;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure insert_locator&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The insert_locator procedure will bulk Insert into t_locator&lt;br/&gt;||                       table rows from staging data.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;INSERT_LOCATOR&apos;;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_locator a&lt;br/&gt;                        (a.locator_id,&lt;br/&gt;                         a.locator_subtype_cd, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by, a.modified_dttm,&lt;br/&gt;                         a.modified_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).s_address_id,&lt;br/&gt;                         c_address_subtype_cd_elec, c_record_active,&lt;br/&gt;                         l_systimestamp, p_audit_user_i, NULL,&lt;br/&gt;                         NULL&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, locator_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).s_address_id&lt;br/&gt;                                || &apos;, name_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).name_id&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_locator;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure insert_address&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The insert_address procedure will bulk Insert into t_address&lt;br/&gt;||                       table rows from staging data.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;INSERT_ADDRESS&apos;;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_address a&lt;br/&gt;                        (a.address_id,&lt;br/&gt;                         a.data_source_type_cd,&lt;br/&gt;                         a.address_subtype_cd,&lt;br/&gt;                         a.source_system_address_id, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by, a.modified_dttm,&lt;br/&gt;                         a.modified_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).s_address_id,&lt;br/&gt;                         c_data_source_type_cd_idm,&lt;br/&gt;                         c_address_subtype_cd_elec,&lt;br/&gt;                         p_cursor_data_io (i).name_id, c_record_active,&lt;br/&gt;                         l_systimestamp, p_audit_user_i, NULL,&lt;br/&gt;                         NULL&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, address_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).s_address_id&lt;br/&gt;                                || &apos;, name_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).name_id&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer_login_idm_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure insert_customer_login_idm_xref&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The insert_customer_login_idm_xref procedure will bulk Insert into t_account_address&lt;br/&gt;||                       table rows from staging data.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;INSERT_CUSTOMER_LOGIN_IDM_XREF&apos;;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_customer_login_idm_xref a&lt;br/&gt;                        (a.idm_name_id,&lt;br/&gt;                         a.customer_login_id,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by,&lt;br/&gt;                         a.modified_dttm, a.modified_by, a.address_id&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).name_id,&lt;br/&gt;                         p_cursor_data_io (i).s_customer_login_id,&lt;br/&gt;                         c_record_active, l_systimestamp, p_audit_user_i,&lt;br/&gt;                         NULL, NULL, p_cursor_data_io (i).s_address_id&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, name_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).name_id&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_customer_login_idm_xref;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_elec_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure insert_elec_address&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The insert_elec_address procedure will bulk Insert into t_address&lt;br/&gt;||                       table rows from staging data.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;INSERT_ELEC_ADDRESS&apos;;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_elec_address a&lt;br/&gt;                        (a.elec_address_id,&lt;br/&gt;                         a.elec_address_subtype_cd,&lt;br/&gt;                         a.elec_address_txt,&lt;br/&gt;                         a.elec_address_domain_nm,&lt;br/&gt;                         a.domain_root_cd,&lt;br/&gt;                         a.valid_elec_address_ind,&lt;br/&gt;                         a.record_stat, a.created_dttm, a.created_by,&lt;br/&gt;                         a.modified_dttm, a.modified_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).s_address_id,&lt;br/&gt;                         c_elec_address_subtype_cd_eml,&lt;br/&gt;                         p_cursor_data_io (i).NAME,&lt;br/&gt;                         p_cursor_data_io (i).namespace,&lt;br/&gt;                         SUBSTR (p_cursor_data_io (i).namespace,&lt;br/&gt;                                 INSTR (p_cursor_data_io (i).namespace,&lt;br/&gt;                                        &apos;.&apos;,&lt;br/&gt;                                        -1,&lt;br/&gt;                                        1&lt;br/&gt;                                       )&lt;br/&gt;                                ),&lt;br/&gt;                         CASE&lt;br/&gt;                            WHEN p_cursor_data_io (i).contact_verified = &apos;Y&apos;&lt;br/&gt;                               THEN 1&lt;br/&gt;                            ELSE 0&lt;br/&gt;                         END,&lt;br/&gt;                         c_record_active, l_systimestamp, p_audit_user_i,&lt;br/&gt;                         NULL, NULL&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, elec_address_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).s_address_id&lt;br/&gt;                                || &apos;, name_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).name_id&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_elec_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_email_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure insert_email_address&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The insert_email_address procedure will bulk Insert into t_email_address&lt;br/&gt;||                       table rows from staging data.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;INSERT_EMAIL_ADDRESS&apos;;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_email_address a&lt;br/&gt;                        (a.email_address_id, a.email_address_txt, a.user_nm,&lt;br/&gt;                         a.domain_nm, a.record_stat, a.created_dttm,&lt;br/&gt;                         a.created_by, a.modified_dttm, a.modified_by)&lt;br/&gt;               (SELECT p_cursor_data_io (i).s_address_id,&lt;br/&gt;                       p_cursor_data_io (i).NAME,&lt;br/&gt;                       p_cursor_data_io (i).root_name,&lt;br/&gt;                       p_cursor_data_io (i).namespace, c_record_active,&lt;br/&gt;                       l_systimestamp, p_audit_user_i, NULL, NULL&lt;br/&gt;                  FROM DUAL&lt;br/&gt;                 WHERE REGEXP_LIKE&lt;br/&gt;                          (p_cursor_data_io (i).NAME,&lt;br/&gt;                           &apos;[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}&apos;&lt;br/&gt;                          ));&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, email_address_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).s_address_id&lt;br/&gt;                                || &apos;, name_id=&apos;&lt;br/&gt;                                || p_cursor_data_io (l_coll_idx).name_id&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_email_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure insert_account_address&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The insert_account_address procedure will bulk Insert into t_account_address&lt;br/&gt;||                       table rows from staging data.&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;INSERT_ACCOUNT_ADDRESS&apos;;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_account_address a&lt;br/&gt;                        (a.account_id,&lt;br/&gt;                         a.address_id,&lt;br/&gt;                         a.address_usage_type_cd,&lt;br/&gt;--                         a.address_subtype_cd,  -- Commented as part of the webservice changes&lt;br/&gt;                         a.data_source_type_cd, a.record_stat,&lt;br/&gt;                         a.created_dttm, a.created_by, a.modified_dttm,&lt;br/&gt;                         a.modified_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_io (i).solo_account_id,&lt;br/&gt;                         p_cursor_data_io (i).s_address_id,&lt;br/&gt;                         p_cursor_data_io (i).namespace_type,&lt;br/&gt;--                         c_address_subtype_cd_elec,  -- Commented as part of the webservice changes&lt;br/&gt;                         c_data_source_type_cd_idm, c_record_active,&lt;br/&gt;                         l_systimestamp, p_audit_user_i, NULL,&lt;br/&gt;                         NULL&lt;br/&gt;                        );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_io (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos;, address_id=&apos;&lt;br/&gt;                              || p_cursor_data_io (l_coll_idx).s_address_id&lt;br/&gt;                              || &apos;, account_id=&apos;&lt;br/&gt;                              || p_cursor_data_io (l_coll_idx).solo_account_id&lt;br/&gt;                              || &apos;, address_usage_type_cd=&apos;&lt;br/&gt;                              || p_cursor_data_io (l_coll_idx).namespace_type&lt;br/&gt;                              || &apos;, name_id=&apos;&lt;br/&gt;                              || p_cursor_data_io (l_coll_idx).name_id&lt;br/&gt;                              || &apos;, exception=&apos;&lt;br/&gt;                              || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                             );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   END insert_account_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_staging&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.vnt_ojb_jobs_rec_delta.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.idm_name s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i (i).record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       )&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_idm;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_HSE_BASE" directorySegmentName="seg_6" id="3BCDA519-FC15-B1E8-068A-CC2D8BBD2C9E">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_HSE_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:35 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_HSE_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name       : PKG_VNT_LOAD_HSE_BASE&lt;br/&gt;   ||  Created By         : Knoll&lt;br/&gt;   ||  Created Date       : 01-Sep-2014&lt;br/&gt;   ||  Subject Area       : House&lt;br/&gt;   ||  Description         :This is for loading Service Address and House Base details from the staging table &apos;vnt_hse_base&apos;.&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE load(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;		 p_batchsize   NUMBER DEFAULT 1000 );&lt;br/&gt;END pkg_vnt_load_hse_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_HSE_BASE" id="3BCDA519-FC15-B1E8-068A-CC2D8BBD2C9E">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_HSE_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:38 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_HSE_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name       : PKG_VNT_LOAD_HSE_BASE&lt;br/&gt;   ||  Created By         : Knoll&lt;br/&gt;   ||  Created Date       : 01-Sep-2014&lt;br/&gt;   ||  Subject Area       : House&lt;br/&gt;   ||  Description        : This is for loading Service Address and House Base details from&lt;br/&gt;   ||                       the staging table &apos;vnt_hse_base&apos;.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ||     Senthil        10-Jan-2015     Added mapping for valid_address_ind column in t_street_address table&lt;br/&gt;   ||                                     (forced_addr_flg_hse )&lt;br/&gt;   ||&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_in_progress CONSTANT VARCHAR2 (1) := &apos;I&apos;;&lt;br/&gt;   c_stg_error CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_country_code CONSTANT VARCHAR2 (3) := &apos;1&apos;;&lt;br/&gt;   c_pkg_name CONSTANT t_unit_name := &apos;PKG_VNT_LOAD_HSE_BASE&apos;;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread NUMBER := 1;&lt;br/&gt;   g_max_thread NUMBER := 1;&lt;br/&gt;   g_batchsize NUMBER := 10000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged HSE_BASE for loading service addresses&lt;br/&gt;   CURSOR cur_stg_hse_base_sa&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         -- staging control data&lt;br/&gt;         hse.ROWID AS ID,&lt;br/&gt;         hse.record_load_cd,&lt;br/&gt;&lt;br/&gt;         -- surrogate keys&lt;br/&gt;         s_address_id.NEXTVAL AS service_address_id,&lt;br/&gt;&lt;br/&gt;         -- source keys&lt;br/&gt;         hse.hse_key_hse AS hse_key,&lt;br/&gt;&lt;br/&gt;         -- data&lt;br/&gt;         CASE&lt;br/&gt;            WHEN sys_hse = 8313&lt;br/&gt;            THEN &apos;BRS&apos;&lt;br/&gt;            ELSE &apos;VNT&apos;&lt;br/&gt;         END AS data_source_type_cd,&lt;br/&gt;         DECODE (hse.dwell_typ_hse, &apos;NY&apos;, NULL, hse.dwell_typ_hse ) AS dwelling_type_cd,&lt;br/&gt;         hse.hse_stat_hse AS serviceability_cd,&lt;br/&gt;		 hse.forced_addr_flg_hse&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_hse_base hse&lt;br/&gt;      WHERE&lt;br/&gt;         hse.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (hse.ROWID, LENGTH (hse.ROWID), 1)), g_max_thread ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;   -- Staged HSE_BASE for loading&lt;br/&gt;   CURSOR cur_stg_hse_base&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         -- staging control data&lt;br/&gt;         hse.ROWID AS ID,&lt;br/&gt;         hse.record_load_cd,&lt;br/&gt;&lt;br/&gt;         -- surrogate keys&lt;br/&gt;         s_address_id.NEXTVAL AS source_street_address_id,&lt;br/&gt;         xref.address_id AS service_address_id,&lt;br/&gt;&lt;br/&gt;         -- source keys&lt;br/&gt;         hse.hse_key_hse AS hse_key,&lt;br/&gt;&lt;br/&gt;         -- data&lt;br/&gt;         TRIM (hse.addr1_hse) AS address_line_1_txt,&lt;br/&gt;         TRIM (hse.res_addr_2_hse) AS address_line_2_txt,&lt;br/&gt;         TRIM (hse.res_city_hse) AS city_nm,&lt;br/&gt;         hse.res_state_hse AS territory_cd,&lt;br/&gt;         c_country_code AS country_cd,&lt;br/&gt;         hse.postal_cde_hse AS postal_code_txt,&lt;br/&gt;         hse.hse_key_hse AS source_system_address_id,&lt;br/&gt;		 hse.forced_addr_flg_hse,&lt;br/&gt;         CASE&lt;br/&gt;            WHEN hse.sys_hse = 8313&lt;br/&gt;            THEN &apos;BRS&apos;&lt;br/&gt;            ELSE &apos;VNT&apos;&lt;br/&gt;         END AS data_source_type_cd,&lt;br/&gt;         DECODE (hse.dwell_typ_hse, &apos;NY&apos;, NULL, hse.dwell_typ_hse ) AS dwelling_type_cd,&lt;br/&gt;         hse.hse_stat_hse AS serviceability_cd&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_hse_base hse&lt;br/&gt;      INNER JOIN t_service_address_vantage_xref xref&lt;br/&gt;      ON&lt;br/&gt;         xref.hs_key = hse.hse_key_hse&lt;br/&gt;      WHERE&lt;br/&gt;         hse.record_load_cd = c_stg_in_progress&lt;br/&gt;         AND MOD (ASCII (SUBSTR (hse.ROWID, LENGTH (hse.ROWID), 1)), g_max_thread ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;TYPE t_cursor_data_sa_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF cur_stg_hse_base_sa%ROWTYPE INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;TYPE t_cursor_data_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF cur_stg_hse_base%ROWTYPE INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;TYPE t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;PROCEDURE insert_service_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_street_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_source_street_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_locator_sa(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_locator(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_address_sa(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_service_address_xref(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_service_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging_sa(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_sa_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE load_service_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i IN VARCHAR2 );&lt;br/&gt;&lt;br/&gt;PROCEDURE load_hse_base(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i IN VARCHAR2 );&lt;br/&gt;&lt;br/&gt;PROCEDURE LOAD(&lt;br/&gt;      p_audit_user_i IN VARCHAR2,&lt;br/&gt;      p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;      p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize NUMBER DEFAULT 1000 )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : LOAD&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Service Address and House Base details from&lt;br/&gt;   ||                       the staging table &apos;vnt_hse_base&apos;.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;LOAD&apos;;&lt;br/&gt;   l_process_name t_process_log.process_name%TYPE := c_pkg_name;&lt;br/&gt;   l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;   l_cursor_data_sa t_cursor_data_sa_tbl;&lt;br/&gt;   l_cursor_data t_cursor_data_tbl;&lt;br/&gt;BEGIN&lt;br/&gt;   l_process_rec.process_name := l_process_name;&lt;br/&gt;   pkg_logging.begin_process (l_process_rec, &apos;p_audit_user_i=&apos; || p_audit_user_i );&lt;br/&gt;   g_this_thread := p_this_thread;&lt;br/&gt;   g_max_thread := p_max_thread;&lt;br/&gt;   g_batchsize := p_batchsize;&lt;br/&gt;   load_service_address (p_process_rec_i =&gt; l_process_rec, p_audit_user_i =&gt; p_audit_user_i );&lt;br/&gt;   load_hse_base (p_process_rec_i =&gt; l_process_rec, p_audit_user_i =&gt; p_audit_user_i );&lt;br/&gt;   pkg_logging.end_process (l_process_rec);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;   ROLLBACK;&lt;br/&gt;   pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;   pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;END LOAD;&lt;br/&gt;&lt;br/&gt;PROCEDURE load_service_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i IN VARCHAR2 )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name     : LOAD_SERVICE_ADDRESS&lt;br/&gt;   ||  Estimated Run Time  :&lt;br/&gt;   ||  Description         : This is for loading Service Address details from the staging table &apos; vnt_hse_base&apos;.&lt;br/&gt;   ||                        Service Address details corresponds to for case of record_load_cd = NULL in VNT_HSE_BASE&lt;br/&gt;   ||                        staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;LOAD_SERVICE_ADDRESS&apos;;&lt;br/&gt;   l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;   l_cursor_data_sa t_cursor_data_sa_tbl;&lt;br/&gt;BEGIN&lt;br/&gt;   l_process_rec := p_process_rec_i;&lt;br/&gt;   pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; Start&apos;);&lt;br/&gt;&lt;br/&gt;   IF pkg_utility.stopnow (c_pkg_name) THEN&lt;br/&gt;      RETURN;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   --Added on 10-Nov-2014 as part of Code Standardization Changes&lt;br/&gt;   IF (cur_stg_hse_base_sa%ISOPEN) THEN&lt;br/&gt;      CLOSE cur_stg_hse_base_sa;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   OPEN cur_stg_hse_base_sa;&lt;br/&gt;&lt;br/&gt;   LOOP&lt;br/&gt;      FETCH&lt;br/&gt;         cur_stg_hse_base_sa BULK COLLECT&lt;br/&gt;      INTO&lt;br/&gt;         l_cursor_data_sa LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;      IF (l_cursor_data_sa.COUNT () &gt; 0) THEN&lt;br/&gt;         -- Insert locator&lt;br/&gt;         insert_locator_sa (l_process_rec, l_cursor_data_sa);&lt;br/&gt;         -- Insert address&lt;br/&gt;         insert_address_sa (l_process_rec, l_cursor_data_sa);&lt;br/&gt;         -- Insert service_address&lt;br/&gt;         insert_service_address (l_process_rec, l_cursor_data_sa);&lt;br/&gt;         -- Insert service_address_vantage_xref&lt;br/&gt;         insert_service_address_xref (l_process_rec, l_cursor_data_sa);&lt;br/&gt;         -- Update the staging rows with status&lt;br/&gt;         update_staging_sa (l_process_rec, l_cursor_data_sa);&lt;br/&gt;         -- Commit the batch&lt;br/&gt;         COMMIT;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      EXIT&lt;br/&gt;   WHEN l_cursor_data_sa.COUNT () &lt; g_batchsize OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   CLOSE cur_stg_hse_base_sa;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; End&apos;);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;   ROLLBACK;&lt;br/&gt;&lt;br/&gt;   --Added on 10-Nov-2014 as part of Code Standardization Changes&lt;br/&gt;   IF (cur_stg_hse_base_sa%ISOPEN) THEN&lt;br/&gt;      CLOSE cur_stg_hse_base_sa;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;   RAISE;&lt;br/&gt;END load_service_address;&lt;br/&gt;&lt;br/&gt;PROCEDURE load_hse_base(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i IN VARCHAR2 )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : LOAD_HSE_BASE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading House Base details from the staging table &apos; vnt_hse_base&apos;. House Base&lt;br/&gt;   ||                       details corresponds to for case of record_load_cd = &apos;I&apos; in VNT_HSE_BASE staging table&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;LOAD_HSE_BASE&apos;;&lt;br/&gt;   l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;   l_cursor_data t_cursor_data_tbl;&lt;br/&gt;BEGIN&lt;br/&gt;   l_process_rec := p_process_rec_i;&lt;br/&gt;   pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; Start&apos;);&lt;br/&gt;&lt;br/&gt;   IF pkg_utility.stopnow (c_pkg_name) THEN&lt;br/&gt;      RETURN;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   --Added on 10-Nov-2014 as part of Code Standardization Changes&lt;br/&gt;   IF (cur_stg_hse_base%ISOPEN) THEN&lt;br/&gt;      CLOSE cur_stg_hse_base;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   OPEN cur_stg_hse_base;&lt;br/&gt;&lt;br/&gt;   LOOP&lt;br/&gt;      FETCH&lt;br/&gt;         cur_stg_hse_base BULK COLLECT&lt;br/&gt;      INTO&lt;br/&gt;         l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;      IF (l_cursor_data.COUNT () &gt; 0) THEN&lt;br/&gt;         -- Insert locator&lt;br/&gt;         insert_locator (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Insert address&lt;br/&gt;         insert_address (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Insert source_street_address&lt;br/&gt;         insert_source_street_address (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Insert street_address&lt;br/&gt;         insert_street_address (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Update service_address with the source street address&lt;br/&gt;         update_service_address (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Update the staging rows with status&lt;br/&gt;         update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;         -- Commit the batch&lt;br/&gt;         COMMIT;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      EXIT&lt;br/&gt;   WHEN l_cursor_data.COUNT () &lt; g_batchsize OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   CLOSE cur_stg_hse_base;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (l_process_rec, l_proc_name || &apos; End&apos;);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;   ROLLBACK;&lt;br/&gt;&lt;br/&gt;   --Added on 10-Nov-2014 as part of Code Standardization Changes&lt;br/&gt;   IF (cur_stg_hse_base%ISOPEN) THEN&lt;br/&gt;      CLOSE cur_stg_hse_base;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;END load_hse_base;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_service_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_SERVICE_ADDRESS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Service Address details specifically into the target table&lt;br/&gt;   ||                       &apos;t_service_address&apos; via Bilk Load Mechanism. Service Address details corresponds to for&lt;br/&gt;   ||                       case of record_load_cd = NULL in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SERVICE_ADDRESS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_service_address a&lt;br/&gt;         (&lt;br/&gt;            a.service_address_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.serviceability_cd,&lt;br/&gt;            a.dwelling_type_cd,&lt;br/&gt;            a.source_fta_id,&lt;br/&gt;            a.source_street_address_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            --c_vantage_data_src,&lt;br/&gt;            --Commented above and added below on 14-Nov-2014&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).serviceability_cd,&lt;br/&gt;            p_cursor_data_io (i).dwelling_type_cd,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_service_address;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_source_street_address&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_SOURCE_STREET_ADDRESS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading House Base details specifically into the target table&lt;br/&gt;   ||                       &apos;t_source_street_address&apos; via Bilk Load Mechanism. House Base details corresponds to&lt;br/&gt;   ||                       case of record_load_cd = &apos;I&apos;&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SOURCE_STREET_ADDRESS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_source_street_address a&lt;br/&gt;         (&lt;br/&gt;            a.source_street_address_id,&lt;br/&gt;            a.address_line_1_txt,&lt;br/&gt;            a.address_line_2_txt,&lt;br/&gt;            a.address_line_3_txt,&lt;br/&gt;            a.city_nm,&lt;br/&gt;            a.territory_cd,&lt;br/&gt;            a.country_cd,&lt;br/&gt;            a.postal_code_txt,&lt;br/&gt;            a.carrier_route_txt,&lt;br/&gt;            a.clean_street_address_id,&lt;br/&gt;            a.clean_po_box_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).source_street_address_id,&lt;br/&gt;            p_cursor_data_io (i).address_line_1_txt,&lt;br/&gt;            p_cursor_data_io (i).address_line_2_txt,&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).city_nm,&lt;br/&gt;            p_cursor_data_io (i).territory_cd,&lt;br/&gt;            p_cursor_data_io (i).country_cd,&lt;br/&gt;            p_cursor_data_io (i).postal_code_txt,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_source_street_address;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_street_address&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_STREET_ADDRESS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading House Base details specifically into the target table&lt;br/&gt;   ||                       &apos;t_street_address&apos; via Bilk Load Mechanism. House Base details corresponds to cases of&lt;br/&gt;   ||                       record_load_cd = &apos;I&apos; in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_STREET_ADDRESS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_street_address a&lt;br/&gt;         (&lt;br/&gt;            a.street_address_id,&lt;br/&gt;            a.address_line_1_txt,&lt;br/&gt;            a.address_line_2_txt,&lt;br/&gt;            a.address_line_3_txt,&lt;br/&gt;            a.dwelling_type_cd,&lt;br/&gt;            a.carrier_route_txt,&lt;br/&gt;            a.city_id,&lt;br/&gt;            a.territory_id,&lt;br/&gt;            a.country_id,&lt;br/&gt;            a.postal_code_id,&lt;br/&gt;            a.full_postal_code_txt,&lt;br/&gt;            a.valid_address_ind,&lt;br/&gt;            a.serviceability_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).source_street_address_id,&lt;br/&gt;            p_cursor_data_io (i).address_line_1_txt,&lt;br/&gt;            p_cursor_data_io (i).address_line_2_txt,&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).dwelling_type_cd,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).postal_code_txt,&lt;br/&gt;            p_cursor_data_io (i).forced_addr_flg_hse,&lt;br/&gt;            p_cursor_data_io (i).serviceability_cd,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_street_address;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_locator_sa&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_LOCATOR_SA&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Service Address details specifically into the target table &apos;t_locator&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism.Service Address details corresponds to for case of record_load_cd&lt;br/&gt;   ||                       = NULL in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_LOCATOR_SA&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_locator a&lt;br/&gt;         (&lt;br/&gt;            a.locator_id,&lt;br/&gt;            a.locator_subtype_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            &apos;SRVC&apos;,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_locator_sa;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_locator&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_LOCATOR&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Service Address details specifically into the target table &apos;t_locator&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism. Service Address details corresponds to for case of record_load_cd&lt;br/&gt;   ||                       = NULL in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_LOCATOR&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_locator a&lt;br/&gt;         (&lt;br/&gt;            a.locator_id,&lt;br/&gt;            a.locator_subtype_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).source_street_address_id,&lt;br/&gt;            &apos;SSTRT&apos;,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_locator;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_address_sa&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ADDRESS_SA&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Service Address details specifically into the target table &apos;t_address&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism. Service Address details corresponds to for case of record_load_cd&lt;br/&gt;   ||                       = NULL in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ADDRESS_SA&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_address a&lt;br/&gt;         (&lt;br/&gt;            a.address_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.address_subtype_cd,&lt;br/&gt;            a.source_system_address_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;SRVC&apos;,&lt;br/&gt;            p_cursor_data_io (i).hse_key,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_address_sa;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_address&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ADDRESS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading House Base details specifically into the target table &apos;t_address&apos; via&lt;br/&gt;   ||                       Bulk Load Mechanism. House Base details corresponds to for case of record_load_cd = &apos;I&apos;&lt;br/&gt;   ||                       in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ADDRESS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_address a&lt;br/&gt;         (&lt;br/&gt;            a.address_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.address_subtype_cd,&lt;br/&gt;            a.source_system_address_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).source_street_address_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;SSTRT&apos;,&lt;br/&gt;            p_cursor_data_io (i).source_system_address_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_address;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_service_address_xref&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_sa_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_SERVICE_ADDRESS_XREF&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Service Address details specifically into the target table&lt;br/&gt;   ||                       &apos;t_service_address_vantage_xref&apos; via Bilk Load Mechanism. Service Address details&lt;br/&gt;   ||                       corresponds to for case of record_load_cd = NULL in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SERVICE_ADDRESS_XREF&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_service_address_vantage_xref a&lt;br/&gt;         (&lt;br/&gt;            a.hs_key,&lt;br/&gt;            a.address_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).hse_key,&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_service_address_xref;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_service_address&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : UPDATE_SERVICE_ADDRESS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for updating the House Base details in the target table &apos;t_service_address&apos;&lt;br/&gt;   ||                        via Bilk Load Mechanism. House Base details corresponds to for case of record_load_cd = &apos;I&lt;br/&gt;   &apos;&lt;br/&gt;   ||                                                    in VNT_HSE_BASE staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_SERVICE_ADDRESS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_io.COUNT&lt;br/&gt;   UPDATE&lt;br/&gt;      t_service_address s&lt;br/&gt;   SET&lt;br/&gt;      s.source_street_address_id = p_cursor_data_io (i).source_street_address_id&lt;br/&gt;   WHERE&lt;br/&gt;      service_address_id = p_cursor_data_io (i).service_address_id;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN c_bulk_errors THEN&lt;br/&gt;   l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. l_errors&lt;br/&gt;   LOOP&lt;br/&gt;      NULL;&lt;br/&gt;      l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;      p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io (&lt;br/&gt;      l_coll_idx).hse_key || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;   END LOOP;&lt;br/&gt;END update_service_address;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging_sa(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_sa_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : UPDATE_STAGING_SA&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for updating the staging table &apos;VNT_HSE_BASE&apos; for the column Record_Cd_Load with&lt;br/&gt;   ||                       value of &apos;I&apos; which indicates the In Progress state.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_STAGING_SA&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   UPDATE&lt;br/&gt;      stg.vnt_hse_base s&lt;br/&gt;   SET&lt;br/&gt;      s.record_load_cd = NVL (p_cursor_data_i (i).record_load_cd, c_stg_in_progress),&lt;br/&gt;      s.record_dttm = SYSTIMESTAMP&lt;br/&gt;   WHERE&lt;br/&gt;      ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;END update_staging_sa;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : UPDATE_STAGING&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for updating the staging table &apos;VNT_HSE_BASE&apos; for the column Record_Cd_Load with&lt;br/&gt;   ||                       value of &apos;P&apos; which indicates the Finished state.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   UPDATE&lt;br/&gt;      stg.vnt_hse_base s&lt;br/&gt;   SET&lt;br/&gt;      s.record_load_cd = c_stg_processed,&lt;br/&gt;      s.record_dttm = SYSTIMESTAMP&lt;br/&gt;   WHERE&lt;br/&gt;      ROWID = p_cursor_data_i (i).ID&lt;br/&gt;      AND s.record_load_cd = c_stg_in_progress;&lt;br/&gt;END update_staging;&lt;br/&gt;END pkg_vnt_load_hse_base;</source>
</body>
</PackageOracle>
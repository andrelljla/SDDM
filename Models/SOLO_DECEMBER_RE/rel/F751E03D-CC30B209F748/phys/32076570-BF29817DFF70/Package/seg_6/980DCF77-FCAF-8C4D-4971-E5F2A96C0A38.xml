<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_PROCESS_RRT_OJB_JOBS" directorySegmentName="seg_6" id="980DCF77-FCAF-8C4D-4971-E5F2A96C0A38">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_OJB_JOBS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:41 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_PROCESS_RRT_OJB_JOBS&lt;br/&gt;IS&lt;br/&gt;/**********************************************************************************************************************&lt;br/&gt;||      CREATED BY                   : Knoll&lt;br/&gt;||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;||      ESTIMATED RUN TIME           :&lt;br/&gt;||      SUBJECT AREA                 : Order&lt;br/&gt;||      DESCRIPITION                 : The package pkg_vnt_process_rrt_ojb_jobs controls the processing of the&lt;br/&gt;||                                     Vantage RRT_OJB_JOBS table and applying those updates to SOLODB.&lt;br/&gt; Change log:&lt;br/&gt;&lt;br/&gt;  Changed By                 Changed On             Change Description&lt;br/&gt;-----------------------------------------------------------------------------------------------------------------------&lt;br/&gt;  Cognizant                  10-OCT-2014            Standardization Changes&lt;br/&gt;***********************************************************************************************************************/&lt;br/&gt;&lt;br/&gt;   PROCEDURE process(p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;END pkg_vnt_process_rrt_ojb_jobs;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_PROCESS_RRT_OJB_JOBS" id="980DCF77-FCAF-8C4D-4971-E5F2A96C0A38">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_OJB_JOBS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:46 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_PROCESS_RRT_OJB_JOBS&lt;br/&gt;IS&lt;br/&gt;    /**************************************************************************************************************************************&lt;br/&gt;    ||      CREATED BY                   : Cognizant&lt;br/&gt;    ||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;    ||      ESTIMATED RUN TIME           :&lt;br/&gt;    ||      SUBJECT AREA                 : Order&lt;br/&gt;    ||      DESCRIPITION                 : The package pkg_vnt_process_rrt_ojb_jobs controls the processing of the&lt;br/&gt;    ||                                     Vantage RRT_OJB_JOBS table and applying those updates to SOLODB.&lt;br/&gt;    ||  Change log:&lt;br/&gt;    ||  Changed By                 Changed On             Change Description&lt;br/&gt;    ||  -------------------------  --------------------   --------------------------------------------------------------&lt;br/&gt;    ||  Cognizant                  10-OCT-2014            Standardization Changes&lt;br/&gt;    ||&lt;br/&gt;    ||  Cognizant                  09-Jan-2015            Data model change, Changed  bus_interact_type_cd&lt;br/&gt;    ||                                                               and request_type_cd.&lt;br/&gt;    ||&lt;br/&gt;    ||  Cognizant                  12-Jan-2015            UAT Defect Fix: Added logic to populate&lt;br/&gt;    ||                                                                t_bus_interact_related and t_bus_interact_party_role tables&lt;br/&gt;    ||&lt;br/&gt;    ||  Cognizant                  15-Jan-2015            SIT defect 43 fix on update_work_order_cancel&lt;br/&gt;    ||&lt;br/&gt;    ||  Cognizant                  15-Jan-2015            SIT defect 55 fix - T_BUS_INTER_VANTAGE_ORD_XREF added in the&lt;br/&gt;    ||                                                                main cursor to include to populate T_BUS_INTERACT_RELATED table&lt;br/&gt;    ||&lt;br/&gt;    ||  Cognizant                  26-Feb-2015            Code fix - In population of T_BUS_INTERACT table, the derivation&lt;br/&gt;    ||                                                                logic of Source System Id column changed from &quot;order_no_rojb&quot; to&lt;br/&gt;    ||                                                                 order_no_rojb || TO_CHAR(job_seq_no_rojb) AS src_sys_id&lt;br/&gt;    ||&lt;br/&gt;    ||  Cognizant                  27-Feb-2015            Excluded the table t_BUS_INTERACT_PARTY_ROLE from update&lt;br/&gt;    ||  Cognizant                  07-Apr-2015           Column mapping changed for INSTALLER_TYPE_CD,COMMENT_VAL,&lt;br/&gt;    ||                                                               TOTAL_WORK_UNITS_SCHEDULED_QTY,WORK_ORDER_CLASS_CD.&lt;br/&gt;    ||                                                               Update included for table T_WORK_ORDER&lt;br/&gt;    ||  Cognizant                  07-Apr-2015           Code changes to remove the descrepanies between NRT/RRT , Initial Load and Reconciliation.&lt;br/&gt;    ||   Cognizant                  10-Apr-2015           Trim included for character column in cursor query.&lt;br/&gt;    ||   Karthik                   29-Apr-2015           Modified the table structure of T_BUS_INTERACT to have a new column&lt;br/&gt;    ||                                                                  BUS_INTERACT_USAGE_TYPE_CD&lt;br/&gt;    ||  Cognizant                   14-May-2015           Added trim in cursor login to sync RRT and recon&lt;br/&gt;    ||  Cognizant                   20-May-2015           Included the Key column values in LOGGING and EXCEPTION Handling&lt;br/&gt;   **************************************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name                    CONSTANT t_unit_name&lt;br/&gt;                                            := &apos;PKG_VNT_PROCESS_RRT_OJB_JOBS&apos;;&lt;br/&gt;   c_relation_request_cd_reqwo   CONSTANT VARCHAR2 (10) := &apos;REQWO&apos;;&lt;br/&gt;   c_relation_request_cd_powo    CONSTANT VARCHAR2 (10) := &apos;POWO&apos;;&lt;br/&gt;   c_relation_request_cd_tktwo   CONSTANT VARCHAR2 (10) := &apos;TKTWO&apos;;&lt;br/&gt;   c_bulk_errors                          EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_rrt_ojb_jobs&lt;br/&gt;   IS&lt;br/&gt;      SELECT   CASE&lt;br/&gt;                  WHEN rojb.sys_rojb = 8313&lt;br/&gt;                     THEN &apos;BRS&apos;&lt;br/&gt;                  ELSE &apos;VNT&apos;&lt;br/&gt;               END AS data_source_type_cd,&lt;br/&gt;               rojb.ROWID AS ID, rojb.record_load_cd,&lt;br/&gt;               cust_xref.party_id AS customer_id,&lt;br/&gt;               addr_xref.address_id AS service_address_id,&lt;br/&gt;               job_xref.bus_interact_id,&lt;br/&gt;               ord_xref.bus_interact_id AS ord_bus_interact_id,&lt;br/&gt;               rojb.cust_acct_no_rojb AS cust_acct_num,&lt;br/&gt;               TRIM (rojb.hse_key_rojb) AS hse_key_rojb,&lt;br/&gt;               rojb.order_no_rojb AS order_no,&lt;br/&gt;               rojb.job_seq_no_rojb AS sequence_num,&lt;br/&gt;                  rojb.order_no_rojb&lt;br/&gt;               || TO_CHAR (rojb.job_seq_no_rojb) AS src_sys_id,&lt;br/&gt;               DECODE (rojb.create_dte_rojb,&lt;br/&gt;                       pkg_utility.c_null_date, NULL,&lt;br/&gt;                       TO_CHAR (rojb.create_dte_rojb, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                      ) AS create_dttm,&lt;br/&gt;               DECODE&lt;br/&gt;                     (rojb.compl_dte_rojb,&lt;br/&gt;                      pkg_utility.c_null_date, NULL,&lt;br/&gt;                      TO_CHAR (rojb.compl_dte_rojb, &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                     ) AS actual_completion_dttm,&lt;br/&gt;               TRIM (rojb.installer_typ_rojb) AS installer_type_cd,&lt;br/&gt;               TRIM (rojb.job_typ_rojb) AS work_order_type_cd,&lt;br/&gt;               DECODE (rojb.job_stat_rojb,&lt;br/&gt;                       &apos;C&apos;, TRIM (rojb.compl_cde_rojb),&lt;br/&gt;                       &apos;D&apos;, TRIM (rojb.compl_cde_rojb),&lt;br/&gt;                       NULL&lt;br/&gt;                      ) AS completion_cd,&lt;br/&gt;               DECODE (rojb.job_stat_rojb,&lt;br/&gt;                       &apos;X&apos;, TRIM (rojb.compl_cde_rojb),&lt;br/&gt;                       NULL&lt;br/&gt;                      ) AS cancel_cd,&lt;br/&gt;               TRIM (SUBSTR (rojb.compl_cde_rojb, 1, 3)) AS completion_cd1,&lt;br/&gt;               TRIM (SUBSTR (rojb.compl_cde_rojb, 4, 3)) AS completion_cd2,&lt;br/&gt;               TRIM (SUBSTR (rojb.compl_cde_rojb, 7, 3)) AS completion_cd3,&lt;br/&gt;               TRIM (SUBSTR (rojb.compl_cde_rojb, 10, 3)) AS completion_cd4,&lt;br/&gt;               TRIM (SUBSTR (rojb.compl_cde_rojb, 13, 3)) AS completion_cd5,&lt;br/&gt;               TRIM (SUBSTR (rojb.compl_cde_rojb, 16, 3)) AS completion_cd6,&lt;br/&gt;               TRIM (rojb.job_comments_rojb) AS comment_val,&lt;br/&gt;               rojb.tot_sched_units_rojb AS total_work_units_scheduled_qty,&lt;br/&gt;               TRIM (rojb.job_class_rojb) AS work_order_class_cd,&lt;br/&gt;               pkg_utility.c_bus_interact_type_cd_req&lt;br/&gt;                                                     AS bus_interact_type_cd,&lt;br/&gt;               pkg_utility.c_request_type_cd_wrkord AS request_type_cd,&lt;br/&gt;               TRIM (rojb.job_stat_rojb) AS job_stat_rojb,&lt;br/&gt;               DECODE&lt;br/&gt;                    (r.request_type_cd,&lt;br/&gt;                     pkg_utility.c_request_type_cd_splreq, c_relation_request_cd_reqwo,&lt;br/&gt;                     pkg_utility.c_request_type_cd_prdord, c_relation_request_cd_powo,&lt;br/&gt;                     c_relation_request_cd_tktwo&lt;br/&gt;                    ) AS relationship_cd,&lt;br/&gt;               DECODE (r.request_type_cd,&lt;br/&gt;                       pkg_utility.c_request_type_cd_splreq, &apos;Z&apos;,&lt;br/&gt;                       pkg_utility.c_request_type_cd_prdord, &apos;W&apos;,&lt;br/&gt;                       &apos;T&apos;&lt;br/&gt;                      ) AS category_cd,&lt;br/&gt;               DECODE&lt;br/&gt;                  (rojb.create_dte_rojb,&lt;br/&gt;                   TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                   TO_TIMESTAMP (   TO_CHAR (rojb.create_dte_rojb,&lt;br/&gt;                                             &apos;YYYY.MM.DD&apos;&lt;br/&gt;                                            )&lt;br/&gt;                                 || &apos;.&apos;&lt;br/&gt;                                 || rojb.create_tme_rojb,&lt;br/&gt;                                 &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                                )&lt;br/&gt;                  ) order_create_ts,&lt;br/&gt;               DECODE&lt;br/&gt;                  (rojb.compl_dte_rojb,&lt;br/&gt;                   TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                   TO_TIMESTAMP (   TO_CHAR (rojb.compl_dte_rojb,&lt;br/&gt;                                             &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                                 || &apos;.&apos;&lt;br/&gt;                                 || rojb.compl_tme_rojb,&lt;br/&gt;                                 &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                                )&lt;br/&gt;                  ) order_completion_ts&lt;br/&gt;          FROM stg.vnt_rrt_ojb_jobs rojb LEFT OUTER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;               ON cust_xref.cust_acct_num = rojb.cust_acct_no_rojb&lt;br/&gt;             AND cust_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_service_address_vantage_xref addr_xref&lt;br/&gt;               ON addr_xref.hs_key = rojb.hse_key_rojb&lt;br/&gt;             AND addr_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_busn_intrn_vnt_job_xref job_xref&lt;br/&gt;               ON job_xref.order_num = rojb.order_no_rojb&lt;br/&gt;             AND job_xref.job_seq_num = rojb.job_seq_no_rojb&lt;br/&gt;               LEFT OUTER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;               ON ord_xref.ord_no = rojb.order_no_rojb&lt;br/&gt;               LEFT OUTER JOIN t_request r&lt;br/&gt;               ON r.request_interaction_id = ord_xref.bus_interact_id&lt;br/&gt;         WHERE rojb.record_load_cd IS NULL&lt;br/&gt;      ORDER BY rojb.pull_dte_rojb,&lt;br/&gt;               DECODE (rojb.pull_tme_slot_rojb,&lt;br/&gt;                       1, pkg_utility.l_final_slot,&lt;br/&gt;                       rojb.pull_tme_slot_rojb&lt;br/&gt;                      ),&lt;br/&gt;               rojb.order_no_rojb;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_completion (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_order_no        IN              t_busn_intrn_vnt_job_xref.order_num%TYPE,&lt;br/&gt;      p_sequence_no     IN              t_busn_intrn_vnt_job_xref.job_seq_num%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ***&lt;br/&gt;      ||  SubProgram Name    : Procedure process&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This will procedure will open the cursor and process each record to create stub customer&lt;br/&gt;      ||                       as needed to support the job, update the order, create the order and committing the&lt;br/&gt;      batch.&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      ***/&lt;br/&gt;      l_proc_name            t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name         t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec          pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data          t_cursor_data_tbl;&lt;br/&gt;      l_bus_interact         t_bus_interact%ROWTYPE;&lt;br/&gt;      l_process_record_cnt   NUMBER                            := 0;&lt;br/&gt;      l_error_record_cnt     NUMBER                            := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_rrt_ojb_jobs%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_rrt_ojb_jobs;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_rrt_ojb_jobs;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_rrt_ojb_jobs&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT pkg_utility.c_rt_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos;, PROCESSING ORDER_NO = &apos;&lt;br/&gt;                                         || l_cursor_data (i).order_no&lt;br/&gt;                                        );&lt;br/&gt;&lt;br/&gt;                  IF (l_cursor_data (i).customer_id IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     -- create stub customer as needed to support the job&lt;br/&gt;                     create_customer (l_process_rec,&lt;br/&gt;                                      p_audit_user_i,&lt;br/&gt;                                      l_cursor_data (i)&lt;br/&gt;                                     );&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  -- if no errors&lt;br/&gt;                  IF (l_cursor_data (i).record_load_cd IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     IF (l_cursor_data (i).bus_interact_id IS NULL)&lt;br/&gt;                     THEN&lt;br/&gt;                        -- lookup the work order in case it was created earlier in the run&lt;br/&gt;                        IF (get_bus_interact (l_process_rec,&lt;br/&gt;                                              l_cursor_data (i).order_no,&lt;br/&gt;                                              l_cursor_data (i).sequence_num,&lt;br/&gt;                                              l_bus_interact&lt;br/&gt;                                             )&lt;br/&gt;                           )&lt;br/&gt;                        THEN&lt;br/&gt;                           -- update the order&lt;br/&gt;                           l_cursor_data (i).bus_interact_id :=&lt;br/&gt;                                               l_bus_interact.bus_interact_id;&lt;br/&gt;                           l_cursor_data (i).bus_interact_type_cd :=&lt;br/&gt;                                          l_bus_interact.bus_interact_type_cd;&lt;br/&gt;                           update_work_order (l_process_rec,&lt;br/&gt;                                              p_audit_user_i,&lt;br/&gt;                                              l_cursor_data (i)&lt;br/&gt;                                             );&lt;br/&gt;                        ELSE&lt;br/&gt;                           -- create the order&lt;br/&gt;                           create_work_order (l_process_rec,&lt;br/&gt;                                              p_audit_user_i,&lt;br/&gt;                                              l_cursor_data (i)&lt;br/&gt;                                             );&lt;br/&gt;                        END IF;&lt;br/&gt;                     ELSE&lt;br/&gt;                        -- update the order&lt;br/&gt;                        update_work_order (l_process_rec,&lt;br/&gt;                                           p_audit_user_i,&lt;br/&gt;                                           l_cursor_data (i)&lt;br/&gt;                                          );&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     update_staging (l_process_rec, l_cursor_data (i));&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  COMMIT;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                     (l_process_rec,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                      || l_cursor_data (i).order_no&lt;br/&gt;                                      || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                      || l_cursor_data (i).sequence_num&lt;br/&gt;                                      || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                                      || l_cursor_data (i).bus_interact_id&lt;br/&gt;                                      || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                                      || l_cursor_data (i).ord_bus_interact_id&lt;br/&gt;                                      || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                      || l_cursor_data (i).cust_acct_num&lt;br/&gt;                                      || &apos; EXCEPTION = &apos;&lt;br/&gt;                                      || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                     );&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                       pkg_utility.c_stg_error;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               --Capturing the Processed/error record count&lt;br/&gt;               SELECT   DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                NULL, 1,&lt;br/&gt;                                pkg_utility.c_stg_processed, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_process_record_cnt,&lt;br/&gt;                        DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                pkg_utility.c_stg_error, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_error_record_cnt&lt;br/&gt;                 INTO l_process_record_cnt,&lt;br/&gt;                      l_error_record_cnt&lt;br/&gt;                 FROM DUAL;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; pkg_utility.c_rt_batchsize;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_rrt_ojb_jobs;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_rrt_ojb_jobs%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_rrt_ojb_jobs;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure create_customer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will create customer if doesn&apos;t exist by adding party,customer and&lt;br/&gt;      ||                       party_vantage_xref records.&lt;br/&gt;      ********************************************************************************************************************/&lt;br/&gt;      l_proc_name     t_unit_name := &apos;CREATE_CUSTOMER&apos;;&lt;br/&gt;      l_account_id    NUMBER;&lt;br/&gt;      l_customer_id   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      -- create customer if doesn&apos;t exist&lt;br/&gt;      l_customer_id :=&lt;br/&gt;              customer_exists (p_process_rec_i, p_cursor_row_io.cust_acct_num);&lt;br/&gt;&lt;br/&gt;      IF (l_customer_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                || p_cursor_row_io.order_no&lt;br/&gt;                                || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                || p_cursor_row_io.sequence_num&lt;br/&gt;                                || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                                || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                                || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                                || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                || &apos;, CREATING CUSTOMER&apos;&lt;br/&gt;                               );&lt;br/&gt;         -- party&lt;br/&gt;         p_cursor_row_io.customer_id :=&lt;br/&gt;            da_party.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;--                   party_nm                    =&gt; NULL,&lt;br/&gt;                   party_subtype_cd            =&gt; NULL,&lt;br/&gt;                   party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         -- customer&lt;br/&gt;         da_customer.ADD (p_process_rec_i,&lt;br/&gt;                          external_customer_id      =&gt; NULL,&lt;br/&gt;                          customer_id               =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                          first_contact_dt          =&gt; NULL,&lt;br/&gt;                          first_fulfillment         =&gt; NULL,&lt;br/&gt;                          first_payment             =&gt; NULL,&lt;br/&gt;                          audit_user                =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;         -- party_vantage_xref&lt;br/&gt;         da_party_vantage_xref.ADD&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                               cust_acct_num      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                               party_id           =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                               audit_user         =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;      ELSE&lt;br/&gt;         p_cursor_row_io.customer_id := l_customer_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                    || p_cursor_row_io.sequence_num&lt;br/&gt;                                    || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                                    || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                                    || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_customer;&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function customer_exists&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the xref.party_id as output.&lt;br/&gt;      *******************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name   t_unit_name                          := &apos;CUSTOMER_EXISTS&apos;;&lt;br/&gt;      l_party_id    t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num&lt;br/&gt;         AND xref.record_stat = pkg_utility.c_record_active;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, CUSTOMER FOUND IN T_PARTY_VANTAGE_XREF&apos;&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_party_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                           (p_process_rec_i,&lt;br/&gt;                               l_proc_name&lt;br/&gt;                            || &apos;, &apos;&lt;br/&gt;                            || pkg_utility.c_proc_end_text&lt;br/&gt;                            || &apos;, CUSTOMER NOT FOUND IN T_PARTY_VANTAGE_XREF&apos;&lt;br/&gt;                            || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                            || p_cust_acct_num&lt;br/&gt;                           );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END customer_exists;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_order_no        IN              t_busn_intrn_vnt_job_xref.order_num%TYPE,&lt;br/&gt;      p_sequence_no     IN              t_busn_intrn_vnt_job_xref.job_seq_num%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function get_bus_interact&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_busn_intrn_vnt_job_xref with TRUE in return..&lt;br/&gt;      ********************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BUS_INTERACT&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_sequence_no&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT a.*&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_busn_intrn_vnt_job_xref xref INNER JOIN t_bus_interact a&lt;br/&gt;             ON a.bus_interact_id = xref.bus_interact_id&lt;br/&gt;       WHERE xref.order_num = p_order_no&lt;br/&gt;         AND xref.job_seq_num = p_sequence_no&lt;br/&gt;         AND a.record_stat = pkg_utility.c_record_active;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_sequence_no&lt;br/&gt;                             || &apos;, BUS_INTERACT FOUND &apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                || p_order_no&lt;br/&gt;                                || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                || p_sequence_no&lt;br/&gt;                                || &apos;, BUS_INTERACT NOT FOUND &apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_bus_interact;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_work_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update the t_work_order_status table.&lt;br/&gt;      ********************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_WORK_ORDER&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      UPDATE t_work_order&lt;br/&gt;         SET create_dttm = p_cursor_row_io.order_create_ts,&lt;br/&gt;             actual_completion_dttm = p_cursor_row_io.order_completion_ts,&lt;br/&gt;             installer_type_cd = p_cursor_row_io.installer_type_cd,&lt;br/&gt;             service_address_id = p_cursor_row_io.service_address_id,&lt;br/&gt;             work_order_type_cd = p_cursor_row_io.work_order_type_cd,&lt;br/&gt;             completion_cd = p_cursor_row_io.completion_cd,&lt;br/&gt;             cancel_cd = p_cursor_row_io.cancel_cd,&lt;br/&gt;             comment_val = p_cursor_row_io.comment_val,&lt;br/&gt;             total_work_units_scheduled_qty =&lt;br/&gt;                                p_cursor_row_io.total_work_units_scheduled_qty,&lt;br/&gt;             work_order_class_cd = p_cursor_row_io.work_order_class_cd,&lt;br/&gt;             data_source_type_cd = p_cursor_row_io.data_source_type_cd,&lt;br/&gt;             sequence_num = p_cursor_row_io.sequence_num,&lt;br/&gt;             modified_dttm = SYSTIMESTAMP,&lt;br/&gt;             modified_by = p_audit_user_i&lt;br/&gt;       WHERE work_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;      UPDATE t_work_order_status a&lt;br/&gt;         SET a.work_order_status_cd = p_cursor_row_io.job_stat_rojb,&lt;br/&gt;             a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;             a.modified_by = p_audit_user_i&lt;br/&gt;       WHERE a.work_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;      -- completion/cancel codes&lt;br/&gt;      IF (p_cursor_row_io.job_stat_rojb IN (&apos;C&apos;, &apos;D&apos;))&lt;br/&gt;      THEN&lt;br/&gt;         update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                       p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                       p_cursor_row_io.completion_cd1,&lt;br/&gt;                                       1,&lt;br/&gt;                                       p_cursor_row_io,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;         update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                       p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                       p_cursor_row_io.completion_cd2,&lt;br/&gt;                                       2,&lt;br/&gt;                                       p_cursor_row_io,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;         update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                       p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                       p_cursor_row_io.completion_cd3,&lt;br/&gt;                                       3,&lt;br/&gt;                                       p_cursor_row_io,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;         update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                       p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                       p_cursor_row_io.completion_cd4,&lt;br/&gt;                                       4,&lt;br/&gt;                                       p_cursor_row_io,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;         update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                       p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                       p_cursor_row_io.completion_cd5,&lt;br/&gt;                                       5,&lt;br/&gt;                                       p_cursor_row_io,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;         update_work_order_completion (p_process_rec_i,&lt;br/&gt;                                       p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                       p_cursor_row_io.completion_cd6,&lt;br/&gt;                                       6,&lt;br/&gt;                                       p_cursor_row_io,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;      ELSIF (p_cursor_row_io.job_stat_rojb = &apos;X&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.completion_cd1,&lt;br/&gt;                                   1,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.completion_cd2,&lt;br/&gt;                                   2,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.completion_cd3,&lt;br/&gt;                                   3,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.completion_cd4,&lt;br/&gt;                                   4,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.completion_cd5,&lt;br/&gt;                                   5,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_work_order_cancel (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.completion_cd6,&lt;br/&gt;                                   6,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                    || p_cursor_row_io.sequence_num&lt;br/&gt;                                    || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                                    || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                                    || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos; ,EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END update_work_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_work_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE create_work_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will create the work order by adding the records into bus_interact,&lt;br/&gt;      ||                       t_busn_intrn_vnt_job_xref,request,work_order,work_order_status and&lt;br/&gt;      ||                       work_order_completion/cancel.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name         t_unit_name                  := &apos;CREATE_WORK_ORDER&apos;;&lt;br/&gt;      l_bus_interact_id   t_bus_interact.bus_interact_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      -- bus_interact&lt;br/&gt;      l_bus_interact_id :=&lt;br/&gt;         da_bus_interact.ADD&lt;br/&gt;               (p_process_rec_i,&lt;br/&gt;                data_source_type_cd             =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                --source_system_id          =&gt; p_cursor_row_io.order_no,&lt;br/&gt;                source_system_id                =&gt; p_cursor_row_io.src_sys_id,&lt;br/&gt;                bus_interact_type_cd            =&gt; p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;                bus_interact_usage_type_cd      =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                audit_user                      =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;      -- t_busn_intrn_vnt_job_xref&lt;br/&gt;      da_busn_intrn_vnt_job_xref.ADD&lt;br/&gt;                                 (p_process_rec_i,&lt;br/&gt;                                  order_num            =&gt; p_cursor_row_io.order_no,&lt;br/&gt;                                  job_seq_num          =&gt; p_cursor_row_io.sequence_num,&lt;br/&gt;                                  bus_interact_id      =&gt; l_bus_interact_id,&lt;br/&gt;                                  audit_user           =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;      -- request&lt;br/&gt;      da_request.ADD (p_process_rec_i,&lt;br/&gt;                      request_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                      request_type_cd             =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                      audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;      -- work_order&lt;br/&gt;      da_work_order.ADD&lt;br/&gt;         (p_process_rec_i,&lt;br/&gt;          create_dttm                         =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;          earliest_possible_comp_dttm         =&gt; NULL,&lt;br/&gt;          technician_work_start_dttm          =&gt; NULL,&lt;br/&gt;          technician_work_end_dttm            =&gt; NULL,&lt;br/&gt;          actual_completion_dttm              =&gt; p_cursor_row_io.order_completion_ts,&lt;br/&gt;          installer_type_cd                   =&gt; p_cursor_row_io.installer_type_cd,&lt;br/&gt;          service_address_id                  =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;          work_order_type_cd                  =&gt; p_cursor_row_io.work_order_type_cd,&lt;br/&gt;          completion_cd                       =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;          cancel_cd                           =&gt; p_cursor_row_io.cancel_cd,&lt;br/&gt;          comment_val                         =&gt; p_cursor_row_io.comment_val,&lt;br/&gt;          total_work_units_scheduled_qty      =&gt; p_cursor_row_io.total_work_units_scheduled_qty,&lt;br/&gt;          work_order_class_cd                 =&gt; p_cursor_row_io.work_order_class_cd,&lt;br/&gt;          work_order_id                       =&gt; l_bus_interact_id,&lt;br/&gt;          data_source_type_cd                 =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;          sequence_num                        =&gt; p_cursor_row_io.sequence_num,&lt;br/&gt;          bill_start_dt                       =&gt; NULL,&lt;br/&gt;          bill_stop_dt                        =&gt; NULL,&lt;br/&gt;          audit_user                          =&gt; p_audit_user_i&lt;br/&gt;         );&lt;br/&gt;      -- work_order_status&lt;br/&gt;      da_work_order_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   work_order_status_cd      =&gt; p_cursor_row_io.job_stat_rojb,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;      da_bus_interact_party_role.ADD&lt;br/&gt;                (p_process_rec_i,&lt;br/&gt;                 bus_interact_id             =&gt; l_bus_interact_id,&lt;br/&gt;                 party_id                    =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                 party_role_cd               =&gt; &apos;CUST&apos;,&lt;br/&gt;                 data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                 source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                 bus_interact_type_cd        =&gt; p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;                 effective_dttm              =&gt; NULL,&lt;br/&gt;                 audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                );&lt;br/&gt;      da_bus_interact_related.ADD&lt;br/&gt;             (p_process_rec_i,&lt;br/&gt;              parent_bus_interact_id            =&gt; p_cursor_row_io.ord_bus_interact_id,&lt;br/&gt;              child_bus_interact_id             =&gt; l_bus_interact_id,&lt;br/&gt;              bus_interact_relationship_cd      =&gt; p_cursor_row_io.relationship_cd,&lt;br/&gt;              data_source_type_cd               =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;              audit_user                        =&gt; p_audit_user_i&lt;br/&gt;             );&lt;br/&gt;&lt;br/&gt;      -- work_order_completion/cancel&lt;br/&gt;      IF (p_cursor_row_io.job_stat_rojb IN (&apos;C&apos;, &apos;D&apos;))&lt;br/&gt;      THEN&lt;br/&gt;         IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                  code_sequence_num             =&gt; 1,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                  code_sequence_num             =&gt; 2,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                  code_sequence_num             =&gt; 3,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                  code_sequence_num             =&gt; 4,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                  code_sequence_num             =&gt; 5,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_completion.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id                 =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_completion_cd      =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  work_order_category_cd        =&gt; p_cursor_row_io.category_cd,&lt;br/&gt;                  code_sequence_num             =&gt; 6,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;      ELSIF (p_cursor_row_io.job_stat_rojb = &apos;X&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                  data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num         =&gt; 1,&lt;br/&gt;                  audit_user                =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                  data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num         =&gt; 2,&lt;br/&gt;                  audit_user                =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                  data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num         =&gt; 3,&lt;br/&gt;                  audit_user                =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                  data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num         =&gt; 4,&lt;br/&gt;                  audit_user                =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                  data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num         =&gt; 5,&lt;br/&gt;                  audit_user                =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_work_order_cancel.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  work_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  work_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                  data_source_type_cd       =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num         =&gt; 6,&lt;br/&gt;                  audit_user                =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                    || p_cursor_row_io.sequence_num&lt;br/&gt;                                    || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                                    || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                                    || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos; EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_work_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_work_order_cancel&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update work order cancel.&lt;br/&gt;      ********************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                 := &apos;UPDATE_WORK_ORDER_CANCEL&apos;;&lt;br/&gt;      l_cancel      t_work_order_cancel%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_i.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_i.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_i.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_i.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_i.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_cancel&lt;br/&gt;           FROM t_work_order_cancel a&lt;br/&gt;          WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_cancel.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.del&lt;br/&gt;                      (p_process_rec_i,&lt;br/&gt;                       work_order_id             =&gt; l_cancel.work_order_id,&lt;br/&gt;                       work_order_cancel_cd      =&gt; l_cancel.work_order_cancel_cd,&lt;br/&gt;                       data_source_type_cd       =&gt; l_cancel.data_source_type_cd,&lt;br/&gt;                       code_sequence_num         =&gt; l_cancel.code_sequence_num,&lt;br/&gt;                       audit_user                =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_work_order_cancel a&lt;br/&gt;               SET a.code_sequence_num = p_sequence_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = l_cancel.data_source_type_cd&lt;br/&gt;               AND a.work_order_cancel_cd = p_code_i;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos;, &apos;&lt;br/&gt;                               || pkg_utility.c_proc_end_text&lt;br/&gt;                               || &apos; RECORD FOUND IN T_WORK_ORDER_CANCEL TABLE&apos;&lt;br/&gt;                               || &apos;, ORDER_NO = &apos;&lt;br/&gt;                               || p_cursor_row_i.order_no&lt;br/&gt;                               || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                               || p_cursor_row_i.sequence_num&lt;br/&gt;                               || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                               || p_cursor_row_i.bus_interact_id&lt;br/&gt;                               || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                               || p_cursor_row_i.ord_bus_interact_id&lt;br/&gt;                               || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                               || p_cursor_row_i.cust_acct_num&lt;br/&gt;                              );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                   work_order_cancel_cd      =&gt; p_code_i,&lt;br/&gt;                   data_source_type_cd       =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                   code_sequence_num         =&gt; p_sequence_i,&lt;br/&gt;                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                          (p_process_rec_i,&lt;br/&gt;                              l_proc_name&lt;br/&gt;                           || &apos;, &apos;&lt;br/&gt;                           || pkg_utility.c_proc_end_text&lt;br/&gt;                           || &apos; RECORD NOT FOUND IN T_WORK_ORDER_CANCEL TABLE&apos;&lt;br/&gt;                           || &apos;, ORDER_NO = &apos;&lt;br/&gt;                           || p_cursor_row_i.order_no&lt;br/&gt;                           || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                           || p_cursor_row_i.sequence_num&lt;br/&gt;                           || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                           || p_cursor_row_i.bus_interact_id&lt;br/&gt;                           || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                           || p_cursor_row_i.ord_bus_interact_id&lt;br/&gt;                           || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                           || p_cursor_row_i.cust_acct_num&lt;br/&gt;                          );&lt;br/&gt;      END;&lt;br/&gt;   END update_work_order_cancel;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_work_order_completion (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_ojb_jobs%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   t_userid&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_work_order_completion&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update work order completion.&lt;br/&gt;      *******************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name    t_unit_name            := &apos;UPDATE_WORK_ORDER_COMPLETION&apos;;&lt;br/&gt;      l_completion   t_work_order_completion%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_i.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_i.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_i.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_i.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_i.cust_acct_num&lt;br/&gt;                             || &apos;, P_CODE_I = &apos;&lt;br/&gt;                             || p_code_i&lt;br/&gt;                             || &apos;, P_SEQUENCE_I = &apos;&lt;br/&gt;                             || p_sequence_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (p_code_i IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT a.*&lt;br/&gt;              INTO l_completion&lt;br/&gt;              FROM t_work_order_completion a&lt;br/&gt;             WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i&lt;br/&gt;               AND a.work_order_category_cd = p_cursor_row_i.category_cd;&lt;br/&gt;&lt;br/&gt;            IF (l_completion.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_work_order_completion.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   work_order_id                 =&gt; l_completion.work_order_id,&lt;br/&gt;                   work_order_completion_cd      =&gt; l_completion.work_order_completion_cd,&lt;br/&gt;                   data_source_type_cd           =&gt; l_completion.data_source_type_cd,&lt;br/&gt;                   work_order_category_cd        =&gt; p_cursor_row_i.category_cd,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               NULL;&lt;br/&gt;         --No data exist for the seq_num. So no action required&lt;br/&gt;         END;&lt;br/&gt;      ELSE&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT a.*&lt;br/&gt;              INTO l_completion&lt;br/&gt;              FROM t_work_order_completion a&lt;br/&gt;             WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;               AND a.work_order_completion_cd = p_code_i&lt;br/&gt;               AND a.work_order_category_cd = p_cursor_row_i.category_cd;&lt;br/&gt;&lt;br/&gt;            IF NVL (l_completion.code_sequence_num, 0) &lt;&gt; p_sequence_i&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_work_order_completion a&lt;br/&gt;                  SET a.code_sequence_num = p_sequence_i,&lt;br/&gt;                      a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                      a.modified_by = p_audit_user_i&lt;br/&gt;                WHERE a.work_order_id = p_bus_interact_id_i&lt;br/&gt;                  AND a.data_source_type_cd = l_completion.data_source_type_cd&lt;br/&gt;                  AND a.work_order_completion_cd = p_code_i&lt;br/&gt;                  AND a.work_order_category_cd = p_cursor_row_i.category_cd;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_row_i.order_no&lt;br/&gt;                                   || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                   || p_cursor_row_i.sequence_num&lt;br/&gt;                                   || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                                   || p_cursor_row_i.bus_interact_id&lt;br/&gt;                                   || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                                   || p_cursor_row_i.ord_bus_interact_id&lt;br/&gt;                                   || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_row_i.cust_acct_num&lt;br/&gt;                                   || &apos;, P_CODE_I = &apos;&lt;br/&gt;                                   || p_code_i&lt;br/&gt;                                   || &apos;, P_SEQUENCE_I = &apos;&lt;br/&gt;                                   || p_sequence_i&lt;br/&gt;                                  );&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               IF (p_code_i IS NOT NULL)&lt;br/&gt;               THEN&lt;br/&gt;                  da_work_order_completion.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      work_order_id                 =&gt; p_bus_interact_id_i,&lt;br/&gt;                      work_order_completion_cd      =&gt; p_code_i,&lt;br/&gt;                      data_source_type_cd           =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                      work_order_category_cd        =&gt; p_cursor_row_i.category_cd,&lt;br/&gt;                      code_sequence_num             =&gt; p_sequence_i,&lt;br/&gt;                      audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END update_work_order_completion;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_ojb_jobs%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_staging&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.vnt_rrt_ojb_jobs.&lt;br/&gt;      ********************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_rrt_ojb_jobs s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_row_io.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_row_io.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                       || p_cursor_row_io.order_no&lt;br/&gt;                                       || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                                       || p_cursor_row_io.sequence_num&lt;br/&gt;                                       || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                                       || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                       || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                                       || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                                       || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                                       || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                       || &apos;, ROWID  = &apos;&lt;br/&gt;                                       || p_cursor_row_io.ID&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_cursor_row_io.order_no&lt;br/&gt;                             || &apos;, SEQUENCE_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.sequence_num&lt;br/&gt;                             || &apos;, BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                             || &apos;, ORD_BUS_INTERACT_ID = &apos;&lt;br/&gt;                             || p_cursor_row_io.ord_bus_interact_id&lt;br/&gt;                             || &apos;, CUST_ACCT_NUM = &apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_process_rrt_ojb_jobs;</source>
</body>
</PackageOracle>
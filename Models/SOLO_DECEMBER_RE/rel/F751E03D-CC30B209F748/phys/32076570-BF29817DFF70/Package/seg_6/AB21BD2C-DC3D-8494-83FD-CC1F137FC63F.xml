<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_ECS_CUS_DATA" directorySegmentName="seg_6" id="AB21BD2C-DC3D-8494-83FD-CC1F137FC63F">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_ECS_CUS_DATA</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:10 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_ECS_CUS_DATA&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  PROGRAM NAME    : PKG_VNT_RECON_ECS_CUS_DATA&lt;br/&gt;||  CREATED BY      : Cognizant&lt;br/&gt;||  CREATED DATE    : JUN-2015&lt;br/&gt;||  SUBJECT AREA    : Customer&lt;br/&gt;||  DESCRIPTION     : The package is a wrapper package which loads ecs_cus_data tables&lt;br/&gt;||                    into CHTR table.&lt;br/&gt;||&lt;br/&gt;||  CHANGE LOG:&lt;br/&gt;||&lt;br/&gt;||  CHANGED BY            CHANGED ON        CHANGE DESCRIPTION&lt;br/&gt;||  --------------------------------------  ---------------------------------------------------------------------&lt;br/&gt;||&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   PROCEDURE create_delta (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE initial_load (p_audit_user_i IN VARCHAR2);&lt;br/&gt;END pkg_vnt_recon_ecs_cus_data;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_ECS_CUS_DATA" id="AB21BD2C-DC3D-8494-83FD-CC1F137FC63F">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_ECS_CUS_DATA</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:11 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_ECS_CUS_DATA&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  PROGRAM NAME    : PKG_VNT_RECON_ECS_CUS_DATA&lt;br/&gt;||  CREATED BY      : Cognizant&lt;br/&gt;||  CREATED DATE    : JUN-2015&lt;br/&gt;||  SUBJECT AREA    : Customer&lt;br/&gt;||  DESCRIPTION     : The package is a wrapper package which loads ecs_cus_data tables&lt;br/&gt;||                    into CHTR table.&lt;br/&gt;||&lt;br/&gt;||  CHANGE LOG:&lt;br/&gt;||&lt;br/&gt;||  CHANGED BY            CHANGED ON        CHANGE DESCRIPTION&lt;br/&gt;||  --------------------------------------  ---------------------------------------------------------------------&lt;br/&gt;||&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name    CONSTANT t_unit_name := &apos;PKG_VNT_RECON_ECS_CUS_DATA&apos;;&lt;br/&gt;   l_delete_flag          NUMBER      := 0;&lt;br/&gt;   l_del_rec_count        NUMBER      := 0;&lt;br/&gt;   g_process_record_cnt   NUMBER      := 0;&lt;br/&gt;   g_error_record_cnt     NUMBER      := 0;&lt;br/&gt;   g_batchsize            NUMBER      := 10000;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_ecs_cus_data (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_ecs_cus_data (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_rowid            IN   VARCHAR2,&lt;br/&gt;      p_record_load_cd   IN   stg.vnt_ecs_cus_data.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_delta (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SUBPROGRAM NAME    : PROCEDURE CREATE_DELTA&lt;br/&gt;   ||  ESTIMATED RUN TIME :&lt;br/&gt;   ||  DESCRIPTION        : CREATE THE EQP_BASE DELTA.&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name                    := &apos;CREATE_DELTA&apos;;&lt;br/&gt;      l_process_rec   chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_curr_cnt      NUMBER;&lt;br/&gt;      l_prev_cnt      NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      chtr.pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                      &apos;P_AUDIT_USER_I=&apos; || p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;      INSERT INTO stg.vnt_ecs_cus_data_rec_delta&lt;br/&gt;                  (sys_ecs, prin_ecs, cust_acct_no_ecs, pin_num_ecs,&lt;br/&gt;                   tax_id_ecs)&lt;br/&gt;         (SELECT sys_ecs, prin_ecs, cust_acct_no_ecs, pin_num_ecs, tax_id_ecs&lt;br/&gt;            FROM stg.vnt_ecs_cus_data&lt;br/&gt;          MINUS&lt;br/&gt;          SELECT sys_ecs, prin_ecs, cust_acct_no_ecs, pin_num_ecs, tax_id_ecs&lt;br/&gt;            FROM stg.vnt_ecs_cus_data_rec_prev);&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      chtr.pkg_logging.end_process (l_process_rec, &apos;SUCCESS&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         chtr.pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos;, EXCEPTION=&apos;&lt;br/&gt;                                         || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                        );&lt;br/&gt;         chtr.pkg_logging.end_process (l_process_rec, &apos;FAILURE&apos;);&lt;br/&gt;         RAISE;&lt;br/&gt;   END create_delta;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   AS&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_audit_user     t_userid;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_audit_user := NVL (p_audit_user_i, c_pkg_name);&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      pkg_logging.begin_process (p_process_rec_io      =&gt; l_process_rec,&lt;br/&gt;                                 p_parm_in_i           =&gt;    &apos;, P_AUDIT_USER_I = &apos;&lt;br/&gt;                                                          || l_audit_user&lt;br/&gt;                                );&lt;br/&gt;      load_ecs_cus_data (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                         p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                        );&lt;br/&gt;      pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                               p_parm_out_i         =&gt; pkg_utility.c_process_success&lt;br/&gt;                              );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, EXCEPTION=&apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                  p_parm_out_i         =&gt; pkg_utility.c_process_error&lt;br/&gt;                                 );&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_ecs_cus_data (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SUBPROGRAM NAME    : LOAD_OFFERING&lt;br/&gt;      ||  ESTIMATED RUN TIME :&lt;br/&gt;      ||  DESCRIPTION        : THIS PROCEDURE IS TO LOAD SOLODB CORE REFERENCE TABLE T_OFFERING FROM THE&lt;br/&gt;      ||                       STAGING TABLE EPC_OFFER. THIS IS A INSERT/UPDATE PROCESS&lt;br/&gt;      ||                       WISH SOFT DELETE.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name         t_unit_name := &apos;LOAD_CONTENT_PRIOVIDER&apos;;&lt;br/&gt;      l_systimestamp      TIMESTAMP;&lt;br/&gt;      l_insert_count      NUMBER      := 0;&lt;br/&gt;      l_update_count      NUMBER      := 0;&lt;br/&gt;      l_delete_count      NUMBER      := 0;&lt;br/&gt;      l_exception_count   NUMBER      := 0;&lt;br/&gt;&lt;br/&gt;      --L_COUNT_REC_T_OFFERING      NUMBER               := 0;&lt;br/&gt;      CURSOR cur_stg_ecs_cus_data&lt;br/&gt;      IS&lt;br/&gt;         SELECT src_cus.cust_acct_no_ecs AS cust_acct_no_ecs,&lt;br/&gt;                TRIM (src_cus.pin_num_ecs) AS pin_num_ecs,&lt;br/&gt;                TRIM (SUBSTR ((src_cus.tax_id_ecs), -4)) AS tax_id_ecs,&lt;br/&gt;                xref.party_id AS party_id, tar_cus.party_id AS tar_party_id,&lt;br/&gt;                TRIM (tar_cus.pin_num) AS pin_num,&lt;br/&gt;                TRIM (tar_cus.tax_id_last_four) AS tax_id_last_four,&lt;br/&gt;                tar_cus.record_stat AS record_stat,&lt;br/&gt;                src_cus.ROWID AS src_rwoid&lt;br/&gt;           FROM stg.vnt_ecs_cus_data_rec_delta src_cus INNER JOIN chtr.t_party_vantage_xref xref&lt;br/&gt;                ON xref.cust_acct_num = src_cus.cust_acct_no_ecs&lt;br/&gt;                LEFT OUTER JOIN chtr.t_party_ext tar_cus&lt;br/&gt;                ON xref.party_id = tar_cus.party_id&lt;br/&gt;          WHERE TRIM (src_cus.record_load_cd) IS NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_ecs_cus_data&lt;br/&gt;      LOOP&lt;br/&gt;         BEGIN&lt;br/&gt;            IF     (cur_rec.cust_acct_no_ecs IS NOT NULL)&lt;br/&gt;               AND (cur_rec.tar_party_id IS NULL)&lt;br/&gt;               AND (cur_rec.party_id IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               -- INSERT NEW RECORDS&lt;br/&gt;               da_party_ext.ADD (process_rec           =&gt; p_process_rec_i,&lt;br/&gt;                                 party_id              =&gt; cur_rec.party_id,&lt;br/&gt;                                 tax_id_last_four      =&gt; cur_rec.tax_id_ecs,&lt;br/&gt;                                 pin_num               =&gt; cur_rec.pin_num_ecs,&lt;br/&gt;                                 audit_user            =&gt; p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                                (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                 p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                         || &apos;, CUST_ACCT_NO_ECS = &apos;&lt;br/&gt;                                                         || cur_rec.cust_acct_no_ecs&lt;br/&gt;                                                         || &apos;, TAX_ID_ECS = &apos;&lt;br/&gt;                                                         || cur_rec.tax_id_ecs&lt;br/&gt;                                                         || &apos;, PIN_NUM_ECS = &apos;&lt;br/&gt;                                                         || cur_rec.pin_num_ecs&lt;br/&gt;                                                         || &apos;, STATUS = NEW RECORD INSERTED&apos;&lt;br/&gt;                                );&lt;br/&gt;            ELSIF (    (cur_rec.cust_acct_no_ecs IS NOT NULL)&lt;br/&gt;                   AND (cur_rec.tar_party_id IS NOT NULL)&lt;br/&gt;                   AND (cur_rec.party_id IS NOT NULL)&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               IF (   (cur_rec.record_stat &lt;&gt; pkg_utility.c_record_active)&lt;br/&gt;                   OR (NVL (cur_rec.tax_id_ecs,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.tax_id_last_four,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.pin_num_ecs,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.pin_num,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE chtr.t_party_ext&lt;br/&gt;                     SET tax_id_last_four = cur_rec.tax_id_ecs,&lt;br/&gt;                         pin_num = cur_rec.pin_num_ecs,&lt;br/&gt;                         record_stat = &apos;A&apos;,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         modified_dttm = l_systimestamp&lt;br/&gt;                   WHERE party_id = cur_rec.party_id;&lt;br/&gt;&lt;br/&gt;                  l_update_count := l_update_count + 1;&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                                     (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, CUST_ACCT_NO_ECS = &apos;&lt;br/&gt;                                                              || cur_rec.cust_acct_no_ecs&lt;br/&gt;                                                              || &apos;, TAX_ID_ECS = &apos;&lt;br/&gt;                                                              || cur_rec.tax_id_ecs&lt;br/&gt;                                                              || &apos;, PIN_NUM_ECS = &apos;&lt;br/&gt;                                                              || cur_rec.pin_num_ecs&lt;br/&gt;                                                              || &apos;, STATUS = RECORD UPDATED&apos;&lt;br/&gt;                                     );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSIF (    (cur_rec.cust_acct_no_ecs IS NULL)&lt;br/&gt;                   AND (cur_rec.tar_party_id IS NOT NULL)&lt;br/&gt;                   AND (cur_rec.party_id IS NULL)&lt;br/&gt;                  )&lt;br/&gt;            --SOFT DELETE RECORDS&lt;br/&gt;            THEN&lt;br/&gt;               da_party_ext.del (process_rec      =&gt; p_process_rec_i,&lt;br/&gt;                                 party_id         =&gt; cur_rec.tar_party_id,&lt;br/&gt;                                 audit_user       =&gt; p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, CUST_ACCT_NO_ECS = &apos;&lt;br/&gt;                                                              || cur_rec.tar_party_id&lt;br/&gt;                                                              || &apos;, STATUS = RECORD DELETED&apos;&lt;br/&gt;                                     );&lt;br/&gt;               l_del_rec_count := 0;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_delete_flag = 0&lt;br/&gt;            THEN&lt;br/&gt;               update_stg_ecs_cus_data (p_process_rec_i,&lt;br/&gt;                                        cur_rec.src_rwoid,&lt;br/&gt;                                        chtr.pkg_utility.c_stg_processed,&lt;br/&gt;                                        p_audit_user_i&lt;br/&gt;                                       );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, CUST_ACCT_NO_ECS = &apos;&lt;br/&gt;                                                  || cur_rec.cust_acct_no_ecs&lt;br/&gt;                                                  || &apos;, TAX_ID_ECS = &apos;&lt;br/&gt;                                                  || cur_rec.tax_id_ecs&lt;br/&gt;                                                  || &apos;, PIN_NUM_ECS = &apos;&lt;br/&gt;                                                  || cur_rec.pin_num_ecs&lt;br/&gt;                                                  || &apos;, TAR_PARTY_ID = &apos;&lt;br/&gt;                                                  || cur_rec.tar_party_id&lt;br/&gt;                                                  || &apos; EXCEPTION = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;&lt;br/&gt;               IF l_delete_flag = 0&lt;br/&gt;               THEN&lt;br/&gt;                  update_stg_ecs_cus_data (p_process_rec_i,&lt;br/&gt;                                           cur_rec.src_rwoid,&lt;br/&gt;                                           chtr.pkg_utility.c_stg_error,&lt;br/&gt;                                           p_audit_user_i&lt;br/&gt;                                          );&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      --MAKING ENTRY TO THE PROCESS CHILD TABLE AGAINST TOTAL PROCESSED RECORD COUNT&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --MAKING ENTRY TO THE PROCESS CHILD TABLE AGAINST TOTAL ERROR RECORD COUNT&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END load_ecs_cus_data;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_ecs_cus_data (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_rowid            IN   VARCHAR2,&lt;br/&gt;      p_record_load_cd   IN   stg.vnt_ecs_cus_data.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SUBPROGRAM NAME    : PROCEDURE UPDATE_STG_CTD_DISPLAY&lt;br/&gt;      ||  ESTIMATED RUN TIME :&lt;br/&gt;      ||  DESCRIPTION        : THIS PROCEDURE WILL UPDATE STAGING TABLE STG.EPC_OFFER.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STG_CTD_DISPLAY&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.vnt_ecs_cus_data_rec_delta s&lt;br/&gt;         SET s.record_load_cd =&lt;br/&gt;                           NVL (p_record_load_cd, pkg_utility.c_stg_processed),&lt;br/&gt;             s.record_dttm = l_systimestamp&lt;br/&gt;       WHERE s.ROWID = p_rowid;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_stg_ecs_cus_data;&lt;br/&gt;&lt;br/&gt;   PROCEDURE initial_load (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      CURSOR cur_stg_ecs_cus_data&lt;br/&gt;      IS&lt;br/&gt;         SELECT src_cus.cust_acct_no_ecs AS cust_acct_no_ecs,&lt;br/&gt;                TRIM (src_cus.pin_num_ecs) AS pin_num_ecs,&lt;br/&gt;                TRIM (SUBSTR ((src_cus.tax_id_ecs), -4)) AS tax_id_ecs,&lt;br/&gt;                xref.party_id AS party_id, src_cus.ROWID AS src_rwoid,&lt;br/&gt;                record_load_cd&lt;br/&gt;           FROM stg.vnt_ecs_cus_data src_cus INNER JOIN chtr.t_party_vantage_xref xref&lt;br/&gt;                ON xref.cust_acct_num = src_cus.cust_acct_no_ecs&lt;br/&gt;          WHERE NOT EXISTS (SELECT 1&lt;br/&gt;                              FROM chtr.t_party_ext tar_cus&lt;br/&gt;                             WHERE tar_cus.party_id = xref.party_id)&lt;br/&gt;            AND src_cus.record_load_cd IS NULL;&lt;br/&gt;&lt;br/&gt;      TYPE t_cursor_data_tbl IS TABLE OF cur_stg_ecs_cus_data%ROWTYPE&lt;br/&gt;         INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_action         VARCHAR2 (1)                           := &apos;I&apos;;&lt;br/&gt;      l_proc_name      t_unit_name                           := &apos;INITIAL_LOAD&apos;;&lt;br/&gt;      l_process_name   chtr.t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_ecs_cus_data%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_ecs_cus_data;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_ecs_cus_data;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_ecs_cus_data&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  INSERT INTO chtr.t_party_ext a&lt;br/&gt;                              (a.party_id,&lt;br/&gt;                               a.tax_id_last_four,&lt;br/&gt;                               a.pin_num, a.record_stat,&lt;br/&gt;                               a.created_dttm, a.created_by,&lt;br/&gt;                               a.modified_dttm, a.modified_by&lt;br/&gt;                              )&lt;br/&gt;                       VALUES (l_cursor_data (i).party_id,&lt;br/&gt;                               l_cursor_data (i).tax_id_ecs,&lt;br/&gt;                               l_cursor_data (i).pin_num_ecs, &apos;A&apos;,&lt;br/&gt;                               l_systimestamp, p_audit_user_i,&lt;br/&gt;                               NULL, NULL&lt;br/&gt;                              );&lt;br/&gt;               COMMIT;&lt;br/&gt;               chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                              l_proc_name&lt;br/&gt;                                           || &apos;, &apos;&lt;br/&gt;                                           || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                          );&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;                  FOR i IN 1 .. l_errors&lt;br/&gt;                  LOOP&lt;br/&gt;                     NULL;&lt;br/&gt;                     l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;                     l_cursor_data (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                 chtr.pkg_utility.c_stg_error;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                               (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, party_id=&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).party_id&lt;br/&gt;                                || &apos;, CUST_ACCT_NO_ECS=&apos;&lt;br/&gt;                                || l_cursor_data (l_coll_idx).cust_acct_no_ecs&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;                  END LOOP;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || chtr.pkg_utility.c_proc_start_text&lt;br/&gt;                                     );&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  UPDATE stg.vnt_ecs_cus_data s&lt;br/&gt;                     SET s.record_load_cd =&lt;br/&gt;                            NVL (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                 chtr.pkg_utility.c_stg_processed&lt;br/&gt;                                )&lt;br/&gt;                   WHERE ROWID = l_cursor_data (i).src_rwoid;&lt;br/&gt;               pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                     );&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_ecs_cus_data;&lt;br/&gt;&lt;br/&gt;      chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                 );&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_ecs_cus_data%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_ecs_cus_data;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END initial_load;&lt;br/&gt;END pkg_vnt_recon_ecs_cus_data;</source>
</body>
</PackageOracle>
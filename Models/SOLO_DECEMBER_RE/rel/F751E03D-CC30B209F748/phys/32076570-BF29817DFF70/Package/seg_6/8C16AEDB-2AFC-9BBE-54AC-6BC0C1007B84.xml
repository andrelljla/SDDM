<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_OJB_JOBS" directorySegmentName="seg_6" id="8C16AEDB-2AFC-9BBE-54AC-6BC0C1007B84">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OJB_JOBS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:54 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_OJB_JOBS&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_OJB_JOBS&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : ORDER&lt;br/&gt;   ||  Description     : The package pkg_vnt_load_oor_order_open controls the initial load of the&lt;br/&gt;   ||                    Vantage oor_order_open table into SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_this_thread         NUMBER DEFAULT 1,&lt;br/&gt;      p_max_thread          NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;END pkg_vnt_load_ojb_jobs;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_OJB_JOBS" id="8C16AEDB-2AFC-9BBE-54AC-6BC0C1007B84">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OJB_JOBS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:58 UTC</createdTime>
<ownerDesignName>SOLO_DECEMBER_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_OJB_JOBS&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_OJB_JOBS&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : ORDER&lt;br/&gt;   ||  Description     : The package pkg_vnt_load_oor_order_open controls the initial load of the&lt;br/&gt;   ||                    Vantage oor_order_open table into SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ||&lt;br/&gt;   ||     Senthil        07-Jan-2015    Static data change for bus_interact_type_cd column in t_bus_interaction table&lt;br/&gt;   ||                                          and request_type_cd column in t_request table&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_in_progress CONSTANT VARCHAR2 (1) := &apos;I&apos;;&lt;br/&gt;   c_stg_error CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_pkg_name CONSTANT t_unit_name := &apos;PKG_VNT_LOAD_OJB_JOBS&apos;;&lt;br/&gt;   c_null_date CONSTANT DATE := TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;);&lt;br/&gt;   c_ts_format CONSTANT VARCHAR2 (21) := &apos;YYYY.MM.DD.HH24.MI.SS&apos;;&lt;br/&gt;   c_bad_parameter EXCEPTION;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread NUMBER := 1;&lt;br/&gt;   g_max_thread NUMBER := 1;&lt;br/&gt;   g_batchsize NUMBER := 1000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged ojb_jobs for loading&lt;br/&gt;   CURSOR cur_stg_ojb_jobs&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         CASE&lt;br/&gt;            WHEN ojb.sys_ojb = 8313&lt;br/&gt;            THEN &apos;BRS&apos;&lt;br/&gt;            ELSE &apos;VNT&apos;&lt;br/&gt;         END AS data_source_type_cd,&lt;br/&gt;&lt;br/&gt;         -- staging control data&lt;br/&gt;         ojb.ROWID AS ID,&lt;br/&gt;         ojb.record_load_cd,&lt;br/&gt;&lt;br/&gt;         -- surrogate keys&lt;br/&gt;         s_bus_interact_id.NEXTVAL AS bus_interact_id,&lt;br/&gt;         xref.address_id AS service_address_id,&lt;br/&gt;         cust_xref.party_id AS customer_id,&lt;br/&gt;         bi.bus_interact_id AS parent_bus_interact_id,&lt;br/&gt;&lt;br/&gt;         -- columns&lt;br/&gt;         ojb.cust_acct_no_ojb,&lt;br/&gt;         ojb.hse_key_ojb,&lt;br/&gt;         ojb.order_no_ojb AS order_num,&lt;br/&gt;         ojb.job_seq_no_ojb AS sequence_num,&lt;br/&gt;         ojb.order_no_ojb || TO_CHAR (ojb.job_seq_no_ojb) AS src_sys_id,&lt;br/&gt;         DECODE (ojb.create_dte_ojb, c_null_date, NULL, TO_CHAR (ojb.create_dte_ojb, &apos;YYYY.MM.DD&apos;) ) AS create_date,&lt;br/&gt;         ojb.create_tme_ojb AS create_time,&lt;br/&gt;         DECODE (ojb.compl_dte_ojb, c_null_date, NULL, TO_CHAR (ojb.compl_dte_ojb, &apos;YYYY.MM.DD&apos;) ) AS&lt;br/&gt;         actual_completion_date,&lt;br/&gt;         ojb.compl_tme_ojb AS actual_completion_time,&lt;br/&gt;         ojb.installer_typ_ojb AS installer_type_cd,&lt;br/&gt;         ojb.job_typ_ojb AS work_order_type_cd,&lt;br/&gt;         TRIM (DECODE (ojb.job_stat_ojb, &apos;C&apos;, ojb.compl_cde_ojb, &apos;D&apos;, ojb.compl_cde_ojb, NULL ) ) AS completion_cd,&lt;br/&gt;         TRIM (DECODE (ojb.job_stat_ojb, &apos;X&apos;, ojb.compl_cde_ojb, NULL) ) AS cancel_cd,&lt;br/&gt;         TRIM (SUBSTR (ojb.compl_cde_ojb, 1, 3)) AS completion_cd1,&lt;br/&gt;         TRIM (SUBSTR (ojb.compl_cde_ojb, 4, 3)) AS completion_cd2,&lt;br/&gt;         TRIM (SUBSTR (ojb.compl_cde_ojb, 7, 3)) AS completion_cd3,&lt;br/&gt;         TRIM (SUBSTR (ojb.compl_cde_ojb, 10, 3)) AS completion_cd4,&lt;br/&gt;         TRIM (SUBSTR (ojb.compl_cde_ojb, 13, 3)) AS completion_cd5,&lt;br/&gt;         TRIM (SUBSTR (ojb.compl_cde_ojb, 16, 3)) AS completion_cd6,&lt;br/&gt;         TRIM (ojb.job_comments_ojb) AS comment_val,&lt;br/&gt;         ojb.tot_sched_units_ojb AS total_work_units_scheduled_qty,&lt;br/&gt;         ojb.job_class_ojb AS work_order_class_cd,&lt;br/&gt;         &apos;REQ&apos; AS bus_interact_type_cd,&lt;br/&gt;		 &apos;WRKORD&apos; AS request_type_cd,&lt;br/&gt;         ojb.job_stat_ojb AS work_order_status_cd,&lt;br/&gt;         --bi.bus_interact_type_cd AS order_type_cd,&lt;br/&gt;         DECODE (r.request_type_cd, &apos;SPLREQ&apos;, &apos;REQWO&apos;, &apos;PRDORD&apos;, &apos;POWO&apos;, &apos;TKTWO&apos;) AS relationship_cd,&lt;br/&gt;		 DECODE (r.request_type_cd, &apos;SPLREQ&apos;, &apos;Z&apos;, &apos;PRDORD&apos;, &apos;W&apos;, &apos;T&apos; ) AS category_cd&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_ojb_jobs ojb&lt;br/&gt;      LEFT OUTER JOIN t_service_address_vantage_xref xref&lt;br/&gt;      ON&lt;br/&gt;         xref.hs_key = ojb.hse_key_ojb&lt;br/&gt;      INNER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;      ON&lt;br/&gt;         cust_xref.cust_acct_num = ojb.cust_acct_no_ojb&lt;br/&gt;      INNER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;      ON&lt;br/&gt;         ord_xref.ord_no = ojb.order_no_ojb&lt;br/&gt;      INNER JOIN t_bus_interact bi&lt;br/&gt;      ON&lt;br/&gt;         bi.bus_interact_id = ord_xref.bus_interact_id&lt;br/&gt;      LEFT OUTER JOIN t_request r&lt;br/&gt;      ON&lt;br/&gt;         r.request_interaction_id = bi.bus_interact_id&lt;br/&gt;      WHERE&lt;br/&gt;         ojb.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (ojb.ROWID, LENGTH (ojb.ROWID), 1)), g_max_thread ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;TYPE t_cursor_data_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF cur_stg_ojb_jobs%ROWTYPE INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;TYPE t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;PROCEDURE insert_bus_interact(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_party_role(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_busn_intrn_vnt_job_xref(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_related(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_request(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order_status(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order_cpt(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl,&lt;br/&gt;      p_select_code_i IN NUMBER );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order_can(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl,&lt;br/&gt;      p_select_code_i IN NUMBER );&lt;br/&gt;&lt;br/&gt;   -- get closed(true) or cancelled(false)&lt;br/&gt;   FUNCTION filter_work_order(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_select_work_order_closed IN BOOLEAN )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_completion_code(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;         p_select_completion_code_i IN INTEGER )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The procedure load will execute the records for loading the different tables related&lt;br/&gt;      ||                       to bus_interact,bus_interact,bus_interact_party_role,bus_interact_related,request,&lt;br/&gt;      work_order and work_order_status.&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name t_unit_name := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name t_process_log.process_name%TYPE := c_pkg_name;&lt;br/&gt;      l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr t_ptr_tbl;&lt;br/&gt;      -- for filtering orders in the cursor table&lt;br/&gt;      l_secondary_filter_ptr t_ptr_tbl;&lt;br/&gt;      -- for second level filtering of orders&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec, &apos;p_audit_user_i=&apos; || p_audit_user_i );&lt;br/&gt;      g_this_thread := p_this_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name) THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF cur_stg_ojb_jobs%ISOPEN THEN&lt;br/&gt;         CLOSE cur_stg_ojb_jobs;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_ojb_jobs;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH&lt;br/&gt;            cur_stg_ojb_jobs BULK COLLECT&lt;br/&gt;         INTO&lt;br/&gt;            l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0) THEN&lt;br/&gt;            -- Insert bus_interact&lt;br/&gt;            insert_bus_interact (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert bus_interact&lt;br/&gt;            insert_busn_intrn_vnt_job_xref (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert bus_interact_party_role&lt;br/&gt;            insert_bus_interact_party_role (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert bus_interact_related (relate the work order to the special_request, product_order, or ticket)&lt;br/&gt;            insert_bus_interact_related (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert request&lt;br/&gt;            insert_request (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert work_order&lt;br/&gt;            insert_work_order (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert work_order_status&lt;br/&gt;            insert_work_order_status (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Select completed work orders&lt;br/&gt;            l_filter_ptr := filter_work_order (l_process_rec, l_cursor_data, p_select_work_order_closed =&gt; TRUE );&lt;br/&gt;            -- If completed with completion codes, insert work_order_completion(s)&lt;br/&gt;            -- completion code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_cpt (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 1 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_cpt (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 2 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_cpt (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 3 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_cpt (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 4 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 5&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 5 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_cpt (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 5 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 6&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 6 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_cpt (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 6 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- Select cancelled tickets&lt;br/&gt;            l_filter_ptr := filter_work_order (l_process_rec, l_cursor_data, p_select_work_order_closed =&gt; FALSE );&lt;br/&gt;            -- If cancelled with completion codes, insert ticket_cancel(s)&lt;br/&gt;            -- cancel code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_can (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 1 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_can (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 2 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_can (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 3 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_can (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 4 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 5&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 5 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_can (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 5 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 6&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 6 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_work_order_can (p_process_rec_i =&gt; l_process_rec, p_cursor_data_io =&gt; l_cursor_data, p_filter_i&lt;br/&gt;               =&gt; l_secondary_filter_ptr, p_select_code_i =&gt; 6 );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN&lt;br/&gt;         (&lt;br/&gt;            l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;         )&lt;br/&gt;         OR&lt;br/&gt;         (&lt;br/&gt;            pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;         )&lt;br/&gt;         ;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_ojb_jobs;&lt;br/&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN OTHERS THEN&lt;br/&gt;      ROLLBACK;&lt;br/&gt;&lt;br/&gt;      IF cur_stg_ojb_jobs%ISOPEN THEN&lt;br/&gt;         CLOSE cur_stg_ojb_jobs;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;      RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUS_INTERACT&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_bus_interact will load the table t_bus_interact&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTERACT&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_interact a&lt;br/&gt;         (&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.source_system_id,&lt;br/&gt;            a.bus_interact_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).src_sys_id,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_interact;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_busn_intrn_vnt_job_xref&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUSN_INTRN_VNT_JOB_XREF&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_busn_intrn_vnt_job_xref will load the table t_busn_intrn_vnt_job_xref.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUSN_INTRN_VNT_JOB_XREF&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_busn_intrn_vnt_job_xref a&lt;br/&gt;         (&lt;br/&gt;            a.order_num,&lt;br/&gt;            a.job_seq_num,&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).order_num,&lt;br/&gt;            p_cursor_data_io (i).sequence_num,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_busn_intrn_vnt_job_xref;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_party_role&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUS_INTERACT_PARTY_ROLE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_bus_interact_party_role will load the table t_bus_interact_party_role.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTERACT_PARTY_ROLE&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_interact_party_role a&lt;br/&gt;         (&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.party_id,&lt;br/&gt;            a.party_role_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.source_system_party_id,&lt;br/&gt;            a.bus_interact_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).customer_id,&lt;br/&gt;            &apos;CUST&apos;,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).cust_acct_no_ojb,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_interact_party_role;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_related&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUS_INTERACT_RELATED&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_bus_interact_related will load the table t_bus_interact_related.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTERACT_RELATED&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_interact_related a&lt;br/&gt;         (&lt;br/&gt;            a.parent_bus_interact_id,&lt;br/&gt;            a.child_bus_interact_id,&lt;br/&gt;            a.bus_interact_relationship_cd,&lt;br/&gt;			a.data_source_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).parent_bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).relationship_cd,&lt;br/&gt;			   p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_interact_related;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_inter_order_xref&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUS_INTER_ORDER_XREF&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_bus_inter_order_xref will load the table t_bus_inter_vantage_ord_xref.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTER_ORDER_XREF&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_inter_vantage_ord_xref a&lt;br/&gt;         (&lt;br/&gt;            a.ord_no,&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).order_num,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_inter_order_xref;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_request&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_REQUEST&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_request will load the table t_request.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_REQUEST&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_request a&lt;br/&gt;         (&lt;br/&gt;            a.request_interaction_id,&lt;br/&gt;            a.request_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).request_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_request;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_WORK_ORDER&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_work_order will load the table t_work_order.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_WORK_ORDER&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_work_order a&lt;br/&gt;         (&lt;br/&gt;            a.work_order_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.sequence_num,&lt;br/&gt;            a.create_dttm,&lt;br/&gt;            a.earliest_possible_comp_dttm,&lt;br/&gt;            a.technician_work_start_dttm,&lt;br/&gt;            a.technician_work_end_dttm,&lt;br/&gt;            a.actual_completion_dttm,&lt;br/&gt;            a.installer_type_cd,&lt;br/&gt;            a.service_address_id,&lt;br/&gt;            a.work_order_type_cd,&lt;br/&gt;            a.completion_cd,&lt;br/&gt;            a.cancel_cd,&lt;br/&gt;            a.comment_val,&lt;br/&gt;            a.total_work_units_scheduled_qty,&lt;br/&gt;            a.work_order_class_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).sequence_num,&lt;br/&gt;            DECODE (p_cursor_data_io (i).create_date, NULL, NULL, TO_TIMESTAMP ( p_cursor_data_io (i).create_date ||&lt;br/&gt;            &apos;.&apos; || p_cursor_data_io (i).create_time, c_ts_format ) ),&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            DECODE (p_cursor_data_io (i).actual_completion_date, NULL, NULL, TO_TIMESTAMP ( p_cursor_data_io (i)&lt;br/&gt;            .actual_completion_date || &apos;.&apos; || p_cursor_data_io (i).actual_completion_time, c_ts_format ) ),&lt;br/&gt;            p_cursor_data_io (i).installer_type_cd,&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            p_cursor_data_io (i).work_order_type_cd,&lt;br/&gt;            p_cursor_data_io (i).completion_cd,&lt;br/&gt;            p_cursor_data_io (i).cancel_cd,&lt;br/&gt;            p_cursor_data_io (i).comment_val,&lt;br/&gt;            p_cursor_data_io (i).total_work_units_scheduled_qty,&lt;br/&gt;            p_cursor_data_io (i).work_order_class_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_work_order;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order_status&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_WORK_ORDER_STATUS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_work_order_status will load the table t_work_order_status.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_WORK_ORDER_STATUS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_work_order_status a&lt;br/&gt;         (&lt;br/&gt;            a.work_order_id,&lt;br/&gt;            a.work_order_status_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).work_order_status_cd,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_work_order_status;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order_cpt&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl,&lt;br/&gt;      p_select_code_i IN NUMBER&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : insert_work_order_cpt&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_work_order_cpt will load the table t_work_order_completion.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_WORK_ORDER_CPT&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () || &apos; p_select_code_i=&apos;&lt;br/&gt;   || p_select_code_i );&lt;br/&gt;&lt;br/&gt;   IF NOT&lt;br/&gt;      (&lt;br/&gt;         p_select_code_i BETWEEN 0 AND 6&lt;br/&gt;      )&lt;br/&gt;      THEN&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, Invalid code sequence=&apos; );&lt;br/&gt;      RETURN;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_work_order_completion a&lt;br/&gt;         (&lt;br/&gt;            a.work_order_id,&lt;br/&gt;            a.work_order_completion_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.work_order_category_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            DECODE (p_select_code_i, 1, p_cursor_data_io (i).completion_cd1, 2, p_cursor_data_io (i).completion_cd2, 3,&lt;br/&gt;            p_cursor_data_io (i).completion_cd3, 4, p_cursor_data_io (i).completion_cd4, 5, p_cursor_data_io (i)&lt;br/&gt;            .completion_cd5, p_cursor_data_io (i).completion_cd6 ),&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).category_cd,&lt;br/&gt;            p_select_code_i,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_work_order_cpt;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_work_order_can&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl,&lt;br/&gt;      p_select_code_i IN NUMBER&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_WORK_ORDER_CAN&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_work_order_can will load the table t_work_order_cancel.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_WORK_ORDER_CAN&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () || &apos; p_select_code_i=&apos;&lt;br/&gt;   || p_select_code_i );&lt;br/&gt;&lt;br/&gt;   IF NOT&lt;br/&gt;      (&lt;br/&gt;         p_select_code_i BETWEEN 0 AND 6&lt;br/&gt;      )&lt;br/&gt;      THEN&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, Invalid code sequence=&apos; );&lt;br/&gt;      RETURN;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_work_order_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.work_order_id,&lt;br/&gt;            a.work_order_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            DECODE (p_select_code_i, 1, p_cursor_data_io (i).completion_cd1, 2, p_cursor_data_io (i).completion_cd2, 3,&lt;br/&gt;            p_cursor_data_io (i).completion_cd3, 4, p_cursor_data_io (i).completion_cd4, 5, p_cursor_data_io (i)&lt;br/&gt;            .completion_cd5, p_cursor_data_io (i).completion_cd6 ),&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_select_code_i,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).src_sys_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_work_order_can;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : UPDATE_STAGING&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure update_staging will update the table staging stg.vnt_ojb_jobs.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, Start&apos;);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_i.COUNT SAVE EXCEPTIONS&lt;br/&gt;   UPDATE&lt;br/&gt;      stg.vnt_ojb_jobs s&lt;br/&gt;   SET&lt;br/&gt;      s.record_load_cd = NVL (p_cursor_data_i (i).record_load_cd, c_stg_processed),&lt;br/&gt;      s.record_dttm = SYSTIMESTAMP&lt;br/&gt;   WHERE&lt;br/&gt;      ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, Update Count=&apos; || SQL%ROWCOUNT );&lt;br/&gt;END update_staging;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_work_order(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_select_work_order_closed IN BOOLEAN )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : FILTER_WORK_ORDER&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The Function filter_work_order will return the record count&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_WORK_ORDER&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      IF ( ( p_cursor_data_i (i).work_order_status_cd IN (&apos;C&apos;, &apos;D&apos;) AND p_select_work_order_closed ) OR&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_i (i).work_order_status_cd IN (&apos;X&apos;) AND NOT p_select_work_order_closed&lt;br/&gt;         )&lt;br/&gt;         ) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := i;&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, Count=&apos; || l_idx );&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_work_order;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_completion_code(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;      p_select_completion_code_i IN INTEGER )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : FILTER_COMPLETION_CODE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The Function filter_completion_code will return the record count by checking the BOOLEAN&lt;br/&gt;   value completion code.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_COMPLETION_CODE&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;   l_selected BOOLEAN;&lt;br/&gt;BEGIN&lt;br/&gt;   IF (p_select_completion_code_i &lt; 1 OR p_select_completion_code_i &gt; 6) THEN&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bad p_select_completion_code_i value passed!&apos; );&lt;br/&gt;      RAISE c_bad_parameter;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, p_select_completion_code_i = &apos; ||&lt;br/&gt;   p_select_completion_code_i );&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_selected_orders_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      l_selected := FALSE;&lt;br/&gt;&lt;br/&gt;      CASE p_select_completion_code_i&lt;br/&gt;      WHEN 1 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 2 THEN&lt;br/&gt;         IF ( p_cursor_data_i (p_selected_orders_i (i)).completion_cd2 IS NOT NULL AND p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd2 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 3 THEN&lt;br/&gt;         IF ( p_cursor_data_i (p_selected_orders_i (i)).completion_cd3 IS NOT NULL AND p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd3 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 AND&lt;br/&gt;            p_cursor_data_i (p_selected_orders_i (i)).completion_cd3 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;            .completion_cd2 ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 4 THEN&lt;br/&gt;         IF ( p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 IS NOT NULL AND p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd4 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 AND&lt;br/&gt;            p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;            .completion_cd2 AND p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 &lt;&gt; p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd3 ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 5 THEN&lt;br/&gt;         IF ( p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 IS NOT NULL AND p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd5 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 AND&lt;br/&gt;            p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;            .completion_cd2 AND p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 &lt;&gt; p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd3 AND p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 &lt;&gt;&lt;br/&gt;            p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 6 THEN&lt;br/&gt;         IF ( p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 IS NOT NULL AND p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd6 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 AND&lt;br/&gt;            p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;            .completion_cd2 AND p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt; p_cursor_data_i (&lt;br/&gt;            p_selected_orders_i (i)).completion_cd3 AND p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt;&lt;br/&gt;            p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 AND p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;            .completion_cd6 &lt;&gt; p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      END CASE;&lt;br/&gt;&lt;br/&gt;      IF (l_selected) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := p_selected_orders_i (i);&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, Count=&apos; || l_idx );&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_completion_code;&lt;br/&gt;END pkg_vnt_load_ojb_jobs;</source>
</body>
</PackageOracle>
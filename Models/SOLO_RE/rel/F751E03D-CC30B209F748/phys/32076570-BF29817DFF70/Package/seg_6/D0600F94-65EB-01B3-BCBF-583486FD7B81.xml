<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_SBB_BASE" directorySegmentName="seg_6" id="D0600F94-65EB-01B3-BCBF-583486FD7B81">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_SBB_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:20:07 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_SBB_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_RECON_SBB_BASE&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 12-Dec-2014&lt;br/&gt;   ||  Subject Area    : Account&lt;br/&gt;   ||  Description     : This is for Reconciliation process of  Account Related details from the Vantage side&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By            Changed On               Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||    Binoy                 July 16 2015             New procedures added for loading the data into&lt;br/&gt;   ||                                                   t_account_related and values as BULK and LEAF&lt;br/&gt;   ||                                                   load_chtr_account_related_leaf, load_stg_sbb_base_leaf,&lt;br/&gt;   ||                                                   load_chtr_account_related_bulk and  load_stg_sbb_base_bulk&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_stg_sbb_base_leaf (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_chtr_account_related_leaf (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_stg_sbb_base_bulk (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_chtr_account_related_bulk (p_audit_user_i IN VARCHAR2);&lt;br/&gt;END pkg_vnt_recon_sbb_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_SBB_BASE" id="D0600F94-65EB-01B3-BCBF-583486FD7B81">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_SBB_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:20:18 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_SBB_BASE&lt;br/&gt;IS&lt;br/&gt;/************************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_RECON_SBB_BASE&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 12-Dec-2014&lt;br/&gt;   ||  Subject Area    : Account&lt;br/&gt;   ||  Description     : This is for Reconciliation process of  Account Related details from the Vantage side&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By            Changed On               Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||   COGNIZANT             03/16/2015                Postprod-HotFix -&lt;br/&gt;   ||                                                   *Commented insert_account_cycle procedure&lt;br/&gt;   ||                                                   *Defect fix in insert_account_status procedure&lt;br/&gt;   ||   Cognizant             30-MAR-2015               Modified cursor query to support ROWID based multithreading&lt;br/&gt;   ||   Cognizant             0-Apr-2015                Trim included for character column in cursor query..&lt;br/&gt;   ||   Venkataraman          22-APR-2014               Adding the Dunning Code to the T_ACCOUNT table&lt;br/&gt;   ||   Cognizant             15-MAY-2015               Batch Processing introduced as part of performance improvement&lt;br/&gt;   ||   Binoy                 27-MAY-2015               Adding T_PARTY_ACCOUNT instead of T_CUSTOMER_ACCOUNT&lt;br/&gt;   ||                                                   Removed the column address_subtype_cd usage from&lt;br/&gt;   ||                                                     the table t_account_address&lt;br/&gt;   ||   Rajesh Gurram         08-JUN-2015               Modified INSERT_ACCOUNT_BALANCE procedure and inserted PPVB&lt;br/&gt;   ||                                                   and PPVL types into T_ACCOUNT_BALANCE table.&lt;br/&gt;   ||                                                   t_account_address&lt;br/&gt;   ||   Binoy                 03-Jun-2015               Added the table t_account_rel_vnt_bulk_xref and T_ACCOUNT_RELATED&lt;br/&gt;   ||                                                   as part Web Service gateway Changes (Bulk).&lt;br/&gt;   ||   Binoy                 03-Jun-2015               Commented the procedure insert_account_cycle and it is not using&lt;br/&gt;   ||   Binoy                 11-Jun-2015               Added the table t_account_rel_vnt_leaf_xref&lt;br/&gt;   ||                                                   and T_ACCOUNT_RELATED as part Web Service gateway Changes(lEAF)&lt;br/&gt;   ||   Binoy                 17-Jun-2015               Review Comments&lt;br/&gt;   ||                                                   Removed the insert conditions for the xref tables after code review&lt;br/&gt;   ||                                                   t_account_rel_vnt_leaf_xref and t_account_rel_vnt_bulk_xref&lt;br/&gt;   ||                                                   parameter cursor added&lt;br/&gt;   ||   Binoy                 24-Jun-2015               Populate the data into the column BILLING_STATION_ID.T_ACCOUNT&lt;br/&gt;   ||                                                   as part of XDW change.&lt;br/&gt;   ||   Kamalakar             08-Jul-2015               Modified INSERT_ACCOUNT_BALANCE procedure and inserted 0DY,30DY,60DY&lt;br/&gt;   ||                                                   90DY,120DY,150DY,WRTOF balance type codes into T_ACCOUNT_BALANCE table.&lt;br/&gt;   ||   Binoy                 09-Jul-2015               Adding T_PARTY_ACCOUNT instead filter condition changed to decide&lt;br/&gt;   ||                                                   Insert or Update&lt;br/&gt;   ||   Rajesh Gurram         09-Jul-2015               Created new procedure to load  T_ACCOUNT_BILL_INFO table.&lt;br/&gt;   ||   Binoy                 09-Jul-2015               Adding T_PARTY_ACCOUNT instead filter condition changed to decide&lt;br/&gt;   ||                                                   Insert or Update&lt;br/&gt;   ||   Binoy                 09-Jul-2015               Cursor Query column bill_day updated as part of the prod issue&lt;br/&gt;   ||   Binoy                 09-Jul-2015               Logic is rewritten for populating the LEAF Records T_ACCOUNT_RELATED&lt;br/&gt;   ||   Binoy                 20-Jul-2015               New procedures added for loading the data into&lt;br/&gt;   ||                                                   t_account_related and values as BULK and LEAF&lt;br/&gt;   ||                                                   load_chtr_account_related_leaf, load_stg_sbb_base_leaf,&lt;br/&gt;   ||                                                   load_chtr_account_related_bulk and  load_stg_sbb_base_bulk&lt;br/&gt;   ||   Binoy                 20-Jul-2015               Added Updated statement additional to delete the records&lt;br/&gt;   *********************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name       := &apos;PKG_VNT_RECON_SBB_BASE&apos;;&lt;br/&gt;   c_bulk_errors                EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   g_max_thread                 NUMBER                                   := 1;&lt;br/&gt;   g_reminder_thread            NUMBER                                   := 1;&lt;br/&gt;   g_batchsize                  NUMBER                                := 1000;&lt;br/&gt;   g_process_record_cnt         NUMBER                                   := 0;&lt;br/&gt;   g_error_record_cnt           NUMBER                                   := 0;&lt;br/&gt;   l_current_recon_start_time   stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_sbb_base_rec&lt;br/&gt;   IS&lt;br/&gt;      SELECT sbb.ROWID AS ID, sbb.record_load_cd, 0 AS account_id,&lt;br/&gt;             cust_xref.party_id AS customer_id,&lt;br/&gt;             sbb.sub_acct_no_sbb AS account_num,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN sbb.sys_sbb = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             sbb.cust_acct_no_sbb AS customer_account_num,&lt;br/&gt;             xref.address_id AS service_address_id,&lt;br/&gt;             TRIM&lt;br/&gt;                (CASE&lt;br/&gt;                    WHEN INSTR (sbb.res_name_sbb, &apos;*&apos;) &gt; 2&lt;br/&gt;                       THEN SUBSTR (sbb.res_name_sbb,&lt;br/&gt;                                    1,&lt;br/&gt;                                    INSTR (sbb.res_name_sbb, &apos;*&apos;) - 2&lt;br/&gt;                                   )&lt;br/&gt;                    ELSE sbb.res_name_sbb&lt;br/&gt;                 END&lt;br/&gt;                ) AS account_nm,&lt;br/&gt;             sbb.orig_conn_dte_sbb AS account_open_dt,&lt;br/&gt;             sbb.disco_dte_sbb AS account_close_dt,&lt;br/&gt;             DECODE (sbb.cust_typ_sbb,&lt;br/&gt;                     &apos;COM&apos;, &apos;BUSN&apos;,&lt;br/&gt;                     &apos;RES&apos;, &apos;INDIV&apos;,&lt;br/&gt;                     NULL&lt;br/&gt;                    ) AS account_type_cd,&lt;br/&gt;             DECODE (sbb.cust_typ_sbb,&lt;br/&gt;                     &apos;COM&apos;, &apos;ORGN&apos;,&lt;br/&gt;                     &apos;RES&apos;, &apos;INDIV&apos;,&lt;br/&gt;                     NULL&lt;br/&gt;                    ) AS party_subtype_cd,&lt;br/&gt;             TRIM (sbb.vip_flg_sbb) AS account_qualifier_cd,&lt;br/&gt;             NVL (sbb.cur_bal_sbb, 0) AS account_balance_cur_amt,&lt;br/&gt;             NVL (sbb.delq_amt_sbb, 0) AS account_balance_past_amt,&lt;br/&gt;             NVL (sbb.bill_from_dte_sbb,&lt;br/&gt;                  pkg_utility.c_null_date&lt;br/&gt;                 ) AS account_cycle_start_dt,&lt;br/&gt;             sbb.bill_to_dte_sbb AS account_cycle_end_dt,&lt;br/&gt;             NVL (TRIM (sbb.ext_stat_sbb), &apos;0&apos;) AS conn_account_status_cd,&lt;br/&gt;             NVL (TRIM (sbb.delq_stat_sbb), &apos;0&apos;) AS dlnq_account_status_cd,&lt;br/&gt;             NVL (TRIM (sbb.int_stat_sbb), &apos;0&apos;) AS mony_account_status_cd,&lt;br/&gt;             NVL (TRIM (sbb.pmt_stat_sbb), &apos;0&apos;) AS pmt_account_status_cd,&lt;br/&gt;             TRIM (sbb.dunning_group_sbb) AS dunning_group_sbb,&lt;br/&gt;             NVL (sbb.credit_lne_sbb, 0) AS account_balance_ppvl_amt,&lt;br/&gt;             NVL (sbb.ppv_bal_sbb, 0) AS account_balance_ppvb_amt,&lt;br/&gt;               NVL (sbb.lst_stmt_bal_sbb, 0)&lt;br/&gt;             - NVL (sbb.delq_1cyc_sbb, 0)&lt;br/&gt;             - NVL (sbb.delq_2cyc_sbb, 0)&lt;br/&gt;             - NVL (sbb.delq_3cyc_sbb, 0)&lt;br/&gt;             - NVL (sbb.delq_4cyc_sbb, 0)&lt;br/&gt;             - NVL (sbb.delq_5cyc_sbb, 0) AS currentcharge,&lt;br/&gt;             NVL (sbb.delq_1cyc_sbb, 0) AS thirty_day,&lt;br/&gt;             NVL (sbb.delq_2cyc_sbb, 0) AS sixty_day,&lt;br/&gt;             NVL (sbb.delq_3cyc_sbb, 0) AS ninty_day,&lt;br/&gt;             NVL (sbb.delq_4cyc_sbb, 0) AS onetwenty_day,&lt;br/&gt;             NVL (sbb.delq_5cyc_sbb, 0) AS onefifty_day,&lt;br/&gt;             TO_CHAR (sbb.bill_from_dte_sbb, &apos;DD&apos;) AS bill_day,&lt;br/&gt;             sbb.cyc_cde_sbb AS bill_cycle,&lt;br/&gt;             sbb.hardcopy_stmt_sbb AS paperless_bill,&lt;br/&gt;             sbb.e_bill_sbb AS electronic_bill_flag,&lt;br/&gt;             sbb.ebpp_ind_sbb AS ebpp_ind,&lt;br/&gt;             sbb.stmt_hold_cde_sbb AS stmt_hld_cd,&lt;br/&gt;             TRIM (misc_sbb) AS misc_sbb, TRIM (sbb.prin_sbb) AS prin_sbb,&lt;br/&gt;             TRIM (sbb.sys_sbb) AS sys_sbb,&lt;br/&gt;             TRIM (sbb.hierarchy_id_sbb) AS hierarchy_id_sbb,&lt;br/&gt;             sbb.acct_hierarchy_owning_sys_sbb&lt;br/&gt;                                            AS acct_hierarchy_owning_sys_sbb,&lt;br/&gt;             sbb.acct_hierarchy_owning_prin_sbb&lt;br/&gt;                                           AS acct_hierarchy_owning_prin_sbb,&lt;br/&gt;             bs.billing_station_id&lt;br/&gt;        FROM stg.vnt_sbb_base_rec_delta sbb INNER JOIN t_service_address_vantage_xref xref&lt;br/&gt;             ON xref.hs_key = sbb.hse_key_sbb&lt;br/&gt;             JOIN t_party_vantage_xref cust_xref&lt;br/&gt;             ON cust_xref.cust_acct_num = sbb.cust_acct_no_sbb&lt;br/&gt;             LEFT OUTER JOIN t_billing_station bs&lt;br/&gt;             ON bs.billing_station_level_1_cd = sbb.sys_sbb&lt;br/&gt;           AND bs.billing_station_level_2_cd = sbb.prin_sbb&lt;br/&gt;       WHERE sbb.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (sbb.ROWID, LENGTH (sbb.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_sbb_base_rec%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_ptr_tbl IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_vnt_sbb_base_leaf&lt;br/&gt;   IS&lt;br/&gt;      SELECT NVL (sbb.account_id, t_ar.account_id) AS account_id,&lt;br/&gt;             NVL (sbb.related_account_id,&lt;br/&gt;                  t_ar.related_account_id&lt;br/&gt;                 ) AS related_account_id,&lt;br/&gt;             NVL (t_ar.account_related_reason_cd,&lt;br/&gt;                  sbb.account_related_reason_cd&lt;br/&gt;                 ) account_related_reason_cd,&lt;br/&gt;             NVL (sbb.data_source_type_cd,&lt;br/&gt;                  t_ar.data_source_type_cd&lt;br/&gt;                 ) data_source_type_cd,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN sbb.account_id IS NULL&lt;br/&gt;                AND t_ar.account_id IS NOT NULL&lt;br/&gt;                   THEN &apos;D&apos;&lt;br/&gt;                ELSE &apos;A&apos;&lt;br/&gt;             END record_stat,&lt;br/&gt;             t_ar.record_stat AS ac_rel_record_stat,&lt;br/&gt;             t_ar.data_source_type_cd ac_rel_data_source_type_cd,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN sbb.account_id IS NOT NULL&lt;br/&gt;                AND t_ar.account_id IS NULL&lt;br/&gt;                   THEN &apos;I&apos;&lt;br/&gt;                ELSE &apos;U&apos;&lt;br/&gt;             END perform_action&lt;br/&gt;        FROM stg.vnt_sbb_base_leaf sbb&lt;br/&gt;             FULL OUTER JOIN&lt;br/&gt;             (SELECT account_id, related_account_id,&lt;br/&gt;                     account_related_reason_cd, data_source_type_cd,&lt;br/&gt;                     record_stat&lt;br/&gt;                FROM chtr.t_account_related&lt;br/&gt;               WHERE account_related_reason_cd = &apos;LEAF&apos;) t_ar&lt;br/&gt;             ON sbb.account_id = t_ar.account_id&lt;br/&gt;           AND sbb.related_account_id = t_ar.related_account_id&lt;br/&gt;           AND t_ar.account_related_reason_cd = sbb.account_related_reason_cd&lt;br/&gt;             ;&lt;br/&gt;&lt;br/&gt;   TYPE t_cur_vnt_sbb_base_leaf IS TABLE OF cur_vnt_sbb_base_leaf%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_pt_vnt_sbb_base_leaf IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_vnt_sbb_base_bulk&lt;br/&gt;   IS&lt;br/&gt;      SELECT NVL (sbb.account_id, t_ar.account_id) AS account_id,&lt;br/&gt;             NVL (sbb.related_account_id,&lt;br/&gt;                  t_ar.related_account_id&lt;br/&gt;                 ) AS related_account_id,&lt;br/&gt;             NVL (t_ar.account_related_reason_cd,&lt;br/&gt;                  sbb.account_related_reason_cd&lt;br/&gt;                 ) account_related_reason_cd,&lt;br/&gt;             NVL (sbb.data_source_type_cd,&lt;br/&gt;                  t_ar.data_source_type_cd&lt;br/&gt;                 ) data_source_type_cd,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN sbb.account_id IS NULL&lt;br/&gt;                AND t_ar.account_id IS NOT NULL&lt;br/&gt;                   THEN &apos;D&apos;&lt;br/&gt;                ELSE &apos;A&apos;&lt;br/&gt;             END record_stat,&lt;br/&gt;             t_ar.record_stat AS ac_rel_record_stat,&lt;br/&gt;             t_ar.data_source_type_cd ac_rel_data_source_type_cd,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN sbb.account_id IS NOT NULL&lt;br/&gt;                AND t_ar.account_id IS NULL&lt;br/&gt;                   THEN &apos;I&apos;&lt;br/&gt;                ELSE &apos;U&apos;&lt;br/&gt;             END perform_action&lt;br/&gt;        FROM stg.vnt_sbb_base_bulk sbb&lt;br/&gt;             FULL OUTER JOIN&lt;br/&gt;             (SELECT account_id, related_account_id,&lt;br/&gt;                     account_related_reason_cd, data_source_type_cd,&lt;br/&gt;                     record_stat&lt;br/&gt;                FROM chtr.t_account_related&lt;br/&gt;               WHERE account_related_reason_cd = &apos;BULK&apos;) t_ar&lt;br/&gt;             ON sbb.account_id = t_ar.account_id&lt;br/&gt;           AND sbb.related_account_id = t_ar.related_account_id&lt;br/&gt;           AND t_ar.account_related_reason_cd = sbb.account_related_reason_cd&lt;br/&gt;             ;&lt;br/&gt;&lt;br/&gt;   TYPE t_cur_vnt_sbb_base_bulk IS TABLE OF cur_vnt_sbb_base_bulk%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_pt_vnt_sbb_base_bulk IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE insert_account (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_balance (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_bill_info (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_account (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_service_address (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_sbb_base_rec%ROWTYPE  --t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_account (&lt;br/&gt;      p_process_rec_i   IN       pkg_logging.t_process_rec,&lt;br/&gt;      p_source_key      IN       t_account_vantage_xref.sub_acct_num%TYPE,&lt;br/&gt;      p_account_id      OUT      t_account.account_id%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is to load Account Related details from the staging table as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name                     := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data                 t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr                  VARCHAR2 (1);                --t_ptr_tbl;&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_sbb_base_rec;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_sbb_base_rec&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               -- Insert account&lt;br/&gt;               insert_account (l_process_rec,&lt;br/&gt;                               l_cursor_data (i),&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               -- Insert account status&lt;br/&gt;               insert_account_status (l_process_rec,&lt;br/&gt;                                      l_cursor_data (i),&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;               -- Insert account_balance&lt;br/&gt;               insert_account_balance (l_process_rec,&lt;br/&gt;                                       l_cursor_data (i),&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;               -- Insert insert_account_bill_info&lt;br/&gt;               insert_account_bill_info (l_process_rec,&lt;br/&gt;                                         l_cursor_data (i),&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;               -- Associate the account to the party&lt;br/&gt;               insert_party_account (l_process_rec,&lt;br/&gt;                                     l_cursor_data (i),&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;               l_filter_ptr :=&lt;br/&gt;                     filter_service_address (l_process_rec, l_cursor_data (i));&lt;br/&gt;&lt;br/&gt;               IF (l_filter_ptr = &apos;Y&apos;)&lt;br/&gt;               THEN&lt;br/&gt;                  insert_account_address (l_process_rec,&lt;br/&gt;                                          l_cursor_data (i),&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               -- Update the staging rows with status&lt;br/&gt;               update_staging (l_process_rec,&lt;br/&gt;                               l_cursor_data (i),&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               -- individual record commit incorporated&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_ACCOUNT&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the target table &apos;T_ACCOUNT&apos;&lt;br/&gt;      ||                       as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name        := &apos;INSERT_ACCOUNT&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_account_id                     NUMBER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_insert_conunter                NUMBER;&lt;br/&gt;      l_update_conunter                NUMBER;&lt;br/&gt;      l_action_perform_rec_acct        stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_action_perform_rec_acct_xref   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_acct          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_modif_val_string_acct_xref     stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_account_nm                     t_account.account_nm%TYPE;&lt;br/&gt;      l_account_type_cd                t_account.account_type_cd%TYPE;&lt;br/&gt;      l_account_qualifier_cd           t_account.account_qualifier_cd%TYPE;&lt;br/&gt;      l_data_source_type_cd            t_account.data_source_type_cd%TYPE;&lt;br/&gt;      l_account_num                    t_account.account_num%TYPE;&lt;br/&gt;      l_account_open_dt                t_account.account_open_dt%TYPE;&lt;br/&gt;      l_account_close_dt               t_account.account_close_dt%TYPE;&lt;br/&gt;      l_modified_dttm                  t_account.modified_dttm%TYPE;&lt;br/&gt;      l_sub_acct_num                   t_account_vantage_xref.sub_acct_num%TYPE;&lt;br/&gt;      l_billing_station_id             t_account.billing_station_id%TYPE;&lt;br/&gt;      l_dunning_group_cd               t_account.dunning_group_cd%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_start_text&lt;br/&gt;                                || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_num&lt;br/&gt;                               );&lt;br/&gt;         l_action_perform_rec_acct := NULL;&lt;br/&gt;         l_action_perform_rec_acct_xref := NULL;&lt;br/&gt;         l_modif_val_string_acct := NULL;&lt;br/&gt;         l_modif_val_string_acct_xref := NULL;&lt;br/&gt;         l_table_key := NULL;&lt;br/&gt;         l_account_id := NULL;&lt;br/&gt;         l_billing_station_id := NULL;&lt;br/&gt;&lt;br/&gt;         IF (NOT get_account (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                              p_source_key         =&gt; p_cursor_data_io.account_num,&lt;br/&gt;                              p_account_id         =&gt; l_account_id&lt;br/&gt;                             )&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_account_id :=&lt;br/&gt;               da_account.ADD&lt;br/&gt;                  (process_rec                     =&gt; p_process_rec_i,&lt;br/&gt;                   data_source_type_cd             =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   account_num                     =&gt; p_cursor_data_io.account_num,&lt;br/&gt;                   account_nm                      =&gt; p_cursor_data_io.account_nm,&lt;br/&gt;                   account_open_dt                 =&gt; p_cursor_data_io.account_open_dt,&lt;br/&gt;                   account_close_dt                =&gt; p_cursor_data_io.account_close_dt,&lt;br/&gt;                   account_type_cd                 =&gt; p_cursor_data_io.account_type_cd,&lt;br/&gt;                   account_purpose_subtype_cd      =&gt; &apos;BLG&apos;,&lt;br/&gt;                   subaccount_ind                  =&gt; 0,&lt;br/&gt;                   account_qualifier_cd            =&gt; p_cursor_data_io.account_qualifier_cd,&lt;br/&gt;                   audit_user                      =&gt; p_audit_user_i,&lt;br/&gt;                   billing_station_id              =&gt; p_cursor_data_io.billing_station_id,&lt;br/&gt;                   dunning_group_cd                =&gt; p_cursor_data_io.dunning_group_sbb&lt;br/&gt;                  -- FIX For Adding Dunning Group&lt;br/&gt;                  );&lt;br/&gt;            l_action_perform_rec_acct := pkg_utility.c_recon_insert_perform;&lt;br/&gt;            da_account_vantage_xref.ADD&lt;br/&gt;                                (process_rec       =&gt; p_process_rec_i,&lt;br/&gt;                                 sub_acct_num      =&gt; p_cursor_data_io.account_num,&lt;br/&gt;                                 account_id        =&gt; l_account_id,&lt;br/&gt;                                 audit_user        =&gt; p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;            l_action_perform_rec_acct_xref :=&lt;br/&gt;                                            pkg_utility.c_recon_insert_perform;&lt;br/&gt;         ELSE&lt;br/&gt;            SELECT account_nm, account_type_cd, account_qualifier_cd,&lt;br/&gt;                   data_source_type_cd, account_num, account_open_dt,&lt;br/&gt;                   account_close_dt, modified_dttm,&lt;br/&gt;                   billing_station_id, dunning_group_cd&lt;br/&gt;              INTO l_account_nm, l_account_type_cd, l_account_qualifier_cd,&lt;br/&gt;                   l_data_source_type_cd, l_account_num, l_account_open_dt,&lt;br/&gt;                   l_account_close_dt, l_modified_dttm,&lt;br/&gt;                   l_billing_station_id, l_dunning_group_cd&lt;br/&gt;              FROM t_account&lt;br/&gt;             WHERE account_id = l_account_id;&lt;br/&gt;&lt;br/&gt;            IF (   (   NVL (l_account_nm, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.account_nm,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_account_type_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.account_type_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_account_qualifier_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.account_qualifier_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR l_data_source_type_cd &lt;&gt;&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd&lt;br/&gt;                    OR NVL (l_account_num, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.account_num,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_account_open_dt, pkg_utility.c_recon_null_date) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.account_open_dt,&lt;br/&gt;                               pkg_utility.c_recon_null_date&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_account_close_dt, pkg_utility.c_recon_null_date) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.account_close_dt,&lt;br/&gt;                               pkg_utility.c_recon_null_date&lt;br/&gt;                              )&lt;br/&gt;                    OR NVL (l_billing_station_id,&lt;br/&gt;                            pkg_utility.c_recon_null_number&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.billing_station_id,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              )&lt;br/&gt;                   )&lt;br/&gt;                OR     NVL (l_dunning_group_cd,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.dunning_group_sbb,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_account&lt;br/&gt;                  SET account_nm = p_cursor_data_io.account_nm,&lt;br/&gt;                      account_type_cd = p_cursor_data_io.account_type_cd,&lt;br/&gt;                      account_qualifier_cd =&lt;br/&gt;                                         p_cursor_data_io.account_qualifier_cd,&lt;br/&gt;                      data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      account_num = p_cursor_data_io.account_num,&lt;br/&gt;                      account_open_dt = p_cursor_data_io.account_open_dt,&lt;br/&gt;                      account_close_dt = p_cursor_data_io.account_close_dt,&lt;br/&gt;                      dunning_group_cd = p_cursor_data_io.dunning_group_sbb,&lt;br/&gt;                      billing_station_id = p_cursor_data_io.billing_station_id,&lt;br/&gt;                      record_stat = pkg_utility.c_record_active,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE account_id = l_account_id;&lt;br/&gt;&lt;br/&gt;               l_action_perform_rec_acct := pkg_utility.c_recon_update_perform;&lt;br/&gt;               l_modif_val_string_acct :=&lt;br/&gt;                     &apos;ACCOUNT_NM : (&apos;&lt;br/&gt;                  || l_account_nm&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.account_nm&lt;br/&gt;                  || &apos;)&apos;&lt;br/&gt;                  || &apos;, ACCOUNT_TYPE_CD : (&apos;&lt;br/&gt;                  || l_account_type_cd&lt;br/&gt;                  || &apos; =&gt;  &apos;&lt;br/&gt;                  || p_cursor_data_io.account_type_cd&lt;br/&gt;                  || &apos;)&apos;&lt;br/&gt;                  || &apos;, ACCOUNT_QUALIFIER_CD : (&apos;&lt;br/&gt;                  || l_account_qualifier_cd&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.account_qualifier_cd&lt;br/&gt;                  || &apos;)&apos;&lt;br/&gt;                  || &apos;, DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                  || l_data_source_type_cd&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                  || &apos;)&apos;&lt;br/&gt;                  || &apos;, ACCOUNT_NUM : (&apos;&lt;br/&gt;                  || l_account_num&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.account_num&lt;br/&gt;                  || &apos; )&apos;&lt;br/&gt;                  || &apos;, ACCOUNT_OPEN_DT : (&apos;&lt;br/&gt;                  || l_account_open_dt&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.account_open_dt&lt;br/&gt;                  || &apos;)&apos;&lt;br/&gt;                  || &apos;, ACCOUNT_CLOSE_DT : (&apos;&lt;br/&gt;                  || l_account_close_dt&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.account_close_dt&lt;br/&gt;                  || &apos;)&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (l_action_perform_rec_acct IN&lt;br/&gt;                (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                 pkg_utility.c_recon_update_perform&lt;br/&gt;                )&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_table_key :=&lt;br/&gt;                  &apos;ACCOUNT_ID = &apos;&lt;br/&gt;               || l_account_id&lt;br/&gt;               || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;               || p_cursor_data_io.account_num;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                   (p_process_rec_i,&lt;br/&gt;                                                    &apos;T_ACCOUNT&apos;,&lt;br/&gt;                                                    l_table_key,&lt;br/&gt;                                                    l_modif_val_string_acct,&lt;br/&gt;                                                    NULL,&lt;br/&gt;                                                    l_action_perform_rec_acct,&lt;br/&gt;                                                    p_audit_user_i&lt;br/&gt;                                                   );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (l_action_perform_rec_acct_xref IN&lt;br/&gt;                (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                 pkg_utility.c_recon_update_perform&lt;br/&gt;                )&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_table_key :=&lt;br/&gt;                  &apos;ACCOUNT_ID = &apos;&lt;br/&gt;               || l_account_id&lt;br/&gt;               || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;               || p_cursor_data_io.account_num;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                              (p_process_rec_i,&lt;br/&gt;                                               &apos;T_ACCOUNT_VANTAGE_XREF&apos;,&lt;br/&gt;                                               l_table_key,&lt;br/&gt;                                               l_modif_val_string_acct_xref,&lt;br/&gt;                                               NULL,&lt;br/&gt;                                               l_action_perform_rec_acct_xref,&lt;br/&gt;                                               p_audit_user_i&lt;br/&gt;                                              );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         p_cursor_data_io.account_id := l_account_id;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_num&lt;br/&gt;                                || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_id&lt;br/&gt;                               );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_num&lt;br/&gt;                                       || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_id&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_account;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_account (&lt;br/&gt;      p_process_rec_i   IN       pkg_logging.t_process_rec,&lt;br/&gt;      p_source_key      IN       t_account_vantage_xref.sub_acct_num%TYPE,&lt;br/&gt;      p_account_id      OUT      t_account.account_id%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : GET_ACCOUNT&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for gettin the account id from the passed passed account number value&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_ACCOUNT&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos; , ACCOUNT_NUM = &apos;&lt;br/&gt;                             || p_source_key&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT a.account_id&lt;br/&gt;        INTO p_account_id&lt;br/&gt;        FROM t_account_vantage_xref x INNER JOIN t_account a&lt;br/&gt;             ON a.account_id = x.account_id&lt;br/&gt;       --AND a.record_stat = pkg_utility.c_record_active&lt;br/&gt;      WHERE  x.sub_acct_num = p_source_key;&lt;br/&gt;&lt;br/&gt;      --AND x.record_stat = pkg_utility.c_record_active;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                             || p_source_key&lt;br/&gt;                             || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                             || p_account_id&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                    || p_source_key&lt;br/&gt;                                    || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                    || p_account_id&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_account;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i                     VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_ACCOUNT_STATUS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the&lt;br/&gt;      ||                       target table &apos;T_ACCOUNT_STATUS&apos;  as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                    t_unit_name   := &apos;INSERT_ACCOUNT_STATUS&apos;;&lt;br/&gt;      l_errors                       NUMBER;&lt;br/&gt;      l_coll_idx                     PLS_INTEGER;&lt;br/&gt;      l_systimestamp                 TIMESTAMP;&lt;br/&gt;      l_exist_count_conn             NUMBER;&lt;br/&gt;      l_action_perform_record_conn   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_tgt_account_status_cd_conn   t_account_status.account_status_cd%TYPE;&lt;br/&gt;      l_modif_val_string_conn        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_conn       t_account_status.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_dlnq             NUMBER;&lt;br/&gt;      l_action_perform_record_dlnq   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_tgt_account_status_cd_dlnq   t_account_status.account_status_cd%TYPE;&lt;br/&gt;      l_modif_val_string_dlnq        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_dlnq       t_account_status.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_mony             NUMBER;&lt;br/&gt;      l_action_perform_record_mony   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_tgt_account_status_cd_mony   t_account_status.account_status_cd%TYPE;&lt;br/&gt;      l_modif_val_string_mony        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_mony       t_account_status.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_pmt              NUMBER;&lt;br/&gt;      l_action_perform_record_pmt    stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_tgt_account_status_cd_pmt    t_account_status.account_status_cd%TYPE;&lt;br/&gt;      l_modif_val_string_pmt         stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_pmt        t_account_status.modified_dttm%TYPE;&lt;br/&gt;      l_table_key                    stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                  );&lt;br/&gt;            l_exist_count_conn := 1;&lt;br/&gt;            l_action_perform_record_conn := NULL;&lt;br/&gt;            l_modif_val_string_conn := NULL;&lt;br/&gt;            l_tgt_account_status_cd_conn := NULL;&lt;br/&gt;            l_tgt_modified_dttm_conn := NULL;&lt;br/&gt;            l_exist_count_dlnq := 1;&lt;br/&gt;            l_action_perform_record_dlnq := NULL;&lt;br/&gt;            l_modif_val_string_dlnq := NULL;&lt;br/&gt;            l_tgt_account_status_cd_dlnq := NULL;&lt;br/&gt;            l_tgt_modified_dttm_dlnq := NULL;&lt;br/&gt;            l_exist_count_mony := 1;&lt;br/&gt;            l_action_perform_record_mony := NULL;&lt;br/&gt;            l_modif_val_string_mony := NULL;&lt;br/&gt;            l_tgt_account_status_cd_mony := NULL;&lt;br/&gt;            l_tgt_modified_dttm_mony := NULL;&lt;br/&gt;            l_exist_count_pmt := 1;&lt;br/&gt;            l_action_perform_record_pmt := NULL;&lt;br/&gt;            l_modif_val_string_pmt := NULL;&lt;br/&gt;            l_tgt_account_status_cd_pmt := NULL;&lt;br/&gt;            l_tgt_modified_dttm_pmt := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_status_cd, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_status_cd_conn, l_tgt_modified_dttm_conn&lt;br/&gt;                 FROM t_account_status a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_status_type_cd = &apos;CONN&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_conn := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_status_cd, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_status_cd_dlnq, l_tgt_modified_dttm_dlnq&lt;br/&gt;                 FROM t_account_status a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_status_type_cd = &apos;DLNQ&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_dlnq := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_status_cd, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_status_cd_mony, l_tgt_modified_dttm_mony&lt;br/&gt;                 FROM t_account_status a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_status_type_cd = &apos;MONY&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_mony := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_status_cd, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_status_cd_pmt, l_tgt_modified_dttm_pmt&lt;br/&gt;                 FROM t_account_status a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_status_type_cd = &apos;PMT&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_pmt := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count_conn &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_status_cd_conn,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.conn_account_status_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_conn,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_status&lt;br/&gt;                     SET account_status_cd =&lt;br/&gt;                                       p_cursor_data_io.conn_account_status_cd,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_status_type_cd = &apos;CONN&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_conn :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_conn :=&lt;br/&gt;                        &apos;ACCOUNT_STATUS_CD : (&apos;&lt;br/&gt;                     || l_tgt_account_status_cd_conn&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.conn_account_status_cd&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            --UPDATE t_account_status&lt;br/&gt;            --   SET account_status_cd = p_cursor_data_io (i).conn_account_status_cd,&lt;br/&gt;            --       record_stat = &apos;A&apos;,&lt;br/&gt;            --       modified_dttm = l_systimestamp,&lt;br/&gt;            --       modified_by = p_audit_user_i&lt;br/&gt;            -- WHERE account_id = p_cursor_data_io (i).account_id&lt;br/&gt;            --   AND account_status_type_cd = &apos;CONN&apos;&lt;br/&gt;            --   AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time&lt;br/&gt;            --   AND NVL (account_status_cd, pkg_utility.c_recon_null_string) &lt;&gt; NVL (p_cursor_data_io (i).conn_account_status_cd, pkg_utility.c_recon_null_string);&lt;br/&gt;&lt;br/&gt;            --IF (SQL%ROWCOUNT &gt; 0)&lt;br/&gt;            --THEN&lt;br/&gt;            --   l_action_perform_record_conn :=&lt;br/&gt;            --               --             pkg_utility.c_recon_update_perform;&lt;br/&gt;            --   l_modif_val_string_conn :=&lt;br/&gt;            --         &apos;ACCOUNT_STATUS_CD : (&apos;&lt;br/&gt;            --      || l_tgt_account_status_cd_conn&lt;br/&gt;            --      || &apos; =&gt; &apos;&lt;br/&gt;            --      || p_cursor_data_io (i).conn_account_status_cd&lt;br/&gt;            --      || &apos; )&apos;;&lt;br/&gt;            --END IF;&lt;br/&gt;            ELSIF (l_exist_count_conn = 0)&lt;br/&gt;            THEN&lt;br/&gt;               l_action_perform_record_conn :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_status.ADD&lt;br/&gt;                  (process_rec                 =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                  =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   account_status_type_cd      =&gt; &apos;CONN&apos;,&lt;br/&gt;                   account_status_cd           =&gt; p_cursor_data_io.conn_account_status_cd,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count_dlnq &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (&lt;br/&gt;                        --  NVL (l_tgt_account_status_cd_dlnq, pkg_utility.c_recon_null_string) &lt;&gt; NVL (p_cursor_data_io(i).conn_account_status_cd, pkg_utility.c_recon_null_string)&lt;br/&gt;                        NVL (l_tgt_account_status_cd_dlnq,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.dlnq_account_status_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_dlnq,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_status&lt;br/&gt;                     SET account_status_cd =&lt;br/&gt;                                       p_cursor_data_io.dlnq_account_status_cd,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_status_type_cd = &apos;DLNQ&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_dlnq :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_dlnq :=&lt;br/&gt;                        &apos;ACCOUNT_STATUS_CD : (&apos;&lt;br/&gt;                     || l_tgt_account_status_cd_dlnq&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.dlnq_account_status_cd&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            --UPDATE t_account_status&lt;br/&gt;            --   SET account_status_cd = p_cursor_data_io (i).dlnq_account_status_cd,&lt;br/&gt;            --       record_stat = &apos;A&apos;,&lt;br/&gt;            --       modified_dttm = l_systimestamp,&lt;br/&gt;            --       modified_by = p_audit_user_i&lt;br/&gt;            -- WHERE account_id = p_cursor_data_io (i).account_id&lt;br/&gt;            --   AND account_status_type_cd = &apos;DLNQ&apos;&lt;br/&gt;            --   AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time&lt;br/&gt;            --   AND NVL (account_status_cd, pkg_utility.c_recon_null_string) &lt;&gt; NVL (p_cursor_data_io (i).dlnq_account_status_cd, pkg_utility.c_recon_null_string);&lt;br/&gt;&lt;br/&gt;            --IF (SQL%ROWCOUNT &gt; 0)&lt;br/&gt;            --THEN&lt;br/&gt;            --   l_action_perform_record_dlnq :=&lt;br/&gt;            --               --             pkg_utility.c_recon_update_perform;&lt;br/&gt;            --   l_modif_val_string_dlnq :=&lt;br/&gt;            --         &apos;ACCOUNT_STATUS_CD : (&apos;&lt;br/&gt;            --      || l_tgt_account_status_cd_dlnq&lt;br/&gt;            --      || &apos; =&gt; &apos;&lt;br/&gt;            --      || p_cursor_data_io (i).dlnq_account_status_cd&lt;br/&gt;            --      || &apos; )&apos;;&lt;br/&gt;            --END IF;&lt;br/&gt;            ELSIF (l_exist_count_dlnq = 0)&lt;br/&gt;            THEN&lt;br/&gt;               l_action_perform_record_dlnq :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_status.ADD&lt;br/&gt;                  (process_rec                 =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                  =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   account_status_type_cd      =&gt; &apos;DLNQ&apos;,&lt;br/&gt;                   account_status_cd           =&gt; p_cursor_data_io.dlnq_account_status_cd,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count_mony &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (&lt;br/&gt;                        -- NVL (l_tgt_account_status_cd_mony, pkg_utility.c_recon_null_string) &lt;&gt; NVL (p_cursor_data_io(i).conn_account_status_cd, pkg_utility.c_recon_null_string)&lt;br/&gt;                        NVL (l_tgt_account_status_cd_mony,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.mony_account_status_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_mony,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_status&lt;br/&gt;                     SET account_status_cd =&lt;br/&gt;                                       p_cursor_data_io.mony_account_status_cd,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_status_type_cd = &apos;MONY&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_mony :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_mony :=&lt;br/&gt;                        &apos;ACCOUNT_STATUS_CD : (&apos;&lt;br/&gt;                     || l_tgt_account_status_cd_mony&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.mony_account_status_cd&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            --UPDATE t_account_status&lt;br/&gt;            --   SET account_status_cd = p_cursor_data_io (i).mony_account_status_cd,&lt;br/&gt;            --       record_stat = pkg_utility.c_record_active,&lt;br/&gt;            --       modified_dttm = l_systimestamp,&lt;br/&gt;            --       modified_by = p_audit_user_i&lt;br/&gt;            -- WHERE account_id = p_cursor_data_io (i).account_id&lt;br/&gt;            --   AND account_status_type_cd = &apos;MONY&apos;&lt;br/&gt;            --   AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time&lt;br/&gt;            --   AND NVL (account_status_cd, pkg_utility.c_recon_null_string) &lt;&gt; NVL (p_cursor_data_io (i).mony_account_status_cd, pkg_utility.c_recon_null_string);&lt;br/&gt;&lt;br/&gt;            --IF (SQL%ROWCOUNT &gt; 0)&lt;br/&gt;            --THEN&lt;br/&gt;            --   l_action_perform_record_mony := pkg_utility.c_recon_update_perform;&lt;br/&gt;            --   l_modif_val_string_mony := &apos;ACCOUNT_STATUS_CD : (&apos; || l_tgt_account_status_cd_mony || &apos; =&gt; &apos;|| p_cursor_data_io (i).mony_account_status_cd|| &apos; )&apos;;&lt;br/&gt;            --END IF;&lt;br/&gt;            ELSIF (l_exist_count_mony = 0)&lt;br/&gt;            THEN&lt;br/&gt;               l_action_perform_record_mony :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_status.ADD&lt;br/&gt;                  (process_rec                 =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                  =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   account_status_type_cd      =&gt; &apos;MONY&apos;,&lt;br/&gt;                   account_status_cd           =&gt; p_cursor_data_io.mony_account_status_cd,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count_pmt &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (&lt;br/&gt;                        -- NVL (l_tgt_account_status_cd_pmt, pkg_utility.c_recon_null_string) &lt;&gt; NVL (p_cursor_data_io(i).conn_account_status_cd, pkg_utility.c_recon_null_string)&lt;br/&gt;                        NVL (l_tgt_account_status_cd_pmt,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.pmt_account_status_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_pmt,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_status&lt;br/&gt;                     SET account_status_cd =&lt;br/&gt;                                        p_cursor_data_io.pmt_account_status_cd,&lt;br/&gt;                         record_stat = &apos;A&apos;,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_status_type_cd = &apos;PMT&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_pmt :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_pmt :=&lt;br/&gt;                        &apos;ACCOUNT_STATUS_CD : (&apos;&lt;br/&gt;                     || l_tgt_account_status_cd_pmt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.pmt_account_status_cd&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            --UPDATE t_account_status&lt;br/&gt;            --   SET account_status_cd = p_cursor_data_io (i).pmt_account_status_cd,&lt;br/&gt;            --       record_stat = &apos;A&apos;,&lt;br/&gt;            --       modified_dttm = l_systimestamp,&lt;br/&gt;            --       modified_by = p_audit_user_i&lt;br/&gt;            -- WHERE account_id = p_cursor_data_io (i).account_id&lt;br/&gt;            --   AND account_status_type_cd = &apos;PMT&apos;&lt;br/&gt;            --   AND NVL (modified_dttm, pkg_utility.c_recon_null_date) &lt; l_current_recon_start_time&lt;br/&gt;            --   AND NVL (account_status_cd, pkg_utility.c_recon_null_string) &lt;&gt; NVL (p_cursor_data_io (i).pmt_account_status_cd, pkg_utility.c_recon_null_string);&lt;br/&gt;&lt;br/&gt;            --IF (SQL%ROWCOUNT &gt; 0)&lt;br/&gt;            --THEN&lt;br/&gt;            --   l_action_perform_record_pmt := pkg_utility.c_recon_update_perform;&lt;br/&gt;            --   l_modif_val_string_pmt := &apos;ACCOUNT_STATUS_CD : (&apos; || l_tgt_account_status_cd_pmt || &apos; =&gt; &apos; || p_cursor_data_io (i).pmt_account_status_cd|| &apos; )&apos;;&lt;br/&gt;            --END IF;&lt;br/&gt;            ELSIF (l_exist_count_pmt = 0)&lt;br/&gt;            THEN&lt;br/&gt;               l_action_perform_record_pmt :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_status.ADD&lt;br/&gt;                  (process_rec                 =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                  =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   account_status_type_cd      =&gt; &apos;PMT&apos;,&lt;br/&gt;                   account_status_cd           =&gt; p_cursor_data_io.pmt_account_status_cd,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_conn IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_STATUS_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;CONN&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_STATUS&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_conn,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_conn,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_dlnq IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_STATUS_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;DLNQ&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_STATUS&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_dlnq,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_dlnq,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_mony IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_STATUS_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;MONY&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_STATUS&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_mony,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_mony,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_pmt IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_STATUS_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;PMT&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                 (p_process_rec_i,&lt;br/&gt;                                                  &apos;T_ACCOUNT_STATUS&apos;,&lt;br/&gt;                                                  l_table_key,&lt;br/&gt;                                                  l_modif_val_string_pmt,&lt;br/&gt;                                                  NULL,&lt;br/&gt;                                                  l_action_perform_record_pmt,&lt;br/&gt;                                                  p_audit_user_i&lt;br/&gt;                                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                  );&lt;br/&gt;         --COMMIT;  -- Commented on 16 Feb 2015&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_num&lt;br/&gt;                                       || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_id&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_account_status;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_balance (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;        /****************************************************************************************************************&lt;br/&gt;        ||  SubProgram Name    : INSERT_ACCOUNT_BALANCE&lt;br/&gt;        ||  Estimated Run Time :&lt;br/&gt;        ||  Description        : This is for loading Account Related details specifically into the target table&lt;br/&gt;        ||                       &apos;T_ACCOUNT_BALANCE&apos;  as part of Reconciliation&lt;br/&gt;        ******************************************************************************************************************/&lt;br/&gt;      --Declaring local Variables&lt;br/&gt;      l_proc_name                      VARCHAR2 (30)&lt;br/&gt;                                                  := &apos;INSERT_ACCOUNT_BALANCE&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_exist_count                    NUMBER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_exist_count_cur                NUMBER;&lt;br/&gt;      l_action_perform_record_cur      stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_cur           stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_amt_cur    t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_cur          t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_past               NUMBER;&lt;br/&gt;      l_action_perform_record_past     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_past          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_amt_past   t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_past         t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_exist_count_ppvl               NUMBER;&lt;br/&gt;      l_action_perform_record_ppvl     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_ppvl          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_ppvl       t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_ppvl         t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_ppvb               NUMBER;&lt;br/&gt;      l_action_perform_record_ppvb     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_ppvb          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_ppvb       t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_ppvb         t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_0dy                NUMBER;&lt;br/&gt;      l_action_perform_record_0dy      stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_0dy           stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_0dy        t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_0dy          t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_30dy               NUMBER;&lt;br/&gt;      l_action_perform_record_30dy     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_30dy          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_30dy       t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_30dy         t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_60dy               NUMBER;&lt;br/&gt;      l_action_perform_record_60dy     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_60dy          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_60dy       t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_60dy         t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_90dy               NUMBER;&lt;br/&gt;      l_action_perform_record_90dy     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_90dy          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_90dy       t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_90dy         t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_120dy              NUMBER;&lt;br/&gt;      l_action_perform_record_120dy    stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_120dy         stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_120dy      t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_120dy        t_account_balance.modified_dttm%TYPE;&lt;br/&gt;      l_exist_count_150dy              NUMBER;&lt;br/&gt;      l_action_perform_record_150dy    stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_150dy         stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_tgt_account_balance_150dy      t_account_balance.account_balance_amt%TYPE;&lt;br/&gt;      l_tgt_modified_dttm_150dy        t_account_balance.modified_dttm%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                  );&lt;br/&gt;            l_exist_count_cur := 1;&lt;br/&gt;            l_action_perform_record_cur := NULL;&lt;br/&gt;            l_modif_val_string_cur := NULL;&lt;br/&gt;            l_tgt_account_balance_amt_cur := NULL;&lt;br/&gt;            l_tgt_modified_dttm_cur := NULL;&lt;br/&gt;            l_exist_count_past := 1;&lt;br/&gt;            l_action_perform_record_past := NULL;&lt;br/&gt;            l_modif_val_string_past := NULL;&lt;br/&gt;            l_tgt_account_balance_amt_past := NULL;&lt;br/&gt;            l_tgt_modified_dttm_past := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_exist_count_ppvl := 1;&lt;br/&gt;            l_action_perform_record_ppvl := NULL;&lt;br/&gt;            l_modif_val_string_ppvl := NULL;&lt;br/&gt;            l_tgt_account_balance_ppvl := NULL;&lt;br/&gt;            l_tgt_modified_dttm_ppvl := NULL;&lt;br/&gt;            l_exist_count_ppvb := 1;&lt;br/&gt;            l_action_perform_record_ppvb := NULL;&lt;br/&gt;            l_modif_val_string_ppvb := NULL;&lt;br/&gt;            l_tgt_account_balance_ppvb := NULL;&lt;br/&gt;            l_tgt_modified_dttm_ppvb := NULL;&lt;br/&gt;            l_exist_count_0dy := 1;&lt;br/&gt;            l_action_perform_record_0dy := NULL;&lt;br/&gt;            l_modif_val_string_0dy := NULL;&lt;br/&gt;            l_tgt_account_balance_0dy := NULL;&lt;br/&gt;            l_tgt_modified_dttm_0dy := NULL;&lt;br/&gt;            l_exist_count_30dy := 1;&lt;br/&gt;            l_action_perform_record_30dy := NULL;&lt;br/&gt;            l_modif_val_string_30dy := NULL;&lt;br/&gt;            l_tgt_account_balance_30dy := NULL;&lt;br/&gt;            l_tgt_modified_dttm_30dy := NULL;&lt;br/&gt;            l_exist_count_60dy := 1;&lt;br/&gt;            l_action_perform_record_60dy := NULL;&lt;br/&gt;            l_modif_val_string_60dy := NULL;&lt;br/&gt;            l_tgt_account_balance_60dy := NULL;&lt;br/&gt;            l_tgt_modified_dttm_60dy := NULL;&lt;br/&gt;            l_exist_count_90dy := 1;&lt;br/&gt;            l_action_perform_record_90dy := NULL;&lt;br/&gt;            l_modif_val_string_90dy := NULL;&lt;br/&gt;            l_tgt_account_balance_90dy := NULL;&lt;br/&gt;            l_tgt_modified_dttm_90dy := NULL;&lt;br/&gt;            l_exist_count_120dy := 1;&lt;br/&gt;            l_action_perform_record_120dy := NULL;&lt;br/&gt;            l_modif_val_string_120dy := NULL;&lt;br/&gt;            l_tgt_account_balance_120dy := NULL;&lt;br/&gt;            l_tgt_modified_dttm_120dy := NULL;&lt;br/&gt;            l_exist_count_150dy := 1;&lt;br/&gt;            l_action_perform_record_150dy := NULL;&lt;br/&gt;            l_modif_val_string_150dy := NULL;&lt;br/&gt;            l_tgt_account_balance_150dy := NULL;&lt;br/&gt;            l_tgt_modified_dttm_150dy := NULL;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for CUR&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_amt_cur, l_tgt_modified_dttm_cur&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;CUR&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_cur := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for PAST&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt,&lt;br/&gt;                      modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_amt_past,&lt;br/&gt;                      l_tgt_modified_dttm_past&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;PAST&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_past := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for PPVL&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_ppvl, l_tgt_modified_dttm_ppvl&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;PPVL&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_ppvl := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for PPVB&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_ppvb, l_tgt_modified_dttm_ppvb&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;PPVB&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_ppvb := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for 0DY&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_0dy, l_tgt_modified_dttm_0dy&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;0DY&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_0dy := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for 30DY&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_30dy, l_tgt_modified_dttm_30dy&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;30DY&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_30dy := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for 60DY&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_60dy, l_tgt_modified_dttm_60dy&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;60DY&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_60dy := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for 90DY&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_90dy, l_tgt_modified_dttm_90dy&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;90DY&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_90dy := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for 120DY&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_120dy, l_tgt_modified_dttm_120dy&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;120DY&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_120dy := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Getting current account_balance_amt,modified_dttm for 150DY&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT account_balance_amt, modified_dttm&lt;br/&gt;                 INTO l_tgt_account_balance_150dy, l_tgt_modified_dttm_150dy&lt;br/&gt;                 FROM t_account_balance a&lt;br/&gt;                WHERE a.account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND a.account_balance_type_cd = &apos;150DY&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count_150dy := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_cur &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_amt_cur,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.account_balance_cur_amt,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_cur,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt =&lt;br/&gt;                                      p_cursor_data_io.account_balance_cur_amt,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;CUR&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_cur :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_cur :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_amt_cur&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.account_balance_cur_amt&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_cur :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                  (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   account_balance_type_cd      =&gt; &apos;CUR&apos;,&lt;br/&gt;                   account_balance_amt          =&gt; p_cursor_data_io.account_balance_cur_amt,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_past &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_amt_past,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.account_balance_past_amt,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_past,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt =&lt;br/&gt;                                     p_cursor_data_io.account_balance_past_amt,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;PAST&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_past :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_past :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_amt_past&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.account_balance_past_amt&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_past :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                  (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   account_balance_type_cd      =&gt; &apos;PAST&apos;,&lt;br/&gt;                   account_balance_amt          =&gt; p_cursor_data_io.account_balance_past_amt,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_ppvl &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_ppvl,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.account_balance_ppvl_amt,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_ppvl,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt =&lt;br/&gt;                                     p_cursor_data_io.account_balance_ppvl_amt,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;PPVL&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_ppvl :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_ppvl :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_ppvl&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.account_balance_ppvl_amt&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_ppvl :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                  (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   account_balance_type_cd      =&gt; &apos;PPVL&apos;,&lt;br/&gt;                   account_balance_amt          =&gt; p_cursor_data_io.account_balance_ppvl_amt,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            --If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_ppvb &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_ppvb,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.account_balance_ppvb_amt,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_ppvb,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt =&lt;br/&gt;                                     p_cursor_data_io.account_balance_ppvb_amt,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;PPVB&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_ppvb :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_ppvb :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_ppvb&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.account_balance_ppvb_amt&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_ppvb :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                  (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   account_balance_type_cd      =&gt; &apos;PPVB&apos;,&lt;br/&gt;                   account_balance_amt          =&gt; p_cursor_data_io.account_balance_ppvb_amt,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_0dy &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_0dy,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.currentcharge,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_0dy,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt = p_cursor_data_io.currentcharge,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;0DY&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_0dy :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_0dy :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_0dy&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.currentcharge&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_0dy :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                      (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                       account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                       account_balance_type_cd      =&gt; &apos;0DY&apos;,&lt;br/&gt;                       account_balance_amt          =&gt; p_cursor_data_io.currentcharge,&lt;br/&gt;                       audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_30dy &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_30dy,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.thirty_day,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_30dy,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt = p_cursor_data_io.thirty_day,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;30DY&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_30dy :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_30dy :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_30dy&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.thirty_day&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_30dy :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                         (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                          account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                          account_balance_type_cd      =&gt; &apos;30DY&apos;,&lt;br/&gt;                          account_balance_amt          =&gt; p_cursor_data_io.thirty_day,&lt;br/&gt;                          audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_60dy &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_60dy,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.sixty_day,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_60dy,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt = p_cursor_data_io.sixty_day,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;60DY&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_60dy :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_60dy :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_60dy&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.sixty_day&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_60dy :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                          (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                           account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                           account_balance_type_cd      =&gt; &apos;60DY&apos;,&lt;br/&gt;                           account_balance_amt          =&gt; p_cursor_data_io.sixty_day,&lt;br/&gt;                           audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_90dy &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_90dy,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.ninty_day,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_90dy,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt = p_cursor_data_io.ninty_day,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;90DY&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_90dy :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_90dy :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_90dy&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.ninty_day&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_90dy :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                          (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                           account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                           account_balance_type_cd      =&gt; &apos;90DY&apos;,&lt;br/&gt;                           account_balance_amt          =&gt; p_cursor_data_io.ninty_day,&lt;br/&gt;                           audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_120dy &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_120dy,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.onetwenty_day,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_120dy,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt = p_cursor_data_io.onetwenty_day,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;120DY&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_120dy :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_120dy :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_120dy&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.onetwenty_day&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_120dy :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                      (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                       account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                       account_balance_type_cd      =&gt; &apos;120DY&apos;,&lt;br/&gt;                       account_balance_amt          =&gt; p_cursor_data_io.onetwenty_day,&lt;br/&gt;                       audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- -- If  &apos;select into&apos; record count is greater than 0 and  existing value is not equal to  fetched values then Update else Insert&lt;br/&gt;            IF (l_exist_count_150dy &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_account_balance_150dy,&lt;br/&gt;                             pkg_utility.c_recon_null_number&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.onefifty_day,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_tgt_modified_dttm_150dy,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_balance&lt;br/&gt;                     SET account_balance_amt = p_cursor_data_io.onefifty_day,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND account_balance_type_cd = &apos;150DY&apos;;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_150dy :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_150dy :=&lt;br/&gt;                        &apos;ACCOUNT_BALANCE_AMT : (&apos;&lt;br/&gt;                     || l_tgt_account_balance_150dy&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.onefifty_day&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_150dy :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_balance.ADD&lt;br/&gt;                       (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                        account_id                   =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                        account_balance_type_cd      =&gt; &apos;150DY&apos;,&lt;br/&gt;                        account_balance_amt          =&gt; p_cursor_data_io.onefifty_day,&lt;br/&gt;                        audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                       );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_cur IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;CUR&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                 (p_process_rec_i,&lt;br/&gt;                                                  &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                  l_table_key,&lt;br/&gt;                                                  l_modif_val_string_cur,&lt;br/&gt;                                                  NULL,&lt;br/&gt;                                                  l_action_perform_record_cur,&lt;br/&gt;                                                  p_audit_user_i&lt;br/&gt;                                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_past IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;PAST&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_past,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_past,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_ppvl IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;PPVL&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_ppvl,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_ppvl,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_ppvb IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;PPVB&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_ppvb,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_ppvb,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_0dy IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;0DY&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                 (p_process_rec_i,&lt;br/&gt;                                                  &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                  l_table_key,&lt;br/&gt;                                                  l_modif_val_string_0dy,&lt;br/&gt;                                                  NULL,&lt;br/&gt;                                                  l_action_perform_record_0dy,&lt;br/&gt;                                                  p_audit_user_i&lt;br/&gt;                                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_30dy IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;30DY&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_30dy,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_30dy,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_60dy IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;60DY&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_60dy,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_60dy,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_90dy IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;90DY&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                 l_table_key,&lt;br/&gt;                                                 l_modif_val_string_90dy,&lt;br/&gt;                                                 NULL,&lt;br/&gt;                                                 l_action_perform_record_90dy,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_120dy IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;120DY&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                               (p_process_rec_i,&lt;br/&gt;                                                &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                l_table_key,&lt;br/&gt;                                                l_modif_val_string_120dy,&lt;br/&gt;                                                NULL,&lt;br/&gt;                                                l_action_perform_record_120dy,&lt;br/&gt;                                                p_audit_user_i&lt;br/&gt;                                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_150dy IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ACCOUNT_BALANCE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;150DY&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                               (p_process_rec_i,&lt;br/&gt;                                                &apos;T_ACCOUNT_BALANCE&apos;,&lt;br/&gt;                                                l_table_key,&lt;br/&gt;                                                l_modif_val_string_150dy,&lt;br/&gt;                                                NULL,&lt;br/&gt;                                                l_action_perform_record_150dy,&lt;br/&gt;                                                p_audit_user_i&lt;br/&gt;                                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                  );&lt;br/&gt;         --COMMIT;   -- Commented on 16 Feb 2015&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_num&lt;br/&gt;                                       || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_id&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_account_balance;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_account (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_PARTY_ACCOUNT&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the target table&lt;br/&gt;      ||                       &apos;T_PARTY_ACCOUNT&apos;  as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name  := &apos;INSERT_PARTY_ACCOUNT&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_exist_count                    NUMBER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_party_id                       t_party_account.party_id%TYPE;&lt;br/&gt;      l_account_id                     t_party_account.account_id%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_record_stat                    t_party_account.record_stat%TYPE;&lt;br/&gt;      l_data_source_type_cd            t_party_account.data_source_type_cd%TYPE;&lt;br/&gt;      l_modified_dttm                  t_party_account.modified_dttm%TYPE;&lt;br/&gt;      l_modif_val_string_acct          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_action_perform_rec_acct_xref   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                   || &apos; , PARTY_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_id&lt;br/&gt;                                  );&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_party_id := NULL;&lt;br/&gt;            l_account_id := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_account_id := NULL;&lt;br/&gt;            l_data_source_type_cd := NULL;&lt;br/&gt;            l_record_stat := NULL;&lt;br/&gt;&lt;br/&gt;            -- Inactivate existing other responsible party if any&lt;br/&gt;            UPDATE t_party_account&lt;br/&gt;               SET record_stat = pkg_utility.c_record_delete,&lt;br/&gt;                   modified_dttm = l_systimestamp,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;               AND party_account_role_cd =&lt;br/&gt;                                      pkg_utility.c_party_account_role_cd_resp&lt;br/&gt;               AND party_id &lt;&gt; p_cursor_data_io.customer_id&lt;br/&gt;               AND record_stat = pkg_utility.c_record_active;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT party_id, account_id, data_source_type_cd,&lt;br/&gt;                      record_stat, modified_dttm&lt;br/&gt;                 INTO l_party_id, l_account_id, l_data_source_type_cd,&lt;br/&gt;                      l_record_stat, l_modified_dttm&lt;br/&gt;                 FROM t_party_account&lt;br/&gt;                WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND party_id = p_cursor_data_io.customer_id&lt;br/&gt;                  AND party_account_role_cd =&lt;br/&gt;                                      pkg_utility.c_party_account_role_cd_resp;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count = 0)&lt;br/&gt;            THEN&lt;br/&gt;               da_party_account.ADD&lt;br/&gt;                  (process_rec                =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                 =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   party_id                   =&gt; p_cursor_data_io.customer_id,&lt;br/&gt;                   party_account_role_cd      =&gt; pkg_utility.c_party_account_role_cd_resp,&lt;br/&gt;                   data_source_type_cd        =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;PARTY_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_id&lt;br/&gt;                  || &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                          (p_process_rec_i,&lt;br/&gt;                                           &apos;T_PARTY_ACCOUNT&apos;,&lt;br/&gt;                                           l_table_key,&lt;br/&gt;                                           NULL,&lt;br/&gt;                                           NULL,&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform,&lt;br/&gt;                                           p_audit_user_i&lt;br/&gt;                                          );&lt;br/&gt;            ELSE&lt;br/&gt;               IF     (   NVL (l_data_source_type_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                       OR NVL (l_record_stat, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                                                   pkg_utility.c_record_active&lt;br/&gt;                       )&lt;br/&gt;                  AND (NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                      )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_party_account&lt;br/&gt;                     SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                     AND party_id = p_cursor_data_io.customer_id&lt;br/&gt;                     AND party_account_role_cd =&lt;br/&gt;                                      pkg_utility.c_party_account_role_cd_resp;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_rec_acct_xref :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string_acct :=&lt;br/&gt;                        &apos;ACCOUNT_ID : (&apos;&lt;br/&gt;                     || l_account_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.account_id&lt;br/&gt;                     || &apos;)&apos;&lt;br/&gt;                     || &apos;, DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                     || l_data_source_type_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                     || &apos;)&apos;&lt;br/&gt;                     || &apos;, RECORD_STAT : (&apos;&lt;br/&gt;                     || l_record_stat&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || pkg_utility.c_record_active&lt;br/&gt;                     || &apos;)&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_rec_acct_xref IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;PARTY_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_id&lt;br/&gt;                  || &apos;PARTY_ACCOUNT_ROLE_CD = &apos;&lt;br/&gt;                  || pkg_utility.c_party_account_role_cd_resp;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                              (p_process_rec_i,&lt;br/&gt;                                               &apos;T_PARTY_ACCOUNT&apos;,&lt;br/&gt;                                               l_table_key,&lt;br/&gt;                                               l_modif_val_string_acct,&lt;br/&gt;                                               NULL,&lt;br/&gt;                                               l_action_perform_rec_acct_xref,&lt;br/&gt;                                               p_audit_user_i&lt;br/&gt;                                              );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                   || &apos; , PARTY_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_id&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_num&lt;br/&gt;                                       || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_id&lt;br/&gt;                                       || &apos; , PARTY_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.customer_id&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_party_account;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      --p_filter_i         IN              t_ptr_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_ACCOUNT_ADDRESS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the target table&lt;br/&gt;      ||                       &apos;T_ACCOUNT_ADDRESS&apos;  as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name     := &apos;INSERT_ACCOUNT_ADDRESS&apos;;&lt;br/&gt;      l_errors                    NUMBER;&lt;br/&gt;      l_coll_idx                  PLS_INTEGER;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_exist_count               NUMBER;&lt;br/&gt;--      l_tgt_address_subtype_cd    t_account_address.address_subtype_cd%TYPE;  --- commented as part of webservice gateway fix&lt;br/&gt;      l_tgt_data_source_type_cd   t_account_address.data_source_type_cd%TYPE;&lt;br/&gt;      l_tgt_modified_dttm         t_account_address.modified_dttm%TYPE;&lt;br/&gt;      l_action_perform_record     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                 stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                          l_proc_name&lt;br/&gt;      --                       || &apos; &apos;&lt;br/&gt;      --                       || pkg_utility.c_proc_start_text&lt;br/&gt;      --                       || &apos;, cnt = &apos;&lt;br/&gt;      --                       || p_filter_i.COUNT ()&lt;br/&gt;      --                      );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (    NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                      pkg_utility.c_stg_processed&lt;br/&gt;                     ) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;             AND p_cursor_data_io.service_address_id IS NOT NULL&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                   || &apos; , SERVICE_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.service_address_id&lt;br/&gt;                                  );&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_action_perform_record := NULL;&lt;br/&gt;            l_tgt_modified_dttm := NULL;&lt;br/&gt;            l_tgt_data_source_type_cd := NULL;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT&lt;br/&gt;--                  address_subtype_cd, --commented as part of webservice gateway fix&lt;br/&gt;                      data_source_type_cd, modified_dttm&lt;br/&gt;                 INTO&lt;br/&gt;--                    l_tgt_address_subtype_cd,  --commented as part of webservice gateway fix&lt;br/&gt;                      l_tgt_data_source_type_cd, l_tgt_modified_dttm&lt;br/&gt;                 FROM t_account_address&lt;br/&gt;                WHERE account_id = p_cursor_data_io.account_id&lt;br/&gt;                  AND address_id = p_cursor_data_io.service_address_id&lt;br/&gt;                  AND address_usage_type_cd = &apos;SRVC&apos;;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count = 0)&lt;br/&gt;            THEN&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_account_address.ADD&lt;br/&gt;                  (process_rec                =&gt; p_process_rec_i,&lt;br/&gt;                   account_id                 =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                   address_id                 =&gt; p_cursor_data_io.service_address_id,&lt;br/&gt;                   address_usage_type_cd      =&gt; &apos;SRVC&apos;,&lt;br/&gt;--                      address_subtype_cd         =&gt; &apos;SRVC&apos;, --- commented as part of webservice gateway fix&lt;br/&gt;                   data_source_type_cd        =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.service_address_id&lt;br/&gt;                  || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                  || &apos;SRVC&apos;;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                     (p_process_rec_i,&lt;br/&gt;                                                      &apos;T_ACCOUNT_ADDRESS&apos;,&lt;br/&gt;                                                      l_table_key,&lt;br/&gt;                                                      l_modif_val_string,&lt;br/&gt;                                                      NULL,&lt;br/&gt;                                                      l_action_perform_record,&lt;br/&gt;                                                      p_audit_user_i&lt;br/&gt;                                                     );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_num&lt;br/&gt;                                   || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.account_id&lt;br/&gt;                                   || &apos; , SERVICE_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.service_address_id&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_num&lt;br/&gt;                                       || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.account_id&lt;br/&gt;                                       || &apos; , SERVICE_ADDRESS_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.service_address_id&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_account_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_account_bill_info (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : insert_account_bill_info&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the target table&lt;br/&gt;      ||                       &apos;T_ACCOUNT_BILL_INFO&apos;  as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name     := &apos;INSERT_ACCOUNT_BILL_INFO&apos;;&lt;br/&gt;      l_errors                  NUMBER;&lt;br/&gt;      l_coll_idx                PLS_INTEGER;&lt;br/&gt;      l_exist_count             NUMBER;&lt;br/&gt;--      l_systimestamp     := sysdate;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_tgt_account_id          t_party_account.account_id%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_bill_day                t_account_bill_info.bill_day%TYPE;&lt;br/&gt;      l_bill_cycle              t_account_bill_info.bill_cycle%TYPE;&lt;br/&gt;      l_paperless_bill          t_account_bill_info.paperless_bill%TYPE;&lt;br/&gt;      l_electronic_bill_flag    t_account_bill_info.electronic_bill_flag%TYPE;&lt;br/&gt;      l_ebpp_ind                t_account_bill_info.ebpp_ind%TYPE;&lt;br/&gt;      l_stmt_hld_cd             t_account_bill_info.stmt_hld_cd%TYPE;&lt;br/&gt;      l_modified_dttm           t_account_bill_info.modified_dttm%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_start_text&lt;br/&gt;                                || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_num&lt;br/&gt;                                || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_id&lt;br/&gt;                                || &apos; , CUSTOMER_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.customer_id&lt;br/&gt;                               );&lt;br/&gt;         l_exist_count := 1;&lt;br/&gt;         --              l_tgt_account_id := NULL;&lt;br/&gt;         l_table_key := NULL;&lt;br/&gt;         l_action_perform_record := NULL;&lt;br/&gt;         l_bill_day := NULL;&lt;br/&gt;         l_bill_cycle := NULL;&lt;br/&gt;         l_paperless_bill := NULL;&lt;br/&gt;         l_electronic_bill_flag := NULL;&lt;br/&gt;         l_ebpp_ind := NULL;&lt;br/&gt;         l_stmt_hld_cd := NULL;&lt;br/&gt;         l_modified_dttm := NULL;&lt;br/&gt;         l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;         --   Get  existing records from T_ACCOUNT_BILL_INFO&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT bill_day, bill_cycle, paperless_bill,&lt;br/&gt;                   electronic_bill_flag, ebpp_ind, stmt_hld_cd,&lt;br/&gt;                   modified_dttm&lt;br/&gt;              INTO l_bill_day, l_bill_cycle, l_paperless_bill,&lt;br/&gt;                   l_electronic_bill_flag, l_ebpp_ind, l_stmt_hld_cd,&lt;br/&gt;                   l_modified_dttm&lt;br/&gt;              FROM t_account_bill_info&lt;br/&gt;             WHERE account_id = p_cursor_data_io.account_id;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               l_exist_count := 0;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         IF (l_exist_count &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            IF ((   NVL (l_bill_day, pkg_utility.c_recon_null_number) &lt;&gt;&lt;br/&gt;                       NVL (p_cursor_data_io.bill_day,&lt;br/&gt;                            pkg_utility.c_recon_null_number&lt;br/&gt;                           )&lt;br/&gt;                 OR NVL (l_bill_cycle, pkg_utility.c_recon_null_number) &lt;&gt;&lt;br/&gt;                       NVL (p_cursor_data_io.bill_cycle,&lt;br/&gt;                            pkg_utility.c_recon_null_number&lt;br/&gt;                           )&lt;br/&gt;                 OR NVL (l_paperless_bill, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                       NVL (p_cursor_data_io.paperless_bill,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           )&lt;br/&gt;                 OR NVL (l_electronic_bill_flag,&lt;br/&gt;                         pkg_utility.c_recon_null_string&lt;br/&gt;                        ) &lt;&gt;&lt;br/&gt;                       NVL (p_cursor_data_io.electronic_bill_flag,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           )&lt;br/&gt;                 OR NVL (l_ebpp_ind, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                       NVL (p_cursor_data_io.ebpp_ind,&lt;br/&gt;                            pkg_utility.c_recon_null_string&lt;br/&gt;                           )&lt;br/&gt;                 OR     NVL (l_stmt_hld_cd, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.stmt_hld_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                    AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_account_bill_info&lt;br/&gt;                  SET bill_day = p_cursor_data_io.bill_day,&lt;br/&gt;                      bill_cycle = p_cursor_data_io.bill_cycle,&lt;br/&gt;                      paperless_bill = p_cursor_data_io.paperless_bill,&lt;br/&gt;                      electronic_bill_flag =&lt;br/&gt;                                         p_cursor_data_io.electronic_bill_flag,&lt;br/&gt;                      ebpp_ind = p_cursor_data_io.ebpp_ind,&lt;br/&gt;                      stmt_hld_cd = p_cursor_data_io.stmt_hld_cd,&lt;br/&gt;                      modified_dttm = l_systimestamp,&lt;br/&gt;                      modified_by = p_audit_user_i&lt;br/&gt;                WHERE account_id = p_cursor_data_io.account_id;&lt;br/&gt;&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_update_perform;&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            da_account_bill_info.ADD&lt;br/&gt;               (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                account_id                =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                bill_day                  =&gt; p_cursor_data_io.bill_day,&lt;br/&gt;                bill_cycle                =&gt; p_cursor_data_io.bill_cycle,&lt;br/&gt;                paperless_bill            =&gt; p_cursor_data_io.paperless_bill,&lt;br/&gt;                electronic_bill_flag      =&gt; p_cursor_data_io.electronic_bill_flag,&lt;br/&gt;                ebpp_ind                  =&gt; p_cursor_data_io.ebpp_ind,&lt;br/&gt;                bill_to_nm                =&gt; NULL,&lt;br/&gt;                stmt_hld_cd               =&gt; p_cursor_data_io.stmt_hld_cd,&lt;br/&gt;                audit_user                =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (l_action_perform_record IN&lt;br/&gt;                (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                 pkg_utility.c_recon_update_perform&lt;br/&gt;                )&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_table_key := &apos;ACCOUNT_ID = &apos; || p_cursor_data_io.account_id;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                         (p_process_rec_i,&lt;br/&gt;                                          &apos;T_ACCOUNT_BILL_INFO&apos;,&lt;br/&gt;                                          l_table_key,&lt;br/&gt;                                          NULL,&lt;br/&gt;                                          NULL,&lt;br/&gt;                                          pkg_utility.c_recon_insert_perform,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, ACCOUNT_NUM = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_num&lt;br/&gt;                                || &apos; , ACCOUNT_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_id&lt;br/&gt;                                || &apos; , PARTY_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.customer_id&lt;br/&gt;                               );&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_account_bill_info;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_sbb_base_rec%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : UPDATE_STAGING&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for updating the staging table for the column Record_Cd_Load with value of &apos;P&apos;&lt;br/&gt;      ||                       which indicates the Finished state.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_sbb_base_rec_delta s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_i.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, SUB_ACCT_NO_SBB = &apos;&lt;br/&gt;                                       || p_cursor_data_i.account_num&lt;br/&gt;                                       || &apos;, exception = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_i.record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END update_staging;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_service_address (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_sbb_base_rec%ROWTYPE  --t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;      --RETURN t_ptr_tbl&lt;br/&gt;   RETURN VARCHAR2&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FILTER_SERVICE_ADDRESS&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for selecting and building set of records from the passed lot for cases of&lt;br/&gt;      ||                       service_address_id IS NOT NULL.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name  := &apos;FILTER_SERVICE_ADDRESS&apos;;&lt;br/&gt;      l_temp           t_ptr_tbl;&lt;br/&gt;      l_idx            PLS_INTEGER  := 0;&lt;br/&gt;      l_proceed_flag   VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      BEGIN&lt;br/&gt;         l_proceed_flag := &apos;N&apos;;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_data_i.service_address_id IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            --l_idx := l_idx + 1;&lt;br/&gt;            --l_temp (l_idx) := i;&lt;br/&gt;            l_proceed_flag := &apos;Y&apos;;&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, SUB_ACCT_NO_SBB = &apos;&lt;br/&gt;                                       || p_cursor_data_i.account_num&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      RETURN l_proceed_flag;&lt;br/&gt;   END filter_service_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_stg_sbb_base_leaf (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is to load Account Related details from the staging table as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                    t_unit_name                    := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                 t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                  pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data                  t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr                   VARCHAR2 (1);               --t_ptr_tbl;&lt;br/&gt;      exp_recon_not_started          EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon    EXCEPTION;&lt;br/&gt;      exp_stg_pre_process_stg_leaf   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      INSERT INTO stg.vnt_sbb_base_leaf&lt;br/&gt;                  (mast_sub_acct_no_sbb, account_id, leaf_sub_acct_no_sbb,&lt;br/&gt;                   related_account_id, data_source_type_cd,&lt;br/&gt;                   account_related_reason_cd, record_stat)&lt;br/&gt;         SELECT /*+ PARALLEL(S1,12)  PARALLEL(S2,12)  PARALLEL(X1,12)  PARALLEL(X2,12)   */&lt;br/&gt;                s1.sub_acct_no_sbb AS mast_sub_acct_no_sbb, x1.account_id,&lt;br/&gt;                s2.sub_acct_no_sbb AS leaf_sub_acct_no_sbb,&lt;br/&gt;                x2.account_id AS related_account_id,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN s1.sys_sbb = 8313&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                   ELSE &apos;VNT&apos;&lt;br/&gt;                END AS data_source_type_cd,&lt;br/&gt;                &apos;LEAF&apos; account_related_reason_cd, x1.record_stat&lt;br/&gt;           FROM stg.vnt_sbb_base s1 INNER JOIN stg.vnt_sbb_base s2&lt;br/&gt;                ON s1.hierarchy_id_sbb = s2.hierarchy_id_sbb&lt;br/&gt;              AND TRIM (s2.hierarchy_id_sbb) IS NOT NULL&lt;br/&gt;              AND TRIM (s1.hierarchy_id_sbb) IS NOT NULL&lt;br/&gt;              AND s1.sys_sbb = s2.acct_hierarchy_owning_sys_sbb&lt;br/&gt;              AND s2.acct_hierarchy_owning_sys_sbb IS NOT NULL&lt;br/&gt;              AND s1.prin_sbb = s2.acct_hierarchy_owning_prin_sbb&lt;br/&gt;              AND s2.acct_hierarchy_owning_prin_sbb IS NOT NULL&lt;br/&gt;              AND s2.acct_hierarchy_owning_prin_sbb &lt;&gt; 0&lt;br/&gt;              AND s2.acct_hierarchy_owning_sys_sbb &lt;&gt; 0&lt;br/&gt;              AND s1.acct_hierarchy_owning_prin_sbb = 0&lt;br/&gt;              AND s1.acct_hierarchy_owning_sys_sbb = 0&lt;br/&gt;                INNER JOIN chtr.t_account_vantage_xref x1&lt;br/&gt;                ON s1.sub_acct_no_sbb = x1.sub_acct_num&lt;br/&gt;                INNER JOIN chtr.t_account_vantage_xref x2&lt;br/&gt;                ON s2.sub_acct_no_sbb = x2.sub_acct_num&lt;br/&gt;                ;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;&lt;br/&gt;      INSERT INTO stg.vnt_sbb_base_leaf&lt;br/&gt;                  (mast_sub_acct_no_sbb, account_id, leaf_sub_acct_no_sbb,&lt;br/&gt;                   related_account_id, data_source_type_cd,&lt;br/&gt;                   account_related_reason_cd, record_stat)&lt;br/&gt;         SELECT /*+ PARALLEL(S3,12)  PARALLEL(XREF3,12)  */&lt;br/&gt;                s3.sub_acct_no_sbb AS mast_sub_acct_no_sbb, xref3.account_id,&lt;br/&gt;                s3.sub_acct_no_sbb AS leaf_sub_acct_no_sbb,&lt;br/&gt;                xref3.account_id AS related_account_idm,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN s3.sys_sbb = 8313&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                   ELSE &apos;VNT&apos;&lt;br/&gt;                END AS data_source_type_cd,&lt;br/&gt;                &apos;LEAF&apos; AS account_related_reason_cd, xref3.record_stat&lt;br/&gt;           FROM stg.vnt_sbb_base s3 INNER JOIN chtr.t_account_vantage_xref xref3&lt;br/&gt;                ON xref3.sub_acct_num = s3.sub_acct_no_sbb&lt;br/&gt;          WHERE TRIM (s3.hierarchy_id_sbb) IS NOT NULL&lt;br/&gt;            AND s3.acct_hierarchy_owning_prin_sbb = 0&lt;br/&gt;            AND s3.acct_hierarchy_owning_sys_sbb = 0;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END load_stg_sbb_base_leaf;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_chtr_account_related_leaf (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_ACCOUNT_RELATED_LEAF&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the target table &apos;T_ACCOUNT_RELATED&apos;  with value as LEAF&lt;br/&gt;      ||                       as part of Reconciliation and webserivce gateway change&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name&lt;br/&gt;                                             := &apos;INSERT_ACCOUNT_RELATED_LEAF&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_insert_conunter                NUMBER;&lt;br/&gt;      l_update_conunter                NUMBER;&lt;br/&gt;      l_action_perf_rec_ac_rel_xref    stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_ac_rel_xref   stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_sub_acct_num                   stg.vnt_sbb_base_leaf.mast_sub_acct_no_sbb%TYPE;&lt;br/&gt;      l_cursor_data                    t_cur_vnt_sbb_base_leaf;&lt;br/&gt;      l_process_rec                    pkg_logging.t_process_rec;&lt;br/&gt;--      l_batch_size_leaf                NUMBER                         := 1000;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (cur_vnt_sbb_base_leaf%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_vnt_sbb_base_leaf;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_vnt_sbb_base_leaf;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_vnt_sbb_base_leaf&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               IF l_cursor_data (i).perform_action = &apos;I&apos;&lt;br/&gt;               THEN&lt;br/&gt;                  da_account_related.ADD&lt;br/&gt;                     (process_rec                    =&gt; l_process_rec,&lt;br/&gt;                      account_id                     =&gt; l_cursor_data (i).account_id,&lt;br/&gt;                      related_account_id             =&gt; l_cursor_data (i).related_account_id,&lt;br/&gt;                      account_related_reason_cd      =&gt; l_cursor_data (i).account_related_reason_cd,&lt;br/&gt;                      data_source_type_cd            =&gt; l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF     l_cursor_data (i).perform_action = &apos;U&apos;&lt;br/&gt;                  AND (   l_cursor_data (i).ac_rel_record_stat &lt;&gt;&lt;br/&gt;                                                 l_cursor_data (i).record_stat&lt;br/&gt;                       OR l_cursor_data (i).ac_rel_data_source_type_cd &lt;&gt;&lt;br/&gt;                                         l_cursor_data (i).data_source_type_cd&lt;br/&gt;                      )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_related&lt;br/&gt;                     SET data_source_type_cd =&lt;br/&gt;                                         l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                         record_stat = l_cursor_data (i).record_stat,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = l_cursor_data (i).account_id&lt;br/&gt;                     AND related_account_id =&lt;br/&gt;                                          l_cursor_data (i).related_account_id&lt;br/&gt;                     AND account_related_reason_cd =&lt;br/&gt;                                   l_cursor_data (i).account_related_reason_cd;&lt;br/&gt;               END IF;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_vnt_sbb_base_leaf;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;   END load_chtr_account_related_leaf;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_stg_sbb_base_bulk (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is to load Account Related details from the staging table as part of Reconciliation&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                    t_unit_name                    := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                 t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                  pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data                  t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr                   VARCHAR2 (1);               --t_ptr_tbl;&lt;br/&gt;      exp_recon_not_started          EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon    EXCEPTION;&lt;br/&gt;      exp_stg_pre_process_stg_bulk   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      INSERT INTO stg.vnt_sbb_base_bulk&lt;br/&gt;                  (mast_sub_acct_no_sbb, account_id, bulk_sub_acct_no_sbb,&lt;br/&gt;                   related_account_id, data_source_type_cd,&lt;br/&gt;                   account_related_reason_cd, record_stat)&lt;br/&gt;         SELECT /*+ PARALLEL(S1,12)  PARALLEL(S2,12)  PARALLEL(x1,12)  PARALLEL(x2,12)  */&lt;br/&gt;                s1.sub_acct_no_sbb AS mast_sub_acct_no_sbb, x1.account_id,&lt;br/&gt;                s2.sub_acct_no_sbb AS bulk_sub_acct_no_sbb,&lt;br/&gt;                x2.account_id AS related_account_id,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN s1.sys_sbb = 8313&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                   ELSE &apos;VNT&apos;&lt;br/&gt;                END AS data_source_type_cd,&lt;br/&gt;                &apos;BULK&apos; account_related_reason_cd, x1.record_stat&lt;br/&gt;           FROM stg.vnt_sbb_base s1 INNER JOIN stg.vnt_sbb_base s2&lt;br/&gt;                ON s1.misc_sbb = s2.misc_sbb&lt;br/&gt;              AND s1.sys_sbb = s2.sys_sbb&lt;br/&gt;              AND s1.prin_sbb = s2.prin_sbb&lt;br/&gt;                INNER JOIN chtr.t_account_vantage_xref x1&lt;br/&gt;                ON x1.sub_acct_num = s1.sub_acct_no_sbb&lt;br/&gt;                INNER JOIN chtr.t_account_vantage_xref x2&lt;br/&gt;                ON x2.sub_acct_num = s2.sub_acct_no_sbb&lt;br/&gt;          WHERE s1.vip_flg_sbb IN (&apos;B&apos;, &apos;}&apos;)&lt;br/&gt;            AND TRIM (s1.misc_sbb) IS NOT NULL&lt;br/&gt;            AND s2.vip_flg_sbb IN (&apos;T&apos;, &apos;{&apos;, &apos;B&apos;, &apos;}&apos;)&lt;br/&gt;            AND TRIM (s2.misc_sbb) IS NOT NULL;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_sbb_base_rec%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_sbb_base_rec;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END load_stg_sbb_base_bulk;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_chtr_account_related_bulk (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD_CHTR_ACCOUNT_RELATED_BULK&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details specifically into the target table &apos;T_ACCOUNT_RELATED&apos;  with value as LEAF&lt;br/&gt;      ||                       as part of Reconciliation and webserivce gateway change&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name&lt;br/&gt;                                          := &apos;LOAD_CHTR_ACCOUNT_RELATED_BULK&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_insert_conunter                NUMBER;&lt;br/&gt;      l_update_conunter                NUMBER;&lt;br/&gt;      l_action_perf_rec_ac_rel_xref    stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string_ac_rel_xref   stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_sub_acct_num                   stg.vnt_sbb_base_bulk.mast_sub_acct_no_sbb%TYPE;&lt;br/&gt;      l_cursor_data                    t_cur_vnt_sbb_base_bulk;&lt;br/&gt;      l_process_rec                    pkg_logging.t_process_rec;&lt;br/&gt;--      l_batch_size_leaf                NUMBER                         := 1000;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (cur_vnt_sbb_base_bulk%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_vnt_sbb_base_bulk;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_vnt_sbb_base_bulk;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_vnt_sbb_base_bulk&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               IF l_cursor_data (i).perform_action = &apos;I&apos;&lt;br/&gt;               THEN&lt;br/&gt;                  da_account_related.ADD&lt;br/&gt;                     (process_rec                    =&gt; l_process_rec,&lt;br/&gt;                      account_id                     =&gt; l_cursor_data (i).account_id,&lt;br/&gt;                      related_account_id             =&gt; l_cursor_data (i).related_account_id,&lt;br/&gt;                      account_related_reason_cd      =&gt; l_cursor_data (i).account_related_reason_cd,&lt;br/&gt;                      data_source_type_cd            =&gt; l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF     l_cursor_data (i).perform_action = &apos;U&apos;&lt;br/&gt;                  AND (   l_cursor_data (i).ac_rel_record_stat &lt;&gt;&lt;br/&gt;                                                 l_cursor_data (i).record_stat&lt;br/&gt;                       OR l_cursor_data (i).ac_rel_data_source_type_cd &lt;&gt;&lt;br/&gt;                                         l_cursor_data (i).data_source_type_cd&lt;br/&gt;                      )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_account_related&lt;br/&gt;                     SET data_source_type_cd =&lt;br/&gt;                                         l_cursor_data (i).data_source_type_cd,&lt;br/&gt;                         record_stat = l_cursor_data (i).record_stat,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE account_id = l_cursor_data (i).account_id&lt;br/&gt;                     AND related_account_id =&lt;br/&gt;                                          l_cursor_data (i).related_account_id&lt;br/&gt;                     AND account_related_reason_cd =&lt;br/&gt;                                   l_cursor_data (i).account_related_reason_cd;&lt;br/&gt;               END IF;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_vnt_sbb_base_bulk;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;   END load_chtr_account_related_bulk;&lt;br/&gt;END pkg_vnt_recon_sbb_base;</source>
</body>
</PackageOracle>
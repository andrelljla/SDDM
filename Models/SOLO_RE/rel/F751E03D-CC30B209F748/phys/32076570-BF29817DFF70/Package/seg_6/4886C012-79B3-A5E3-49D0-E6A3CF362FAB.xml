<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_SBB_BASE" directorySegmentName="seg_6" id="4886C012-79B3-A5E3-49D0-E6A3CF362FAB">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_SBB_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:16 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_SBB_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_SBB_BASE&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : Account&lt;br/&gt;   ||  Description     : This is for Account Related details from the staging table VNT_SBB_BASE&lt;br/&gt;   ||&lt;br/&gt;   ||   Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By            Changed On               Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant            10-Nov-2014               Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 );&lt;br/&gt;END pkg_vnt_load_sbb_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_SBB_BASE" id="4886C012-79B3-A5E3-49D0-E6A3CF362FAB">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_SBB_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:18 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_SBB_BASE&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_SBB_BASE&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : Account&lt;br/&gt;   ||  Description     : This is for Account Related details from the staging table VNT_SBB_BASE&lt;br/&gt;   ||&lt;br/&gt;   ||   Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By            Changed On               Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant            10-Nov-2014               Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_error CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_pkg_name CONSTANT t_unit_name := &apos;PKG_VNT_LOAD_SBB_BASE&apos;;&lt;br/&gt;   c_null_date CONSTANT DATE := TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;);&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread NUMBER := 1;&lt;br/&gt;   g_max_thread NUMBER := 1;&lt;br/&gt;   g_batchsize NUMBER := 10000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged SBB_BASE for loading&lt;br/&gt;   CURSOR cur_stg_sbb_base&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         -- staging control data&lt;br/&gt;         sbb.ROWID AS ID,&lt;br/&gt;         sbb.record_load_cd,&lt;br/&gt;&lt;br/&gt;         -- surrogate keys&lt;br/&gt;         s_account_id.NEXTVAL AS account_id,&lt;br/&gt;         cust_xref.party_id AS customer_id,&lt;br/&gt;&lt;br/&gt;         -- columns&lt;br/&gt;         sbb.sub_acct_no_sbb AS account_num,&lt;br/&gt;         CASE&lt;br/&gt;            WHEN sys_sbb = 8313&lt;br/&gt;            THEN &apos;BRS&apos;&lt;br/&gt;            ELSE &apos;VNT&apos;&lt;br/&gt;         END AS data_source_type_cd,&lt;br/&gt;         sbb.cust_acct_no_sbb AS customer_account_num,&lt;br/&gt;         xref.address_id AS service_address_id,&lt;br/&gt;         TRIM (&lt;br/&gt;            CASE&lt;br/&gt;               WHEN INSTR (sbb.res_name_sbb, &apos;*&apos;) &gt; 2&lt;br/&gt;               THEN SUBSTR (sbb.res_name_sbb, 1, INSTR (sbb.res_name_sbb, &apos;*&apos;) - 2 )&lt;br/&gt;               ELSE sbb.res_name_sbb&lt;br/&gt;            END ) AS account_nm,&lt;br/&gt;         TO_DATE (DECODE (sbb.orig_conn_dte_sbb, c_null_date, NULL, sbb.orig_conn_dte_sbb ) ) AS account_open_dt,&lt;br/&gt;         TO_DATE (DECODE (sbb.disco_dte_sbb, c_null_date, NULL, sbb.disco_dte_sbb ) ) AS account_close_dt,&lt;br/&gt;         DECODE (sbb.cust_typ_sbb, &apos;COM&apos;, &apos;BUSN&apos;, &apos;RES&apos;, &apos;INDIV&apos;, NULL ) AS account_type_cd,&lt;br/&gt;         DECODE (sbb.cust_typ_sbb, &apos;COM&apos;, &apos;ORGN&apos;, &apos;RES&apos;, &apos;INDIV&apos;, NULL ) AS party_subtype_cd,&lt;br/&gt;         TRIM (sbb.vip_flg_sbb) AS account_qualifier_cd,&lt;br/&gt;         NVL (sbb.cur_bal_sbb, 0) AS account_balance_cur_amt,&lt;br/&gt;         NVL (sbb.delq_amt_sbb, 0) AS account_balance_past_amt,&lt;br/&gt;         NVL (sbb.bill_from_dte_sbb, c_null_date ) AS account_cycle_start_dt,&lt;br/&gt;         TO_DATE(DECODE (sbb.bill_to_dte_sbb, c_null_date, NULL, sbb.bill_to_dte_sbb )) AS account_cycle_end_dt,&lt;br/&gt;         sbb.ext_stat_sbb AS conn_account_status_cd,&lt;br/&gt;         sbb.delq_stat_sbb AS dlnq_account_status_cd,&lt;br/&gt;         sbb.int_stat_sbb AS mony_account_status_cd,&lt;br/&gt;         sbb.pmt_stat_sbb AS pmt_account_status_cd&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_sbb_base sbb&lt;br/&gt;      LEFT OUTER JOIN t_service_address_vantage_xref xref&lt;br/&gt;      ON&lt;br/&gt;         xref.hs_key = sbb.hse_key_sbb&lt;br/&gt;      JOIN t_party_vantage_xref cust_xref&lt;br/&gt;      ON&lt;br/&gt;         cust_xref.cust_acct_num = sbb.cust_acct_no_sbb&lt;br/&gt;      WHERE&lt;br/&gt;         sbb.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (sbb.ROWID, LENGTH (sbb.ROWID), 1)), g_max_thread ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;TYPE t_cursor_data_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF cur_stg_sbb_base%ROWTYPE INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;TYPE t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;PROCEDURE insert_account(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_status(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_balance(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_cycle(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_customer_account(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_vantage_xref(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_service_address(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Account Related details from the staging table &apos;VNT_SBB_BASE&apos;&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name t_unit_name := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name t_process_log.process_name%TYPE := c_pkg_name;&lt;br/&gt;      l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr t_ptr_tbl; -- for filtering data in the cursor table&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec, &apos;p_audit_user_i=&apos; || p_audit_user_i );&lt;br/&gt;      g_this_thread := p_this_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name) THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --Added on 10-Nov-2014 as part of Code Standardization Changes&lt;br/&gt;      IF (cur_stg_sbb_base%ISOPEN) THEN&lt;br/&gt;         CLOSE cur_stg_sbb_base;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_sbb_base;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH&lt;br/&gt;            cur_stg_sbb_base BULK COLLECT&lt;br/&gt;         INTO&lt;br/&gt;            l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0) THEN&lt;br/&gt;            -- Insert account&lt;br/&gt;            insert_account (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert account_vantage_xref&lt;br/&gt;            insert_account_vantage_xref (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert account status&lt;br/&gt;            insert_account_status (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert account_balance&lt;br/&gt;            insert_account_balance (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert account_cycle&lt;br/&gt;            --insert_account_cycle (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert account_address (the link to the service address);&lt;br/&gt;            -- filter in case there&apos;s no xref entry&lt;br/&gt;            l_filter_ptr := filter_service_address (l_process_rec, l_cursor_data);&lt;br/&gt;            insert_account_address (l_process_rec, l_cursor_data, l_filter_ptr );&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- Associate the account to the customer&lt;br/&gt;            -- Insert customer_account&lt;br/&gt;            insert_customer_account (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN&lt;br/&gt;         (&lt;br/&gt;            l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;         )&lt;br/&gt;         OR&lt;br/&gt;         (&lt;br/&gt;            pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;         )&lt;br/&gt;         ;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_sbb_base;&lt;br/&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN OTHERS THEN&lt;br/&gt;      ROLLBACK;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_sbb_base%ISOPEN) THEN&lt;br/&gt;         CLOSE cur_stg_sbb_base;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;      pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;	  RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ACCOUNT&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Account Related details specifically into the target table &apos;T_ACCOUNT&apos;&lt;br/&gt;   via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ACCOUNT&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.account_num,&lt;br/&gt;            a.account_nm,&lt;br/&gt;            a.account_open_dt,&lt;br/&gt;            a.account_close_dt,&lt;br/&gt;            a.account_type_cd,&lt;br/&gt;            a.account_purpose_subtype_cd,&lt;br/&gt;            a.subaccount_ind,&lt;br/&gt;            a.account_qualifier_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            --c_vantage_data_src,&lt;br/&gt;            --Commented above and added below on 14-Nov-2014&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).account_num,&lt;br/&gt;            p_cursor_data_io (i).account_nm,&lt;br/&gt;            p_cursor_data_io (i).account_open_dt,&lt;br/&gt;            p_cursor_data_io (i).account_close_dt,&lt;br/&gt;            p_cursor_data_io (i).account_type_cd,&lt;br/&gt;            &apos;BLG&apos;,&lt;br/&gt;            0,&lt;br/&gt;            p_cursor_data_io (i).account_qualifier_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_account;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_status&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ACCOUNT_STATUS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Account Related details specifically into the target table &apos;&lt;br/&gt;   T_ACCOUNT_STATUS&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ACCOUNT_STATUS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      -- CONN status&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_status a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.account_status_type_cd,&lt;br/&gt;            a.account_status_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;CONN&apos;,&lt;br/&gt;            p_cursor_data_io (i).conn_account_status_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;      -- DLNQ status&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_status a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.account_status_type_cd,&lt;br/&gt;            a.account_status_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;DLNQ&apos;,&lt;br/&gt;            p_cursor_data_io (i).dlnq_account_status_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;      -- MONY status&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_status a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.account_status_type_cd,&lt;br/&gt;            a.account_status_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;MONY&apos;,&lt;br/&gt;            p_cursor_data_io (i).mony_account_status_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;      -- PMT status&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_status a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.account_status_type_cd,&lt;br/&gt;            a.account_status_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;PMT&apos;,&lt;br/&gt;            p_cursor_data_io (i).pmt_account_status_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_account_status;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_balance&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ACCOUNT_BALANCE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Account Related details specifically into the target table &apos;&lt;br/&gt;   T_ACCOUNT_BALANCE&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ACCOUNT_BALANCE&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;   l_success NUMBER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_balance a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.account_balance_type_cd,&lt;br/&gt;            a.account_balance_amt,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;CUR&apos;,&lt;br/&gt;            p_cursor_data_io (i).account_balance_cur_amt,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;      l_success := SQL%ROWCOUNT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;      l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, Cur Balanace Insert count=&apos; || l_success ||&lt;br/&gt;   &apos; , error count=&apos; || l_errors );&lt;br/&gt;   l_errors := 0;&lt;br/&gt;   l_success := 0;&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_balance a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.account_balance_type_cd,&lt;br/&gt;            a.account_balance_amt,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;PAST&apos;,&lt;br/&gt;            p_cursor_data_io (i).account_balance_past_amt,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;      l_success := SQL%ROWCOUNT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;      l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, Past Balance Insert count=&apos; || l_success ||&lt;br/&gt;   &apos; , error count=&apos; || l_errors );&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_account_balance;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_cycle&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ACCOUNT_CYCLE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Account Related details specifically into the target table &apos;&lt;br/&gt;   T_ACCOUNT_CYCLE&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ACCOUNT_CYCLE&apos;;&lt;br/&gt;   l_errors NUMBER := 0;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;   l_success NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_cycle a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.billing_cycle_id,&lt;br/&gt;            a.account_cycle_start_dt,&lt;br/&gt;            a.account_cycle_end_dt,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;R&apos;,&lt;br/&gt;            p_cursor_data_io (i).account_cycle_start_dt,&lt;br/&gt;            p_cursor_data_io (i).account_cycle_end_dt,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;      l_success := SQL%ROWCOUNT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;      l_success := SQL%ROWCOUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, Insert count=&apos; || l_success || &apos; , error count=&apos; ||&lt;br/&gt;   l_errors );&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_account_cycle;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_customer_account&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_CUSTOMER_ACCOUNT&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Account Related details specifically into the target table &apos;&lt;br/&gt;   T_CUSTOMER_ACCOUNT&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_CUSTOMER_ACCOUNT&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_customer_account a&lt;br/&gt;         (&lt;br/&gt;            a.customer_id,&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).customer_id,&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_customer_account;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_address&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ACCOUNT_ADDRESS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Account Related details specifically into the target table &apos;&lt;br/&gt;   T_ACCOUNT_ADDRESS&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ACCOUNT_ADDRESS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_address a&lt;br/&gt;         (&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.address_id,&lt;br/&gt;            a.address_usage_type_cd,&lt;br/&gt;            a.address_subtype_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            &apos;SRVC&apos;,&lt;br/&gt;            &apos;SRVC&apos;,&lt;br/&gt;            --c_vantage_data_src,&lt;br/&gt;            --Commented above and added below on 14-Nov-2014&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         l_coll_idx := p_filter_i (l_coll_idx);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_account_address;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_account_vantage_xref&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_ACCOUNT_VANTAGE_XREF&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Account Related details specifically into the target table &apos;&lt;br/&gt;   T_ACCOUNT_VANTAGE_XREF&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_ACCOUNT_VANTAGE_XREF&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_account_vantage_xref a&lt;br/&gt;         (&lt;br/&gt;            a.sub_acct_num,&lt;br/&gt;            a.account_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).account_num,&lt;br/&gt;            p_cursor_data_io (i).account_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).account_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_account_vantage_xref;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : UPDATE_STAGING&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for updating the staging table &apos;VNT_SBB_BASE&apos; for the column Record_Cd_Load with&lt;br/&gt;   value of &apos;P&apos; which indicates the Finished state.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   UPDATE&lt;br/&gt;      stg.vnt_sbb_base s&lt;br/&gt;   SET&lt;br/&gt;      s.record_load_cd = NVL (p_cursor_data_i (i).record_load_cd, c_stg_processed),&lt;br/&gt;      s.record_dttm = SYSTIMESTAMP&lt;br/&gt;   WHERE&lt;br/&gt;      ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END update_staging;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_service_address(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : FILTER_SERVICE_ADDRESS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for selecting and building set of records from the passed lot for cases of&lt;br/&gt;   service_address_id IS NOT NULL.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_SERVICE_ADDRESS&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      IF (p_cursor_data_i (i).service_address_id IS NOT NULL) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := i;&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_service_address;&lt;br/&gt;END pkg_vnt_load_sbb_base;</source>
</body>
</PackageOracle>
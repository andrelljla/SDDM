<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_PROCESS_RRT_ELO_LOCA" directorySegmentName="seg_6" id="ED3C9556-4CDD-FB48-0CDA-3A3FA3364982">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_ELO_LOCA</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:27 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_PROCESS_RRT_ELO_LOCA&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_vnt_process_rrt_elo_loca&lt;br/&gt;   ||  Created By      : knoll&lt;br/&gt;   ||  Created Date    : 06-NOV-2014&lt;br/&gt;   ||  Subject Area    : Equipment&lt;br/&gt;   ||  Description     : The package pkg_vnt_process_rrt_elo_loca controls the processing of the&lt;br/&gt;   ||  Vantage NRT_ELO_LOCATION table and applying those updates to SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      18-Nov-2014     Standardization Changes&lt;br/&gt;   ||     knoll          08-Feb-2015     Rework it all.  Create equipment instances if not found.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   PROCEDURE process(&lt;br/&gt;         p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;   PROCEDURE finalize(&lt;br/&gt;         p_audit_user_i IN VARCHAR2);&lt;br/&gt;END pkg_vnt_process_rrt_elo_loca;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_PROCESS_RRT_ELO_LOCA" id="ED3C9556-4CDD-FB48-0CDA-3A3FA3364982">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_ELO_LOCA</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:30 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_PROCESS_RRT_ELO_LOCA&lt;br/&gt;/********************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_process_rrt_elo_loca&lt;br/&gt;||  Created By      : knoll&lt;br/&gt;||  Created Date    : 06-NOV-2014&lt;br/&gt;||  Subject Area    : Equipment&lt;br/&gt;||  Description     : The package pkg_vnt_process_rrt_elo_loca controls the processing of the&lt;br/&gt;||  Vantage NRT_ELO_LOCATION table and applying those updates to SOLODB.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -----------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      18-Nov-2014     Standardization Changes&lt;br/&gt;||     Senthil        22-Nov-2014     Eqp model Change. Removed t_equip_location table population logic.&lt;br/&gt;||                                    Added logic to deactivate eqp to account link in  t_equip_instance_account&lt;br/&gt;||     knoll          08-Feb-2015     Rework it all.  Create equipment instances if not found.&lt;br/&gt;||     knoll          07-Apr-2015     Queue up accounts, even if the equipment isn&apos;t connected in Solo.&lt;br/&gt;||     Senthil        10-Jun-2015     Make use of Usage of new is_valid_account generic function&lt;br/&gt;||                                    -Send old account to Equipment Change Notification Queue&lt;br/&gt;||     Binoy          24-Jun-2015     Populate the column BILLING_STATION_ID in the&lt;br/&gt;||                                    both tables (T_ACCOUNT and T_EQUIP_PROD_INST) as part of XDW change.&lt;br/&gt;*********************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_pkg_name    CONSTANT t_unit_name       := &apos;PKG_VNT_PROCESS_RRT_ELO_LOCA&apos;;&lt;br/&gt;   c_unknown_product_id   t_equip_product.equipment_product_id%TYPE;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors          EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged RRT_ELO_LOCATION for processing&lt;br/&gt;   CURSOR cur_stg_rrt_elo_loca&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;               -- staging control data&lt;br/&gt;               relo.ROWID AS ID, relo.record_load_cd,&lt;br/&gt;               &apos;VNT&apos; AS data_source_type_cd,&lt;br/&gt;                                            -- data columns&lt;br/&gt;                                            eia.account_id,&lt;br/&gt;               NVL (relo.eqp_local_relo, &apos;0000&apos;) AS account_num,&lt;br/&gt;               epi.equip_prod_inst_id,&lt;br/&gt;               TRIM (UPPER (relo.eqp_serial_relo)) eqp_serial_relo,&lt;br/&gt;               relo.action_relo, TRIM (relo.eqp_cmpnt_relo)&lt;br/&gt;                                                           AS eqp_cmpnt_relo,&lt;br/&gt;               TRIM (relo.eqp_typ_relo) AS equip_prod_inst_type_cd,&lt;br/&gt;               TRIM (relo.eqp_stat_relo) AS eqp_stat_relo,&lt;br/&gt;               bs.billing_station_id&lt;br/&gt;          FROM stg.vnt_rrt_elo_location relo LEFT OUTER JOIN t_account_vantage_xref xref&lt;br/&gt;               ON (    xref.sub_acct_num = relo.eqp_local_relo&lt;br/&gt;                   AND xref.record_stat = &apos;A&apos;&lt;br/&gt;                  )&lt;br/&gt;               LEFT OUTER JOIN t_equip_prod_inst epi&lt;br/&gt;               ON (epi.equipment_esn_val = TRIM (UPPER (relo.eqp_serial_relo))&lt;br/&gt;                  )&lt;br/&gt;               LEFT OUTER JOIN t_equip_instance_account eia&lt;br/&gt;               ON (    eia.equip_prod_inst_id = epi.equip_prod_inst_id&lt;br/&gt;                   AND eia.account_id = xref.account_id&lt;br/&gt;                   AND eia.record_stat = &apos;A&apos;&lt;br/&gt;                  )&lt;br/&gt;            LEFT OUTER JOIN t_billing_station bs on bs.billing_station_level_1_cd = relo.sys_relo and bs.billing_station_level_2_cd = relo.prin_relo&lt;br/&gt;         WHERE relo.record_load_cd IS NULL&lt;br/&gt;      ORDER BY relo.pull_dte_relo,&lt;br/&gt;               DECODE (relo.pull_tme_slot_relo,&lt;br/&gt;                       1, pkg_utility.l_final_slot,&lt;br/&gt;                       relo.pull_tme_slot_relo&lt;br/&gt;                      ),&lt;br/&gt;               start_dte_tme_relo;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   FUNCTION create_update_equipment (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   FUNCTION create_account (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   t_userid,&lt;br/&gt;      p_cursor_row_i    IN   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE connect_equipment (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   t_userid,&lt;br/&gt;      p_cursor_row_i    IN   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE disconnect_equipment (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   t_userid,&lt;br/&gt;      p_cursor_row_i    IN   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_equip_inst (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   t_userid,&lt;br/&gt;      p_equip_prod_inst_id   IN   t_equip_prod_inst.equip_prod_inst_id%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_settop_box (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   t_userid,&lt;br/&gt;      p_equip_prod_inst_id   IN   t_equip_prod_inst.equip_prod_inst_id%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure process&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure  opens the main cursor and Calls the procedure process_row, only if the&lt;br/&gt;   ||                       row selected has service location. Then Update_Staging is called.&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name            t_unit_name                         := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_rec          pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data          t_cursor_data_tbl;&lt;br/&gt;      l_process_record_cnt   NUMBER (10)                                 := 0;&lt;br/&gt;      l_error_record_cnt     NUMBER (10)                                 := 0;&lt;br/&gt;      l_equip_prod_inst_id   t_equip_prod_inst.equip_prod_inst_id%TYPE;&lt;br/&gt;      l_account_id           t_account.account_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT equipment_product_id&lt;br/&gt;        INTO c_unknown_product_id&lt;br/&gt;        FROM t_equip_product&lt;br/&gt;       WHERE equipment_model_num = &apos;UNKNOWN&apos; AND ROWNUM = 1;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_rrt_elo_loca;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_rrt_elo_loca&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT pkg_utility.c_rt_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  -- valid serial number and video equipment&lt;br/&gt;                  IF (    l_cursor_data (i).eqp_serial_relo NOT LIKE &apos;%*%&apos;&lt;br/&gt;                      AND l_cursor_data (i).eqp_cmpnt_relo IN (&apos;00&apos;, &apos;01&apos;)&lt;br/&gt;                     )&lt;br/&gt;                  THEN&lt;br/&gt;                     -- create or update the equipment instance&lt;br/&gt;                     l_equip_prod_inst_id :=&lt;br/&gt;                        create_update_equipment (l_process_rec,&lt;br/&gt;                                                 p_audit_user_i,&lt;br/&gt;                                                 l_cursor_data (i)&lt;br/&gt;                                                );&lt;br/&gt;                     l_cursor_data (i).equip_prod_inst_id :=&lt;br/&gt;                                                          l_equip_prod_inst_id;&lt;br/&gt;&lt;br/&gt;                     -- valid sub account number&lt;br/&gt;                     IF pkg_vnt_process.is_valid_account&lt;br/&gt;                                                 (p_audit_user_i,&lt;br/&gt;                                                  l_cursor_data (i).account_num&lt;br/&gt;                                                 )&lt;br/&gt;                     THEN&lt;br/&gt;                        -- create the account&lt;br/&gt;                        IF (l_cursor_data (i).account_id IS NULL)&lt;br/&gt;                        THEN&lt;br/&gt;                           l_account_id :=&lt;br/&gt;                              create_account (l_process_rec,&lt;br/&gt;                                              p_audit_user_i,&lt;br/&gt;                                              l_cursor_data (i)&lt;br/&gt;                                             );&lt;br/&gt;                           l_cursor_data (i).account_id := l_account_id;&lt;br/&gt;                        END IF;&lt;br/&gt;&lt;br/&gt;                        -- CONNECT/DISCONNECT&lt;br/&gt;                        -- process the action A,U,D&lt;br/&gt;                        IF (l_cursor_data (i).action_relo IN (&apos;A&apos;, &apos;U&apos;))&lt;br/&gt;                        THEN&lt;br/&gt;                           -- update the equipment, and connect to the account if needed&lt;br/&gt;                           connect_equipment (l_process_rec,&lt;br/&gt;                                              p_audit_user_i,&lt;br/&gt;                                              l_cursor_data (i)&lt;br/&gt;                                             );&lt;br/&gt;                        ELSIF (l_cursor_data (i).action_relo = &apos;D&apos;)&lt;br/&gt;                        THEN&lt;br/&gt;                           -- disconnect equipment from the account&lt;br/&gt;                           disconnect_equipment (l_process_rec,&lt;br/&gt;                                                 p_audit_user_i,&lt;br/&gt;                                                 l_cursor_data (i)&lt;br/&gt;                                                );&lt;br/&gt;                        ELSE&lt;br/&gt;                           -- unexpected action code&lt;br/&gt;                           pkg_logging.log_information&lt;br/&gt;                                              (l_process_rec,&lt;br/&gt;                                                  l_proc_name&lt;br/&gt;                                               || &apos;, unexpected action_relo=&apos;&lt;br/&gt;                                               || l_cursor_data (i).action_relo&lt;br/&gt;                                              );&lt;br/&gt;                        END IF;&lt;br/&gt;                     ELSE&lt;br/&gt;                        pkg_logging.log_debug&lt;br/&gt;                                            (l_process_rec,&lt;br/&gt;                                                l_proc_name&lt;br/&gt;                                             || &apos;, Not a valid account=&apos;&lt;br/&gt;                                             || l_cursor_data (i).account_num&lt;br/&gt;                                             || &apos; eqp_serial_relo=&apos;&lt;br/&gt;                                             || l_cursor_data (i).eqp_serial_relo&lt;br/&gt;                                            );&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                   pkg_utility.c_stg_processed;&lt;br/&gt;                  ELSE&lt;br/&gt;                     -- mark as skipped&lt;br/&gt;                     l_cursor_data (i).record_load_cd := &apos;S&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                         (l_process_rec,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, serial_number=&apos;&lt;br/&gt;                                          || l_cursor_data (i).eqp_serial_relo&lt;br/&gt;                                          || &apos; account_number=&apos;&lt;br/&gt;                                          || l_cursor_data (i).account_num&lt;br/&gt;                                          || &apos;, exception=&apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                       pkg_utility.c_stg_error;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               -- set the detail counts&lt;br/&gt;               IF NVL (l_cursor_data (i).record_load_cd,&lt;br/&gt;                       pkg_utility.c_stg_processed&lt;br/&gt;                      ) = pkg_utility.c_stg_processed&lt;br/&gt;               THEN&lt;br/&gt;                  l_process_record_cnt := l_process_record_cnt + 1;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_error_record_cnt := l_error_record_cnt + 1;&lt;br/&gt;               END IF;&lt;br/&gt;            END LOOP;&lt;br/&gt;&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; pkg_utility.c_rt_batchsize;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_rrt_elo_loca;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_rrt_elo_loca%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_rrt_elo_loca;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                               );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   FUNCTION create_update_equipment (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      l_equip_prod_inst_id          t_equip_prod_inst.equip_prod_inst_id%TYPE;&lt;br/&gt;      l_equip_prod_inst_status_cd   t_equip_prod_inst.equip_prod_inst_status_cd%TYPE;&lt;br/&gt;      l_equip_prod_inst_type_cd     t_equip_prod_inst.equip_prod_inst_type_cd%TYPE;&lt;br/&gt;      l_record_stat                 t_equip_prod_inst.record_stat%TYPE;&lt;br/&gt;      l_settop_box                  t_settop_box_instance%ROWTYPE;&lt;br/&gt;      l_settop_before               BOOLEAN;&lt;br/&gt;      l_settop_after                BOOLEAN;&lt;br/&gt;	  l_billing_station_id   		t_equip_prod_inst.billing_station_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      -- get the equipment info, if needed&lt;br/&gt;      IF (p_cursor_row_io.equip_prod_inst_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT epi.equip_prod_inst_id, epi.equip_prod_inst_status_cd,&lt;br/&gt;                   epi.equip_prod_inst_type_cd, epi.record_stat,billing_station_id&lt;br/&gt;              INTO l_equip_prod_inst_id, l_equip_prod_inst_status_cd,&lt;br/&gt;                   l_equip_prod_inst_type_cd, l_record_stat,l_billing_station_id&lt;br/&gt;              FROM t_equip_prod_inst epi&lt;br/&gt;             WHERE epi.equipment_esn_val = p_cursor_row_io.eqp_serial_relo;&lt;br/&gt;&lt;br/&gt;            p_cursor_row_io.equip_prod_inst_id := l_equip_prod_inst_id;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               NULL;&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.equip_prod_inst_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         -- create new equipment, with an unknown model (not in rrt_elo_location)&lt;br/&gt;         p_cursor_row_io.equip_prod_inst_id :=&lt;br/&gt;            da_product_instance.ADD&lt;br/&gt;                 (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                  product_id                    =&gt; c_unknown_product_id,&lt;br/&gt;                  product_instance_type_cd      =&gt; &apos;EQPMT&apos;,&lt;br/&gt;                  data_load_type_cd             =&gt; &apos;RRT&apos;,&lt;br/&gt;                  data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         da_equip_prod_inst.ADD&lt;br/&gt;            (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;             equip_prod_inst_type_cd        =&gt; p_cursor_row_io.equip_prod_inst_type_cd,&lt;br/&gt;             equip_prod_inst_id             =&gt; p_cursor_row_io.equip_prod_inst_id,&lt;br/&gt;             equipment_product_id           =&gt; c_unknown_product_id,&lt;br/&gt;             equipment_esn_val              =&gt; p_cursor_row_io.eqp_serial_relo,&lt;br/&gt;             equipment_barcode_val          =&gt; NULL,&lt;br/&gt;             equipment_cost_amt             =&gt; NULL,&lt;br/&gt;             equipment_nickname_val         =&gt; NULL,&lt;br/&gt;             equip_prod_inst_status_cd      =&gt; p_cursor_row_io.eqp_stat_relo,&lt;br/&gt;             billing_station_id             =&gt; p_cursor_row_io.billing_station_id,&lt;br/&gt;             data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;             equip_mac_address_id           =&gt; NULL,&lt;br/&gt;             equip_sec_mac_address_id       =&gt; NULL,&lt;br/&gt;             audit_user                     =&gt; p_audit_user_i&lt;br/&gt;            );&lt;br/&gt;&lt;br/&gt;         -- is this a settop box&lt;br/&gt;         IF (pkg_equip_utility.is_csg_settop_box&lt;br/&gt;                                      (p_cursor_row_io.equip_prod_inst_type_cd)&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            da_settop_box_instance.ADD&lt;br/&gt;               (process_rec                 =&gt; p_process_rec_i,&lt;br/&gt;                estb_mac_address            =&gt; NULL,&lt;br/&gt;                ecm_mac_address             =&gt; NULL,&lt;br/&gt;                ethernet_mac_address        =&gt; NULL,&lt;br/&gt;                cmci_mac_address            =&gt; NULL,&lt;br/&gt;                rf4ce_mac_address           =&gt; NULL,&lt;br/&gt;                settop_box_instance_id      =&gt; p_cursor_row_io.equip_prod_inst_id,&lt;br/&gt;                serial_num                  =&gt; p_cursor_row_io.eqp_serial_relo,&lt;br/&gt;                model_nm                    =&gt; NULL,&lt;br/&gt;                soc_part_num                =&gt; NULL,&lt;br/&gt;                manufacturer                =&gt; &apos;UNKNOWN&apos;,&lt;br/&gt;                manufacturer_site           =&gt; NULL,&lt;br/&gt;                manufacturer_date           =&gt; NULL,&lt;br/&gt;                cas_id                      =&gt; NULL,&lt;br/&gt;                audit_user                  =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;         END IF;&lt;br/&gt;      ELSE&lt;br/&gt;         -- only update if needed;&lt;br/&gt;         IF (   NVL (l_equip_prod_inst_status_cd, &apos; &apos;) &lt;&gt;&lt;br/&gt;                                      NVL (p_cursor_row_io.eqp_stat_relo, &apos; &apos;)&lt;br/&gt;             OR NVL (l_equip_prod_inst_type_cd, &apos; &apos;) &lt;&gt;&lt;br/&gt;                            NVL (p_cursor_row_io.equip_prod_inst_type_cd, &apos; &apos;)&lt;br/&gt;             OR l_record_stat &lt;&gt; &apos;A&apos;&lt;br/&gt;             OR NVL (l_billing_station_id, &apos; &apos;) &lt;&gt;  NVL (p_cursor_row_io.billing_station_id, &apos; &apos;)&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE t_equip_prod_inst epi&lt;br/&gt;               SET epi.equip_prod_inst_status_cd =&lt;br/&gt;                                                 p_cursor_row_io.eqp_stat_relo,&lt;br/&gt;                   epi.equip_prod_inst_type_cd =&lt;br/&gt;                                       p_cursor_row_io.equip_prod_inst_type_cd,&lt;br/&gt;                   epi.billing_station_id = p_cursor_row_io.billing_station_id,&lt;br/&gt;                   epi.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   epi.modified_by = p_audit_user_i,&lt;br/&gt;                   epi.record_stat = &apos;A&apos;&lt;br/&gt;             WHERE epi.equip_prod_inst_id = p_cursor_row_io.equip_prod_inst_id;&lt;br/&gt;&lt;br/&gt;            -- did the type change from settop to non-settop or reverse?&lt;br/&gt;            l_settop_before :=&lt;br/&gt;               pkg_equip_utility.is_csg_settop_box (l_equip_prod_inst_type_cd);&lt;br/&gt;            l_settop_after :=&lt;br/&gt;               pkg_equip_utility.is_csg_settop_box&lt;br/&gt;                                      (p_cursor_row_io.equip_prod_inst_type_cd);&lt;br/&gt;&lt;br/&gt;            IF (l_settop_before &lt;&gt; l_settop_after)&lt;br/&gt;            THEN&lt;br/&gt;               -- fetch the settop box instance&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT *&lt;br/&gt;                    INTO l_settop_box&lt;br/&gt;                    FROM t_settop_box_instance sbi&lt;br/&gt;                   WHERE sbi.settop_box_instance_id =&lt;br/&gt;                                            p_cursor_row_io.equip_prod_inst_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_settop_box.settop_box_instance_id := NULL;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_settop_before)&lt;br/&gt;               THEN&lt;br/&gt;                  --delete settop box instance&lt;br/&gt;                  IF (l_settop_box.settop_box_instance_id IS NOT NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_settop_box_instance sbi&lt;br/&gt;                        SET sbi.record_stat = &apos;D&apos;&lt;br/&gt;                      WHERE sbi.settop_box_instance_id =&lt;br/&gt;                                            p_cursor_row_io.equip_prod_inst_id;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE                                          -- l_settop_after&lt;br/&gt;                  --create settop box instance&lt;br/&gt;                  IF (l_settop_box.settop_box_instance_id IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     da_settop_box_instance.ADD&lt;br/&gt;                        (process_rec                 =&gt; p_process_rec_i,&lt;br/&gt;                         estb_mac_address            =&gt; NULL,&lt;br/&gt;                         ecm_mac_address             =&gt; NULL,&lt;br/&gt;                         ethernet_mac_address        =&gt; NULL,&lt;br/&gt;                         cmci_mac_address            =&gt; NULL,&lt;br/&gt;                         rf4ce_mac_address           =&gt; NULL,&lt;br/&gt;                         settop_box_instance_id      =&gt; p_cursor_row_io.equip_prod_inst_id,&lt;br/&gt;                         serial_num                  =&gt; p_cursor_row_io.eqp_serial_relo,&lt;br/&gt;                         model_nm                    =&gt; NULL,&lt;br/&gt;                         soc_part_num                =&gt; NULL,&lt;br/&gt;                         manufacturer                =&gt; &apos;UNKNOWN&apos;,&lt;br/&gt;                         manufacturer_site           =&gt; NULL,&lt;br/&gt;                         manufacturer_date           =&gt; NULL,&lt;br/&gt;                         cas_id                      =&gt; NULL,&lt;br/&gt;                         audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                  ELSE&lt;br/&gt;                     UPDATE t_settop_box_instance sbi&lt;br/&gt;                        SET sbi.record_stat = &apos;A&apos;&lt;br/&gt;                      WHERE sbi.settop_box_instance_id =&lt;br/&gt;                                            p_cursor_row_io.equip_prod_inst_id;&lt;br/&gt;                  END IF;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      l_equip_prod_inst_id := p_cursor_row_io.equip_prod_inst_id;&lt;br/&gt;      RETURN l_equip_prod_inst_id;&lt;br/&gt;   END create_update_equipment;&lt;br/&gt;&lt;br/&gt;   FUNCTION create_account (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   t_userid,&lt;br/&gt;      p_cursor_row_i    IN   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      l_account_id    t_account_vantage_xref.account_id%TYPE;&lt;br/&gt;      l_record_stat   t_account_vantage_xref.record_stat%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT xref.account_id, xref.record_stat&lt;br/&gt;           INTO l_account_id, l_record_stat&lt;br/&gt;           FROM t_account_vantage_xref xref&lt;br/&gt;          WHERE xref.sub_acct_num = p_cursor_row_i.account_num;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            l_account_id := NULL;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (l_account_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         l_account_id :=&lt;br/&gt;            da_account.ADD&lt;br/&gt;                  (process_rec                     =&gt; p_process_rec_i,&lt;br/&gt;                   data_source_type_cd             =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                   account_num                     =&gt; p_cursor_row_i.account_num,&lt;br/&gt;                   account_nm                      =&gt; NULL,&lt;br/&gt;                   account_open_dt                 =&gt; NULL,&lt;br/&gt;                   account_close_dt                =&gt; NULL,&lt;br/&gt;                   account_type_cd                 =&gt; NULL,&lt;br/&gt;                   account_purpose_subtype_cd      =&gt; NULL,&lt;br/&gt;                   subaccount_ind                  =&gt; 0,&lt;br/&gt;                   account_qualifier_cd            =&gt; NULL,&lt;br/&gt;                   billing_station_id              =&gt; p_cursor_row_i.billing_station_id,&lt;br/&gt;                   audit_user                      =&gt; p_audit_user_i,&lt;br/&gt;                   dunning_group_cd                =&gt; NULL&lt;br/&gt;                  );&lt;br/&gt;         da_account_vantage_xref.ADD&lt;br/&gt;                                  (process_rec       =&gt; p_process_rec_i,&lt;br/&gt;                                   sub_acct_num      =&gt; p_cursor_row_i.account_num,&lt;br/&gt;                                   account_id        =&gt; l_account_id,&lt;br/&gt;                                   audit_user        =&gt; p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;      ELSIF (l_record_stat &lt;&gt; &apos;A&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         UPDATE t_account_vantage_xref xref&lt;br/&gt;            SET xref.record_stat = &apos;A&apos;&lt;br/&gt;          WHERE xref.sub_acct_num = p_cursor_row_i.account_num;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      RETURN l_account_id;&lt;br/&gt;   END create_account;&lt;br/&gt;&lt;br/&gt;   PROCEDURE connect_equipment (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   t_userid,&lt;br/&gt;      p_cursor_row_i    IN   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      l_record_stat   t_equip_instance_account.record_stat%TYPE;&lt;br/&gt;      l_account_id    t_equip_instance_account.account_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT record_stat, account_id&lt;br/&gt;           INTO l_record_stat, l_account_id&lt;br/&gt;           FROM t_equip_instance_account eia&lt;br/&gt;          WHERE eia.equip_prod_inst_id = p_cursor_row_i.equip_prod_inst_id;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            l_record_stat := NULL;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (l_record_stat IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         da_equip_instance_account.ADD&lt;br/&gt;                  (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                   account_id               =&gt; p_cursor_row_i.account_id,&lt;br/&gt;                   data_load_type_cd        =&gt; &apos;RRT&apos;,&lt;br/&gt;                   data_source_type_cd      =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                   equip_prod_inst_id       =&gt; p_cursor_row_i.equip_prod_inst_id,&lt;br/&gt;                   audit_user               =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;      ELSE&lt;br/&gt;         IF (l_record_stat = &apos;D&apos; OR l_account_id &lt;&gt; p_cursor_row_i.account_id&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE t_equip_instance_account eia&lt;br/&gt;               SET eia.record_stat = &apos;A&apos;,&lt;br/&gt;                   eia.account_id = p_cursor_row_i.account_id,&lt;br/&gt;                   eia.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   eia.modified_by = p_audit_user_i&lt;br/&gt;             WHERE eia.equip_prod_inst_id = p_cursor_row_i.equip_prod_inst_id;&lt;br/&gt;&lt;br/&gt;            IF (SQL%ROWCOUNT &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               -- Queue Old Account if it is diff then new account&lt;br/&gt;               IF (    l_record_stat = &apos;A&apos;&lt;br/&gt;                   AND l_account_id &lt;&gt; p_cursor_row_i.account_id&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  INSERT INTO stg.work_queue_vnt_eqp&lt;br/&gt;                              (keycol, valcol, record_stat,&lt;br/&gt;                               created_dttm, created_by&lt;br/&gt;                              )&lt;br/&gt;                       VALUES (&apos;ACCOUNT_ID&apos;, l_account_id, &apos;A&apos;,&lt;br/&gt;                               SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      -- Insert the account regardless into the queue, to satisfy the needs of equipment notification&lt;br/&gt;      INSERT INTO stg.work_queue_vnt_eqp&lt;br/&gt;                  (keycol, valcol, record_stat,&lt;br/&gt;                   created_dttm, created_by&lt;br/&gt;                  )&lt;br/&gt;           VALUES (&apos;ACCOUNT_ID&apos;, p_cursor_row_i.account_id, &apos;A&apos;,&lt;br/&gt;                   SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;   END connect_equipment;&lt;br/&gt;&lt;br/&gt;   PROCEDURE disconnect_equipment (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   t_userid,&lt;br/&gt;      p_cursor_row_i    IN   cur_stg_rrt_elo_loca%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name                   := &apos;DISCONNECT_EQUIPMENT&apos;;&lt;br/&gt;      l_record_stat   t_equip_instance_account.record_stat%TYPE;&lt;br/&gt;      l_account_id    t_equip_instance_account.account_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT record_stat, account_id&lt;br/&gt;           INTO l_record_stat, l_account_id&lt;br/&gt;           FROM t_equip_instance_account eia&lt;br/&gt;          WHERE eia.equip_prod_inst_id = p_cursor_row_i.equip_prod_inst_id;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            l_record_stat := NULL;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (l_record_stat IS NOT NULL)&lt;br/&gt;      THEN&lt;br/&gt;         IF (l_account_id = p_cursor_row_i.account_id)&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE t_equip_instance_account eia&lt;br/&gt;               SET record_stat = &apos;D&apos;,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE eia.equip_prod_inst_id = p_cursor_row_i.equip_prod_inst_id;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      -- Insert the account regardless into the queue, to satisfy the needs of equipment notification&lt;br/&gt;      INSERT INTO stg.work_queue_vnt_eqp&lt;br/&gt;                  (keycol, valcol, record_stat,&lt;br/&gt;                   created_dttm, created_by&lt;br/&gt;                  )&lt;br/&gt;           VALUES (&apos;ACCOUNT_ID&apos;, p_cursor_row_i.account_id, &apos;A&apos;,&lt;br/&gt;                   SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;   END disconnect_equipment;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure update_staging&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure  performs update on the staging table and set record load code to P&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.vnt_rrt_elo_location s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i (i).record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;&lt;br/&gt;    PROCEDURE finalize (p_audit_user_i IN VARCHAR2)&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure finalize&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Called after rrt_elo_location and rrt_eqp_base have been processed.&lt;br/&gt;||                       1. Updates t_equip_prod_inst;&lt;br/&gt;||                       2. Updates t_settop_box_instance;&lt;br/&gt;||                       3. Delete the rows from stg.work_queue_vnt_eqp for &apos;EQUIP_PROD_INST_ID&apos;.&lt;br/&gt;||                       4. Puts the distinct account number from stg.work_queue_vnt_eqp on the advanced queue;&lt;br/&gt;||                       5. Deletes the rows from stg.work_queue_vnt_eqp for &apos;ACCOUNT_ID&apos;.&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;FINALIZE&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_equip_utility.finalize (l_process_rec, p_audit_user_i);&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END finalize;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_equip_inst (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   t_userid,&lt;br/&gt;      p_equip_prod_inst_id   IN   t_equip_prod_inst.equip_prod_inst_id%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;   BEGIN&lt;br/&gt;      NULL;&lt;br/&gt;   END update_equip_inst;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_settop_box (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   t_userid,&lt;br/&gt;      p_equip_prod_inst_id   IN   t_equip_prod_inst.equip_prod_inst_id%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      l_settop_box_instance_id   t_settop_box_instance.settop_box_instance_id%TYPE;&lt;br/&gt;      l_estb_mac_address         t_settop_box_instance.estb_mac_address%TYPE;&lt;br/&gt;      l_ecm_mac_address          t_settop_box_instance.ecm_mac_address%TYPE;&lt;br/&gt;      l_record_stat              t_settop_box_instance.record_stat%TYPE;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_settop_box&lt;br/&gt;      IS&lt;br/&gt;         SELECT sb.estb_mac_address, sb.ecm_mac_address,&lt;br/&gt;                pkg_equip_utility.cnvrt_eqmt_addr&lt;br/&gt;                                 (ec01.equip_mac_address_id)&lt;br/&gt;                                                           AS mac_address_01,&lt;br/&gt;                pkg_equip_utility.cnvrt_eqmt_addr&lt;br/&gt;                         (ec01.equip_sec_mac_address_id)&lt;br/&gt;                                                       AS sec_mac_address_01,&lt;br/&gt;                pkg_equip_utility.cnvrt_eqmt_addr&lt;br/&gt;                                 (ecem.equip_mac_address_id)&lt;br/&gt;                                                           AS mac_address_em,&lt;br/&gt;                pkg_equip_utility.cnvrt_eqmt_addr&lt;br/&gt;                         (ecem.equip_sec_mac_address_id)&lt;br/&gt;                                                       AS sec_mac_address_em,&lt;br/&gt;                pkg_equip_utility.cnvrt_eqmt_addr&lt;br/&gt;                                 (ecvh.equip_mac_address_id)&lt;br/&gt;                                                           AS mac_address_vh,&lt;br/&gt;                pkg_equip_utility.cnvrt_eqmt_addr&lt;br/&gt;                         (ecvh.equip_sec_mac_address_id)&lt;br/&gt;                                                       AS sec_mac_address_vh,&lt;br/&gt;                sb.record_stat&lt;br/&gt;           FROM t_settop_box_instance sb LEFT OUTER JOIN t_equip_component ec01&lt;br/&gt;                ON ec01.equip_prod_inst_id = sb.settop_box_instance_id&lt;br/&gt;              AND ec01.equip_component_type_cd = &apos;01&apos;&lt;br/&gt;                LEFT OUTER JOIN t_equip_component ecem&lt;br/&gt;                ON ecem.equip_prod_inst_id = sb.settop_box_instance_id&lt;br/&gt;              AND ecem.equip_component_type_cd = &apos;EM&apos;&lt;br/&gt;                LEFT OUTER JOIN t_equip_component ecvh&lt;br/&gt;                ON ecvh.equip_prod_inst_id = sb.settop_box_instance_id&lt;br/&gt;              AND ecvh.equip_component_type_cd = &apos;VH&apos;&lt;br/&gt;          WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_settop_box_instance_id := p_equip_prod_inst_id;&lt;br/&gt;&lt;br/&gt;      FOR box IN cur_settop_box&lt;br/&gt;      LOOP&lt;br/&gt;         l_estb_mac_address :=&lt;br/&gt;            NVL (box.mac_address_01,&lt;br/&gt;                 NVL (box.sec_mac_address_vh, box.mac_address_vh)&lt;br/&gt;                );&lt;br/&gt;&lt;br/&gt;         IF (box.mac_address_01 IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            l_ecm_mac_address := box.mac_address_em;&lt;br/&gt;         ELSE&lt;br/&gt;            l_ecm_mac_address := NULL;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (   (NVL (l_estb_mac_address, &apos;X&apos;) &lt;&gt;&lt;br/&gt;                                               NVL (box.estb_mac_address, &apos;X&apos;)&lt;br/&gt;                )&lt;br/&gt;             OR (NVL (l_ecm_mac_address, &apos;X&apos;) &lt;&gt;&lt;br/&gt;                                                NVL (box.ecm_mac_address, &apos;X&apos;)&lt;br/&gt;                )&lt;br/&gt;             OR box.record_stat &lt;&gt; &apos;A&apos;&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE t_settop_box_instance sbi&lt;br/&gt;               SET sbi.estb_mac_address = l_estb_mac_address,&lt;br/&gt;                   sbi.ecm_mac_address = l_ecm_mac_address,&lt;br/&gt;                   sbi.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   sbi.modified_by = p_audit_user_i,&lt;br/&gt;                   sbi.record_stat = &apos;A&apos;&lt;br/&gt;             WHERE sbi.settop_box_instance_id = p_equip_prod_inst_id;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;   END update_settop_box;&lt;br/&gt;END pkg_vnt_process_rrt_elo_loca;</source>
</body>
</PackageOracle>
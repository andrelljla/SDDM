<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_CORE_PURGE" directorySegmentName="seg_6" id="2222DB90-A872-C1A3-DB1A-6730B28DA56B">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_CORE_PURGE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:16:47 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_CORE_PURGE&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||Program Name    : pkg_core_purge&lt;br/&gt;||Created By      : knoll&lt;br/&gt;||Created Date    : 24-Mar-2015&lt;br/&gt;||Subject Area    : Core&lt;br/&gt;||Description     : Various procedures to apply purging rules to core tables.&lt;br/&gt;||Change log      :&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;   PROCEDURE vnt_hard_del (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_batch_size_i   IN   NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_soft_del (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_batch_size_i   IN   NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;END pkg_core_purge;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_CORE_PURGE" id="2222DB90-A872-C1A3-DB1A-6730B28DA56B">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_CORE_PURGE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:16:51 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_CORE_PURGE&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||Program Name    : pkg_core_purge&lt;br/&gt;||Created By      : knoll&lt;br/&gt;||Created Date    : 24-Mar-2015&lt;br/&gt;||Subject Area    : Core&lt;br/&gt;||Description     : Various procedures to apply purging rules to core tables in CHTR.&lt;br/&gt;||Change log      :&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;&lt;br/&gt;   -- TYPES&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_delete_type IS CHAR (4);&lt;br/&gt;&lt;br/&gt;   TYPE t_delete_key IS RECORD (&lt;br/&gt;      surrogate_id   NUMBER (19)&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   TYPE t_delete_key_tbl IS TABLE OF t_delete_key&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_delete_target IS RECORD (&lt;br/&gt;      target_name          t_unit_name,&lt;br/&gt;      surrogate_key_name   t_unit_name,&lt;br/&gt;      delete_count         NUMBER (11)&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   TYPE t_delete_target_tbl IS TABLE OF t_delete_target&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_bulk_errors            EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   c_soft_delete   CONSTANT t_delete_type := &apos;SOFT&apos;;&lt;br/&gt;   c_hard_delete   CONSTANT t_delete_type := &apos;HARD&apos;;&lt;br/&gt;   c_pkg_name      CONSTANT t_unit_name   := &apos;PKG_CORE_PURGE&apos;;&lt;br/&gt;   -- GLOBALS&lt;br/&gt;   g_bulk_batchsize         NUMBER (9);&lt;br/&gt;&lt;br/&gt;   -- FORWARD DECLARATIONS&lt;br/&gt;   PROCEDURE vnt_del_prod_order (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_prod_order_item (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_special_request (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_special_request_item (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_work_order (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_work_order_item (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_ticket (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_equip_component (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_equip_prod_inst (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE do_soft_delete (&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_i        IN              sys_refcursor,&lt;br/&gt;      p_target_tbl_i    IN OUT NOCOPY   t_delete_target_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION do_soft_delete_target (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_target_i        IN   t_delete_target,&lt;br/&gt;      p_key_tbl_i       IN   t_delete_key_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE do_hard_delete (&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_i        IN              sys_refcursor,&lt;br/&gt;      p_target_tbl_i    IN OUT NOCOPY   t_delete_target_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION do_hard_delete_target (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_target_i        IN   t_delete_target,&lt;br/&gt;      p_key_tbl_i       IN   t_delete_key_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE add_target (&lt;br/&gt;      p_target_table_i   IN OUT NOCOPY   t_delete_target_tbl,&lt;br/&gt;      p_target_i         IN              t_unit_name,&lt;br/&gt;      p_key_name_i       IN              t_unit_name&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION get_rule_value_num (p_rule_key_i IN VARCHAR2)&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;-- BEGIN PUBLIC PROCEDURES&lt;br/&gt;   PROCEDURE vnt_soft_del (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_batch_size_i   IN   NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_soft_del&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        :&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;VNT_SOFT_DEL&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      g_bulk_batchsize := p_batch_size_i;&lt;br/&gt;      vnt_del_prod_order_item (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      vnt_del_prod_order (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      vnt_del_special_request_item (p_audit_user_i,&lt;br/&gt;                                    l_process_rec,&lt;br/&gt;                                    c_soft_delete&lt;br/&gt;                                   );&lt;br/&gt;      vnt_del_special_request (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      vnt_del_work_order_item (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      vnt_del_work_order (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      vnt_del_ticket (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      vnt_del_equip_component (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      vnt_del_equip_prod_inst (p_audit_user_i, l_process_rec, c_soft_delete);&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_soft_del;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_hard_del (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_batch_size_i   IN   NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_hard_del&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        :&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;VNT_HARD_DEL&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      g_bulk_batchsize := p_batch_size_i;&lt;br/&gt;      vnt_del_prod_order_item (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      vnt_del_prod_order (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      vnt_del_special_request_item (p_audit_user_i,&lt;br/&gt;                                    l_process_rec,&lt;br/&gt;                                    c_hard_delete&lt;br/&gt;                                   );&lt;br/&gt;      vnt_del_special_request (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      vnt_del_work_order_item (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      vnt_del_work_order (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      vnt_del_ticket (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      vnt_del_equip_component (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      vnt_del_equip_prod_inst (p_audit_user_i, l_process_rec, c_hard_delete);&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_hard_del;&lt;br/&gt;&lt;br/&gt;-- END PUBLIC PROCEDURES&lt;br/&gt;   PROCEDURE vnt_del_prod_order (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_prod_order&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class     : prod_order&lt;br/&gt;||                       superclass: bus_interact, request, customer_order&lt;br/&gt;||                       attribute : prod_order_status, prod_order_reason, prod_order_cancel,&lt;br/&gt;||                                   prod_order_completion, bus_interact_party_role&lt;br/&gt;||                       xref      : bus_inter_vantage_ord_xref&lt;br/&gt;||                       other     : bus_interact_related&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_PROD_ORDER&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT po.product_order_id &apos;&lt;br/&gt;            || &apos;FROM t_prod_order po &apos;&lt;br/&gt;            || &apos;INNER JOIN t_prod_order_status pos &apos;&lt;br/&gt;            || &apos;ON pos.product_order_id=po.product_order_id &apos;&lt;br/&gt;            || &apos;WHERE po.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND po.actual_completion_dttm IS NOT NULL &apos;&lt;br/&gt;            || &apos;   AND po.actual_completion_dttm &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND pos.product_order_status_cd IN (&apos;&apos;X&apos;&apos;,&apos;&apos;C&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND po.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.product_order_id &apos;&lt;br/&gt;            || &apos;FROM t_prod_order t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_interact_related&apos;,&lt;br/&gt;                  &apos;parent_bus_interact_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_inter_vantage_ord_xref&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_prod_order_status&apos;, &apos;product_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_prod_order_reason&apos;, &apos;product_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_prod_order_cancel&apos;, &apos;product_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_prod_order_completion&apos;, &apos;product_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_prod_order&apos;, &apos;product_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_customer_order&apos;, &apos;customer_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_request&apos;, &apos;request_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact_party_role&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact&apos;, &apos;bus_interact_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;PROD_ORDER_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_prod_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_prod_order_item (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_prod_order_item&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class: prod_order_item&lt;br/&gt;||                       superclass: bus_interact_item&lt;br/&gt;||                       attribute: prod_order_item_status&lt;br/&gt;||                       xref: bus_interact_item_vnt_xref&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_PROD_ORDER_ITEM&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT poi.product_order_item_id &apos;&lt;br/&gt;            || &apos;FROM t_prod_order_item poi &apos;&lt;br/&gt;            || &apos;INNER JOIN t_prod_order po &apos;&lt;br/&gt;            || &apos;ON po.product_order_id=poi.product_order_id &apos;&lt;br/&gt;            || &apos;INNER JOIN t_prod_order_status pos &apos;&lt;br/&gt;            || &apos;ON pos.product_order_id=po.product_order_id &apos;&lt;br/&gt;            || &apos;WHERE po.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND po.actual_completion_dttm IS NOT NULL &apos;&lt;br/&gt;            || &apos;   AND po.actual_completion_dttm &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND pos.product_order_status_cd IN (&apos;&apos;X&apos;&apos;,&apos;&apos;C&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND poi.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.product_order_item_id &apos;&lt;br/&gt;            || &apos;FROM t_prod_order_item t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_interact_item_vnt_xref&apos;,&lt;br/&gt;                  &apos;bus_interact_item_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_prod_order_item_status&apos;,&lt;br/&gt;                  &apos;product_order_item_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_prod_order_item&apos;, &apos;product_order_item_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact_item&apos;, &apos;bus_interact_item_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;PROD_ORDER_ITEM_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_prod_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_special_request (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_special_request&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class     : special_request&lt;br/&gt;||                       superclass: bus_interact, request&lt;br/&gt;||                       attribute : special_request_status, special_request_reason, special_request_cancel,&lt;br/&gt;||                                   special_request_completion, bus_interact_party_role&lt;br/&gt;||                       xref      : bus_inter_vantage_ord_xref&lt;br/&gt;||                       other     : bus_interact_related&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_SPECIAL_REQUEST&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for soft delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT sr.special_request_id &apos;&lt;br/&gt;            || &apos;FROM t_special_request sr &apos;&lt;br/&gt;            || &apos;INNER JOIN t_special_request_status srs &apos;&lt;br/&gt;            || &apos;ON srs.special_request_id=sr.special_request_id &apos;&lt;br/&gt;            || &apos;WHERE sr.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND sr.actual_completion_dttm IS NOT NULL &apos;&lt;br/&gt;            || &apos;   AND sr.actual_completion_dttm &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND srs.special_request_status_cd IN (&apos;&apos;X&apos;&apos;,&apos;&apos;C&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND sr.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.special_request_id &apos;&lt;br/&gt;            || &apos;FROM t_special_request t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_interact_related&apos;,&lt;br/&gt;                  &apos;parent_bus_interact_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_inter_vantage_ord_xref&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_special_request_status&apos;,&lt;br/&gt;                  &apos;special_request_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_special_request_reason&apos;,&lt;br/&gt;                  &apos;special_request_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_special_request_cancel&apos;,&lt;br/&gt;                  &apos;special_request_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_special_request_completion&apos;,&lt;br/&gt;                  &apos;special_request_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_special_request&apos;, &apos;special_request_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_request&apos;, &apos;request_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact_party_role&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact&apos;, &apos;bus_interact_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;SPECIAL_REQUEST_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_special_request;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_special_request_item (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_special_request_item&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class: special_request_item&lt;br/&gt;||                       superclass: bus_interact_item&lt;br/&gt;||                       attribute: special_request_item_status&lt;br/&gt;||                       xref: bus_interact_item_vnt_xref&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name       := &apos;VNT_DEL_SPECIAL_REQUEST_ITEM&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT sri.special_request_item_id &apos;&lt;br/&gt;            || &apos;FROM t_special_request_item sri &apos;&lt;br/&gt;            || &apos;INNER JOIN t_special_request sr &apos;&lt;br/&gt;            || &apos;ON sr.special_request_id=sri.special_request_order_id &apos;&lt;br/&gt;            || &apos;INNER JOIN t_special_request_status srs &apos;&lt;br/&gt;            || &apos;ON srs.special_request_id=sr.special_request_id &apos;&lt;br/&gt;            || &apos;WHERE sr.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND sr.actual_completion_dttm IS NOT NULL &apos;&lt;br/&gt;            || &apos;   AND sr.actual_completion_dttm &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND srs.special_request_status_cd IN (&apos;&apos;X&apos;&apos;,&apos;&apos;C&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND sri.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.special_request_item_id &apos;&lt;br/&gt;            || &apos;FROM t_special_request_item t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_interact_item_vnt_xref&apos;,&lt;br/&gt;                  &apos;bus_interact_item_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_special_request_item_status&apos;,&lt;br/&gt;                  &apos;special_request_item_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_special_request_item&apos;,&lt;br/&gt;                  &apos;special_request_item_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact_item&apos;, &apos;bus_interact_item_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;SPECIAL_REQUEST_ITEM_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_special_request_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_work_order (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_work_order&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class     : work_order&lt;br/&gt;||                       superclass: bus_interact, request&lt;br/&gt;||                       attribute : work_order_status, work_order_cancel,&lt;br/&gt;||                                   work_order_completion, bus_interact_party_role&lt;br/&gt;||                       xref      : busn_intrn_vnt_job_xref&lt;br/&gt;||                       other     : bus_interact_related&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_WORK_ORDER&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT wo.work_order_id &apos;&lt;br/&gt;            || &apos;FROM t_work_order wo &apos;&lt;br/&gt;            || &apos;INNER JOIN t_work_order_status wos &apos;&lt;br/&gt;            || &apos;ON wos.work_order_id=wo.work_order_id &apos;&lt;br/&gt;            || &apos;WHERE wo.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND wo.actual_completion_dttm IS NOT NULL &apos;&lt;br/&gt;            || &apos;   AND wo.actual_completion_dttm &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND wos.work_order_status_cd IN (&apos;&apos;X&apos;&apos;,&apos;&apos;C&apos;&apos;,&apos;&apos;D&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND wo.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.work_order_id &apos;&lt;br/&gt;            || &apos;FROM t_work_order t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_interact_related&apos;,&lt;br/&gt;                  &apos;child_bus_interact_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_busn_intrn_vnt_job_xref&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_work_order_status&apos;, &apos;work_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_work_order_cancel&apos;, &apos;work_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_work_order_completion&apos;, &apos;work_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_work_order&apos;, &apos;work_order_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_request&apos;, &apos;request_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact_party_role&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact&apos;, &apos;bus_interact_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;WORK_ORDER_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_work_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_work_order_item (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_work_order_item&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class: work_order_item&lt;br/&gt;||                       superclass: bus_interact_item&lt;br/&gt;||                       attribute: work_order_item_status&lt;br/&gt;||                       xref: bus_interact_item_vnt_xref&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_WORK_ORDER_ITEM&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT woi.work_order_item_id &apos;&lt;br/&gt;            || &apos;FROM t_work_order_item woi &apos;&lt;br/&gt;            || &apos;INNER JOIN t_work_order wo &apos;&lt;br/&gt;            || &apos;ON wo.work_order_id=woi.work_order_id &apos;&lt;br/&gt;            || &apos;INNER JOIN t_work_order_status wos &apos;&lt;br/&gt;            || &apos;ON wos.work_order_id=wo.work_order_id &apos;&lt;br/&gt;            || &apos;WHERE wo.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND wo.actual_completion_dttm IS NOT NULL &apos;&lt;br/&gt;            || &apos;   AND wo.actual_completion_dttm &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND wos.work_order_status_cd IN (&apos;&apos;X&apos;&apos;,&apos;&apos;C&apos;&apos;,&apos;&apos;D&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND woi.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.work_order_item_id &apos;&lt;br/&gt;            || &apos;FROM t_work_order_item t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_interact_item_vnt_xref&apos;,&lt;br/&gt;                  &apos;bus_interact_item_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_work_order_item_status&apos;,&lt;br/&gt;                  &apos;work_order_item_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_work_order_item&apos;, &apos;work_order_item_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact_item&apos;, &apos;bus_interact_item_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;WORK_ORDER_ITEM_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_work_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_ticket (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_ticket&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class     : ticket&lt;br/&gt;||                       superclass: bus_interact&lt;br/&gt;||                       attribute : ticket_status, ticket_reason, ticket_cancel,&lt;br/&gt;||                                   ticket_completion, bus_interact_party_role&lt;br/&gt;||                       xref      : bus_inter_vantage_ord_xref&lt;br/&gt;||                       other     : bus_interact_related&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_TICKET&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.ticket_interaction_id &apos;&lt;br/&gt;            || &apos;FROM t_ticket t &apos;&lt;br/&gt;            || &apos;INNER JOIN t_ticket_status ts &apos;&lt;br/&gt;            || &apos;ON ts.ticket_interaction_id=t.ticket_interaction_id &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND t.completion_dt IS NOT NULL &apos;&lt;br/&gt;            || &apos;   AND t.completion_dt &lt; TRUNC(SYSDATE - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND ts.ticket_status_cd IN (&apos;&apos;X&apos;&apos;,&apos;&apos;C&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.ticket_interaction_id &apos;&lt;br/&gt;            || &apos;FROM t_ticket t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_interact_related&apos;,&lt;br/&gt;                  &apos;parent_bus_interact_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_bus_inter_vantage_ord_xref&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_ticket_status&apos;, &apos;ticket_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_ticket_reason&apos;, &apos;ticket_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_ticket_cancel&apos;, &apos;ticket_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_ticket_completion&apos;,&lt;br/&gt;                  &apos;ticket_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_ticket&apos;, &apos;ticket_interaction_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact_party_role&apos;,&lt;br/&gt;                  &apos;bus_interact_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_bus_interact&apos;, &apos;bus_interact_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;TICKET_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_ticket;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_equip_component (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_equip_component&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class     : equip_component&lt;br/&gt;||                       attribute : equip_component_status&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_EQUIP_COMPONENT&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT ec.equip_component_id &apos;&lt;br/&gt;            || &apos;FROM t_equip_component ec &apos;&lt;br/&gt;            || &apos;INNER JOIN t_equip_component_status ecs &apos;&lt;br/&gt;            || &apos;ON ecs.equip_component_id=ec.equip_component_id &apos;&lt;br/&gt;            || &apos;WHERE ec.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND ecs.equip_status_cd = &apos;&apos;Z&apos;&apos; &apos;&lt;br/&gt;            || &apos;   AND ec.record_stat = &apos;&apos;A&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.equip_component_id &apos;&lt;br/&gt;            || &apos;FROM t_equip_component t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_equip_component_status&apos;,&lt;br/&gt;                  &apos;equip_component_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_equip_component&apos;, &apos;equip_component_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_equip_component;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_del_equip_prod_inst (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_delete_type_i   IN   t_delete_type&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_del_equip_prod_inst&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Delete&lt;br/&gt;||                       class     : equip_prod_inst&lt;br/&gt;||                       superclass: product_instance&lt;br/&gt;||                       attribute : equip_component_status, settop_box_instance&lt;br/&gt;||                       other     : equip_instance_account&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name         t_unit_name         := &apos;VNT_DEL_EQUIP_PROD_INST&apos;;&lt;br/&gt;      l_rule_days         NUMBER;&lt;br/&gt;      l_target_tbl        t_delete_target_tbl;&lt;br/&gt;      l_row_cnt           NUMBER;&lt;br/&gt;      -- Cursor to select the surrogate ids eligible for delete&lt;br/&gt;      cur_delete          sys_refcursor;&lt;br/&gt;      l_soft_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT epi.equip_prod_inst_id &apos;&lt;br/&gt;            || &apos;FROM t_equip_prod_inst epi &apos;&lt;br/&gt;            || &apos;INNER JOIN t_equip_component ec &apos;&lt;br/&gt;            || &apos;ON ec.equip_prod_inst_id=epi.equip_prod_inst_id &apos;&lt;br/&gt;            || &apos;LEFT OUTER JOIN t_equip_instance_account eia &apos;&lt;br/&gt;            || &apos;ON eia.equip_prod_inst_id=epi.equip_prod_inst_id &apos;&lt;br/&gt;            || &apos;AND eia.record_stat=&apos;&apos;A&apos;&apos; &apos;&lt;br/&gt;            || &apos;WHERE ec.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;AND eia.account_id IS NULL &apos;&lt;br/&gt;            || &apos;GROUP BY epi.equip_prod_inst_id &apos;&lt;br/&gt;            || &apos;HAVING MIN(ec.record_stat) = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;      l_hard_cursor_sql   VARCHAR2 (2048)&lt;br/&gt;         :=    &apos;SELECT t.equip_prod_inst_id &apos;&lt;br/&gt;            || &apos;FROM t_equip_prod_inst t &apos;&lt;br/&gt;            || &apos;WHERE t.data_source_type_cd IN (&apos;&apos;BRS&apos;&apos;,&apos;&apos;VNT&apos;&apos;) &apos;&lt;br/&gt;            || &apos;   AND GREATEST(t.created_dttm,NVL(t.modified_dttm,t.created_dttm)) &lt; TRUNC(SYSTIMESTAMP - :rule_days) &apos;&lt;br/&gt;            || &apos;   AND t.record_stat = &apos;&apos;D&apos;&apos; &apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_equip_instance_account&apos;,&lt;br/&gt;                  &apos;equip_prod_inst_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl,&lt;br/&gt;                  &apos;t_settop_box_instance&apos;,&lt;br/&gt;                  &apos;settop_box_instance_id&apos;&lt;br/&gt;                 );&lt;br/&gt;      add_target (l_target_tbl, &apos;t_equip_prod_inst&apos;, &apos;equip_prod_inst_id&apos;);&lt;br/&gt;      add_target (l_target_tbl, &apos;t_product_instance&apos;, &apos;product_instance_id&apos;);&lt;br/&gt;&lt;br/&gt;      IF (p_delete_type_i = c_hard_delete)&lt;br/&gt;      THEN&lt;br/&gt;         l_rule_days := get_rule_value_num (&apos;HARD_DELETE_DAYS&apos;);&lt;br/&gt;&lt;br/&gt;         OPEN cur_delete FOR l_hard_cursor_sql USING l_rule_days;&lt;br/&gt;&lt;br/&gt;         do_hard_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      ELSE&lt;br/&gt;         OPEN cur_delete FOR l_soft_cursor_sql;&lt;br/&gt;&lt;br/&gt;         do_soft_delete (p_audit_user_i,&lt;br/&gt;                         p_process_rec_i,&lt;br/&gt;                         cur_delete,&lt;br/&gt;                         l_target_tbl&lt;br/&gt;                        );&lt;br/&gt;&lt;br/&gt;         CLOSE cur_delete;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_delete%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_delete;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RAISE;&lt;br/&gt;   END vnt_del_equip_prod_inst;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_rule_value_num (p_rule_key_i IN VARCHAR2)&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Function get_rule_value_num&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Retrieve the rule value for a particular key from t_date_purge_rule.&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_rule_value   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      SELECT TO_NUMBER (rule_value)&lt;br/&gt;        INTO l_rule_value&lt;br/&gt;        FROM t_data_purge_rule&lt;br/&gt;       WHERE rule_key = p_rule_key_i;&lt;br/&gt;&lt;br/&gt;      RETURN l_rule_value;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         raise_application_error (-20001,&lt;br/&gt;                                     &apos;Unable to retrieve rule value for &apos;&lt;br/&gt;                                  || p_rule_key_i&lt;br/&gt;                                 );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END get_rule_value_num;&lt;br/&gt;&lt;br/&gt;   PROCEDURE do_soft_delete (&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_i        IN              sys_refcursor,&lt;br/&gt;      p_target_tbl_i    IN OUT NOCOPY   t_delete_target_tbl&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Function do_soft_delete&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Iterate through the cursor data and delete target rows.&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name      := &apos;DO_SOFT_DELETE&apos;;&lt;br/&gt;      l_cursor_data   t_delete_key_tbl;&lt;br/&gt;      l_row_cnt       NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH p_cursor_i&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_bulk_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. p_target_tbl_i.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               l_row_cnt :=&lt;br/&gt;                  do_soft_delete_target (p_audit_user_i,&lt;br/&gt;                                         p_process_rec_i,&lt;br/&gt;                                         p_target_tbl_i (i),&lt;br/&gt;                                         l_cursor_data&lt;br/&gt;                                        );&lt;br/&gt;               p_target_tbl_i (i).delete_count :=&lt;br/&gt;                                   p_target_tbl_i (i).delete_count + l_row_cnt;&lt;br/&gt;            END LOOP;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_bulk_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (p_process_rec_i.process_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      -- log the delete counts for each target&lt;br/&gt;      FOR i IN 1 .. p_target_tbl_i.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         pkg_logging.log_information (p_process_rec_i,&lt;br/&gt;                                         p_target_tbl_i (i).target_name&lt;br/&gt;                                      || &apos; soft deletes = &apos;&lt;br/&gt;                                      || p_target_tbl_i (i).delete_count&lt;br/&gt;                                     );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END do_soft_delete;&lt;br/&gt;&lt;br/&gt;   FUNCTION do_soft_delete_target (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_target_i        IN   t_delete_target,&lt;br/&gt;      p_key_tbl_i       IN   t_delete_key_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Function do_soft_delete_target&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : For the input p_target_i, soft delete rows identified by the keys in p_key_tbl_i.&lt;br/&gt;||                       Return the count of rows soft deleted.&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name   t_unit_name     := &apos;DO_SOFT_DELETE_TARGET&apos;;&lt;br/&gt;      l_sql         VARCHAR2 (2048) := &apos;&apos;;&lt;br/&gt;      l_cnt         NUMBER          := 0;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_sql := l_sql || &apos;UPDATE &apos; || p_target_i.target_name || &apos; t&apos;;&lt;br/&gt;      l_sql := l_sql || &apos; SET t.record_stat=&apos;&apos;D&apos;&apos;&apos;;&lt;br/&gt;      l_sql := l_sql || &apos; ,t.modified_by=&apos; || &apos;&apos;&apos;&apos; || p_audit_user_i || &apos;&apos;&apos;&apos;;&lt;br/&gt;      l_sql := l_sql || &apos; ,t.modified_dttm=SYSDATE&apos;;&lt;br/&gt;      l_sql :=&lt;br/&gt;              l_sql || &apos; WHERE t.&apos; || p_target_i.surrogate_key_name || &apos;= :1&apos;;&lt;br/&gt;      l_sql := l_sql || &apos; AND t.record_stat=&apos;&apos;A&apos;&apos;&apos;;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_key_tbl_i.COUNT SAVE EXCEPTIONS&lt;br/&gt;            EXECUTE IMMEDIATE l_sql&lt;br/&gt;                        USING p_key_tbl_i (i).surrogate_id;&lt;br/&gt;         l_cnt := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_cnt := SQL%ROWCOUNT;&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                     (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos; bulk update exception, target=&apos;&lt;br/&gt;                                      || p_target_i.target_name&lt;br/&gt;                                      || &apos;, key=&apos;&lt;br/&gt;                                      || p_key_tbl_i (l_coll_idx).surrogate_id&lt;br/&gt;                                      || &apos;, exception=&apos;&lt;br/&gt;                                      || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                                     );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      RETURN l_cnt;&lt;br/&gt;   END do_soft_delete_target;&lt;br/&gt;&lt;br/&gt;   PROCEDURE do_hard_delete (&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_i        IN              sys_refcursor,&lt;br/&gt;      p_target_tbl_i    IN OUT NOCOPY   t_delete_target_tbl&lt;br/&gt;   )&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Function do_hard_delete&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : Iterate through the cursor data and delete target rows.&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name     t_unit_name      := &apos;DO_HARD_DELETE&apos;;&lt;br/&gt;      l_cursor_data   t_delete_key_tbl;&lt;br/&gt;      l_row_cnt       NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH p_cursor_i&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_bulk_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. p_target_tbl_i.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, target=&apos;&lt;br/&gt;                                      || p_target_tbl_i (i).target_name&lt;br/&gt;                                     );&lt;br/&gt;               l_row_cnt :=&lt;br/&gt;                  do_hard_delete_target (p_audit_user_i,&lt;br/&gt;                                         p_process_rec_i,&lt;br/&gt;                                         p_target_tbl_i (i),&lt;br/&gt;                                         l_cursor_data&lt;br/&gt;                                        );&lt;br/&gt;               p_target_tbl_i (i).delete_count :=&lt;br/&gt;                                   p_target_tbl_i (i).delete_count + l_row_cnt;&lt;br/&gt;            END LOOP;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_bulk_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (p_process_rec_i.process_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      -- log the delete counts for each target&lt;br/&gt;      FOR i IN 1 .. p_target_tbl_i.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         pkg_logging.log_information (p_process_rec_i,&lt;br/&gt;                                         p_target_tbl_i (i).target_name&lt;br/&gt;                                      || &apos; hard deletes = &apos;&lt;br/&gt;                                      || p_target_tbl_i (i).delete_count&lt;br/&gt;                                     );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END do_hard_delete;&lt;br/&gt;&lt;br/&gt;   FUNCTION do_hard_delete_target (&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2,&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_target_i        IN   t_delete_target,&lt;br/&gt;      p_key_tbl_i       IN   t_delete_key_tbl&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Function do_hard_delete_target&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : For the input p_target_i, hard delete rows identified by the keys in p_key_tbl_i.&lt;br/&gt;||                       Return the count of rows hard deleted.&lt;br/&gt;****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name   t_unit_name     := &apos;DO_HARD_DELETE_TARGET&apos;;&lt;br/&gt;      l_sql         VARCHAR2 (2048) := &apos;&apos;;&lt;br/&gt;      l_cnt         NUMBER          := 0;&lt;br/&gt;      l_errors      NUMBER;&lt;br/&gt;      l_coll_idx    PLS_INTEGER;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_sql := l_sql || &apos;DELETE FROM &apos; || p_target_i.target_name || &apos; t&apos;;&lt;br/&gt;      l_sql :=&lt;br/&gt;              l_sql || &apos; WHERE t.&apos; || p_target_i.surrogate_key_name || &apos;= :1&apos;;&lt;br/&gt;      l_sql := l_sql || &apos; AND t.record_stat = &apos;&apos;D&apos;&apos;&apos;;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN 1 .. p_key_tbl_i.COUNT SAVE EXCEPTIONS&lt;br/&gt;            EXECUTE IMMEDIATE l_sql&lt;br/&gt;                        USING p_key_tbl_i (i).surrogate_id;&lt;br/&gt;         l_cnt := SQL%ROWCOUNT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN c_bulk_errors&lt;br/&gt;         THEN&lt;br/&gt;            l_cnt := SQL%ROWCOUNT;&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                     (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos; bulk delete exception, target=&apos;&lt;br/&gt;                                      || p_target_i.target_name&lt;br/&gt;                                      || &apos;, key=&apos;&lt;br/&gt;                                      || p_key_tbl_i (l_coll_idx).surrogate_id&lt;br/&gt;                                      || &apos;, exception=&apos;&lt;br/&gt;                                      || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                                     );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      RETURN l_cnt;&lt;br/&gt;   END do_hard_delete_target;&lt;br/&gt;&lt;br/&gt;   PROCEDURE add_target (&lt;br/&gt;      p_target_table_i   IN OUT NOCOPY   t_delete_target_tbl,&lt;br/&gt;      p_target_i         IN              t_unit_name,&lt;br/&gt;      p_key_name_i       IN              t_unit_name&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      l_cnt   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_cnt := p_target_table_i.COUNT + 1;&lt;br/&gt;      p_target_table_i (l_cnt).target_name := p_target_i;&lt;br/&gt;      p_target_table_i (l_cnt).surrogate_key_name := p_key_name_i;&lt;br/&gt;      p_target_table_i (l_cnt).delete_count := 0;&lt;br/&gt;   END add_target;&lt;br/&gt;END pkg_core_purge;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_UIM" directorySegmentName="seg_6" id="AD04D115-7F1C-87E2-07B3-380933C6D4E2">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_UIM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:23 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_UIM&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : PKG_UIM&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 23-DEC-2014&lt;br/&gt;||  Subject Area    : UIM&lt;br/&gt;||  Description     : Package created for integrating the UIM with SOLO DB&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||  knoll             Mar-2015        Removed process for physicaldevice&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_phy_chr_row      IN OUT NOCOPY   stg.uim_physicaldevice_char%ROWTYPE,&lt;br/&gt;      p_action           IN              VARCHAR2,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2,&lt;br/&gt;      p_record_load_cd   OUT             VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;PROCEDURE load_uim (p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;END pkg_uim;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_UIM" id="AD04D115-7F1C-87E2-07B3-380933C6D4E2">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_UIM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:27 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY CHTR.PKG_UIM&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : PKG_UIM&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 23-DEC-2014&lt;br/&gt;||  Subject Area    : UIM&lt;br/&gt;||  Description     : Package created for integrating the UIM with SOLO DB&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||  knoll             Mar-2015        Update equipment only; removed equip_instance_account updates;&lt;br/&gt;||                                    Stub out new equipment;&lt;br/&gt;||  Cognizant         20-Mar-2015     Adding Serial Number to error table&lt;br/&gt;||  Cognizant         31-Mar-2015     Fixing Trigger issue and Stubout if data present in EQUP PROD Table not in settop box&lt;br/&gt;||  Cognizant         02-APR-2015     FIX trigger Issue when mutiple Charowner comes via Attunity&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   c_pkg_name                 t_unit_name                        := &apos;PKG_UIM&apos;;&lt;br/&gt;   l_serial_num               chtr.t_settop_box_instance.serial_num%TYPE;&lt;br/&gt;   l_settop_box_instance_id   chtr.t_settop_box_instance.settop_box_instance_id%TYPE;&lt;br/&gt;   l_equip_prod_inst_id       chtr.t_equip_prod_inst.equip_prod_inst_id%TYPE;&lt;br/&gt;   l_account_id               chtr.t_account.account_id%TYPE;&lt;br/&gt;   c_bulk_errors              EXCEPTION;&lt;br/&gt;   c_data_load_type_cd        VARCHAR2 (3)                           := &apos;UIM&apos;;&lt;br/&gt;   c_data_source_type_cd      VARCHAR2 (3)                           := &apos;VNT&apos;;&lt;br/&gt;   l_email_check              NUMBER;&lt;br/&gt;   g_batchsize                NUMBER                                 := 10000;&lt;br/&gt;&lt;br/&gt;   TYPE t_ptr_tbl IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   l_filter_ptr               t_ptr_tbl;&lt;br/&gt;   l_filter_ptr_2             t_ptr_tbl;&lt;br/&gt;   l_filter_ptr_3             t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;    CURSOR cur_stg_uim_name&lt;br/&gt;    IS&lt;br/&gt;         SELECT  NVL(SETTOP_BOX_INSTANCE_ID, CHTR.S_PRODUCT_INSTANCE_ID.NEXTVAL) SEQUENCE_ID,&lt;br/&gt;      G.*&lt;br/&gt;      FROM&lt;br/&gt;        (SELECT DISTINCT pcr.estb_mac_address      AS estb_mac_address,&lt;br/&gt;          p.serialnumber                           AS serialnumber,&lt;br/&gt;          pcr.ethernet_mac_address                 AS ethernet_mac_address,&lt;br/&gt;          pcr.manufacturer_date                    AS manufacturer_date,&lt;br/&gt;          pcr.soc_part_num                         AS soc_part_num,&lt;br/&gt;          pcr.cas_id                               AS cas_id,&lt;br/&gt;          pcr.manufacturer_site                    AS manufacturer_site,&lt;br/&gt;          NVL(TO_CHAR(pcr.manufacturer), &apos;UNKNOW&apos;) AS manufacturer,&lt;br/&gt;          pcr.model_nm                             AS model_nm,&lt;br/&gt;          pcr.cmci_mac_address                     AS cmci_mac_address,&lt;br/&gt;          pcr.rf4ce_mac_address                    AS rf4ce_mac_address,&lt;br/&gt;          &apos;UIM&apos;                                    AS data_load_type_cd,&lt;br/&gt;          &apos;VNT&apos;                                    AS data_source_type_cd,&lt;br/&gt;          Id,&lt;br/&gt;          MAX(ID) over ( partition BY p.serialnumber)            AS MAX_ID,&lt;br/&gt;          p.createddate                                          AS createddate ,&lt;br/&gt;          MAX(p.createddate) over ( partition BY p.serialnumber) AS MAX_DATE,&lt;br/&gt;          CHAROWNER,&lt;br/&gt;          record_stat_p,&lt;br/&gt;          NVL(SETTOP_BOX_INSTANCE_ID,EQUIP_PROD_INST_ID) AS    SETTOP_BOX_INSTANCE_ID ,&lt;br/&gt;          DECODE ( NVL(SETTOP_BOX_INSTANCE_ID,&apos;0&apos;),&apos;0&apos; ,&apos;I&apos;, &apos;U&apos; ) AS INSERT_UPDATE_STATUS_SBI,&lt;br/&gt;           DECODE ( NVL(EQUIP_PROD_INST_ID,&apos;0&apos;),&apos;0&apos; ,&apos;I&apos;, &apos;U&apos; ) AS INSERT_UPDATE_STATUS_EQUP&lt;br/&gt;        FROM&lt;br/&gt;          (SELECT estb_mac_address,&lt;br/&gt;            ethernet_mac_address,&lt;br/&gt;            manufacturer_date,&lt;br/&gt;            soc_part_num,&lt;br/&gt;            cas_id,&lt;br/&gt;            manufacturer_site,&lt;br/&gt;            manufacturer,&lt;br/&gt;            model_nm,&lt;br/&gt;            cmci_mac_address,&lt;br/&gt;            rf4ce_mac_address,&lt;br/&gt;            charowner,&lt;br/&gt;            record_stat_p&lt;br/&gt;          FROM&lt;br/&gt;            (SELECT value,&lt;br/&gt;              CHAROWNER,&lt;br/&gt;              name,&lt;br/&gt;              record_load_cd AS record_stat_p&lt;br/&gt;            FROM stg.UIM_physicaldevice_char --WHERE  trim(record_load_cd) is null&lt;br/&gt;            ) pivot (MAX(VALUE) FOR name IN (&apos;eStbMac&apos; AS ESTB_MAC_ADDRESS, &apos;ethernetMac&apos; AS ETHERNET_MAC_ADDRESS, &apos;mnfDate&apos; AS MANUFACTURER_DATE, &apos;eom&apos; AS SOC_PART_NUM, &apos;casId&apos; AS CAS_ID, &apos;site&apos; AS MANUFACTURER_SITE, &apos;socPartNum&apos; AS MANUFACTURER, &apos;model&apos; AS MODEL_NM, &apos;cmciMac&apos; CMCI_MAC_ADDRESS, &apos;rf4ce&apos; AS RF4CE_MAC_ADDRESS ) )&lt;br/&gt;          ) PCR&lt;br/&gt;        INNER JOIN stg.UIM_physicaldevice p&lt;br/&gt;        ON PCR.charowner = p.ENTITYID&lt;br/&gt;        LEFT OUTER JOIN chtr.T_EQUIP_PROD_INST EQUP&lt;br/&gt;        ON EQUP.EQUIPMENT_ESN_VAL      = p.serialnumber&lt;br/&gt;          LEFT OUTER JOIN CHTR.t_settop_box_instance SBI&lt;br/&gt;          ON SBI.SETTOP_BOX_INSTANCE_ID = EQUP.EQUIP_PROD_INST_ID&lt;br/&gt;        WHERE  p.serialnumber IS NOT NULL&lt;br/&gt;        ) G&lt;br/&gt;      WHERE ID                 = MAX_ID&lt;br/&gt;      AND createddate          = MAX_date&lt;br/&gt;      AND trim(record_stat_p) IS NULL ;&lt;br/&gt;    &lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_uim_name%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_settop_box_instance (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      l_filter_ptr      IN              t_ptr_tbl,&lt;br/&gt;      l_filter_ptr_2    IN              t_ptr_tbl,&lt;br/&gt;      l_filter_ptr_3    IN              t_ptr_tbl,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_exist_settop_box (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_noexist_settop_box (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_exist_equip_box (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN   t_cursor_data_tbl,&lt;br/&gt;      -- p_filter_i         IN t_ptr_tbl,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE settop_box_instance (&lt;br/&gt;      p_phy_chr_row         stg.uim_physicaldevice_char%ROWTYPE,&lt;br/&gt;      p_action         IN   VARCHAR2,&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure settop_box_instance&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure inseting and updating the recrods into the table t_settop_box_instance&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name            t_unit_name             := &apos;SETTOP_BOX_INSTANCE&apos;;&lt;br/&gt;      l_process_name         chtr.t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec          chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_unknown_product_id   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      IF (l_equip_prod_inst_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         -- stub out an equipment instance&lt;br/&gt;         SELECT equipment_product_id&lt;br/&gt;           INTO l_unknown_product_id&lt;br/&gt;           FROM t_equip_product&lt;br/&gt;          WHERE equipment_model_num = &apos;UNKNOWN&apos; AND ROWNUM = 1;&lt;br/&gt;&lt;br/&gt;         l_settop_box_instance_id :=&lt;br/&gt;            da_product_instance.ADD (process_rec                   =&gt; l_process_rec,&lt;br/&gt;                                     product_id                    =&gt; l_unknown_product_id,&lt;br/&gt;                                     product_instance_type_cd      =&gt; &apos;EQPMT&apos;,&lt;br/&gt;                                     data_load_type_cd             =&gt; &apos;UIM&apos;,&lt;br/&gt;                                     data_source_type_cd           =&gt; &apos;VNT&apos;,&lt;br/&gt;                                     audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;         da_equip_prod_inst.ADD&lt;br/&gt;                              (process_rec                    =&gt; l_process_rec,&lt;br/&gt;                               equip_prod_inst_type_cd        =&gt; NULL,&lt;br/&gt;                               equip_prod_inst_id             =&gt; l_settop_box_instance_id,&lt;br/&gt;                               equipment_product_id           =&gt; l_unknown_product_id,&lt;br/&gt;                               equipment_esn_val              =&gt; l_serial_num,&lt;br/&gt;                               equipment_barcode_val          =&gt; NULL,&lt;br/&gt;                               equipment_cost_amt             =&gt; NULL,&lt;br/&gt;                               equipment_nickname_val         =&gt; NULL,&lt;br/&gt;                               equip_prod_inst_status_cd      =&gt; NULL,&lt;br/&gt;                               billing_station_id             =&gt; NULL,&lt;br/&gt;                               data_source_type_cd            =&gt; &apos;VNT&apos;,&lt;br/&gt;                               equip_mac_address_id           =&gt; NULL,&lt;br/&gt;                               equip_sec_mac_address_id       =&gt; NULL,&lt;br/&gt;                               audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;         da_settop_box_instance.ADD&lt;br/&gt;                          (process_rec                 =&gt; l_process_rec,&lt;br/&gt;                           estb_mac_address            =&gt; NULL,&lt;br/&gt;                           ecm_mac_address             =&gt; NULL,&lt;br/&gt;                           ethernet_mac_address        =&gt; NULL,&lt;br/&gt;                           cmci_mac_address            =&gt; NULL,&lt;br/&gt;                           rf4ce_mac_address           =&gt; NULL,&lt;br/&gt;                           settop_box_instance_id      =&gt; l_settop_box_instance_id,&lt;br/&gt;                           serial_num                  =&gt; l_serial_num,&lt;br/&gt;                           model_nm                    =&gt; NULL,&lt;br/&gt;                           soc_part_num                =&gt; NULL,&lt;br/&gt;                           manufacturer                =&gt; &apos;UNKNOWN&apos;,&lt;br/&gt;                           manufacturer_site           =&gt; NULL,&lt;br/&gt;                           manufacturer_date           =&gt; NULL,&lt;br/&gt;                           cas_id                      =&gt; NULL,&lt;br/&gt;                           audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF l_equip_prod_inst_id IS NOT NULL AND l_settop_box_instance_id IS NULL&lt;br/&gt;      THEN&lt;br/&gt;         da_settop_box_instance.ADD&lt;br/&gt;                             (process_rec                 =&gt; l_process_rec,&lt;br/&gt;                              estb_mac_address            =&gt; NULL,&lt;br/&gt;                              ecm_mac_address             =&gt; NULL,&lt;br/&gt;                              ethernet_mac_address        =&gt; NULL,&lt;br/&gt;                              cmci_mac_address            =&gt; NULL,&lt;br/&gt;                              rf4ce_mac_address           =&gt; NULL,&lt;br/&gt;                              settop_box_instance_id      =&gt; l_equip_prod_inst_id,&lt;br/&gt;                              serial_num                  =&gt; l_serial_num,&lt;br/&gt;                              model_nm                    =&gt; NULL,&lt;br/&gt;                              soc_part_num                =&gt; NULL,&lt;br/&gt;                              manufacturer                =&gt; &apos;UNKNOWN&apos;,&lt;br/&gt;                              manufacturer_site           =&gt; NULL,&lt;br/&gt;                              manufacturer_date           =&gt; NULL,&lt;br/&gt;                              cas_id                      =&gt; NULL,&lt;br/&gt;                              audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                             );&lt;br/&gt;         l_settop_box_instance_id := l_equip_prod_inst_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF l_settop_box_instance_id IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         IF UPPER (p_phy_chr_row.NAME) = &apos;MODEL&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET model_nm = UPPER (p_phy_chr_row.VALUE),&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;EOM&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET soc_part_num = p_phy_chr_row.VALUE,&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;SOCPARTNUM&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET manufacturer = p_phy_chr_row.VALUE,&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;SITE&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET manufacturer_site = UPPER (p_phy_chr_row.VALUE),&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;MNFDATE&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET manufacturer_date =&lt;br/&gt;                                   TO_DATE (p_phy_chr_row.VALUE, &apos;mm/dd/yyyy&apos;),&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;CASID&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET cas_id = p_phy_chr_row.VALUE,&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;ETHERNETMAC&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET ethernet_mac_address =&lt;br/&gt;                          REGEXP_REPLACE (p_phy_chr_row.VALUE, &apos;[^a-zA-Z0-9]&apos;),&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;CMCIMAC&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET cmci_mac_address =&lt;br/&gt;                          REGEXP_REPLACE (p_phy_chr_row.VALUE, &apos;[^a-zA-Z0-9]&apos;),&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;RF4CE&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET rf4ce_mac_address =&lt;br/&gt;                          REGEXP_REPLACE (p_phy_chr_row.VALUE, &apos;[^a-zA-Z0-9]&apos;),&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         ELSIF UPPER (p_phy_chr_row.NAME) = &apos;ESTBMAC&apos;&lt;br/&gt;         THEN&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET estb_mac_address =&lt;br/&gt;                          REGEXP_REPLACE (p_phy_chr_row.VALUE, &apos;[^a-zA-Z0-9]&apos;),&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id = l_settop_box_instance_id;&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;   END settop_box_instance;&lt;br/&gt;&lt;br/&gt;   PROCEDURE get_value (&lt;br/&gt;      p_entityid       IN   stg.uim_physicaldevice.entityid%TYPE,&lt;br/&gt;      p_action         IN   VARCHAR2,&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure get_value&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : the procedure fetch the delta or key values of required tables&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name      t_unit_name                            := &apos;GET_VALUE&apos;;&lt;br/&gt;      l_process_name   chtr.t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    chtr.pkg_logging.t_process_rec;&lt;br/&gt;   BEGIN&lt;br/&gt;      SELECT UPPER (serialnumber)&lt;br/&gt;        INTO l_serial_num&lt;br/&gt;        FROM stg.uim_physicaldevice&lt;br/&gt;       WHERE entityid = p_entityid;&lt;br/&gt;&lt;br/&gt;      SELECT equip_prod_inst_id&lt;br/&gt;        INTO l_equip_prod_inst_id&lt;br/&gt;        FROM chtr.t_equip_prod_inst equp&lt;br/&gt;       WHERE equp.equipment_esn_val = l_serial_num;&lt;br/&gt;&lt;br/&gt;      SELECT settop_box_instance_id&lt;br/&gt;        INTO l_settop_box_instance_id&lt;br/&gt;        FROM chtr.t_settop_box_instance a       &lt;br/&gt;      WHERE  settop_box_instance_id = l_equip_prod_inst_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         NULL;&lt;br/&gt;   END get_value;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;      p_phy_chr_row      IN OUT NOCOPY   stg.uim_physicaldevice_char%ROWTYPE,&lt;br/&gt;      p_action           IN              VARCHAR2,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2,&lt;br/&gt;      p_record_load_cd   OUT             VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure process&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure is call from trigger while having any DML operations in the&lt;br/&gt;   ||                       table physicaldevice_char&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name      t_unit_name           := &apos;PROCESS_PHYSICALDEVICE_CHAR&apos;;&lt;br/&gt;      l_process_name   chtr.t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    chtr.pkg_logging.t_process_rec;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_serial_num := NULL;&lt;br/&gt;      l_settop_box_instance_id := NULL;&lt;br/&gt;      l_equip_prod_inst_id := NULL;&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;&lt;br/&gt;      IF p_action = &apos;D&apos;&lt;br/&gt;      THEN&lt;br/&gt;         p_phy_chr_row.VALUE := NULL;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      get_value (p_entityid          =&gt; p_phy_chr_row.charowner,&lt;br/&gt;                 p_action            =&gt; p_action,&lt;br/&gt;                 p_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                );&lt;br/&gt;&lt;br/&gt;      IF l_serial_num IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         settop_box_instance (p_phy_chr_row       =&gt; p_phy_chr_row,&lt;br/&gt;                              p_action            =&gt; p_action,&lt;br/&gt;                              p_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                             );&lt;br/&gt;         p_record_load_cd := &apos;P&apos;;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         p_record_load_cd := &apos;E&apos;;&lt;br/&gt;         chtr.pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos;,CHAROWNER = &apos;&lt;br/&gt;                                         || p_phy_chr_row.charowner	&lt;br/&gt;					 || &apos;,l_serial_num = &apos;	&lt;br/&gt;					 || l_serial_num &lt;br/&gt;					 || &apos;,l_settop_box_instance_id  = &apos;	&lt;br/&gt;					 || l_settop_box_instance_id &lt;br/&gt;					 || &apos;,l_equip_prod_inst_id   = &apos;	&lt;br/&gt;					 || l_equip_prod_inst_id    &lt;br/&gt;                                         || &apos;,NAME = &apos;&lt;br/&gt;                                         || p_phy_chr_row.NAME&lt;br/&gt;                                         || &apos;,VALUE = &apos;&lt;br/&gt;                                         || p_phy_chr_row.VALUE&lt;br/&gt;                                         || &apos;, exception=&apos;&lt;br/&gt;                                         || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                        );&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_uim (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure IDM_INITIAL_LOAD&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading the IDM SOLO tables during initial load.&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   AS&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl;&lt;br/&gt;      l_action         VARCHAR2 (1)                           := &apos;I&apos;;&lt;br/&gt;      l_proc_name      t_unit_name                          := &apos;PKG_LOAD_UIM&apos;;&lt;br/&gt;      l_process_name   chtr.t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    chtr.pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      chtr.pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                      &apos;p_audit_user_i= &apos; || p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;      chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_start_text&lt;br/&gt;                                 );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_uim_name%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_uim_name;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_uim_name;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_uim_name&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- insert settop box&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            l_filter_ptr_2.DELETE;&lt;br/&gt;            l_filter_ptr_3.DELETE;&lt;br/&gt;            l_filter_ptr :=&lt;br/&gt;               filter_exist_settop_box (l_process_rec,&lt;br/&gt;                                        l_cursor_data,&lt;br/&gt;                                        p_audit_user_i&lt;br/&gt;                                       );&lt;br/&gt;            l_filter_ptr_2 :=&lt;br/&gt;               filter_noexist_settop_box (l_process_rec,&lt;br/&gt;                                          l_cursor_data,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;            l_filter_ptr_3 :=&lt;br/&gt;               filter_exist_equip_box (l_process_rec,&lt;br/&gt;                                       l_cursor_data,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;            insert_settop_box_instance (l_process_rec,&lt;br/&gt;                                        l_cursor_data,&lt;br/&gt;                                        l_filter_ptr,&lt;br/&gt;                                        l_filter_ptr_2,&lt;br/&gt;                                        l_filter_ptr_3,&lt;br/&gt;                                        p_audit_user_i&lt;br/&gt;                                       );&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data, p_audit_user_i);&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_uim_name;&lt;br/&gt;&lt;br/&gt;      chtr.pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                 );&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_uim_name%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_uim_name;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   --RAISE;&lt;br/&gt;   END load_uim;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_settop_box_instance (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      l_filter_ptr      IN              t_ptr_tbl,&lt;br/&gt;      l_filter_ptr_2    IN              t_ptr_tbl,&lt;br/&gt;      l_filter_ptr_3    IN              t_ptr_tbl,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_customer_login&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The insert_customer_login procedure will bulk Insert into t_customer_login&lt;br/&gt;      ||                       table rows from staging data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name            t_unit_name := &apos;INSERT_SETTOP_BOX_INSTANCE&apos;;&lt;br/&gt;      l_errors               NUMBER;&lt;br/&gt;      l_coll_idx             PLS_INTEGER;&lt;br/&gt;      l_systimestamp         TIMESTAMP;&lt;br/&gt;      l_unknown_product_id   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      chtr.pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_start_text&lt;br/&gt;                                 );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_i.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      SELECT equipment_product_id&lt;br/&gt;        INTO l_unknown_product_id&lt;br/&gt;        FROM t_equip_product&lt;br/&gt;       WHERE equipment_model_num = &apos;UNKNOWN&apos; AND ROWNUM = 1;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF l_filter_ptr SAVE EXCEPTIONS&lt;br/&gt;            UPDATE chtr.t_settop_box_instance&lt;br/&gt;               SET estb_mac_address = p_cursor_data_i (i).estb_mac_address,&lt;br/&gt;                   ecm_mac_address = NULL,&lt;br/&gt;                   ethernet_mac_address =&lt;br/&gt;                                      p_cursor_data_i (i).ethernet_mac_address,&lt;br/&gt;                   cmci_mac_address = p_cursor_data_i (i).cmci_mac_address,&lt;br/&gt;                   rf4ce_mac_address = p_cursor_data_i (i).rf4ce_mac_address,&lt;br/&gt;                   model_nm = p_cursor_data_i (i).model_nm,&lt;br/&gt;                   soc_part_num = NULL,&lt;br/&gt;                   manufacturer = p_cursor_data_i (i).manufacturer,&lt;br/&gt;                   manufacturer_site = p_cursor_data_i (i).manufacturer_site,&lt;br/&gt;                   manufacturer_date = NULL,&lt;br/&gt;                   cas_id = p_cursor_data_i (i).cas_id,&lt;br/&gt;                   record_stat = chtr.pkg_utility.c_record_active,&lt;br/&gt;                   modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   modified_by = p_audit_user_i&lt;br/&gt;             WHERE settop_box_instance_id =&lt;br/&gt;                                    p_cursor_data_i (i).settop_box_instance_id;&lt;br/&gt;         COMMIT;&lt;br/&gt;         chtr.pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, &apos;&lt;br/&gt;                                     || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                    );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_i (l_coll_idx).record_stat_p :=&lt;br/&gt;                                                 chtr.pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                       (p_process_rec_i,&lt;br/&gt;                           l_proc_name&lt;br/&gt;                        || &apos;, settop_box_instance_id=&apos;&lt;br/&gt;                        || p_cursor_data_i (l_coll_idx).settop_box_instance_id&lt;br/&gt;                        || &apos;, exception=&apos;&lt;br/&gt;                        || SQLERRM (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                       );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF l_filter_ptr_3 SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_settop_box_instance&lt;br/&gt;                        (settop_box_instance_id,&lt;br/&gt;                         serial_num,&lt;br/&gt;                         model_nm,&lt;br/&gt;                         manufacturer,&lt;br/&gt;                         manufacturer_site,&lt;br/&gt;                         cas_id,&lt;br/&gt;                         estb_mac_address,&lt;br/&gt;                         ethernet_mac_address,&lt;br/&gt;                         cmci_mac_address,&lt;br/&gt;                         rf4ce_mac_address, record_stat,&lt;br/&gt;                         created_dttm, created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_i (i).sequence_id,&lt;br/&gt;                         p_cursor_data_i (i).serialnumber,&lt;br/&gt;                         p_cursor_data_i (i).model_nm,&lt;br/&gt;                         p_cursor_data_i (i).manufacturer,&lt;br/&gt;                         p_cursor_data_i (i).manufacturer_site,&lt;br/&gt;                         p_cursor_data_i (i).cas_id,&lt;br/&gt;                         p_cursor_data_i (i).estb_mac_address,&lt;br/&gt;                         p_cursor_data_i (i).ethernet_mac_address,&lt;br/&gt;                         p_cursor_data_i (i).cmci_mac_address,&lt;br/&gt;                         p_cursor_data_i (i).rf4ce_mac_address, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;         COMMIT;&lt;br/&gt;         chtr.pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, &apos;&lt;br/&gt;                                     || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                    );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_i (l_coll_idx).record_stat_p :=&lt;br/&gt;                                                 chtr.pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, Serial number=&apos;&lt;br/&gt;                                || p_cursor_data_i (l_coll_idx).serialnumber&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF l_filter_ptr_2 SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_product_instance&lt;br/&gt;                        (product_instance_id,&lt;br/&gt;                         product_id, product_instance_type_cd,&lt;br/&gt;                         data_load_type_cd, data_source_type_cd,&lt;br/&gt;                         record_stat, created_dttm, created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_i (i).sequence_id,&lt;br/&gt;                         l_unknown_product_id, &apos;EQPMT&apos;,&lt;br/&gt;                         &apos;UIM&apos;, &apos;VNT&apos;,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;         COMMIT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;&lt;br/&gt;               UPDATE stg.uim_physicaldevice_char&lt;br/&gt;                  SET record_load_cd = pkg_utility.c_stg_error&lt;br/&gt;                WHERE charowner = p_cursor_data_i (l_coll_idx).charowner;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                (p_process_rec_i,&lt;br/&gt;                                    l_proc_name&lt;br/&gt;                                 || &apos;, Serial Number=&apos;&lt;br/&gt;                                 || p_cursor_data_i (l_coll_idx).serialnumber&lt;br/&gt;                                 || &apos;, exception=&apos;&lt;br/&gt;                                 || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                                );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF l_filter_ptr_2 SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_equip_prod_inst&lt;br/&gt;                        (equip_prod_inst_id,&lt;br/&gt;                         equipment_product_id,&lt;br/&gt;                         equipment_esn_val, data_source_type_cd,&lt;br/&gt;                         record_stat, created_dttm, created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_i (i).sequence_id,&lt;br/&gt;                         l_unknown_product_id,&lt;br/&gt;                         p_cursor_data_i (i).serialnumber, &apos;VNT&apos;,&lt;br/&gt;                         &apos;A&apos;, SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;         COMMIT;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;&lt;br/&gt;               UPDATE stg.uim_physicaldevice_char&lt;br/&gt;                  SET record_load_cd = pkg_utility.c_stg_error&lt;br/&gt;                WHERE charowner = p_cursor_data_i (l_coll_idx).charowner;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                (p_process_rec_i,&lt;br/&gt;                                    l_proc_name&lt;br/&gt;                                 || &apos;, Serial Number=&apos;&lt;br/&gt;                                 || p_cursor_data_i (l_coll_idx).serialnumber&lt;br/&gt;                                 || &apos;, exception=&apos;&lt;br/&gt;                                 || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                                );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         FORALL i IN VALUES OF l_filter_ptr_2 SAVE EXCEPTIONS&lt;br/&gt;            INSERT INTO chtr.t_settop_box_instance&lt;br/&gt;                        (settop_box_instance_id,&lt;br/&gt;                         serial_num,&lt;br/&gt;                         model_nm,&lt;br/&gt;                         manufacturer,&lt;br/&gt;                         manufacturer_site,&lt;br/&gt;                         cas_id,&lt;br/&gt;                         estb_mac_address,&lt;br/&gt;                         ethernet_mac_address,&lt;br/&gt;                         cmci_mac_address,&lt;br/&gt;                         rf4ce_mac_address, record_stat,&lt;br/&gt;                         created_dttm, created_by&lt;br/&gt;                        )&lt;br/&gt;                 VALUES (p_cursor_data_i (i).sequence_id,&lt;br/&gt;                         p_cursor_data_i (i).serialnumber,&lt;br/&gt;                         p_cursor_data_i (i).model_nm,&lt;br/&gt;                         p_cursor_data_i (i).manufacturer,&lt;br/&gt;                         p_cursor_data_i (i).manufacturer_site,&lt;br/&gt;                         p_cursor_data_i (i).cas_id,&lt;br/&gt;                         p_cursor_data_i (i).estb_mac_address,&lt;br/&gt;                         p_cursor_data_i (i).ethernet_mac_address,&lt;br/&gt;                         p_cursor_data_i (i).cmci_mac_address,&lt;br/&gt;                         p_cursor_data_i (i).rf4ce_mac_address, &apos;A&apos;,&lt;br/&gt;                         SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;         COMMIT;&lt;br/&gt;         chtr.pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, &apos;&lt;br/&gt;                                     || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                    );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;            FOR i IN 1 .. l_errors&lt;br/&gt;            LOOP&lt;br/&gt;               NULL;&lt;br/&gt;               l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;               p_cursor_data_i (l_coll_idx).record_stat_p :=&lt;br/&gt;                                                 chtr.pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, Serial number=&apos;&lt;br/&gt;                                || p_cursor_data_i (l_coll_idx).serialnumber&lt;br/&gt;                                || &apos;, exception=&apos;&lt;br/&gt;                                || SQLERRM&lt;br/&gt;                                        (-SQL%BULK_EXCEPTIONS (i).ERROR_CODE)&lt;br/&gt;                               );&lt;br/&gt;            END LOOP;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      chtr.pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                     l_proc_name&lt;br/&gt;                                  || &apos;, &apos;&lt;br/&gt;                                  || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                                 );&lt;br/&gt;   END insert_settop_box_instance;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_exist_settop_box (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  subprogram name    : function filter_Existing set_of box&lt;br/&gt;      ||  estimated run time :&lt;br/&gt;      ||  description        : the filter the existing settop box out&lt;br/&gt;      ||&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;FILTER_EXIST_SETTOP_BOX&apos;;&lt;br/&gt;      l_temp        t_ptr_tbl;&lt;br/&gt;      l_idx         PLS_INTEGER := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. p_cursor_data_io.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         IF p_cursor_data_io (i).insert_update_status_sbi = &apos;U&apos;&lt;br/&gt;         THEN&lt;br/&gt;            l_idx := l_idx + 1;&lt;br/&gt;            l_temp (l_idx) := i;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_temp;&lt;br/&gt;   END filter_exist_settop_box;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_noexist_settop_box (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  subprogram name    : function filter_Existing set_of box&lt;br/&gt;      ||  estimated run time :&lt;br/&gt;      ||  description        : the filter the existing settop box out&lt;br/&gt;      ||&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;FILTER_NOEXIST_SETTOP_BOX&apos;;&lt;br/&gt;      l_temp        t_ptr_tbl;&lt;br/&gt;      l_idx         PLS_INTEGER := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. p_cursor_data_io.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         IF     p_cursor_data_io (i).insert_update_status_sbi = &apos;I&apos;&lt;br/&gt;            AND p_cursor_data_io (i).insert_update_status_equp = &apos;I&apos;&lt;br/&gt;         THEN&lt;br/&gt;            l_idx := l_idx + 1;&lt;br/&gt;            l_temp (l_idx) := i;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_temp;&lt;br/&gt;   END filter_noexist_settop_box;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_exist_equip_box (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN t_ptr_tbl&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  subprogram name    : function filter_Existing set_of box&lt;br/&gt;      ||  estimated run time :&lt;br/&gt;      ||  description        : the filter the existing settop box out&lt;br/&gt;      ||&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;FILTER_EXIST_EQUIP_BOX&apos;;&lt;br/&gt;      l_temp        t_ptr_tbl;&lt;br/&gt;      l_idx         PLS_INTEGER := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. p_cursor_data_io.COUNT&lt;br/&gt;      LOOP&lt;br/&gt;         IF     p_cursor_data_io (i).insert_update_status_sbi = &apos;I&apos;&lt;br/&gt;            AND p_cursor_data_io (i).insert_update_status_equp = &apos;U&apos;&lt;br/&gt;         THEN&lt;br/&gt;            l_idx := l_idx + 1;&lt;br/&gt;            l_temp (l_idx) := i;&lt;br/&gt;         END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_temp;&lt;br/&gt;   END filter_exist_equip_box;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN   t_cursor_data_tbl,&lt;br/&gt;      -- p_filter_i         IN t_ptr_tbl,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  subprogram name    : procedure update_staging&lt;br/&gt;      ||  estimated run time :&lt;br/&gt;      ||  description        : this procedure will update staging table stg.sig_sub_svc_parm.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;         UPDATE stg.uim_physicaldevice_char s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_io (i).record_stat_p,&lt;br/&gt;                        chtr.pkg_utility.c_stg_processed&lt;br/&gt;                       )&lt;br/&gt;          WHERE charowner = p_cursor_data_io (i).charowner;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || chtr.pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_uim;</source>
</body>
</PackageOracle>
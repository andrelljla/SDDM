<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_PROCESS_NRT_CONTACT" directorySegmentName="seg_6" id="A8E4BE1C-937D-F6FF-7FA6-93BFA7F74E55">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_NRT_CONTACT</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:26 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_PROCESS_NRT_CONTACT&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name   : pkg_vnt_process_nrt_contact&lt;br/&gt;   ||  Created By     : Cognizant&lt;br/&gt;   ||  Created Date   : 15-Sep-2014&lt;br/&gt;   ||  Subject Area   : Account&lt;br/&gt;   ||  Description    : The package pkg_process_nrt_contact controls the processing of the&lt;br/&gt;   || Vantage NRT_CONTACT table and applying those updates to SOLODB.&lt;br/&gt;   || Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;&lt;br/&gt;   PROCEDURE process(p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;END pkg_vnt_process_nrt_contact;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_PROCESS_NRT_CONTACT" id="A8E4BE1C-937D-F6FF-7FA6-93BFA7F74E55">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_NRT_CONTACT</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:27 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_PROCESS_NRT_CONTACT&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_process_nrt_contact&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 15-Sep-2014&lt;br/&gt;||  Subject Area    : Account&lt;br/&gt;||  Description     : This package controls the processing of the Vantage NRT_contact table and applying those&lt;br/&gt;||  updates to SOLODB. This is a -UPDATEONLY- process.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      18-Nov-2014     Standardization Changes&lt;br/&gt;||     Kamal          09-Jul-2015     commented out party_nm&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_pkg_name   CONSTANT t_unit_name := &apos;PKG_VNT_PROCESS_NRT_CONTACT&apos;;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors         EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged NRT_CONTACT for processing&lt;br/&gt;   CURSOR cur_stg_nrt_contact&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;               -- staging control data&lt;br/&gt;               ncon.ROWID AS ID, ncon.record_load_cd,&lt;br/&gt;                                                     -- surrogate keys&lt;br/&gt;                                                     ncon.cust_acct_no_ncon,&lt;br/&gt;               xref.party_id,&lt;br/&gt;                             -- data columns&lt;br/&gt;                             ncon.contact_name_ncon, ncon.bt_name_ncon&lt;br/&gt;          FROM stg.vnt_nrt_contact ncon LEFT OUTER JOIN t_party_vantage_xref xref&lt;br/&gt;               ON xref.cust_acct_num = ncon.cust_acct_no_ncon&lt;br/&gt;             AND xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;         WHERE ncon.record_load_cd IS NULL&lt;br/&gt;      ORDER BY ncon.pull_dte_ncon,&lt;br/&gt;               DECODE (ncon.pull_tme_slot_ncon,&lt;br/&gt;                       1, pkg_utility.l_final_slot,&lt;br/&gt;                       ncon.pull_tme_slot_ncon&lt;br/&gt;                      ),                 --Defect Fix 19-Dec-2014 by Cognizant&lt;br/&gt;               ncon.bt_addr_ls_chg_dte_ncon,&lt;br/&gt;               ncon.bt_addr_ls_chg_dte_tme_ncon,&lt;br/&gt;               ncon.bt_ls_chg_dte_ncon,&lt;br/&gt;               ncon.bt_ls_chg_dte_tme_ncon;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_nrt_contact%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (&lt;br/&gt;                      /****************************************************************************************************************&lt;br/&gt;                      ||  SubProgram Name    : Procedure process&lt;br/&gt;                      ||  Estimated Run Time :&lt;br/&gt;                      ||  Description        : The procedure  opens the main cursor and updates the tables t_party and t_individual.&lt;br/&gt;                      || This process is update-only.The procedure update_staging is called to update the process status in the&lt;br/&gt;                      || staging table.&lt;br/&gt;                      *****************************************************************************************************************&lt;br/&gt;                      */&lt;br/&gt;                      p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name            t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name         t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec          pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data          t_cursor_data_tbl;&lt;br/&gt;      l_errors               NUMBER;&lt;br/&gt;      l_coll_idx             PLS_INTEGER;&lt;br/&gt;      l_process_record_cnt   NUMBER                            := 0;&lt;br/&gt;      l_error_record_cnt     NUMBER                            := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_nrt_contact%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_nrt_contact;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_nrt_contact;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_nrt_contact&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT pkg_utility.c_rt_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &quot;Update Party&quot;, cnt=&apos;&lt;br/&gt;                                   || l_cursor_data.COUNT ()&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;           /* BEGIN&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  UPDATE t_party tp&lt;br/&gt;                     SET tp.party_nm = l_cursor_data (i).bt_name_ncon&lt;br/&gt;                   WHERE tp.party_id = l_cursor_data (i).party_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN c_bulk_errors&lt;br/&gt;               THEN&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                                (l_process_rec,&lt;br/&gt;                                    l_proc_name&lt;br/&gt;                                 || &apos;, &quot;Log t_party update exceptions&quot;, cnt=&apos;&lt;br/&gt;                                 || l_cursor_data.COUNT ()&lt;br/&gt;                                );&lt;br/&gt;                  l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;                  FOR i IN 1 .. l_errors&lt;br/&gt;                  LOOP&lt;br/&gt;                     l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;                     l_cursor_data (l_coll_idx).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                              (l_process_rec,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos;, cust_acct_no_ncon=&apos;&lt;br/&gt;                               || l_cursor_data (l_coll_idx).cust_acct_no_ncon&lt;br/&gt;                               || &apos;, exception=&apos;&lt;br/&gt;                               || SQL%BULK_EXCEPTIONS (i).ERROR_CODE&lt;br/&gt;                              );&lt;br/&gt;                  END LOOP;&lt;br/&gt;            END;*/&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               FORALL i IN 1 .. l_cursor_data.COUNT SAVE EXCEPTIONS&lt;br/&gt;                  UPDATE t_individual ti&lt;br/&gt;                     SET ti.given_nm = l_cursor_data (i).contact_name_ncon&lt;br/&gt;                   WHERE ti.individual_id = l_cursor_data (i).party_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN c_bulk_errors&lt;br/&gt;               THEN&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                           (l_process_rec,&lt;br/&gt;                               l_proc_name&lt;br/&gt;                            || &apos;, &quot;Log t_individual update exceptions&quot;, cnt=&apos;&lt;br/&gt;                            || l_cursor_data.COUNT ()&lt;br/&gt;                           );&lt;br/&gt;                  l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            -- Additional loop added to capture processed/error record count&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               --Capturing the Processed/error record count&lt;br/&gt;               SELECT   DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                NULL, 1,&lt;br/&gt;                                pkg_utility.c_stg_processed, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_process_record_cnt,&lt;br/&gt;                        DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                pkg_utility.c_stg_error, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_error_record_cnt&lt;br/&gt;                 INTO l_process_record_cnt,&lt;br/&gt;                      l_error_record_cnt&lt;br/&gt;                 FROM DUAL;&lt;br/&gt;            END LOOP;&lt;br/&gt;&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; pkg_utility.c_rt_batchsize;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_nrt_contact;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_nrt_contact%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_nrt_contact;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This will take cursor data as input and update the table vnt_nrt_contact and set&lt;br/&gt;      ||  record_load_cd based on the input for the processed records.&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.vnt_nrt_contact s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i (i).record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_process_nrt_contact;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_CUS_BASE" directorySegmentName="seg_6" id="164A16D1-7E87-B6B2-6765-DF4FAB293E80">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_CUS_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:58 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_CUS_BASE&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_recon_cus_base&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 25-Dec-2014&lt;br/&gt;||  Subject Area    : Customer&lt;br/&gt;||  Description     : The Package Pkg_Vnt_Recon_Cus_Base Controls The Reconciliation Of The Vantage Cus_Base Table&lt;br/&gt;||                    Into Solodb. The Pkg Will identify the missed updates/inserts during NRT  load and Insert&lt;br/&gt;||                    The Following Target Tables T_Party_Vantage_Xref, T_Customer, T_Locator, T_Address,&lt;br/&gt;||                    T_Email_Address, T_Elec_Address, T_Phone_Num, T_Party_Address, T_Individual ,T_Organization.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_account_preference (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;END pkg_vnt_recon_cus_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_CUS_BASE" id="164A16D1-7E87-B6B2-6765-DF4FAB293E80">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_CUS_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:09 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_CUS_BASE&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_recon_cus_base&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 25-Dec-2014&lt;br/&gt;||  Subject Area    : Customer&lt;br/&gt;||  Description     : The Package Pkg_Vnt_Recon_Cus_Base Controls The Reconciliation Of The Vantage Cus_Base Table&lt;br/&gt;||                    Into Solodb. The Pkg Will identify the missed updates/inserts during NRT  load and Insert&lt;br/&gt;||                    The Following Target Tables T_Party_Vantage_Xref, T_Customer, T_Locator, T_Address,&lt;br/&gt;||                    T_Email_Address, T_Elec_Address, T_Phone_Num, T_Party_Address, T_Individual ,T_Organization.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||   Changed By       Changed On       Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||   Cognizant        30-MAR-2015      Modified cursor query to support ROWID based multithreading&lt;br/&gt;||   Cognizant        15-MAY-2015      Batch Processing introduced as part of performance improvement&lt;br/&gt;||   Binoy            16-JUN-2015      Webservice related change&lt;br/&gt;||                                     Removed the column address_subtype_cd from the table t_party_address&lt;br/&gt;||   Binoy            16-JUN-2015      Webservice related change&lt;br/&gt;||                                     Added new table T_ACCOUNT_PREFERENCE to populate the data.&lt;br/&gt;||   Kamal            09-Jul-2015      commented out party_nm&lt;br/&gt;||   Binoy            20-Jul-2015      Webservice related change&lt;br/&gt;||                                     rename the procedure to process_cus, process_home_phone and&lt;br/&gt;||                                     process_work_phone, initially it was used by &apos;load&apos; key word&lt;br/&gt;||   Binoy            22-Jul-2015      Created new process for loading the table T_ACCOUNT_PREFERENCE&lt;br/&gt;||                                     load_account_preference&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name       := &apos;PKG_VNT_RECON_CUS_BASE&apos;;&lt;br/&gt;   c_bulk_errors                EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   g_max_thread                 NUMBER                                   := 1;&lt;br/&gt;   g_reminder_thread            NUMBER                                   := 1;&lt;br/&gt;   g_batchsize                  NUMBER                                := 1000;&lt;br/&gt;   g_process_record_cnt         NUMBER                                   := 0;&lt;br/&gt;   g_error_record_cnt           NUMBER                                   := 0;&lt;br/&gt;   l_current_recon_start_time   stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_cus_base&lt;br/&gt;   IS&lt;br/&gt;      SELECT cus.ROWID AS ID, cus.record_load_cd, 0 AS party_id,&lt;br/&gt;             0 AS locator_id, &apos;ELEC&apos; AS address_subtype_cd,&lt;br/&gt;             cus.cust_acct_no_cus AS customer_account_num,&lt;br/&gt;             cus.addr1_cus AS address_line_txt_1,&lt;br/&gt;             cus.addr2_cus AS address_line_txt_2,&lt;br/&gt;             cus.cust_city_cus AS city_nm,&lt;br/&gt;             cus.cust_state_cus AS territory_cd,&lt;br/&gt;             cus.postal_cde_cus AS postal_code_txt,&lt;br/&gt;             TRIM (LOWER (cus.e_mail_addr_cus)) AS email_address,&lt;br/&gt;             TRIM (cus.e_mail_addr_stat_cus) AS email_address_stat,&lt;br/&gt;             TRIM&lt;br/&gt;                (LOWER (SUBSTR (cus.e_mail_addr_cus,&lt;br/&gt;                                1,&lt;br/&gt;                                INSTR (cus.e_mail_addr_cus, &apos;@&apos;, 1, 1) - 1&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                ) AS email_user_nm,&lt;br/&gt;             TRIM&lt;br/&gt;                (LOWER (SUBSTR (cus.e_mail_addr_cus,&lt;br/&gt;                                INSTR (cus.e_mail_addr_cus, &apos;@&apos;, 1, 1) + 1&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                ) AS elec_address_domain_nm,&lt;br/&gt;             TRIM&lt;br/&gt;                (LOWER (SUBSTR (cus.e_mail_addr_cus,&lt;br/&gt;                                INSTR (cus.e_mail_addr_cus, &apos;.&apos;, -1, 1)&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                ) AS domain_root_cd,&lt;br/&gt;             TRIM&lt;br/&gt;                (CASE&lt;br/&gt;                    WHEN INSTR (cus.cust_name_cus, &apos;*&apos;) &gt; 2&lt;br/&gt;                       THEN SUBSTR (cus.cust_name_cus,&lt;br/&gt;                                    1,&lt;br/&gt;                                    INSTR (cus.cust_name_cus, &apos;*&apos;) - 2&lt;br/&gt;                                   )&lt;br/&gt;                    ELSE cus.cust_name_cus&lt;br/&gt;                 END&lt;br/&gt;                ) AS party_nm,&lt;br/&gt;             cus.cust_title_cus AS name_prefix_txt,&lt;br/&gt;             TO_DATE (DECODE (cus.birthdate_cus,&lt;br/&gt;                              pkg_utility.c_null_date, NULL,&lt;br/&gt;                              cus.birthdate_cus&lt;br/&gt;                             )&lt;br/&gt;                     ) AS birth_dt,&lt;br/&gt;             DECODE (cus.cust_typ_cus,&lt;br/&gt;                     &apos;COM&apos;, &apos;ORGN&apos;,&lt;br/&gt;                     &apos;RES&apos;, &apos;INDIV&apos;,&lt;br/&gt;                     NULL&lt;br/&gt;                    ) AS party_subtype_cd,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN cus.sys_cus = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             cus.custom_field04_cus&lt;br/&gt;        FROM stg.vnt_cus_base_rec_delta cus&lt;br/&gt;       WHERE cus.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (cus.ROWID, LENGTH (cus.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   -- Load Home Phone number&lt;br/&gt;   CURSOR cur_stg_cus_base_home_ph&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;             -- staging control data&lt;br/&gt;             cus.ROWID AS ID, cus.record_load_cd,&lt;br/&gt;                                                 -- surrogate keys&lt;br/&gt;                                                 xref.party_id,&lt;br/&gt;             0 AS locator_id,&lt;br/&gt;                             -- columns&lt;br/&gt;                             cus.cust_acct_no_cus AS customer_account_num,&lt;br/&gt;             &apos;PHN&apos; AS address_subtype_cd, TRIM (cus.phone_no1_cus) AS ph_num,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN cus.sys_cus = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd&lt;br/&gt;        FROM stg.vnt_cus_base_rec_delta cus JOIN t_party_vantage_xref xref&lt;br/&gt;             ON (xref.cust_acct_num = cus.cust_acct_no_cus)&lt;br/&gt;       WHERE cus.record_load_cd = pkg_utility.c_stg_status_h&lt;br/&gt;         AND TRIM (phone_no1_cus) IS NOT NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (cus.ROWID, LENGTH (cus.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   -- Load Work Phone number&lt;br/&gt;   CURSOR cur_stg_cus_base_work_ph&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;             -- staging control data&lt;br/&gt;             cus.ROWID AS ID, cus.record_load_cd,&lt;br/&gt;                                                 -- surrogate keys&lt;br/&gt;                                                 xref.party_id,&lt;br/&gt;             0 AS locator_id,&lt;br/&gt;                             -- columns&lt;br/&gt;                             cus.cust_acct_no_cus AS customer_account_num,&lt;br/&gt;             &apos;PHN&apos; AS address_subtype_cd, TRIM (cus.phone_no2_cus) AS ph_num,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN cus.sys_cus = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd&lt;br/&gt;        FROM stg.vnt_cus_base_rec_delta cus JOIN t_party_vantage_xref xref&lt;br/&gt;             ON (xref.cust_acct_num = cus.cust_acct_no_cus)&lt;br/&gt;       WHERE cus.record_load_cd = pkg_utility.c_stg_status_w&lt;br/&gt;         AND TRIM (cus.phone_no2_cus) IS NOT NULL&lt;br/&gt;         AND NVL (TRIM (cus.phone_no1_cus), &apos;0&apos;) &lt;&gt; TRIM (cus.phone_no2_cus)&lt;br/&gt;         AND MOD (ASCII (SUBSTR (cus.ROWID, LENGTH (cus.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_cus_base%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_rec IS RECORD (&lt;br/&gt;      ID                     ROWID,&lt;br/&gt;      record_load_cd         stg.vnt_cus_base.record_load_cd%TYPE,&lt;br/&gt;      party_id               t_party_vantage_xref.party_id%TYPE,&lt;br/&gt;      locator_id             t_locator.locator_id%TYPE,&lt;br/&gt;      customer_account_num   stg.vnt_cus_base.cust_acct_no_cus%TYPE,&lt;br/&gt;      address_subtype_cd     t_address.address_subtype_cd%TYPE,&lt;br/&gt;      ph_num                 t_phone_num.phone_num%TYPE,&lt;br/&gt;      data_source_type_cd    t_party.data_source_type_cd%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_ph_tbl IS TABLE OF t_cursor_data_rec&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_ptr_tbl IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_account_preference_seccd&lt;br/&gt;   IS&lt;br/&gt;      SELECT a.account_id, p.party_id, a.account_num,&lt;br/&gt;             &apos;SECCD&apos; AS preference_type_cd, cust_acct_num,&lt;br/&gt;             cus.custom_field04_cus,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN ac_pre.account_id IS NULL&lt;br/&gt;                   THEN &apos;I&apos;&lt;br/&gt;                ELSE &apos;U&apos;&lt;br/&gt;             END perfrom_action,&lt;br/&gt;             cus.custom_field04_cus AS custom_field04_cus_src,&lt;br/&gt;             ac_pre.preference_value AS custom_field04_cus_tgt,&lt;br/&gt;             cus.record_load_cd&lt;br/&gt;        FROM stg.vnt_cus_base_rec_delta cus INNER JOIN t_party_vantage_xref p&lt;br/&gt;             ON p.cust_acct_num = cus.cust_acct_no_cus&lt;br/&gt;             INNER JOIN t_party_account pa&lt;br/&gt;             ON p.party_id = pa.party_id&lt;br/&gt;           AND pa.party_account_role_cd =&lt;br/&gt;                                      pkg_utility.c_party_account_role_cd_resp&lt;br/&gt;           AND pa.record_stat = pkg_utility.c_record_active&lt;br/&gt;             INNER JOIN t_account a ON a.account_id = pa.account_id&lt;br/&gt;             LEFT JOIN t_account_preference ac_pre&lt;br/&gt;             ON a.account_id = ac_pre.account_id&lt;br/&gt;           AND ac_pre.preference_type_cd = &apos;SECCD&apos;&lt;br/&gt;       WHERE MOD (ASCII (SUBSTR (cus.ROWID, LENGTH (cus.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cur_account_preference_seccd IS TABLE OF cur_account_preference_seccd%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;--&lt;br/&gt;   TYPE t_cur_acc_preference_seccd IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE insert_party (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator_ph (&lt;br/&gt;      p_process_rec_i           IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io          IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_address_usage_type_cd   IN              t_party_address.address_usage_type_cd%TYPE,&lt;br/&gt;      p_audit_user_i            IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address_ph (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_elec_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_email_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_phone_num (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address_ph (&lt;br/&gt;      p_process_rec_i           IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io          IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_address_usage_type_cd   IN              VARCHAR2,&lt;br/&gt;      p_audit_user_i            IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_individual (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_organization (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_cus (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_home (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_work (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_individual (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_cus_base%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_organization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_cus_base%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_email (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_cus_base%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_cus (&lt;br/&gt;      p_process_rec_i        pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_home_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_work_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :The load procedure will call the important main other procedures load_cus&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name                     := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      process_cus (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                   p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;      process_home_phone (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                          p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;      process_work_phone (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                          p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_account_preference (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :The load procedure will call the important main other procedures load_cus&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name  := &apos;LOAD_ACCOUNT_PREFERENCE&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;      l_cursor_data_seccd           t_cur_account_preference_seccd;&lt;br/&gt;      l_systimestamp                TIMESTAMP;&lt;br/&gt;      l_action_perform_record       stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string            stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                   stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_account_preference_seccd%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_account_preference_seccd;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_account_preference_seccd;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_account_preference_seccd&lt;br/&gt;         BULK COLLECT INTO l_cursor_data_seccd LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data_seccd.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data_seccd.COUNT ()&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  IF l_cursor_data_seccd (i).perfrom_action = &apos;I&apos;&lt;br/&gt;                  THEN&lt;br/&gt;                     da_account_preference.ADD&lt;br/&gt;                        (process_rec             =&gt; l_process_rec,&lt;br/&gt;                         account_id              =&gt; l_cursor_data_seccd (i).account_id,&lt;br/&gt;                         preference_type_cd      =&gt; l_cursor_data_seccd (i).preference_type_cd,&lt;br/&gt;                         preference_value        =&gt; l_cursor_data_seccd (i).custom_field04_cus,&lt;br/&gt;                         audit_user              =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  ELSE&lt;br/&gt;                     IF (    l_cursor_data_seccd (i).perfrom_action = &apos;U&apos;&lt;br/&gt;                         AND (NVL&lt;br/&gt;                                 (l_cursor_data_seccd (i).custom_field04_cus_tgt,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                 NVL&lt;br/&gt;                                    (l_cursor_data_seccd (i).custom_field04_cus_src,&lt;br/&gt;                                     pkg_utility.c_recon_null_string&lt;br/&gt;                                    )&lt;br/&gt;                             )&lt;br/&gt;                        )&lt;br/&gt;                     THEN&lt;br/&gt;                        UPDATE t_account_preference&lt;br/&gt;                           SET preference_value =&lt;br/&gt;                                    l_cursor_data_seccd (i).custom_field04_cus,&lt;br/&gt;                               modified_dttm = l_systimestamp,&lt;br/&gt;                               modified_by = p_audit_user_i,&lt;br/&gt;                               record_stat = pkg_utility.c_record_active&lt;br/&gt;                         WHERE account_id = l_cursor_data_seccd (i).account_id&lt;br/&gt;                           AND preference_type_cd = &apos;SECCD&apos;;&lt;br/&gt;&lt;br/&gt;                        l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                        l_modif_val_string :=&lt;br/&gt;                              &apos;PREFERENCE_VALUE : (&apos;&lt;br/&gt;                           || l_cursor_data_seccd (i).custom_field04_cus_tgt&lt;br/&gt;                           || &apos; =&gt; &apos;&lt;br/&gt;                           || l_cursor_data_seccd (i).custom_field04_cus_src&lt;br/&gt;                           || &apos; )&apos;;&lt;br/&gt;                     END IF;&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  IF l_action_perform_record IS NOT NULL&lt;br/&gt;                  THEN&lt;br/&gt;                     l_table_key :=&lt;br/&gt;                           &apos;ACCOUNT_ID = &apos;&lt;br/&gt;                        || l_cursor_data_seccd (i).account_id&lt;br/&gt;                        || &apos;, PREFERENCE_VALUE = &apos;&lt;br/&gt;                        || l_cursor_data_seccd (i).preference_type_cd;&lt;br/&gt;                     pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_ACCOUNT_PREFERENCE&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; NULL,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  COMMIT;&lt;br/&gt;                  g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     l_cursor_data_seccd (i).record_load_cd :=&lt;br/&gt;                                                      pkg_utility.c_stg_error;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                            (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, exception = &apos;&lt;br/&gt;                             || l_proc_name&lt;br/&gt;                             || &apos;, sub_acct_no= &apos;&lt;br/&gt;                             || l_cursor_data_seccd (i).account_num&lt;br/&gt;                             || &apos;,cust_acct_num&apos;&lt;br/&gt;                             || l_cursor_data_seccd (i).cust_acct_num&lt;br/&gt;                             || &apos;, custom_field04_cus&apos;&lt;br/&gt;                             || l_cursor_data_seccd (i).custom_field04_cus_src&lt;br/&gt;                             || &apos;, exception = &apos;&lt;br/&gt;                             || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                            );&lt;br/&gt;                     g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;               END;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data_seccd.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_account_preference_seccd;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         RAISE;&lt;br/&gt;   END load_account_preference;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_cus (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_cus&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  load_cus procedure will open the cursor and execute each records for&lt;br/&gt;      ||                       party, party vantage xref,insert individual, insert organization,&lt;br/&gt;      ||                       customer,customer email,address as party address, Update the staging rows with status&lt;br/&gt;         ****************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD_CUS&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr     VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_cus_base%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_cus_base;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_cus_base;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_cus_base&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT ()&lt;br/&gt;            LOOP&lt;br/&gt;               -- party&lt;br/&gt;               insert_party (l_process_rec, l_cursor_data (i),&lt;br/&gt;                             p_audit_user_i);&lt;br/&gt;               -- insert individual&lt;br/&gt;               l_filter_ptr :=&lt;br/&gt;                         filter_individual (l_process_rec, l_cursor_data (i));&lt;br/&gt;&lt;br/&gt;               IF l_filter_ptr = &apos;Y&apos;&lt;br/&gt;               THEN&lt;br/&gt;                  insert_individual (l_process_rec,&lt;br/&gt;                                     l_cursor_data (i),&lt;br/&gt;                                     --l_filter_ptr,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               --l_filter_ptr.DELETE;&lt;br/&gt;               l_filter_ptr := NULL;&lt;br/&gt;               -- insert organization&lt;br/&gt;               l_filter_ptr :=&lt;br/&gt;                        filter_organization (l_process_rec, l_cursor_data (i));&lt;br/&gt;&lt;br/&gt;               IF l_filter_ptr = &apos;Y&apos;&lt;br/&gt;               THEN&lt;br/&gt;                  insert_organization (l_process_rec,&lt;br/&gt;                                       l_cursor_data (i),&lt;br/&gt;                                       --l_filter_ptr,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               --l_filter_ptr.DELETE;&lt;br/&gt;               l_filter_ptr := NULL;&lt;br/&gt;               -- customer&lt;br/&gt;               insert_customer (l_process_rec,&lt;br/&gt;                                l_cursor_data (i),&lt;br/&gt;                                p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;               -- customer email address as party address&lt;br/&gt;               l_filter_ptr := filter_email (l_process_rec, l_cursor_data (i));&lt;br/&gt;&lt;br/&gt;               IF l_filter_ptr = &apos;Y&apos;&lt;br/&gt;               THEN&lt;br/&gt;                  insert_locator (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  --l_filter_ptr,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;                  insert_address (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  --l_filter_ptr,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;                  insert_party_address (l_process_rec,&lt;br/&gt;                                        l_cursor_data (i),&lt;br/&gt;                                        --l_filter_ptr,&lt;br/&gt;                                        p_audit_user_i&lt;br/&gt;                                       );&lt;br/&gt;                  insert_elec_address (l_process_rec,&lt;br/&gt;                                       l_cursor_data (i),&lt;br/&gt;                                       --l_filter_ptr,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;                  insert_email_address (l_process_rec,&lt;br/&gt;                                        l_cursor_data (i),&lt;br/&gt;                                        --l_filter_ptr,&lt;br/&gt;                                        p_audit_user_i&lt;br/&gt;                                       );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               --l_filter_ptr.DELETE;&lt;br/&gt;               l_filter_ptr := NULL;&lt;br/&gt;               -- Update the staging rows with status&lt;br/&gt;               update_staging_cus (l_process_rec,&lt;br/&gt;                                   l_cursor_data (i),&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_cus_base;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_cus_base%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_cus_base;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END process_cus;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_home_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_home_phone&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  LOAD_Home_Phone procedure will load the customer home  phone number with&lt;br/&gt;      ||                       Update the staging rows with status.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD_HOME_PHONE&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data    t_cursor_data_ph_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_cus_base_home_ph%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_cus_base_home_ph;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_cus_base_home_ph;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_cus_base_home_ph&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               -- customer home  phone number&lt;br/&gt;               insert_locator_ph (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  &apos;HMPH&apos;,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               insert_address_ph (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               insert_party_address_ph (l_process_rec,&lt;br/&gt;                                        l_cursor_data (i),&lt;br/&gt;                                        &apos;HMPH&apos;,&lt;br/&gt;                                        p_audit_user_i&lt;br/&gt;                                       );&lt;br/&gt;               insert_phone_num (l_process_rec,&lt;br/&gt;                                 l_cursor_data (i),&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;               -- Update the staging rows with status&lt;br/&gt;               update_staging_home (l_process_rec,&lt;br/&gt;                                    l_cursor_data (i),&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_cus_base_home_ph;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_cus_base_home_ph%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_cus_base_home_ph;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END process_home_phone;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_work_phone (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_work_phone&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  Load_Work_Phone procedure will load the customer work phone number and&lt;br/&gt;      ||                       Update the staging rows with status&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD_WORK_PHONE&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data    t_cursor_data_ph_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec := p_process_rec_i;&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_cus_base_work_ph%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_cus_base_work_ph;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_cus_base_work_ph;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_cus_base_work_ph&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               -- customer work phone number&lt;br/&gt;               insert_locator_ph (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  &apos;WRKPH&apos;,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               insert_address_ph (l_process_rec,&lt;br/&gt;                                  l_cursor_data (i),&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               insert_party_address_ph (l_process_rec,&lt;br/&gt;                                        l_cursor_data (i),&lt;br/&gt;                                        &apos;WRKPH&apos;,&lt;br/&gt;                                        p_audit_user_i&lt;br/&gt;                                       );&lt;br/&gt;               insert_phone_num (l_process_rec,&lt;br/&gt;                                 l_cursor_data (i),&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;               -- Update the staging rows with status&lt;br/&gt;               update_staging_work (l_process_rec,&lt;br/&gt;                                    l_cursor_data (i),&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_cus_base_work_ph;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_cus_base_work_ph%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_cus_base_work_ph;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END process_work_phone;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_party&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_party procedure will load t_party the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                     t_unit_name           := &apos;INSERT_PARTY&apos;;&lt;br/&gt;      l_errors                        NUMBER                             := 0;&lt;br/&gt;      l_coll_idx                      PLS_INTEGER;&lt;br/&gt;      l_success                       NUMBER                             := 0;&lt;br/&gt;      l_systimestamp                  TIMESTAMP;&lt;br/&gt;      l_exist                         NUMBER                             := 0;&lt;br/&gt;      l_party_id                      t_party.party_id%TYPE           := NULL;&lt;br/&gt;      l_action_perform_record_party   stg.audit_recon_process.operation_perf%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_action_perform_record_xref    stg.audit_recon_process.operation_perf%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_modif_val_string              stg.audit_recon_process.modif_values%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_data_source_type_cd           t_party.data_source_type_cd%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_source_system_party_id        t_party.source_system_party_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;--      l_party_nm                      t_party.party_nm%TYPE           := NULL;&lt;br/&gt;      l_party_subtype_cd              t_party.party_subtype_cd%TYPE   := NULL;&lt;br/&gt;      l_modified_dttm                 t_party.modified_dttm%TYPE      := NULL;&lt;br/&gt;      l_account_details               stg.audit_recon_process.account_details%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_table_key                     stg.audit_recon_process.table_key%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, customer_account_num = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;            l_action_perform_record_party := NULL;&lt;br/&gt;            l_action_perform_record_xref := NULL;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_data_source_type_cd := NULL;&lt;br/&gt;            l_source_system_party_id := NULL;&lt;br/&gt;--            l_party_nm := NULL;&lt;br/&gt;            l_party_subtype_cd := NULL;&lt;br/&gt;            l_account_details := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            l_party_id :=&lt;br/&gt;               customer_exists (p_process_rec_i,&lt;br/&gt;                                p_cursor_data_io.customer_account_num&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;            IF (l_party_id IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               SELECT data_source_type_cd, source_system_party_id,&lt;br/&gt;--                      party_nm,&lt;br/&gt;                      party_subtype_cd, modified_dttm&lt;br/&gt;                 INTO l_data_source_type_cd, l_source_system_party_id,&lt;br/&gt;--                      l_party_nm,&lt;br/&gt;                      l_party_subtype_cd, l_modified_dttm&lt;br/&gt;                 FROM t_party&lt;br/&gt;                WHERE party_id = l_party_id;&lt;br/&gt;&lt;br/&gt;               IF (    (   NVL (l_data_source_type_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_source_system_party_id,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.customer_account_num,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;--                        OR NVL (l_party_nm, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;--                              NVL (p_cursor_data_io.party_nm,&lt;br/&gt;--                                   pkg_utility.c_recon_null_string&lt;br/&gt;--                                  )&lt;br/&gt;                        OR NVL (l_party_subtype_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.party_subtype_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_party&lt;br/&gt;                     SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                         source_system_party_id =&lt;br/&gt;                                         p_cursor_data_io.customer_account_num,&lt;br/&gt;                         party_subtype_cd = p_cursor_data_io.party_subtype_cd,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE party_id = l_party_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record_party :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                     || l_data_source_type_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;SOURCE_SYSTEM_PARTY_ID : (&apos;&lt;br/&gt;                     || l_source_system_party_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;PARTY_NM : (&apos;&lt;br/&gt;--                     || l_party_nm&lt;br/&gt;--                     || &apos; =&gt; &apos;&lt;br/&gt;--                     || p_cursor_data_io.party_nm&lt;br/&gt;--                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;PARTY_SUBTYPE_CD : (&apos;&lt;br/&gt;                     || l_party_subtype_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.party_subtype_cd&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record_party :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;               l_party_id :=&lt;br/&gt;                  da_party.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      data_source_type_cd         =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      source_system_party_id      =&gt; p_cursor_data_io.customer_account_num,&lt;br/&gt;--                      party_nm                    =&gt; p_cursor_data_io.party_nm,&lt;br/&gt;                      party_subtype_cd            =&gt; p_cursor_data_io.party_subtype_cd,&lt;br/&gt;                      party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;                      audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_action_perform_record_xref :=&lt;br/&gt;                                            pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_party_vantage_xref.ADD&lt;br/&gt;                      (p_process_rec_i,&lt;br/&gt;                       cust_acct_num      =&gt; p_cursor_data_io.customer_account_num,&lt;br/&gt;                       party_id           =&gt; l_party_id,&lt;br/&gt;                       audit_user         =&gt; p_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            p_cursor_data_io.party_id := l_party_id;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_party IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;PARTY_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.party_id&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                           (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                            p_table_name           =&gt; &apos;T_PARTY&apos;,&lt;br/&gt;                            p_table_key            =&gt; l_table_key,&lt;br/&gt;                            p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                            p_account_details      =&gt; NULL,&lt;br/&gt;                            --l_account_details,&lt;br/&gt;                            p_operation_perf       =&gt; l_action_perform_record_party,&lt;br/&gt;                            p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record_xref IN&lt;br/&gt;                                         (pkg_utility.c_recon_update_perform)&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                  &apos;CUST_ACCT_NUM = &apos; || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                           (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                            p_table_name           =&gt; &apos;T_PARTY_VANTAGE_XREF&apos;,&lt;br/&gt;                            p_table_key            =&gt; l_table_key,&lt;br/&gt;                            p_modif_values         =&gt; NULL,&lt;br/&gt;                            p_account_details      =&gt; NULL,&lt;br/&gt;                            --l_account_details,&lt;br/&gt;                            p_operation_perf       =&gt; l_action_perform_record_xref,&lt;br/&gt;                            p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, customer_account_num = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_party;&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function customer_exists&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : Checking whethere the customer already exists.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                          := &apos;CUSTOMER_EXISTS&apos;;&lt;br/&gt;      l_party_id    t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      l_party_id := NULL;&lt;br/&gt;&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref, t_party&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num&lt;br/&gt;         AND t_party.party_id = xref.party_id;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_party_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos;, cust_acct_num=&apos;&lt;br/&gt;                               || p_cust_acct_num&lt;br/&gt;                               || &apos;, customer NOT found in t_party_vantage_xref&apos;&lt;br/&gt;                              );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END customer_exists;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_customer (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_customer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_customer procedure will load t_customer the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name              := &apos;INSERT_CUSTOMER&apos;;&lt;br/&gt;      l_errors                  NUMBER                                   := 0;&lt;br/&gt;      l_coll_idx                PLS_INTEGER;&lt;br/&gt;      l_success                 NUMBER                                   := 0;&lt;br/&gt;      l_cst_row                 t_customer%ROWTYPE;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_exist_count             NUMBER                                   := 0;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_account_details         stg.audit_recon_process.account_details%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               l_exist_count := 1;&lt;br/&gt;               l_table_key := &apos;&apos;;&lt;br/&gt;               l_account_details := &apos;&apos;;&lt;br/&gt;               l_action_perform_record := &apos;&apos;;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_start_text&lt;br/&gt;                                      || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                      || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT *&lt;br/&gt;                    INTO l_cst_row&lt;br/&gt;                    FROM t_customer&lt;br/&gt;                   WHERE customer_id = p_cursor_data_io.party_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count = 0)&lt;br/&gt;               THEN&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_customer.ADD (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                                   customer_id               =&gt; p_cursor_data_io.party_id,&lt;br/&gt;                                   first_contact_dt          =&gt; NULL,&lt;br/&gt;                                   first_fulfillment         =&gt; NULL,&lt;br/&gt;                                   first_payment             =&gt; NULL,&lt;br/&gt;                                   external_customer_id      =&gt; NULL,&lt;br/&gt;                                   audit_user                =&gt; p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                                         (pkg_utility.c_recon_insert_perform)&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;CUSTOMER_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.party_id&lt;br/&gt;                     || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                     || p_cursor_data_io.customer_account_num;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_CUSTOMER&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; NULL,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_end_text&lt;br/&gt;                                      || &apos;, customer_account_num = &apos;&lt;br/&gt;                                      || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     );&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, customer_id = &apos;&lt;br/&gt;                                     || p_cursor_data_io.party_id&lt;br/&gt;                                     || &apos;, customer_account_num = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;      END;&lt;br/&gt;   END insert_customer;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_locator&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_locator procedure will load t_locator the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name        := &apos;INSERT_LOCATOR&apos;;&lt;br/&gt;      l_errors                         NUMBER                            := 0;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_success                        NUMBER                            := 0;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_exist_count                    NUMBER                            := 0;&lt;br/&gt;      l_tgt_locator_subtype_cd         t_locator.locator_subtype_cd%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_modified_dttm                  t_locator.modified_dttm%TYPE   := NULL;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_account_details                stg.audit_recon_process.account_details%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_address_id_val                 t_party_address.address_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      exp_too_many_from_party_addres   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               l_exist_count := 1;&lt;br/&gt;               l_modif_val_string := NULL;&lt;br/&gt;               l_table_key := NULL;&lt;br/&gt;               l_account_details := NULL;&lt;br/&gt;               l_action_perform_record := NULL;&lt;br/&gt;               l_tgt_locator_subtype_cd := NULL;&lt;br/&gt;               l_address_id_val := NULL;&lt;br/&gt;               l_modified_dttm := NULL;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_start_text&lt;br/&gt;                                      || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.party_id&lt;br/&gt;                                      || &apos;, LOCATOR_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                      || &apos;EML&apos;&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT a.address_id&lt;br/&gt;                    INTO l_address_id_val&lt;br/&gt;                    FROM t_party_address a, t_locator b&lt;br/&gt;                   WHERE a.party_id = p_cursor_data_io.party_id&lt;br/&gt;                     AND a.address_usage_type_cd = &apos;EML&apos;&lt;br/&gt;                     AND a.address_id = b.locator_id;&lt;br/&gt;&lt;br/&gt;                  p_cursor_data_io.locator_id := l_address_id_val;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN TOO_MANY_ROWS&lt;br/&gt;                  THEN&lt;br/&gt;                     RAISE exp_too_many_from_party_addres;&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  SELECT locator_subtype_cd, modified_dttm&lt;br/&gt;                    INTO l_tgt_locator_subtype_cd, l_modified_dttm&lt;br/&gt;                    FROM t_locator&lt;br/&gt;                   WHERE locator_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                  IF (    l_tgt_locator_subtype_cd &lt;&gt;&lt;br/&gt;                                           p_cursor_data_io.address_subtype_cd&lt;br/&gt;                      AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                     )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_locator&lt;br/&gt;                        SET locator_subtype_cd =&lt;br/&gt;                                           p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE locator_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;LOCATOR_SUBTYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_locator_subtype_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.address_subtype_cd&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  l_address_id_val :=&lt;br/&gt;                     da_locator.ADD&lt;br/&gt;                        (process_rec             =&gt; p_process_rec_i,&lt;br/&gt;                         locator_subtype_cd      =&gt; p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                         audit_user              =&gt; p_audit_user_i&lt;br/&gt;                        );&lt;br/&gt;                  p_cursor_data_io.locator_id := l_address_id_val;&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;LOCATOR_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.locator_id&lt;br/&gt;                     || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                     || p_cursor_data_io.customer_account_num;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_LOCATOR&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_end_text&lt;br/&gt;                                      || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.party_id&lt;br/&gt;                                      || &apos;, LOCATOR_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                      || &apos;EML&apos;&lt;br/&gt;                                     );&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN exp_too_many_from_party_addres&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                         l_proc_name&lt;br/&gt;                      || &apos;PARTY_ID = &apos;&lt;br/&gt;                      || p_cursor_data_io.party_id&lt;br/&gt;                      || &apos;ADDRESS_USAGE_TYPE_CD = EML&apos;&lt;br/&gt;                      || &apos;, exception = &apos;&lt;br/&gt;                      || &apos;MULTIPLE VALUES OBTAINED FROM T_PARTY_ADDRESS FOR THE GIVEN party_id AND address_usage_type_cd VALUES&apos;&lt;br/&gt;                     );&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.party_id&lt;br/&gt;                                     || &apos;, LOCATOR_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.locator_id&lt;br/&gt;                                     || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                     || &apos;EML&apos;&lt;br/&gt;                                     || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;      END;&lt;br/&gt;   END insert_locator;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_locator_ph (&lt;br/&gt;      p_process_rec_i           IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io          IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_address_usage_type_cd   IN              t_party_address.address_usage_type_cd%TYPE,&lt;br/&gt;      p_audit_user_i            IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_locator_ph&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_locator_home procedure will load t_locator the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name     := &apos;INSERT_LOCATOR_PH&apos;;&lt;br/&gt;      l_errors                         NUMBER                            := 0;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_exist                          NUMBER                            := 0;&lt;br/&gt;      l_exist_count                    NUMBER                            := 0;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      exp_too_many_from_party_addres   EXCEPTION;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_account_details                stg.audit_recon_process.account_details%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_locator_id                     t_locator.locator_id%TYPE      := NULL;&lt;br/&gt;      l_locator_subtype_cd             t_locator.locator_subtype_cd%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_tgt_locator_subtype_cd         t_locator.locator_subtype_cd%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_modified_dttm                  t_locator.modified_dttm%TYPE   := NULL;&lt;br/&gt;      l_address_id_val                 t_party_address.address_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      /*pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, cnt=&apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );*/&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      --FOR i IN 1..p_cursor_data_io.COUNT&lt;br/&gt;         --LOOP&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := &apos;&apos;;&lt;br/&gt;            l_table_key := &apos;&apos;;&lt;br/&gt;            l_account_details := &apos;&apos;;&lt;br/&gt;            l_action_perform_record := &apos;&apos;;&lt;br/&gt;            l_locator_id := NULL;&lt;br/&gt;            l_locator_subtype_cd := NULL;&lt;br/&gt;            l_tgt_locator_subtype_cd := NULL;&lt;br/&gt;            l_address_id_val := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                   || p_address_usage_type_cd&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT a.address_id&lt;br/&gt;                 INTO l_address_id_val&lt;br/&gt;                 FROM t_party_address a, t_locator b&lt;br/&gt;                WHERE a.party_id = p_cursor_data_io.party_id&lt;br/&gt;                  AND a.address_usage_type_cd = p_address_usage_type_cd&lt;br/&gt;                  AND a.address_id = b.locator_id;&lt;br/&gt;&lt;br/&gt;               -- AND a.address_subtype_cd=b.locator_subtype_cd;--&apos;HMPH&apos;;&lt;br/&gt;               p_cursor_data_io.locator_id := l_address_id_val;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN TOO_MANY_ROWS&lt;br/&gt;               THEN&lt;br/&gt;                  RAISE exp_too_many_from_party_addres;&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               SELECT locator_subtype_cd, modified_dttm&lt;br/&gt;                 INTO l_tgt_locator_subtype_cd, l_modified_dttm&lt;br/&gt;                 FROM t_locator&lt;br/&gt;                WHERE locator_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;               IF (    l_tgt_locator_subtype_cd &lt;&gt;&lt;br/&gt;                                           p_cursor_data_io.address_subtype_cd&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_locator&lt;br/&gt;                     SET locator_subtype_cd =&lt;br/&gt;                                           p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE locator_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;LOCATOR_SUBTYPE_CD : (&apos;&lt;br/&gt;                     || l_tgt_locator_subtype_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.address_subtype_cd&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               l_address_id_val :=&lt;br/&gt;                  da_locator.ADD&lt;br/&gt;                     (process_rec             =&gt; p_process_rec_i,&lt;br/&gt;                      locator_subtype_cd      =&gt; p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                      audit_user              =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               p_cursor_data_io.locator_id := l_address_id_val;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;LOCATOR_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.locator_id&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_LOCATOR&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, LOCATOR_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                   || p_address_usage_type_cd&lt;br/&gt;                                  );&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN exp_too_many_from_party_addres&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                      l_proc_name&lt;br/&gt;                   || &apos;PARTY_ID = &apos;&lt;br/&gt;                   || p_cursor_data_io.party_id&lt;br/&gt;                   || &apos;ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                   || p_address_usage_type_cd&lt;br/&gt;                   || &apos;, exception = &apos;&lt;br/&gt;                   || &apos;MULTIPLE VALUES OBTAINED FROM T_PARTY_ADDRESS FOR THE GIVEN party_id AND address_usage_type_cd VALUES&apos;&lt;br/&gt;                  );&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.party_id&lt;br/&gt;                                     || &apos;, LOCATOR_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.locator_id&lt;br/&gt;                                     || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                     || p_address_usage_type_cd&lt;br/&gt;                                     || &apos;, customer_account_num = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_locator_ph;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      --p_filter_i         IN              t_ptr_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_address procedure will load t_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name        := &apos;INSERT_ADDRESS&apos;;&lt;br/&gt;      l_errors                         NUMBER                            := 0;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_success                        NUMBER                            := 0;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_exist_count                    NUMBER                            := 0;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_account_details                stg.audit_recon_process.account_details%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_tgt_data_source_type_cd        t_address.data_source_type_cd%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_tgt_address_subtype_cd         t_address.address_subtype_cd%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_tgt_source_system_address_id   t_address.source_system_address_id%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      l_modified_dttm                  t_address.modified_dttm%TYPE   := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      /*pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cnt = &apos;&lt;br/&gt;                             || p_cursor_data_io.COUNT ()&lt;br/&gt;                            );*/&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         --FOR i IN 1 .. p_filter_i.COUNT&lt;br/&gt;         --LOOP&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               l_exist_count := 1;&lt;br/&gt;               l_modif_val_string := &apos;&apos;;&lt;br/&gt;               l_table_key := &apos;&apos;;&lt;br/&gt;               l_account_details := &apos;&apos;;&lt;br/&gt;               l_action_perform_record := &apos;&apos;;&lt;br/&gt;               l_tgt_data_source_type_cd := NULL;&lt;br/&gt;               l_tgt_address_subtype_cd := NULL;&lt;br/&gt;               l_tgt_source_system_address_id := NULL;&lt;br/&gt;               l_modified_dttm := NULL;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_start_text&lt;br/&gt;                                      || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                      || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT data_source_type_cd,&lt;br/&gt;                         address_subtype_cd,&lt;br/&gt;                         source_system_address_id, modified_dttm&lt;br/&gt;                    INTO l_tgt_data_source_type_cd,&lt;br/&gt;                         l_tgt_address_subtype_cd,&lt;br/&gt;                         l_tgt_source_system_address_id, l_modified_dttm&lt;br/&gt;                    FROM t_address&lt;br/&gt;                   WHERE address_id = p_cursor_data_io.locator_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF (    (   l_tgt_data_source_type_cd &lt;&gt;&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd&lt;br/&gt;                           OR NVL (l_tgt_address_subtype_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                           OR NVL (l_tgt_source_system_address_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.email_address,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                          )&lt;br/&gt;                      AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                     )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_address&lt;br/&gt;                        SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            address_subtype_cd =&lt;br/&gt;                                           p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                            source_system_address_id =&lt;br/&gt;                                                p_cursor_data_io.email_address,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE address_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; )&apos;&lt;br/&gt;                        || &apos;, ADDRESS_SUBTYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_address_subtype_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.address_subtype_cd&lt;br/&gt;                        || &apos; )&apos;&lt;br/&gt;                        || &apos;, SOURCE_SYSTEM_ADDRESS_ID : (&apos;&lt;br/&gt;                        || l_tgt_source_system_address_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.email_address&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_address.ADD&lt;br/&gt;                     (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                      address_id                    =&gt; p_cursor_data_io.locator_id,&lt;br/&gt;                      data_source_type_cd           =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      address_subtype_cd            =&gt; p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                      source_system_address_id      =&gt; p_cursor_data_io.email_address,&lt;br/&gt;                      audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;ADDRESS_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.locator_id&lt;br/&gt;                     || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                     || p_cursor_data_io.customer_account_num;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_ADDRESS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_end_text&lt;br/&gt;                                      || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                      || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     );&lt;br/&gt;            --   COMMIT;  -- Commented on 11-Feb-2015 as part of work around for fix found in CUS_BASE&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, address_id = &apos;&lt;br/&gt;                                     || p_cursor_data_io.locator_id&lt;br/&gt;                                     || &apos;, customer_account_num = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;      END;&lt;br/&gt;   END insert_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_address_ph (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_address_ph&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :  The  insert_address_ph procedure will load t_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name     := &apos;INSERT_ADDRESS_PH&apos;;&lt;br/&gt;      l_errors                         NUMBER                            := 0;&lt;br/&gt;      l_exist_count                    NUMBER                            := 0;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_account_details                stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;      l_tgt_data_source_type_cd        t_address.data_source_type_cd%TYPE;&lt;br/&gt;      l_tgt_address_subtype_cd         t_address.address_subtype_cd%TYPE;&lt;br/&gt;      l_tgt_source_system_address_id   t_address.source_system_address_id%TYPE;&lt;br/&gt;      l_modified_dttm                  t_address.modified_dttm%TYPE   := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               l_exist_count := 1;&lt;br/&gt;               l_modif_val_string := &apos;&apos;;&lt;br/&gt;               l_table_key := &apos;&apos;;&lt;br/&gt;               l_account_details := &apos;&apos;;&lt;br/&gt;               l_action_perform_record := &apos;&apos;;&lt;br/&gt;               l_tgt_data_source_type_cd := NULL;&lt;br/&gt;               l_tgt_address_subtype_cd := NULL;&lt;br/&gt;               l_tgt_source_system_address_id := NULL;&lt;br/&gt;               l_modified_dttm := NULL;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_start_text&lt;br/&gt;                                      || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                      || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT data_source_type_cd,&lt;br/&gt;                         address_subtype_cd,&lt;br/&gt;                         source_system_address_id, modified_dttm&lt;br/&gt;                    INTO l_tgt_data_source_type_cd,&lt;br/&gt;                         l_tgt_address_subtype_cd,&lt;br/&gt;                         l_tgt_source_system_address_id, l_modified_dttm&lt;br/&gt;                    FROM t_address&lt;br/&gt;                   WHERE address_id = p_cursor_data_io.locator_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF (    (   l_tgt_data_source_type_cd &lt;&gt;&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd&lt;br/&gt;                           OR NVL (l_tgt_address_subtype_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                           OR NVL (l_tgt_source_system_address_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  ) &lt;&gt;&lt;br/&gt;                                 NVL (p_cursor_data_io.ph_num,&lt;br/&gt;                                      pkg_utility.c_recon_null_string&lt;br/&gt;                                     )&lt;br/&gt;                          )&lt;br/&gt;                      AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                     )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_address&lt;br/&gt;                        SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            address_subtype_cd =&lt;br/&gt;                                           p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                            source_system_address_id = p_cursor_data_io.ph_num,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE address_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; )&apos;&lt;br/&gt;                        || &apos;, ADDRESS_SUBTYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_address_subtype_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.address_subtype_cd&lt;br/&gt;                        || &apos; )&apos;&lt;br/&gt;                        || &apos;, SOURCE_SYSTEM_ADDRESS_ID : (&apos;&lt;br/&gt;                        || l_tgt_source_system_address_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.ph_num&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_address.ADD&lt;br/&gt;                     (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                      address_id                    =&gt; p_cursor_data_io.locator_id,&lt;br/&gt;                      data_source_type_cd           =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      address_subtype_cd            =&gt; p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                      source_system_address_id      =&gt; p_cursor_data_io.ph_num,&lt;br/&gt;                      audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;ADDRESS_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.locator_id&lt;br/&gt;                     || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                     || p_cursor_data_io.customer_account_num;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_ADDRESS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_end_text&lt;br/&gt;                                      || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                      || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     );&lt;br/&gt;            --    COMMIT;  -- Commented on 11-Feb-2015 as part of work around for fix found in CUS_BASE&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.locator_id&lt;br/&gt;                                     || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;      END;&lt;br/&gt;   END insert_address_ph;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_phone_num (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_phone_num&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_phone_num_ph procedure will load t_phone_num the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name             := &apos;INSERT_PHONE_NUM&apos;;&lt;br/&gt;      l_errors                  NUMBER                                   := 0;&lt;br/&gt;      l_exist_count             NUMBER                                   := 0;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_account_details         stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;      l_tgt_phone_num           t_phone_num.phone_num%TYPE;&lt;br/&gt;      l_modified_dttm           t_phone_num.modified_dttm%TYPE        := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := &apos;&apos;;&lt;br/&gt;            l_table_key := &apos;&apos;;&lt;br/&gt;            l_account_details := &apos;&apos;;&lt;br/&gt;            l_action_perform_record := &apos;&apos;;&lt;br/&gt;            l_tgt_phone_num := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, TELEPHONE_NUM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT phone_num, modified_dttm&lt;br/&gt;                 INTO l_tgt_phone_num, l_modified_dttm&lt;br/&gt;                 FROM t_phone_num&lt;br/&gt;                WHERE telephone_num_id = p_cursor_data_io.locator_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    NVL (l_tgt_phone_num, pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                          NVL (p_cursor_data_io.ph_num,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_phone_num&lt;br/&gt;                     SET phone_num = p_cursor_data_io.ph_num,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE telephone_num_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;PHONE_NUM : (&apos;&lt;br/&gt;                     || l_tgt_phone_num&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.ph_num&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_phone_num.ADD&lt;br/&gt;                            (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                             telephone_num_id             =&gt; p_cursor_data_io.locator_id,&lt;br/&gt;                             phone_num                    =&gt; p_cursor_data_io.ph_num,&lt;br/&gt;                             phone_country_code_num       =&gt; NULL,&lt;br/&gt;                             phone_area_code_num          =&gt; NULL,&lt;br/&gt;                             phone_exchange_num           =&gt; NULL,&lt;br/&gt;                             phone_line_num               =&gt; NULL,&lt;br/&gt;                             phone_extension_num          =&gt; NULL,&lt;br/&gt;                             valid_telephone_num_ind      =&gt; 1,&lt;br/&gt;                             audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;TELEPHONE_NUM_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.locator_id&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_PHONE_NUM&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, TELEPHONE_NUM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;         --COMMIT;  -- Commented on 11-Feb-2015 as part of work around for fix found in CUS_BASE&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, TELEPHONE_NUM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.locator_id&lt;br/&gt;                                     || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_phone_num;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_individual (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_individual&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_individual procedure will load t_individual the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name            := &apos;INSERT_INDIVIDUAL&apos;;&lt;br/&gt;      l_errors                  NUMBER                                   := 0;&lt;br/&gt;      l_coll_idx                PLS_INTEGER;&lt;br/&gt;      l_success                 NUMBER                                   := 0;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_exist_count             NUMBER                                   := 0;&lt;br/&gt;      l_tgt_birth_dt            t_individual.birth_dt%TYPE;&lt;br/&gt;      l_tgt_given_nm            t_individual.given_nm%TYPE;&lt;br/&gt;      l_tgt_middle_nm           t_individual.middle_nm%TYPE;&lt;br/&gt;      l_tgt_family_nm           t_individual.family_nm%TYPE;&lt;br/&gt;      l_tgt_name_prefix_txt     t_individual.name_prefix_txt%TYPE;&lt;br/&gt;      l_derived_given_nm        t_individual.given_nm%TYPE;&lt;br/&gt;      l_derived_middle_nm       t_individual.middle_nm%TYPE;&lt;br/&gt;      l_derived_family_nm       t_individual.family_nm%TYPE;&lt;br/&gt;      l_modified_dttm           t_individual.modified_dttm%TYPE       := NULL;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_account_details         stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := &apos;&apos;;&lt;br/&gt;            l_table_key := &apos;&apos;;&lt;br/&gt;            l_account_details := &apos;&apos;;&lt;br/&gt;            l_action_perform_record := &apos;&apos;;&lt;br/&gt;            l_tgt_birth_dt := NULL;&lt;br/&gt;            l_tgt_given_nm := NULL;&lt;br/&gt;            l_tgt_middle_nm := NULL;&lt;br/&gt;            l_tgt_family_nm := NULL;&lt;br/&gt;            l_tgt_name_prefix_txt := NULL;&lt;br/&gt;            l_derived_given_nm := NULL;&lt;br/&gt;            l_derived_middle_nm := NULL;&lt;br/&gt;            l_derived_family_nm := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, INDIVIDUAL_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT birth_dt, given_nm, middle_nm,&lt;br/&gt;                      family_nm, name_prefix_txt, modified_dttm&lt;br/&gt;                 INTO l_tgt_birth_dt, l_tgt_given_nm, l_tgt_middle_nm,&lt;br/&gt;                      l_tgt_family_nm, l_tgt_name_prefix_txt, l_modified_dttm&lt;br/&gt;                 FROM t_individual&lt;br/&gt;                WHERE individual_id = p_cursor_data_io.party_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               SELECT TRIM&lt;br/&gt;                         (TRIM&lt;br/&gt;                             (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                   (p_cursor_data_io.party_nm,&lt;br/&gt;                                                    &apos;,[^,]+$&apos;&lt;br/&gt;                                                   )&lt;br/&gt;                             )&lt;br/&gt;                         ),&lt;br/&gt;                      TRIM&lt;br/&gt;                         (TRIM&lt;br/&gt;                             (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                   (p_cursor_data_io.party_nm,&lt;br/&gt;                                                    &apos;,[^,]+,&apos;&lt;br/&gt;                                                   )&lt;br/&gt;                             )&lt;br/&gt;                         ),&lt;br/&gt;                      TRIM&lt;br/&gt;                         (TRIM&lt;br/&gt;                             (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                   (p_cursor_data_io.party_nm,&lt;br/&gt;                                                    &apos;[^,]+,&apos;&lt;br/&gt;                                                   )&lt;br/&gt;                             )&lt;br/&gt;                         )&lt;br/&gt;                 INTO l_derived_given_nm,&lt;br/&gt;                      l_derived_middle_nm,&lt;br/&gt;                      l_derived_family_nm&lt;br/&gt;                 FROM DUAL;&lt;br/&gt;&lt;br/&gt;               IF (    (   NVL (l_tgt_birth_dt, pkg_utility.c_recon_null_date) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.birth_dt,&lt;br/&gt;                                   pkg_utility.c_recon_null_date&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_given_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (l_derived_given_nm,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_middle_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (l_derived_middle_nm,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_family_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (l_derived_family_nm,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_name_prefix_txt,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.name_prefix_txt,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_individual&lt;br/&gt;                     SET birth_dt = p_cursor_data_io.birth_dt,&lt;br/&gt;                         given_nm = l_derived_given_nm,&lt;br/&gt;                         middle_nm = l_derived_middle_nm,&lt;br/&gt;                         family_nm = l_derived_family_nm,&lt;br/&gt;                         name_prefix_txt = p_cursor_data_io.name_prefix_txt,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE individual_id = p_cursor_data_io.party_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;BIRTH_DT : (&apos;&lt;br/&gt;                     || l_tgt_birth_dt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.birth_dt&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, GIVEN_NM : (&apos;&lt;br/&gt;                     || l_tgt_given_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || l_derived_given_nm&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, MIDDLE_NM : (&apos;&lt;br/&gt;                     || l_tgt_middle_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || l_derived_middle_nm&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, FAMILY_NM : (&apos;&lt;br/&gt;                     || l_tgt_family_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || l_derived_family_nm&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, NAME_PREFIX_TXT : (&apos;&lt;br/&gt;                     || l_tgt_name_prefix_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.name_prefix_txt&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_individual.ADD&lt;br/&gt;                  (process_rec          =&gt; p_process_rec_i,&lt;br/&gt;                   individual_id        =&gt; p_cursor_data_io.party_id,&lt;br/&gt;                   birth_dt             =&gt; p_cursor_data_io.birth_dt,&lt;br/&gt;                   gender_type_cd       =&gt; NULL,&lt;br/&gt;                   given_nm             =&gt; TRIM&lt;br/&gt;                                              (TRIM&lt;br/&gt;                                                  (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                              (p_cursor_data_io.party_nm,&lt;br/&gt;                                                               &apos;,[^,]+$&apos;&lt;br/&gt;                                                              )&lt;br/&gt;                                                  )&lt;br/&gt;                                              ),&lt;br/&gt;                   middle_nm            =&gt; TRIM&lt;br/&gt;                                              (TRIM&lt;br/&gt;                                                  (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                              (p_cursor_data_io.party_nm,&lt;br/&gt;                                                               &apos;,[^,]+,&apos;&lt;br/&gt;                                                              )&lt;br/&gt;                                                  )&lt;br/&gt;                                              ),&lt;br/&gt;                   family_nm            =&gt; TRIM&lt;br/&gt;                                              (TRIM&lt;br/&gt;                                                  (&apos;,&apos; FROM REGEXP_SUBSTR&lt;br/&gt;                                                              (p_cursor_data_io.party_nm,&lt;br/&gt;                                                               &apos;[^,]+,&apos;&lt;br/&gt;                                                              )&lt;br/&gt;                                                  )&lt;br/&gt;                                              ),&lt;br/&gt;                   name_prefix_txt      =&gt; p_cursor_data_io.name_prefix_txt,&lt;br/&gt;                   name_suffix_txt      =&gt; NULL,&lt;br/&gt;                   audit_user           =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;INDIVIDUAL_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.party_id&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_INDIVIDUAL&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, INDIVIDUAL_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;         --COMMIT;  -- Commented on 11-Feb-2015 as part of work around for fix found in CUS_BASE&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, INDIVIDUAL_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.party_id&lt;br/&gt;                                     || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_individual;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_organization (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      --p_filter_i         IN              t_ptr_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_organization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_organization procedure will load t_organization the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name          := &apos;INSERT_ORGANIZATION&apos;;&lt;br/&gt;      l_errors                  NUMBER                                   := 0;&lt;br/&gt;      l_coll_idx                PLS_INTEGER;&lt;br/&gt;      l_success                 NUMBER                                   := 0;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_exist_count             NUMBER                                   := 0;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_account_details         stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_tgt_organization_nm     t_organization.organization_nm%TYPE;&lt;br/&gt;      l_modified_dttm           t_organization.modified_dttm%TYPE     := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      /*pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, filter_cnt=&apos;&lt;br/&gt;                             || p_filter_i.COUNT()&lt;br/&gt;                            );*/&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      --FOR i IN 1..p_filter_i.COUNT&lt;br/&gt;        --LOOP&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := &apos;&apos;;&lt;br/&gt;            l_table_key := &apos;&apos;;&lt;br/&gt;            l_account_details := &apos;&apos;;&lt;br/&gt;            l_action_perform_record := &apos;&apos;;&lt;br/&gt;            l_tgt_organization_nm := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ORGANIZATION_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT organization_nm, modified_dttm&lt;br/&gt;                 INTO l_tgt_organization_nm, l_modified_dttm&lt;br/&gt;                 FROM t_organization&lt;br/&gt;                WHERE organization_id = p_cursor_data_io.party_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (NVL (l_tgt_organization_nm,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                           NVL (p_cursor_data_io.party_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_organization&lt;br/&gt;                     SET organization_nm = p_cursor_data_io.party_nm,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE organization_id = p_cursor_data_io.party_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;ORGANIZATION_ID : (&apos;&lt;br/&gt;                     || l_tgt_organization_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.party_nm&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_organization.ADD&lt;br/&gt;                               (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                                organization_id              =&gt; p_cursor_data_io.party_id,&lt;br/&gt;                                parent_organization_id       =&gt; NULL,&lt;br/&gt;                                organization_nm              =&gt; p_cursor_data_io.party_nm,&lt;br/&gt;                                active_organization_ind      =&gt; NULL,&lt;br/&gt;                                audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ORGANIZATION_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.party_id&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_ORGANIZATION&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            -- END LOOP;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ORGANIZATION_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;         --COMMIT;  -- Commented on 11-Feb-2015 as part of work around for fix found in CUS_BASE&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, ORGANIZATION_ID = &apos;&lt;br/&gt;                                          || p_cursor_data_io.party_id&lt;br/&gt;                                          || &apos;, exception = &apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_organization;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_elec_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      --p_filter_i         IN              t_ptr_tbl,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_elec_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_elec_address procedure will load t_elec_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                    t_unit_name     := &apos;INSERT_ELEC_ADDRESS&apos;;&lt;br/&gt;      l_errors                       NUMBER                              := 0;&lt;br/&gt;      l_coll_idx                     PLS_INTEGER;&lt;br/&gt;      l_success                      NUMBER                              := 0;&lt;br/&gt;      l_systimestamp                 TIMESTAMP;&lt;br/&gt;      l_exist_count                  NUMBER                              := 0;&lt;br/&gt;      l_action_perform_record        stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string             stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_account_details              stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;      l_table_key                    stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_tgt_elec_address_txt         t_elec_address.elec_address_txt%TYPE;&lt;br/&gt;      l_tgt_elec_address_domain_nm   t_elec_address.elec_address_domain_nm%TYPE;&lt;br/&gt;      l_tgt_domain_root_cd           t_elec_address.domain_root_cd%TYPE;&lt;br/&gt;      l_tgt_elc_addr_styp_cd         t_elec_address.elec_address_subtype_cd%TYPE;&lt;br/&gt;      l_modified_dttm                t_elec_address.modified_dttm%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := &apos;&apos;;&lt;br/&gt;            l_table_key := &apos;&apos;;&lt;br/&gt;            l_account_details := &apos;&apos;;&lt;br/&gt;            l_action_perform_record := &apos;&apos;;&lt;br/&gt;            l_tgt_elec_address_txt := NULL;&lt;br/&gt;            l_tgt_elec_address_domain_nm := NULL;&lt;br/&gt;            l_tgt_domain_root_cd := NULL;&lt;br/&gt;            l_tgt_elc_addr_styp_cd := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ELEC_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT elec_address_txt, elec_address_domain_nm,&lt;br/&gt;                      domain_root_cd, elec_address_subtype_cd,&lt;br/&gt;                      modified_dttm&lt;br/&gt;                 INTO l_tgt_elec_address_txt, l_tgt_elec_address_domain_nm,&lt;br/&gt;                      l_tgt_domain_root_cd, l_tgt_elc_addr_styp_cd,&lt;br/&gt;                      l_modified_dttm&lt;br/&gt;                 FROM t_elec_address&lt;br/&gt;                WHERE elec_address_id = p_cursor_data_io.locator_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (   NVL (l_tgt_elec_address_txt,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.email_address,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_elec_address_domain_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.elec_address_domain_nm,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_domain_root_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.domain_root_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_elc_addr_styp_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt; &apos;EML&apos;&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_elec_address&lt;br/&gt;                     SET elec_address_subtype_cd = &apos;EML&apos;,&lt;br/&gt;                         elec_address_txt = p_cursor_data_io.email_address,&lt;br/&gt;                         elec_address_domain_nm =&lt;br/&gt;                                       p_cursor_data_io.elec_address_domain_nm,&lt;br/&gt;                         domain_root_cd = p_cursor_data_io.domain_root_cd,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE elec_address_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;ELEC_ADDRESS_SUBTYPE_CD : (&apos;&lt;br/&gt;                     || l_tgt_elc_addr_styp_cd&lt;br/&gt;                     || &apos; =&gt; EML )&apos;&lt;br/&gt;                     || &apos;,ELEC_ADDRESS_TXT : (&apos;&lt;br/&gt;                     || l_tgt_elec_address_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.email_address&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, ELEC_ADDRESS_DOMAIN_NM : (&apos;&lt;br/&gt;                     || l_tgt_elec_address_domain_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.elec_address_domain_nm&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, DOMAIN_ROOT_CD : (&apos;&lt;br/&gt;                     || l_tgt_domain_root_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.domain_root_cd&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_elec_address.ADD&lt;br/&gt;                  (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                   elec_address_id              =&gt; p_cursor_data_io.locator_id,&lt;br/&gt;                   elec_address_subtype_cd      =&gt; &apos;EML&apos;,&lt;br/&gt;                   elec_address_txt             =&gt; p_cursor_data_io.email_address,&lt;br/&gt;                   elec_address_domain_nm       =&gt; p_cursor_data_io.elec_address_domain_nm,&lt;br/&gt;                   domain_root_cd               =&gt; p_cursor_data_io.domain_root_cd,&lt;br/&gt;                   valid_elec_address_ind       =&gt; 1,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ELEC_ADDRESS_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.locator_id&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_ELEC_ADDRESS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ELEC_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, ELEC_ADDRESS_ID = &apos;&lt;br/&gt;                                          || p_cursor_data_io.locator_id&lt;br/&gt;                                          || &apos;, exception = &apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_elec_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_email_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_email_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_email_address procedure will load t_email_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name         := &apos;INSERT_EMAIL_ADDRESS&apos;;&lt;br/&gt;      l_errors                  NUMBER;&lt;br/&gt;      l_coll_idx                PLS_INTEGER;&lt;br/&gt;      l_success                 NUMBER;&lt;br/&gt;      l_exist                   NUMBER;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_tea_row                 t_email_address%ROWTYPE;&lt;br/&gt;      l_email_address_id        t_email_address.email_address_id%TYPE;&lt;br/&gt;      l_exist_count             NUMBER;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_account_details         stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_tgt_email_address_txt   t_email_address.email_address_txt%TYPE;&lt;br/&gt;      l_tgt_user_nm             t_email_address.user_nm%TYPE;&lt;br/&gt;      l_tgt_domain_nm           t_email_address.domain_nm%TYPE;&lt;br/&gt;      l_modified_dttm           t_email_address.modified_dttm%TYPE    := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := &apos;&apos;;&lt;br/&gt;            l_table_key := &apos;&apos;;&lt;br/&gt;            l_account_details := &apos;&apos;;&lt;br/&gt;            l_action_perform_record := &apos;&apos;;&lt;br/&gt;            l_tgt_email_address_txt := NULL;&lt;br/&gt;            l_tgt_user_nm := NULL;&lt;br/&gt;            l_tgt_domain_nm := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, EMAIL_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT email_address_txt, user_nm,&lt;br/&gt;                      domain_nm, modified_dttm&lt;br/&gt;                 INTO l_tgt_email_address_txt, l_tgt_user_nm,&lt;br/&gt;                      l_tgt_domain_nm, l_modified_dttm&lt;br/&gt;                 FROM t_email_address&lt;br/&gt;                WHERE email_address_id = p_cursor_data_io.locator_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               IF (    (   NVL (l_tgt_email_address_txt,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.email_address,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_user_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.email_user_nm,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_tgt_domain_nm,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.elec_address_domain_nm,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                       )&lt;br/&gt;                   AND NVL (l_modified_dttm, pkg_utility.c_recon_null_date) &lt;&lt;br/&gt;                                                    l_current_recon_start_time&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_email_address&lt;br/&gt;                     SET email_address_txt = p_cursor_data_io.email_address,&lt;br/&gt;                         user_nm = p_cursor_data_io.email_user_nm,&lt;br/&gt;                         domain_nm = p_cursor_data_io.elec_address_domain_nm,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE email_address_id = p_cursor_data_io.locator_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;EMAIL_ADDRESS_TXT : (&apos;&lt;br/&gt;                     || l_tgt_email_address_txt&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.email_address&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, USER_NM : (&apos;&lt;br/&gt;                     || l_tgt_user_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.email_user_nm&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, DOMAIN_NM : (&apos;&lt;br/&gt;                     || l_tgt_domain_nm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.elec_address_domain_nm&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_email_address.ADD&lt;br/&gt;                       (process_rec            =&gt; p_process_rec_i,&lt;br/&gt;                        email_address_id       =&gt; p_cursor_data_io.locator_id,&lt;br/&gt;                        email_address_txt      =&gt; p_cursor_data_io.email_address,&lt;br/&gt;                        user_nm                =&gt; p_cursor_data_io.email_user_nm,&lt;br/&gt;                        domain_nm              =&gt; p_cursor_data_io.elec_address_domain_nm,&lt;br/&gt;                        audit_user             =&gt; p_audit_user_i&lt;br/&gt;                       );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;EMAIL_ADDRESS_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.locator_id&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_EMAIL_ADDRESS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, EMAIL_ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, EMAIL_ADDRESS_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.locator_id&lt;br/&gt;                                     || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_email_address;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address_ph (&lt;br/&gt;      p_process_rec_i           IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io          IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      p_address_usage_type_cd   IN              VARCHAR2,&lt;br/&gt;      p_audit_user_i            IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_party_address_ph&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_party_address_ph procedure will load t_party_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name    := &apos;INSERT_PARTY_ADDRESS_PH&apos;;&lt;br/&gt;      l_errors                    NUMBER;&lt;br/&gt;      l_exist_count               NUMBER;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_action_perform_record     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                 stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_account_details           stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;--      l_tgt_address_subtype_cd    t_party_address.address_subtype_cd%TYPE;  -- Commented as part of the webservice removed the column address_subtype_cd&lt;br/&gt;      l_tgt_data_source_type_cd   t_party_address.data_source_type_cd%TYPE;&lt;br/&gt;      l_modified_dttm             t_party_address.modified_dttm%TYPE  := NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_io.record_load_cd, pkg_utility.c_stg_processed) &lt;&gt;&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         BEGIN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_modif_val_string := &apos;&apos;;&lt;br/&gt;            l_table_key := &apos;&apos;;&lt;br/&gt;            l_account_details := &apos;&apos;;&lt;br/&gt;            l_action_perform_record := &apos;&apos;;&lt;br/&gt;--             l_tgt_address_subtype_cd := NULL;  -- Commented as part of the webservice removed the column address_subtype_cd&lt;br/&gt;            l_tgt_data_source_type_cd := NULL;&lt;br/&gt;            l_modified_dttm := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                   || p_address_usage_type_cd&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT&lt;br/&gt;--               address_subtype_cd,  -- Commented as part of the webservice removed the column address_subtype_cd&lt;br/&gt;                      data_source_type_cd&lt;br/&gt;                 INTO&lt;br/&gt;--                 l_tgt_address_subtype_cd,  -- Commented as part of the webservice removed the column address_subtype_cd&lt;br/&gt;                      l_tgt_data_source_type_cd&lt;br/&gt;                 FROM t_party_address&lt;br/&gt;                WHERE party_id = p_cursor_data_io.party_id&lt;br/&gt;                  AND address_id = p_cursor_data_io.locator_id&lt;br/&gt;                  AND address_usage_type_cd = p_address_usage_type_cd;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_exist_count := 0;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_exist_count = 0)&lt;br/&gt;            THEN&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               da_party_address.ADD&lt;br/&gt;                  (process_rec                =&gt; p_process_rec_i,&lt;br/&gt;                   party_id                   =&gt; p_cursor_data_io.party_id,&lt;br/&gt;                   address_id                 =&gt; p_cursor_data_io.locator_id,&lt;br/&gt;                   address_usage_type_cd      =&gt; p_address_usage_type_cd,&lt;br/&gt;--                   address_subtype_cd         =&gt; p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                   data_source_type_cd        =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                   audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;PARTY_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.party_id&lt;br/&gt;                  || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.locator_id&lt;br/&gt;                  || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                  || p_address_usage_type_cd&lt;br/&gt;                  || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                  || p_cursor_data_io.customer_account_num;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_PARTY_ADDRESS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  --l_account_details,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.party_id&lt;br/&gt;                                   || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.locator_id&lt;br/&gt;                                   || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                                   || p_address_usage_type_cd&lt;br/&gt;                                   || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                   || p_cursor_data_io.customer_account_num&lt;br/&gt;                                  );&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.locator_id&lt;br/&gt;                                     || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                     || p_cursor_data_io.customer_account_num&lt;br/&gt;                                     || &apos;, exception = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;   END insert_party_address_ph;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_party_address (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_party_address&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  insert_party_address procedure will load t_party_address the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name  := &apos;INSERT_PARTY_ADDRESS&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_success                        NUMBER;&lt;br/&gt;      l_exist_count                    NUMBER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_tpa_row                        t_party_address%ROWTYPE;&lt;br/&gt;      l_party_id                       t_party_address.party_id%TYPE;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_account_details                stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_address_id_val                 t_party_address.address_id%TYPE;&lt;br/&gt;--      l_tgt_address_subtype_cd         t_party_address.address_subtype_cd%TYPE;  -- Commented as part of the webservice removed the column address_subtype_cd&lt;br/&gt;      l_tgt_data_source_type_cd        t_party_address.data_source_type_cd%TYPE;&lt;br/&gt;      l_modified_dttm                  t_party_address.modified_dttm%TYPE&lt;br/&gt;                                                                      := NULL;&lt;br/&gt;      exp_too_many_from_party_addres   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            BEGIN&lt;br/&gt;               l_exist_count := 1;&lt;br/&gt;               l_modif_val_string := &apos;&apos;;&lt;br/&gt;               l_table_key := &apos;&apos;;&lt;br/&gt;               l_account_details := &apos;&apos;;&lt;br/&gt;               l_action_perform_record := &apos;&apos;;&lt;br/&gt;               l_address_id_val := NULL;&lt;br/&gt;--               l_tgt_address_subtype_cd := NULL;&lt;br/&gt;               l_tgt_data_source_type_cd := NULL;&lt;br/&gt;               l_modified_dttm := NULL;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_start_text&lt;br/&gt;                                      || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.party_id&lt;br/&gt;                                      || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, ADDRESS_USAGE_TYPE_CD = EML&apos;&lt;br/&gt;                                     );&lt;br/&gt;&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT&lt;br/&gt;--                  address_subtype_cd, -- Commented as part of the webservice removed the column address_subtype_cd&lt;br/&gt;                         data_source_type_cd, modified_dttm&lt;br/&gt;                    INTO&lt;br/&gt;--                    l_tgt_address_subtype_cd,  -- Commented as part of the webservice removed the column address_subtype_cd&lt;br/&gt;                         l_tgt_data_source_type_cd, l_modified_dttm&lt;br/&gt;                    FROM t_party_address&lt;br/&gt;                   WHERE party_id = p_cursor_data_io.party_id&lt;br/&gt;                     AND address_id = p_cursor_data_io.locator_id&lt;br/&gt;                     AND address_usage_type_cd = &apos;EML&apos;;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN TOO_MANY_ROWS&lt;br/&gt;                  THEN&lt;br/&gt;                     RAISE exp_too_many_from_party_addres;&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count = 0)&lt;br/&gt;               THEN&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_party_address.ADD&lt;br/&gt;                     (process_rec                =&gt; p_process_rec_i,&lt;br/&gt;                      party_id                   =&gt; p_cursor_data_io.party_id,&lt;br/&gt;                      address_id                 =&gt; p_cursor_data_io.locator_id,&lt;br/&gt;                      address_usage_type_cd      =&gt; &apos;EML&apos;,&lt;br/&gt;--                      address_subtype_cd         =&gt; p_cursor_data_io.address_subtype_cd,&lt;br/&gt;                      data_source_type_cd        =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      audit_user                 =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;PARTY_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.party_id&lt;br/&gt;                     || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.locator_id&lt;br/&gt;                     || &apos;, ADDRESS_USAGE_TYPE_CD = &apos;&lt;br/&gt;                     || &apos;EML&apos;&lt;br/&gt;                     || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                     || p_cursor_data_io.customer_account_num;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_PARTY_ADDRESS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, &apos;&lt;br/&gt;                                      || pkg_utility.c_proc_end_text&lt;br/&gt;                                      || &apos;, PARTY_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.party_id&lt;br/&gt;                                      || &apos;, ADDRESS_ID = &apos;&lt;br/&gt;                                      || p_cursor_data_io.locator_id&lt;br/&gt;                                      || &apos;, ADDRESS_USAGE_TYPE_CD = EML&apos;&lt;br/&gt;                                     );&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN exp_too_many_from_party_addres&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                         l_proc_name&lt;br/&gt;                      || &apos;PARTY_ID = &apos;&lt;br/&gt;                      || p_cursor_data_io.party_id&lt;br/&gt;                      || &apos;ADDRESS_USAGE_TYPE_CD = EML&apos;&lt;br/&gt;                      || &apos;, exception = &apos;&lt;br/&gt;                      || &apos;MULTIPLE VALUES OBTAINED FROM T_PARTY_ADDRESS FOR THE GIVEN party_id AND address_usage_type_cd VALUES&apos;&lt;br/&gt;                     );&lt;br/&gt;               WHEN OTHERS&lt;br/&gt;               THEN&lt;br/&gt;                  ROLLBACK;&lt;br/&gt;                  p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;                  pkg_logging.log_exception&lt;br/&gt;                                          (p_process_rec_i,&lt;br/&gt;                                              l_proc_name&lt;br/&gt;                                           || &apos;PARTY_ID = &apos;&lt;br/&gt;                                           || p_cursor_data_io.party_id&lt;br/&gt;                                           || &apos;,ADDRESS_ID = &apos;&lt;br/&gt;                                           || p_cursor_data_io.locator_id&lt;br/&gt;                                           || &apos;ADDRESS_USAGE_TYPE_CD = EML&apos;&lt;br/&gt;                                           || &apos;, exception = &apos;&lt;br/&gt;                                           || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                          );&lt;br/&gt;            END;&lt;br/&gt;         END IF;&lt;br/&gt;      END;&lt;br/&gt;   END insert_party_address;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_individual (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_cus_base%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function filter_individual&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  filter_individual function will return the filter individual details.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name  := &apos;FILTER_INDIVIDUAL&apos;;&lt;br/&gt;      l_temp           t_ptr_tbl;&lt;br/&gt;      l_idx            PLS_INTEGER  := 0;&lt;br/&gt;      l_proceed_flag   VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      l_proceed_flag := &apos;N&apos;;&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_data_i.party_subtype_cd = &apos;INDIV&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         --l_idx := l_idx + 1;&lt;br/&gt;         --l_temp (l_idx) := i;&lt;br/&gt;         l_proceed_flag := &apos;Y&apos;;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;      RETURN l_proceed_flag;&lt;br/&gt;   END filter_individual;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_organization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_cus_base%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function filter_organization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  filter_organization function will return the filter organization details.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name  := &apos;FILTER_ORGANIZATION&apos;;&lt;br/&gt;      l_temp           t_ptr_tbl;&lt;br/&gt;      l_idx            PLS_INTEGER  := 0;&lt;br/&gt;      l_proceed_flag   VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;      l_proceed_flag := &apos;N&apos;;&lt;br/&gt;&lt;br/&gt;      --FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;      --LOOP&lt;br/&gt;      IF (p_cursor_data_i.party_subtype_cd = &apos;ORGN&apos;)&lt;br/&gt;      THEN&lt;br/&gt;         --l_idx := l_idx + 1;&lt;br/&gt;         --l_temp (l_idx) := i;&lt;br/&gt;         l_proceed_flag := &apos;Y&apos;;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --END LOOP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;      --RETURN l_temp;&lt;br/&gt;      RETURN l_proceed_flag;&lt;br/&gt;   END filter_organization;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_email (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_cus_base%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      --RETURN t_ptr_tbl&lt;br/&gt;   RETURN VARCHAR2&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Function filter_email&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  filter_email function will return filter email details.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name  := &apos;FILTER_EMAIL&apos;;&lt;br/&gt;      l_temp           t_ptr_tbl;&lt;br/&gt;      l_idx            PLS_INTEGER  := 0;&lt;br/&gt;      l_proceed_flag   VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;      --FOR i IN p_cursor_data_i.FIRST .. p_cursor_data_i.LAST&lt;br/&gt;      --LOOP&lt;br/&gt;      IF     (p_cursor_data_i.email_address_stat = &apos;E&apos;)&lt;br/&gt;         AND REGEXP_LIKE&lt;br/&gt;                (p_cursor_data_i.email_address,&lt;br/&gt;                 &apos;^[a-zA-Z0-9!#$%&apos;&apos;\*\+-/=\?^_`\{|\}~]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}$&apos;&lt;br/&gt;                )&lt;br/&gt;      THEN&lt;br/&gt;         --l_idx := l_idx + 1;&lt;br/&gt;         --l_temp (l_idx) := i;&lt;br/&gt;         l_proceed_flag := &apos;Y&apos;;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --END LOOP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, Valid Email Count:&apos; || l_idx&lt;br/&gt;                            );&lt;br/&gt;      --RETURN l_temp;&lt;br/&gt;      RETURN l_proceed_flag;&lt;br/&gt;   END filter_email;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_cus (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_cus_base%ROWTYPE,&lt;br/&gt;      --t_cursor_data_tbl,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_cus&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  update_staging_cus will update the tg.vnt_cus_base_rec_delta  table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name            t_unit_name := &apos;UPDATE_STAGING_CUS&apos;;&lt;br/&gt;      l_process_record_cnt   NUMBER;&lt;br/&gt;      l_error_record_cnt     NUMBER;&lt;br/&gt;      l_systimestamp         TIMESTAMP;&lt;br/&gt;      l_coll_idx             PLS_INTEGER;&lt;br/&gt;      l_errors               NUMBER;&lt;br/&gt;      l_success              NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      --FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;      --LOOP&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_cus_base_rec_delta s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_status_h&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;      --COMMIT;  -- Commented on 11-Feb-2015 as part of work around for fix found in CUS_BASE&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                     (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                      || p_cursor_data_i.customer_account_num&lt;br/&gt;                                      || &apos;, exception = &apos;&lt;br/&gt;                                      || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                     );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      --Capturing the error record count&lt;br/&gt;      IF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --END LOOP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging_cus;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_home (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      --t_cursor_data_ph_tbl,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_home&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  update_staging_home procedure will update  stg.vnt_cus_base_rec_delta  table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STAGING_HOME&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;      l_coll_idx       PLS_INTEGER;&lt;br/&gt;      l_errors         NUMBER;&lt;br/&gt;      l_success        NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      /*pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );*/&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      --FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;      --LOOP&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_cus_base_rec_delta s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   DECODE (p_cursor_data_i.record_load_cd,&lt;br/&gt;                           pkg_utility.c_stg_status_h, pkg_utility.c_stg_status_w,&lt;br/&gt;                           p_cursor_data_i.record_load_cd&lt;br/&gt;                          ),&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;      --COMMIT;  -- Commented on 11-Feb-2015 as part of work around for fix found in CUS_BASE&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                     (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, CUSTOMER_ACCOUNT_NUM = &apos;&lt;br/&gt;                                      || p_cursor_data_i.customer_account_num&lt;br/&gt;                                      || &apos;, exception = &apos;&lt;br/&gt;                                      || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                     );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      --Capturing the error record count&lt;br/&gt;      IF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;   END update_staging_home;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_work (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   t_cursor_data_rec,&lt;br/&gt;      --t_cursor_data_ph_tbl,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_work&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The  update_staging_Work procedure will upadate the  stg.vnt_cus_base the table.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name            t_unit_name := &apos;UPDATE_STAGING_WORK&apos;;&lt;br/&gt;      l_process_record_cnt   NUMBER;&lt;br/&gt;      l_error_record_cnt     NUMBER;&lt;br/&gt;      l_systimestamp         TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_record_cnt := 0;&lt;br/&gt;      l_error_record_cnt := 0;&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_cus_base_rec_delta s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   DECODE (p_cursor_data_i.record_load_cd,&lt;br/&gt;                           pkg_utility.c_stg_status_w, pkg_utility.c_stg_processed,&lt;br/&gt;                           p_cursor_data_i.record_load_cd&lt;br/&gt;                          ),&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_i.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                     (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, CUST_ACCT_NO_CUS = &apos;&lt;br/&gt;                                      || p_cursor_data_i.customer_account_num&lt;br/&gt;                                      || &apos;, exception = &apos;&lt;br/&gt;                                      || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                     );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      --Capturing the Processed/error record count&lt;br/&gt;      IF (NVL (p_cursor_data_i.record_load_cd, pkg_utility.c_stg_status_w) IN&lt;br/&gt;                    (pkg_utility.c_stg_status_w, pkg_utility.c_stg_processed)&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;   END update_staging_work;&lt;br/&gt;END pkg_vnt_recon_cus_base;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_PROCESS" directorySegmentName="seg_6" id="610499AB-5CF3-5AE8-2BAD-987E140A00DC">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:21 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_PROCESS&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_process&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 01-Sep-2014&lt;br/&gt;||  Subject Area    : General&lt;br/&gt;||  Description     : The package is for wrapper procedures and functions&lt;br/&gt;||                    that will be used to call other packages for reference code loads for Initial and NRT data load.&lt;br/&gt;||                            Also includes the procedures for population of staging control tables-&lt;br/&gt;||							          nrt_status_ctrl and vnt_nrt_chtr_status_ctrl&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;||     Cognizant      16-Jan-2015     Added procedures for staging control table population&lt;br/&gt;||     Senthil        06-Jun-2015     Added new function is_valid_account&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;   PROCEDURE load_reference_data (&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_stg_nrt_status_ctrl_upd (&lt;br/&gt;      p_audit_user_i       IN   VARCHAR2,&lt;br/&gt;      p_curr_load_status   IN   VARCHAR2,&lt;br/&gt;      p_new_load_status    IN   VARCHAR2,&lt;br/&gt;      p_schema_name        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_stg_chtr_stat_ctl_upd (&lt;br/&gt;      p_audit_user_i       IN   VARCHAR2,&lt;br/&gt;      p_curr_load_status   IN   VARCHAR2,&lt;br/&gt;      p_new_load_status    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION is_valid_account (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_account_id     IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;END pkg_vnt_process;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_PROCESS" id="610499AB-5CF3-5AE8-2BAD-987E140A00DC">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:24 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_PROCESS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_process&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 01-Sep-2014&lt;br/&gt;||  Subject Area    : General&lt;br/&gt;||  Description     : The package pkg_vnt_process is for wrapper procedures and functions&lt;br/&gt;||                    that will be used to call other packages for initial and NRT data load.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;||     Cognizant      16-Jan-2015     Added Staging procedures for NRT and package load control&lt;br/&gt;||     Cognizant      19-Jan-2015     As part of changes for Solo - Recon Post Prod Issues 19-Mar-2015&lt;br/&gt;||     Cognizant      20-APR-2015     Added process indicator to Product catalog and split the code equp_base&lt;br/&gt;||                                    based on process indicator. Removed the all commented codes.&lt;br/&gt;||     Senthil        10-Jun-2015     added new function is_valid_account&lt;br/&gt;||     Senthil        26-Jul-2015     New procedure populate_blstn_and_sfta added&lt;br/&gt;||                                            to populate T_BILLING_STATION and T_SOURCE_FTA&lt;br/&gt;||     Kamal          09-Jul-2015     commented out party_nm&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_pkg_name     CONSTANT t_unit_name := &apos;PKG_VNT_PROCESS&apos;;&lt;br/&gt;   c_mode_init    CONSTANT t_unit_name := &apos;INIT&apos;;&lt;br/&gt;   c_mode_recon   CONSTANT t_unit_name := &apos;RECON&apos;;&lt;br/&gt;   c_mode_nrt     CONSTANT t_unit_name := &apos;NRT&apos;;&lt;br/&gt;&lt;br/&gt;   PROCEDURE populate_refcode_tables (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2 DEFAULT NULL&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE populate_product_catalog (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2 DEFAULT NULL&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE populate_blstn_and_sfta (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2 DEFAULT NULL&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   --PROCEDURE load_initial_data(&lt;br/&gt;   PROCEDURE load_reference_data (&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_initial_data&lt;br/&gt;      ||  SubProgram Name    : Procedure load_reference_data&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE load_initial_data will execute the main procedures for Initial Reference&lt;br/&gt;      ||                       Table Load,Customer, house,account,Open Product Orders and spl requests,Completed&lt;br/&gt;      ||                       Product Orders and spl requests,Trouble Call,Work Orders,&lt;br/&gt;      ||                       Services,Order Items and equipment&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      --l_proc_name      t_unit_name                     := &apos;LOAD_INITIAL_DATA&apos;;&lt;br/&gt;      l_proc_name                  t_unit_name       := &apos;LOAD_REFERENCE_DATA&apos;;&lt;br/&gt;      l_process_name               t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      exp_invalid_refer_load_ind   EXCEPTION;&lt;br/&gt;      l_process_rec                pkg_logging.t_process_rec;&lt;br/&gt;      lv_error_msg                 VARCHAR2 (1200);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.refresh_cache ();&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                    &apos; -&gt; Reference Data Load for &apos;&lt;br/&gt;                                 || p_in_process_mod_ind&lt;br/&gt;                                 || &apos; mode. Audit_user = &apos;&lt;br/&gt;                                 || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;&lt;br/&gt;      IF (p_in_process_mod_ind NOT IN (c_mode_init, c_mode_recon, c_mode_nrt)&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         RAISE exp_invalid_refer_load_ind;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      populate_refcode_tables (p_process_rec_i           =&gt; l_process_rec,&lt;br/&gt;                               p_audit_user_i            =&gt; p_audit_user_i,&lt;br/&gt;                               p_in_process_mod_ind      =&gt; p_in_process_mod_ind&lt;br/&gt;                              );&lt;br/&gt;      populate_product_catalog (p_process_rec_i           =&gt; l_process_rec,&lt;br/&gt;                                p_audit_user_i            =&gt; p_audit_user_i,&lt;br/&gt;                                p_in_process_mod_ind      =&gt; p_in_process_mod_ind&lt;br/&gt;                               );&lt;br/&gt;      populate_blstn_and_sfta (p_process_rec_i           =&gt; l_process_rec,&lt;br/&gt;                               p_audit_user_i            =&gt; p_audit_user_i,&lt;br/&gt;                               p_in_process_mod_ind      =&gt; p_in_process_mod_ind&lt;br/&gt;                              );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_invalid_refer_load_ind&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         lv_error_msg :=&lt;br/&gt;              &apos;Mode Parameter value &apos; || p_in_process_mod_ind || &apos; is Valid.&apos;;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec, lv_error_msg);&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         raise_application_error (-20001, lv_error_msg, TRUE);&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         lv_error_msg := SUBSTR (SQLERRM, 1, 1024);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         raise_application_error (-20001, lv_error_msg, TRUE);&lt;br/&gt;   END load_reference_data;&lt;br/&gt;&lt;br/&gt;   PROCEDURE populate_refcode_tables (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure populate_refcode_tables&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE populate_refcode_tables will do populate_refcode_tables&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_cnt           NUMBER                    := 0;&lt;br/&gt;      l_proc_name     t_unit_name               := &apos;POPULATE_REFCODE_TABLES&apos;;&lt;br/&gt;      l_process_rec   pkg_logging.t_process_rec;&lt;br/&gt;      l_sql           VARCHAR2 (8000);&lt;br/&gt;      lv_error_msg    VARCHAR2 (512);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos; Start&apos;);&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN (SELECT   src_table_name, src_key_column_name,&lt;br/&gt;                               trg_table_name, trg_key_column_name,&lt;br/&gt;                               src_translate_column, trg_translate_column,&lt;br/&gt;                               trg_default_column_name1, trg_default_value1,&lt;br/&gt;                               trg_default_column_name2, trg_default_value2&lt;br/&gt;                          FROM t_refcode_mapping&lt;br/&gt;                         WHERE NVL (process_mode_ind, p_in_process_mod_ind) =&lt;br/&gt;                                                         p_in_process_mod_ind&lt;br/&gt;                           AND record_stat = &apos;A&apos;&lt;br/&gt;                      ORDER BY order_seq)&lt;br/&gt;      LOOP&lt;br/&gt;         l_sql :=&lt;br/&gt;               &apos;INSERT INTO &apos;&lt;br/&gt;            || cur_rec.trg_table_name&lt;br/&gt;            || &apos;( &apos;&lt;br/&gt;            || cur_rec.trg_key_column_name;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.src_translate_column) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos;,&apos; || cur_rec.trg_translate_column;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.trg_default_column_name1) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos;,&apos; || cur_rec.trg_default_column_name1;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.trg_default_column_name2) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos;,&apos; || cur_rec.trg_default_column_name2;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         l_sql :=&lt;br/&gt;              l_sql || &apos;,record_stat, created_dttm,created_by) (SELECT keycol&apos;;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.src_translate_column) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos;, translate_column&apos;;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.trg_default_column_name1) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos;,&apos; || cur_rec.trg_default_value1;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.trg_default_column_name2) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos;,&apos; || cur_rec.trg_default_value2;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         l_sql :=&lt;br/&gt;               l_sql&lt;br/&gt;            || &apos;,&apos;&apos;A&apos;&apos;, SYSDATE,USER FROM (SELECT TRIM(&apos;&lt;br/&gt;            || cur_rec.src_key_column_name&lt;br/&gt;            || &apos;) keycol &apos;;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.src_translate_column) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql :=&lt;br/&gt;                  l_sql&lt;br/&gt;               || &apos;,&apos;&lt;br/&gt;               || cur_rec.src_translate_column&lt;br/&gt;               || &apos; translate_column &apos;;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         l_sql := l_sql || &apos; FROM &apos; || cur_rec.src_table_name;&lt;br/&gt;&lt;br/&gt;         IF INSTR (UPPER (cur_rec.src_table_name), &apos;STG.&apos;) &gt; 0&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos; WHERE RECORD_LOAD_CD IS NULL &apos;;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         l_sql := l_sql || &apos; MINUS SELECT &apos; || cur_rec.trg_key_column_name;&lt;br/&gt;&lt;br/&gt;         IF TRIM (cur_rec.src_translate_column) IS NOT NULL&lt;br/&gt;         THEN&lt;br/&gt;            l_sql := l_sql || &apos;,&apos; || cur_rec.trg_translate_column;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         l_sql :=&lt;br/&gt;               l_sql&lt;br/&gt;            || &apos; FROM &apos;&lt;br/&gt;            || cur_rec.trg_table_name&lt;br/&gt;            || &apos;)&apos;&lt;br/&gt;            || &apos; WHERE keycol IS NOT NULL)&apos;;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos; l_sql=&apos; || l_sql&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         /* Sample SQL&lt;br/&gt;         INSERT INTO chtr.t_prod_order_status_cd&lt;br/&gt;         (product_order_status_cd, data_source_type_cd, record_stat,&lt;br/&gt;         created_dttm, created_by)&lt;br/&gt;         (SELECT keycol, translate_column, &apos;A&apos;, SYSDATE, USER&lt;br/&gt;         FROM (SELECT TRIM (ord_stat_roor) keycol,&lt;br/&gt;         CASE&lt;br/&gt;         WHEN sys_roor = 8313&lt;br/&gt;         THEN &apos;VNT&apos;&lt;br/&gt;         ELSE &apos;VNT&apos;&lt;br/&gt;         END translate_column&lt;br/&gt;         FROM stg.vnt_rrt_oor_order_open&lt;br/&gt;         WHERE record_load_cd IS NULL&lt;br/&gt;         MINUS&lt;br/&gt;         SELECT product_order_status_cd, data_source_type_cd&lt;br/&gt;         FROM chtr.t_prod_order_status_cd)&lt;br/&gt;         WHERE keycol IS NOT NULL);&lt;br/&gt;         */&lt;br/&gt;         EXECUTE IMMEDIATE l_sql;&lt;br/&gt;&lt;br/&gt;         l_cnt := SQL%ROWCOUNT;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || cur_rec.trg_table_name&lt;br/&gt;                                || &apos; Rows inserted =&apos;&lt;br/&gt;                                || l_cnt&lt;br/&gt;                               );&lt;br/&gt;         COMMIT;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      -- Special Handling for t_work_order_completion_cd.&lt;br/&gt;      -- Due to violation of PK constraint on T_REFCODE_MAPPING table&lt;br/&gt;      INSERT INTO chtr.t_work_order_completion_cd&lt;br/&gt;                  (work_order_completion_cd, data_source_type_cd,&lt;br/&gt;                   work_order_category_cd, record_stat, created_dttm,&lt;br/&gt;                   created_by)&lt;br/&gt;         (SELECT keycol, translate_column, cat, &apos;A&apos;, SYSDATE, p_audit_user_i&lt;br/&gt;            FROM (SELECT TRIM (work_order_cancel_cd) keycol,&lt;br/&gt;                         data_source_type_cd translate_column, &apos;W&apos; cat&lt;br/&gt;                    FROM chtr.t_work_order_cancel_cd&lt;br/&gt;                  MINUS&lt;br/&gt;                  SELECT work_order_completion_cd, data_source_type_cd,&lt;br/&gt;                         work_order_category_cd&lt;br/&gt;                    FROM chtr.t_work_order_completion_cd)&lt;br/&gt;           WHERE keycol IS NOT NULL);&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                         l_proc_name&lt;br/&gt;                      || &apos;, t_work_order_completion_cd  - W - Rows inserted =&apos;&lt;br/&gt;                      || SQL%ROWCOUNT&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;      INSERT INTO chtr.t_work_order_completion_cd&lt;br/&gt;                  (work_order_completion_cd, data_source_type_cd,&lt;br/&gt;                   work_order_category_cd, record_stat, created_dttm,&lt;br/&gt;                   created_by)&lt;br/&gt;         (SELECT keycol, translate_column, cat, &apos;A&apos;, SYSDATE, p_audit_user_i&lt;br/&gt;            FROM (SELECT TRIM (work_order_cancel_cd) keycol,&lt;br/&gt;                         data_source_type_cd translate_column, &apos;Z&apos; cat&lt;br/&gt;                    FROM chtr.t_work_order_cancel_cd&lt;br/&gt;                  MINUS&lt;br/&gt;                  SELECT work_order_completion_cd, data_source_type_cd,&lt;br/&gt;                         work_order_category_cd&lt;br/&gt;                    FROM chtr.t_work_order_completion_cd)&lt;br/&gt;           WHERE keycol IS NOT NULL);&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                         l_proc_name&lt;br/&gt;                      || &apos;, t_work_order_completion_cd  - Z - Rows inserted =&apos;&lt;br/&gt;                      || SQL%ROWCOUNT&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;      INSERT INTO chtr.t_work_order_completion_cd&lt;br/&gt;                  (work_order_completion_cd, data_source_type_cd,&lt;br/&gt;                   work_order_category_cd, record_stat, created_dttm,&lt;br/&gt;                   created_by)&lt;br/&gt;         (SELECT keycol, translate_column, cat, &apos;A&apos;, SYSDATE, p_audit_user_i&lt;br/&gt;            FROM (SELECT TRIM (work_order_cancel_cd) keycol,&lt;br/&gt;                         data_source_type_cd translate_column, &apos;T&apos; cat&lt;br/&gt;                    FROM chtr.t_work_order_cancel_cd&lt;br/&gt;                  MINUS&lt;br/&gt;                  SELECT work_order_completion_cd, data_source_type_cd,&lt;br/&gt;                         work_order_category_cd&lt;br/&gt;                    FROM chtr.t_work_order_completion_cd)&lt;br/&gt;           WHERE keycol IS NOT NULL);&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.log_debug&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                         l_proc_name&lt;br/&gt;                      || &apos;, t_work_order_completion_cd  - T - Rows inserted =&apos;&lt;br/&gt;                      || SQL%ROWCOUNT&lt;br/&gt;                     );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos; End&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         lv_error_msg := SUBSTR (SQLERRM, 1, 512);&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;         raise_application_error (-20002, lv_error_msg, FALSE);&lt;br/&gt;   END populate_refcode_tables;&lt;br/&gt;&lt;br/&gt;   PROCEDURE populate_product_catalog (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2 DEFAULT NULL&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure populate_product_catalog&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE populate_product_catalog will do populate_product_catalog :&lt;br/&gt;      ||                       This will be removed once the interface with EPC system is built&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_cnt                  NUMBER;&lt;br/&gt;      l_proc_name            t_unit_name        := &apos;POPULATE_PRODUCT_CATALOG&apos;;&lt;br/&gt;      l_process_rec          pkg_logging.t_process_rec;&lt;br/&gt;      l_billing_product_id   NUMBER;&lt;br/&gt;      l_product_type_cd      chtr.t_product_type.product_type_cd%TYPE&lt;br/&gt;                                                                   := &apos;EQPMT&apos;;&lt;br/&gt;      l_party_subtype_cd     chtr.t_party.party_subtype_cd%TYPE    := &apos;MANUF&apos;;&lt;br/&gt;      l_dummy                VARCHAR2 (100)                        := &apos;DUMMY&apos;;&lt;br/&gt;      l_unknown              VARCHAR2 (100)                      := &apos;UNKNOWN&apos;;&lt;br/&gt;      lv_error_msg           VARCHAR2 (512);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos; Start&apos;);&lt;br/&gt;&lt;br/&gt;      --Insert dummy entry in T_PRODUCT_TYPE&lt;br/&gt;      SELECT COUNT (*)&lt;br/&gt;        INTO l_cnt&lt;br/&gt;        FROM t_product_type&lt;br/&gt;       WHERE product_type_cd = l_product_type_cd;&lt;br/&gt;&lt;br/&gt;      IF l_cnt = 0&lt;br/&gt;      THEN&lt;br/&gt;         INSERT INTO chtr.t_product_type&lt;br/&gt;                     (product_type_cd, product_type_nm, product_type_desc,&lt;br/&gt;                      record_stat, created_dttm, created_by&lt;br/&gt;                     )&lt;br/&gt;              VALUES (l_product_type_cd, &apos;Equipment&apos;, &apos;Equipment Product&apos;,&lt;br/&gt;                      &apos;A&apos;, SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; T_PRODUCT_TYPE insert=&apos;&lt;br/&gt;                                || SQL%ROWCOUNT&lt;br/&gt;                               );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --Insert dummy entry in T_PRODUCT_CLASS&lt;br/&gt;      SELECT COUNT (*)&lt;br/&gt;        INTO l_cnt&lt;br/&gt;        FROM t_product_class&lt;br/&gt;       WHERE product_class_cd = l_dummy;&lt;br/&gt;&lt;br/&gt;      IF l_cnt = 0&lt;br/&gt;      THEN&lt;br/&gt;         INSERT INTO chtr.t_product_class&lt;br/&gt;                     (product_class_cd, product_type_cd, product_class_nm,&lt;br/&gt;                      product_class_desc, record_stat, created_dttm,&lt;br/&gt;                      created_by&lt;br/&gt;                     )&lt;br/&gt;              VALUES (l_dummy, l_product_type_cd, l_dummy,&lt;br/&gt;                      l_dummy, &apos;A&apos;, SYSTIMESTAMP,&lt;br/&gt;                      p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; T_PRODUCT_CLASS insert=&apos;&lt;br/&gt;                                || SQL%ROWCOUNT&lt;br/&gt;                               );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --Insert product from VNT table&lt;br/&gt;      IF p_in_process_mod_ind = c_mode_nrt&lt;br/&gt;      THEN&lt;br/&gt;         INSERT INTO chtr.t_product&lt;br/&gt;                     (product_id, data_source_type_cd, product_cd,&lt;br/&gt;                      product_nm, product_desc, product_type_cd,&lt;br/&gt;                      product_class_cd, supplier_party_id,&lt;br/&gt;                      billing_product_id, record_stat, created_dttm,&lt;br/&gt;                      created_by)&lt;br/&gt;            (SELECT s_product_id.NEXTVAL, &apos;VNT&apos;, model_num, NULL, NULL,&lt;br/&gt;                    l_product_type_cd, l_dummy, NULL, NULL, &apos;A&apos;,&lt;br/&gt;                    SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;               FROM (SELECT NVL (TRIM (UPPER (reqp.eqp_model_reqp)),&lt;br/&gt;                                 l_unknown&lt;br/&gt;                                ) model_num&lt;br/&gt;                       FROM stg.vnt_rrt_eqp_base reqp&lt;br/&gt;                      WHERE record_load_cd IS NULL&lt;br/&gt;                     MINUS&lt;br/&gt;                     SELECT product_cd&lt;br/&gt;                       FROM chtr.t_product p) src);&lt;br/&gt;      ELSIF p_in_process_mod_ind = c_mode_init&lt;br/&gt;      THEN&lt;br/&gt;         INSERT INTO chtr.t_product&lt;br/&gt;                     (product_id, data_source_type_cd, product_cd,&lt;br/&gt;                      product_nm, product_desc, product_type_cd,&lt;br/&gt;                      product_class_cd, supplier_party_id,&lt;br/&gt;                      billing_product_id, record_stat, created_dttm,&lt;br/&gt;                      created_by)&lt;br/&gt;            (SELECT s_product_id.NEXTVAL, &apos;VNT&apos;, model_num, NULL, NULL,&lt;br/&gt;                    l_product_type_cd, l_dummy, NULL, NULL, &apos;A&apos;,&lt;br/&gt;                    SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;               FROM (SELECT NVL (TRIM (UPPER (eqp.eqp_model_eqp)),&lt;br/&gt;                                 l_unknown&lt;br/&gt;                                ) model_num&lt;br/&gt;                       FROM stg.vnt_eqp_base eqp&lt;br/&gt;                     MINUS&lt;br/&gt;                     SELECT product_cd&lt;br/&gt;                       FROM chtr.t_product p) src);&lt;br/&gt;      ELSIF p_in_process_mod_ind = c_mode_recon&lt;br/&gt;      THEN&lt;br/&gt;         INSERT INTO chtr.t_product&lt;br/&gt;                     (product_id, data_source_type_cd, product_cd,&lt;br/&gt;                      product_nm, product_desc, product_type_cd,&lt;br/&gt;                      product_class_cd, supplier_party_id,&lt;br/&gt;                      billing_product_id, record_stat, created_dttm,&lt;br/&gt;                      created_by)&lt;br/&gt;            (SELECT s_product_id.NEXTVAL, &apos;VNT&apos;, model_num, NULL, NULL,&lt;br/&gt;                    l_product_type_cd, l_dummy, NULL, NULL, &apos;A&apos;,&lt;br/&gt;                    SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;               FROM (SELECT NVL (TRIM (UPPER (eqp.eqp_model_eqp)),&lt;br/&gt;                                 l_unknown&lt;br/&gt;                                ) model_num&lt;br/&gt;                       FROM stg.vnt_eqp_base_rec_delta eqp&lt;br/&gt;                     MINUS&lt;br/&gt;                     SELECT product_cd&lt;br/&gt;                       FROM chtr.t_product p) src);&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; T_PRODUCT eqp_model-insert=&apos;&lt;br/&gt;                             || SQL%ROWCOUNT&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      --Insert equipment product&lt;br/&gt;      INSERT INTO chtr.t_equip_product a&lt;br/&gt;                  (a.equipment_product_id, a.equipment_product_type_cd,&lt;br/&gt;                   a.equipment_model_num, a.manufacturer_party_id,&lt;br/&gt;                   a.equipment_product_avg_cost_amt, a.record_stat,&lt;br/&gt;                   a.created_dttm, a.created_by)&lt;br/&gt;         (SELECT product_id, l_product_type_cd, product_cd, supplier_party_id,&lt;br/&gt;                 NULL, &apos;A&apos;, SYSTIMESTAMP, p_audit_user_i&lt;br/&gt;            FROM chtr.t_product p&lt;br/&gt;           WHERE p.product_type_cd = l_product_type_cd&lt;br/&gt;             AND NOT EXISTS (SELECT 1&lt;br/&gt;                               FROM t_equip_product b&lt;br/&gt;                              WHERE p.product_id = b.equipment_product_id));&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; T_EQUIPMENT_PRODUCT insert=&apos;&lt;br/&gt;                             || SQL%ROWCOUNT&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos; End&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         lv_error_msg := SUBSTR (SQLERRM, 1, 512);&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;         raise_application_error (-20003, lv_error_msg, FALSE);&lt;br/&gt;   END populate_product_catalog;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_stg_nrt_status_ctrl_upd (&lt;br/&gt;      p_audit_user_i       IN   VARCHAR2,&lt;br/&gt;      p_curr_load_status   IN   VARCHAR2,&lt;br/&gt;      p_new_load_status    IN   VARCHAR2,&lt;br/&gt;      p_schema_name        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_stg_nrt_status_ctrl_upd&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The PROCEDURE vnt_stg_nrt_status_ctrl_upd  updates the RUNNING records&lt;br/&gt;||                              in the staging control table vnt_nrt_status_ctrl to COMPLETED  and inserts&lt;br/&gt;||                             Entries into vnt_nrt_chtr_status_ctrl with status RUNNING&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_cnt                NUMBER;&lt;br/&gt;      l_proc_name          t_unit_name       := &apos;VNT_STG_NRT_STATUS_CTRL_UPD&apos;;&lt;br/&gt;      l_process_name       t_process_log.process_name%TYPE      := c_pkg_name;&lt;br/&gt;      l_process_rec        pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp       TIMESTAMP                          := SYSTIMESTAMP;&lt;br/&gt;      l_curr_load_status   stg.vnt_nrt_chtr_status_ctrl.load_status%TYPE;&lt;br/&gt;      l_new_load_status    stg.vnt_nrt_chtr_status_ctrl.load_status%TYPE;&lt;br/&gt;      l_schema_name        stg.vnt_nrt_chtr_status_ctrl.schema_name%TYPE;&lt;br/&gt;      l_audit_user_i       stg.vnt_nrt_chtr_status_ctrl.modified_by%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_curr_load_status := p_curr_load_status;&lt;br/&gt;      l_new_load_status := p_new_load_status;&lt;br/&gt;      l_schema_name := p_schema_name;&lt;br/&gt;      l_audit_user_i := p_audit_user_i;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || l_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF p_curr_load_status = &apos;RUNNING&apos;&lt;br/&gt;      THEN&lt;br/&gt;         INSERT INTO stg.vnt_nrt_chtr_status_ctrl&lt;br/&gt;                     (schema_name, pull_date, pull_tme_slot, load_status,&lt;br/&gt;                      created_dttm, created_by, modified_dttm, modified_by)&lt;br/&gt;            SELECT schema_name, pull_date, pull_tme_slot, l_curr_load_status,&lt;br/&gt;                   l_systimestamp, p_audit_user_i, NULL, NULL&lt;br/&gt;              FROM stg.nrt_status_ctrl&lt;br/&gt;             WHERE schema_name = l_schema_name&lt;br/&gt;               AND load_status = l_curr_load_status;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.nrt_status_ctrl&lt;br/&gt;         SET load_status = l_new_load_status,&lt;br/&gt;             record_update_date = l_systimestamp,&lt;br/&gt;             record_update_by = l_audit_user_i&lt;br/&gt;       WHERE schema_name = l_schema_name AND load_status = l_curr_load_status;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;   END vnt_stg_nrt_status_ctrl_upd;&lt;br/&gt;&lt;br/&gt;   PROCEDURE vnt_stg_chtr_stat_ctl_upd (&lt;br/&gt;      p_audit_user_i       IN   VARCHAR2,&lt;br/&gt;      p_curr_load_status   IN   VARCHAR2,&lt;br/&gt;      p_new_load_status    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  SubProgram Name    : Procedure vnt_stg_nrt_chtr_stat_ctrl_upd&lt;br/&gt;||  Estimated Run Time :&lt;br/&gt;||  Description        : The PROCEDURE vnt_stg_nrt_chtr_stat_ctrl_upd  updates the RUNNING records&lt;br/&gt;||                              in the staging control table vnt_nrt_chtr_status_ctrl to COMPLETED&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;      l_cnt            NUMBER;&lt;br/&gt;      l_proc_name      t_unit_name             := &apos;VNT_STG_CHTR_STAT_CTL_UPD&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp   TIMESTAMP                         := SYSTIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      UPDATE stg.vnt_nrt_chtr_status_ctrl&lt;br/&gt;         SET load_status = p_new_load_status,&lt;br/&gt;             modified_dttm = l_systimestamp,&lt;br/&gt;             modified_by = p_audit_user_i&lt;br/&gt;       WHERE load_status = p_curr_load_status;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;   END vnt_stg_chtr_stat_ctl_upd;&lt;br/&gt;&lt;br/&gt;   FUNCTION is_valid_account (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_account_id     IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;   BEGIN&lt;br/&gt;      RETURN (LENGTH (TRIM (p_account_id)) = 16 AND p_account_id LIKE &apos;8%&apos;);&lt;br/&gt;   END is_valid_account;&lt;br/&gt;&lt;br/&gt;   PROCEDURE populate_blstn_and_sfta (&lt;br/&gt;      p_process_rec_i        IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i         IN   VARCHAR2,&lt;br/&gt;      p_in_process_mod_ind   IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      l_organization_id_bill   t_organization.organization_id%TYPE;&lt;br/&gt;      l_organization_id_sfta   t_organization.organization_id%TYPE;&lt;br/&gt;&lt;br/&gt;      SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;      SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;      g_batchsize              NUMBER                                := 1000;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_billing_station_id&lt;br/&gt;      IS&lt;br/&gt;         SELECT TO_CHAR (sys_hse) AS sys_hse,&lt;br/&gt;                LPAD (TO_CHAR (prin_hse), 4, &apos;0&apos;) AS prin_hse,&lt;br/&gt;                LPAD (TO_CHAR (agnt_hse), 4, &apos;0&apos;) AS agnt_hse,&lt;br/&gt;                CASE&lt;br/&gt;                   WHEN sys_hse = 8313&lt;br/&gt;                      THEN &apos;BRS&apos;&lt;br/&gt;                   ELSE &apos;VNT&apos;&lt;br/&gt;                END AS data_source_type_cd&lt;br/&gt;           FROM stg.vnt_hse_base_rec_delta hse&lt;br/&gt;         MINUS&lt;br/&gt;         SELECT bll.billing_station_level_1_cd AS SYS,&lt;br/&gt;                bll.billing_station_level_2_cd AS prin,&lt;br/&gt;                sft.source_fta_cd AS agnt,&lt;br/&gt;                bll.billing_provider_nm AS data_source_type_cd&lt;br/&gt;           FROM t_billing_station bll JOIN t_source_fta sft&lt;br/&gt;                ON (sft.billing_station_id = bll.billing_station_id)&lt;br/&gt;                ;&lt;br/&gt;&lt;br/&gt;      TYPE t_cursor_data_tbl_1 IS TABLE OF cur_billing_station_id%ROWTYPE&lt;br/&gt;         INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;      l_cursor_data_1          t_cursor_data_tbl_1;&lt;br/&gt;      l_proc_name              t_unit_name           := &apos;LOAD_BLSTN_AND_SFTA&apos;;&lt;br/&gt;      l_process_name           t_process_log.process_name%TYPE  := c_pkg_name;&lt;br/&gt;      l_process_rec            pkg_logging.t_process_rec;&lt;br/&gt;      l_systimestamp           TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, Start&apos;&lt;br/&gt;                             || &apos; p_in_process_mod_ind=&apos;&lt;br/&gt;                             || p_in_process_mod_ind&lt;br/&gt;                             || &apos; p_audit_user_i=&apos;&lt;br/&gt;                             || p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF p_in_process_mod_ind = c_mode_recon&lt;br/&gt;      THEN&lt;br/&gt;         IF (cur_billing_station_id%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_billing_station_id;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         OPEN cur_billing_station_id;&lt;br/&gt;&lt;br/&gt;         LOOP&lt;br/&gt;            FETCH cur_billing_station_id&lt;br/&gt;            BULK COLLECT INTO l_cursor_data_1 LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;            IF (l_cursor_data_1.COUNT () &gt; 0)&lt;br/&gt;            THEN&lt;br/&gt;               FOR i IN 1 .. l_cursor_data_1.COUNT&lt;br/&gt;               LOOP&lt;br/&gt;                  BEGIN&lt;br/&gt;                     l_organization_id_bill := NULL;&lt;br/&gt;                     l_organization_id_sfta := NULL;&lt;br/&gt;&lt;br/&gt;                     BEGIN&lt;br/&gt;                        SELECT billing_station_id&lt;br/&gt;                          INTO l_organization_id_bill&lt;br/&gt;                          FROM t_billing_station&lt;br/&gt;                         WHERE billing_station_level_1_cd =&lt;br/&gt;                                                   l_cursor_data_1 (i).sys_hse&lt;br/&gt;                           AND billing_station_level_2_cd =&lt;br/&gt;                                                  l_cursor_data_1 (i).prin_hse&lt;br/&gt;                           AND billing_provider_nm =&lt;br/&gt;                                       l_cursor_data_1 (i).data_source_type_cd;&lt;br/&gt;                     EXCEPTION&lt;br/&gt;                        WHEN NO_DATA_FOUND&lt;br/&gt;                        THEN&lt;br/&gt;                           l_organization_id_bill := -1;&lt;br/&gt;                     END;&lt;br/&gt;&lt;br/&gt;                     IF l_organization_id_bill = -1&lt;br/&gt;                     THEN&lt;br/&gt;                        BEGIN&lt;br/&gt;                           l_organization_id_bill :=&lt;br/&gt;                              da_party.ADD&lt;br/&gt;                                 (process_rec                 =&gt; l_process_rec,&lt;br/&gt;                                  data_source_type_cd         =&gt; l_cursor_data_1&lt;br/&gt;                                                                           (i).data_source_type_cd,&lt;br/&gt;                                  source_system_party_id      =&gt; NULL,&lt;br/&gt;                                 -- party_nm                    =&gt; NULL,&lt;br/&gt;                                  party_subtype_cd            =&gt; &apos;ORGN&apos;,&lt;br/&gt;                                  party_child_subtype_cd      =&gt; &apos;BLSTN&apos;,&lt;br/&gt;                                  audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;                           da_organization.ADD&lt;br/&gt;                                   (process_rec                  =&gt; l_process_rec,&lt;br/&gt;                                    organization_id              =&gt; l_organization_id_bill,&lt;br/&gt;                                    parent_organization_id       =&gt; NULL,&lt;br/&gt;                                    organization_nm              =&gt; NULL,&lt;br/&gt;                                    active_organization_ind      =&gt; NULL,&lt;br/&gt;                                    audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;                           da_internal_organization.ADD&lt;br/&gt;                                   (process_rec               =&gt; l_process_rec,&lt;br/&gt;                                    organization_id           =&gt; l_organization_id_bill,&lt;br/&gt;                                    organization_type_cd      =&gt; NULL,&lt;br/&gt;                                    audit_user                =&gt; p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;                           da_billing_station.ADD&lt;br/&gt;                              (process_rec                     =&gt; l_process_rec,&lt;br/&gt;                               billing_station_id              =&gt; l_organization_id_bill,&lt;br/&gt;                               billing_station_nm              =&gt; NULL,&lt;br/&gt;                               billing_station_cd              =&gt; NULL,&lt;br/&gt;                               billing_station_level_1_cd      =&gt; l_cursor_data_1&lt;br/&gt;                                                                           (i).sys_hse,&lt;br/&gt;                               billing_station_level_2_cd      =&gt; l_cursor_data_1&lt;br/&gt;                                                                           (i).prin_hse,&lt;br/&gt;                               billing_station_level_3_cd      =&gt; NULL,&lt;br/&gt;                               billing_provider_nm             =&gt; l_cursor_data_1&lt;br/&gt;                                                                           (i).data_source_type_cd,&lt;br/&gt;                               audit_user                      =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;                        EXCEPTION&lt;br/&gt;                           WHEN OTHERS&lt;br/&gt;                           THEN&lt;br/&gt;                              pkg_logging.log_exception&lt;br/&gt;                                 (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                  p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                          || &apos;, SYS_HSE = &apos;&lt;br/&gt;                                                          || l_cursor_data_1&lt;br/&gt;                                                                           (i).sys_hse&lt;br/&gt;                                                          || &apos;, PRIN_HSE = &apos;&lt;br/&gt;                                                          || l_cursor_data_1&lt;br/&gt;                                                                           (i).prin_hse&lt;br/&gt;                                                          || &apos;, AGNT_HSE = &apos;&lt;br/&gt;                                                          || l_cursor_data_1&lt;br/&gt;                                                                           (i).agnt_hse&lt;br/&gt;                                                          || &apos; exception = &apos;&lt;br/&gt;                                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                 );&lt;br/&gt;                              RAISE;&lt;br/&gt;                        END;&lt;br/&gt;                     END IF;&lt;br/&gt;&lt;br/&gt;                     l_organization_id_sfta :=&lt;br/&gt;                        da_party.ADD&lt;br/&gt;                           (process_rec                 =&gt; l_process_rec,&lt;br/&gt;                            data_source_type_cd         =&gt; l_cursor_data_1 (i).data_source_type_cd,&lt;br/&gt;                            source_system_party_id      =&gt; NULL,&lt;br/&gt;                           -- party_nm                    =&gt; l_cursor_data_1 (i).agnt_hse,&lt;br/&gt;                            party_subtype_cd            =&gt; &apos;ORGN&apos;,&lt;br/&gt;                            party_child_subtype_cd      =&gt; &apos;SCFTA&apos;,&lt;br/&gt;                            audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                           );&lt;br/&gt;                     da_organization.ADD&lt;br/&gt;                              (process_rec                  =&gt; l_process_rec,&lt;br/&gt;                               organization_id              =&gt; l_organization_id_sfta,&lt;br/&gt;                               parent_organization_id       =&gt; NULL,&lt;br/&gt;                               organization_nm              =&gt; l_cursor_data_1&lt;br/&gt;                                                                           (i).agnt_hse,&lt;br/&gt;                               active_organization_ind      =&gt; NULL,&lt;br/&gt;                               audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;                     da_internal_organization.ADD&lt;br/&gt;                                   (process_rec               =&gt; l_process_rec,&lt;br/&gt;                                    organization_id           =&gt; l_organization_id_sfta,&lt;br/&gt;                                    organization_type_cd      =&gt; NULL,&lt;br/&gt;                                    audit_user                =&gt; p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;                     da_source_fta.ADD&lt;br/&gt;                                (process_rec                     =&gt; l_process_rec,&lt;br/&gt;                                 source_fta_id                   =&gt; l_organization_id_sfta,&lt;br/&gt;                                 accounting_fta_id               =&gt; NULL,&lt;br/&gt;                                 billing_station_id              =&gt; l_organization_id_bill,&lt;br/&gt;                                 source_fta_cd                   =&gt; l_cursor_data_1&lt;br/&gt;                                                                           (i).agnt_hse,&lt;br/&gt;                                 gl_id                           =&gt; NULL,&lt;br/&gt;                                 telephone_gl_id                 =&gt; NULL,&lt;br/&gt;                                 geocode_txt                     =&gt; NULL,&lt;br/&gt;                                 dma_cd                          =&gt; NULL,&lt;br/&gt;                                 lineup_id                       =&gt; NULL,&lt;br/&gt;                                 fcc_community_id                =&gt; NULL,&lt;br/&gt;                                 phone_accounting_system_id      =&gt; NULL,&lt;br/&gt;                                 audit_user                      =&gt; p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;                  EXCEPTION&lt;br/&gt;                     WHEN OTHERS&lt;br/&gt;                     THEN&lt;br/&gt;                        pkg_logging.log_exception&lt;br/&gt;                           (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                            p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                    || &apos;, SYS_HSE = &apos;&lt;br/&gt;                                                    || l_cursor_data_1 (i).sys_hse&lt;br/&gt;                                                    || &apos;, PRIN_HSE = &apos;&lt;br/&gt;                                                    || l_cursor_data_1 (i).prin_hse&lt;br/&gt;                                                    || &apos;, AGNT_HSE = &apos;&lt;br/&gt;                                                    || l_cursor_data_1 (i).agnt_hse&lt;br/&gt;                                                    || &apos; exception = &apos;&lt;br/&gt;                                                    || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                           );&lt;br/&gt;                        RAISE;&lt;br/&gt;                  END;&lt;br/&gt;               END LOOP;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            EXIT WHEN l_cursor_data_1.COUNT () &lt; g_batchsize&lt;br/&gt;                  OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;         END LOOP;&lt;br/&gt;&lt;br/&gt;         CLOSE cur_billing_station_id;&lt;br/&gt;&lt;br/&gt;         COMMIT;&lt;br/&gt;      ELSE&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                          (p_process_rec_i,&lt;br/&gt;                              l_proc_name&lt;br/&gt;                           || &apos; No action needed for the given Process Mode &apos;&lt;br/&gt;                           || p_in_process_mod_ind&lt;br/&gt;                          );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos; End&apos;);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_billing_station_id%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_billing_station_id;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         DELETE      t_process_config&lt;br/&gt;               WHERE process_name = c_pkg_name;&lt;br/&gt;&lt;br/&gt;         COMMIT;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                    DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;         RAISE;&lt;br/&gt;   END populate_blstn_and_sfta;&lt;br/&gt;END pkg_vnt_process;</source>
</body>
</PackageOracle>
<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_HSL_LOB" directorySegmentName="seg_6" id="DCBA2CFD-12A7-6E8F-3C14-69954AE8CA0A">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_HSL_LOB</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:17 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_HSL_LOB&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_AUDIT_HSL_LOB&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 10-Dec-2014&lt;br/&gt;   ||  Subject Area    : House&lt;br/&gt;   ||  Description     : This is for loading HSL Lob details for the Reconciliation process&lt;br/&gt;   ||&lt;br/&gt;   ||   Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_max_thread         NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread  NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;END pkg_vnt_recon_hsl_lob;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_HSL_LOB" id="DCBA2CFD-12A7-6E8F-3C14-69954AE8CA0A">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_HSL_LOB</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:18 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_HSL_LOB&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_AUDIT_HSL_LOB&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 10-Dec-2014&lt;br/&gt;   ||  Subject Area    : House&lt;br/&gt;   ||  Description     : This is for loading HSL Lob details for the Reconciliation process&lt;br/&gt;   ||&lt;br/&gt;   ||   Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||   Cognizant        30-MAR-2015      Modified cursor query to support ROWID based multithreading&lt;br/&gt;   ||   Cognizant        15-MAY-2015      Batch Processing introduced as part of performance improvement&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name        := &apos;PKG_VNT_RECON_HSL_LOB&apos;;&lt;br/&gt;   c_bulk_errors                EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   g_max_thread                 NUMBER                                   := 1;&lt;br/&gt;   g_reminder_thread            NUMBER                                   := 1;&lt;br/&gt;   g_process_record_cnt         NUMBER                                   := 0;&lt;br/&gt;   g_error_record_cnt           NUMBER                                   := 0;&lt;br/&gt;   g_batchsize                  NUMBER                                   := 1;&lt;br/&gt;   l_current_recon_start_time   stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_hsl_lob&lt;br/&gt;   IS&lt;br/&gt;      SELECT hsl.ROWID AS ID, hsl.record_load_cd,&lt;br/&gt;             xref.address_id AS address_id, NULL AS headend_id,&lt;br/&gt;             hsl.hse_key_hsl AS hse_key,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN sys_hsl = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             hsl.delivery_segment_id_hsl AS line_of_business_cd,&lt;br/&gt;             hsl.connect_cde_hsl AS connection_status_cd,&lt;br/&gt;             hsl.node_hsl AS node_nm, hsl.tap_stat_hsl AS tap_status_cd,&lt;br/&gt;             hsl.serv_stat_hsl AS serviceability_status_cd&lt;br/&gt;        FROM stg.vnt_hsl_lob_rec_delta hsl JOIN t_service_address_vantage_xref xref&lt;br/&gt;             ON xref.hs_key = hsl.hse_key_hsl&lt;br/&gt;       WHERE hsl.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (hsl.ROWID, LENGTH (hsl.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_hsl_lob%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_ptr_tbl IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE insert_strt_addr_servicability (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hsl_lob%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_hsl_lob%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for HSL LOB details from the staging table &apos;VNT_HSL_LOB_REC_DELTA&apos;. Added the&lt;br/&gt;      ||                       Cursor Opening and Closing Logic&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name                     := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data                 t_cursor_data_tbl;&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_hsl_lob%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_hsl_lob;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_hsl_lob;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_hsl_lob&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               -- Insert service_address_line_of_bus&lt;br/&gt;               insert_strt_addr_servicability (l_process_rec,&lt;br/&gt;                                               l_cursor_data (i),&lt;br/&gt;                                               p_audit_user_i&lt;br/&gt;                                              );&lt;br/&gt;               -- Update the staging rows with status&lt;br/&gt;               update_staging (l_process_rec,&lt;br/&gt;                               l_cursor_data (i),&lt;br/&gt;                               p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;               -- Commit the batch&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;               OR pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_hsl_lob;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_hsl_lob%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_hsl_lob;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, exception = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_hsl_lob%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_hsl_lob;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20001,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_hsl_lob%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_hsl_lob;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_strt_addr_servicability (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_hsl_lob%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_STRT_ADDR_SERVICABILITY&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for HSL LOB details specifically into the target table &apos;&lt;br/&gt;      t_service_address_line_of_bus&apos;&lt;br/&gt;      ||                       from the staging table &apos;VNT_HSL_LOB&apos; via Bulk Load Mechanism.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name&lt;br/&gt;                                          := &apos;INSERT_STRT_ADDR_SERVICABILITY&apos;;&lt;br/&gt;      l_exist_count                    NUMBER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_street_address_servicability   t_street_address_servicability%ROWTYPE;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_account_details                stg.audit_recon_process.account_details%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         l_exist_count := 1;&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, LINE_OF_BUSINESS_CD = &apos;&lt;br/&gt;                                   || p_cursor_data_io.line_of_business_cd&lt;br/&gt;                                   || &apos;, address_id = &apos;&lt;br/&gt;                                   || p_cursor_data_io.address_id&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_street_address_servicability&lt;br/&gt;              FROM t_street_address_servicability a&lt;br/&gt;             WHERE a.product_group_cd = p_cursor_data_io.line_of_business_cd&lt;br/&gt;               AND a.street_address_id = p_cursor_data_io.address_id;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               l_exist_count := 0;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         IF (l_exist_count &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            IF (    (   (NVL (l_street_address_servicability.headend_id,&lt;br/&gt;                              pkg_utility.c_recon_null_number&lt;br/&gt;                             ) &lt;&gt;&lt;br/&gt;                            NVL (p_cursor_data_io.headend_id,&lt;br/&gt;                                 pkg_utility.c_recon_null_number&lt;br/&gt;                                )&lt;br/&gt;                        )&lt;br/&gt;                     OR (NVL&lt;br/&gt;                            (l_street_address_servicability.connection_status_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                            NVL (p_cursor_data_io.connection_status_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                )&lt;br/&gt;                        )&lt;br/&gt;                     OR (NVL (l_street_address_servicability.node_nm,&lt;br/&gt;                              pkg_utility.c_recon_null_string&lt;br/&gt;                             ) &lt;&gt;&lt;br/&gt;                            NVL (p_cursor_data_io.node_nm,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                )&lt;br/&gt;                        )&lt;br/&gt;                     OR (NVL (l_street_address_servicability.tap_status_cd,&lt;br/&gt;                              pkg_utility.c_recon_null_string&lt;br/&gt;                             ) &lt;&gt;&lt;br/&gt;                            NVL (p_cursor_data_io.tap_status_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                )&lt;br/&gt;                        )&lt;br/&gt;                     OR (NVL&lt;br/&gt;                            (l_street_address_servicability.serviceability_status_cd,&lt;br/&gt;                             pkg_utility.c_recon_null_string&lt;br/&gt;                            ) &lt;&gt;&lt;br/&gt;                            NVL (p_cursor_data_io.serviceability_status_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                )&lt;br/&gt;                        )&lt;br/&gt;                    )&lt;br/&gt;                AND (NVL (l_street_address_servicability.modified_dttm,&lt;br/&gt;                          pkg_utility.c_recon_null_date&lt;br/&gt;                         ) &lt; l_current_recon_start_time&lt;br/&gt;                    )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_street_address_servicability a&lt;br/&gt;                  SET a.headend_id = p_cursor_data_io.headend_id,&lt;br/&gt;                      a.connection_status_cd =&lt;br/&gt;                                         p_cursor_data_io.connection_status_cd,&lt;br/&gt;                      a.node_nm = p_cursor_data_io.node_nm,&lt;br/&gt;                      a.tap_status_cd = p_cursor_data_io.tap_status_cd,&lt;br/&gt;                      a.serviceability_status_cd =&lt;br/&gt;                                     p_cursor_data_io.serviceability_status_cd,&lt;br/&gt;                      a.modified_dttm = l_systimestamp,&lt;br/&gt;                      a.modified_by = p_audit_user_i,&lt;br/&gt;                      a.record_stat = pkg_utility.c_record_active&lt;br/&gt;                WHERE a.product_group_cd =&lt;br/&gt;                                          p_cursor_data_io.line_of_business_cd&lt;br/&gt;                  AND a.street_address_id = p_cursor_data_io.address_id;&lt;br/&gt;&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_update_perform;&lt;br/&gt;               l_modif_val_string :=&lt;br/&gt;                     &apos;headend_id : (&apos;&lt;br/&gt;                  || l_street_address_servicability.headend_id&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.headend_id&lt;br/&gt;                  || &apos; )&apos;&lt;br/&gt;                  || &apos;, connection_status_cd : (&apos;&lt;br/&gt;                  || l_street_address_servicability.connection_status_cd&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.connection_status_cd&lt;br/&gt;                  || &apos; )&apos;&lt;br/&gt;                  || &apos;, node_nm : (&apos;&lt;br/&gt;                  || l_street_address_servicability.node_nm&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.node_nm&lt;br/&gt;                  || &apos; )&apos;&lt;br/&gt;                  || &apos;, tap_status_cd : (&apos;&lt;br/&gt;                  || l_street_address_servicability.tap_status_cd&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.tap_status_cd&lt;br/&gt;                  || &apos; )&apos;&lt;br/&gt;                  || &apos;, serviceability_status_cd : (&apos;&lt;br/&gt;                  || l_street_address_servicability.serviceability_status_cd&lt;br/&gt;                  || &apos; =&gt; &apos;&lt;br/&gt;                  || p_cursor_data_io.serviceability_status_cd&lt;br/&gt;                  || &apos; )&apos;;&lt;br/&gt;            END IF;&lt;br/&gt;         ELSIF (l_exist_count = 0)&lt;br/&gt;         THEN&lt;br/&gt;            l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;            da_street_address_servicabilit.ADD&lt;br/&gt;               (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                product_group_cd               =&gt; p_cursor_data_io.line_of_business_cd,&lt;br/&gt;                street_address_id              =&gt; p_cursor_data_io.address_id,&lt;br/&gt;                headend_id                     =&gt; p_cursor_data_io.headend_id,&lt;br/&gt;                connection_status_cd           =&gt; p_cursor_data_io.connection_status_cd,&lt;br/&gt;                node_nm                        =&gt; p_cursor_data_io.node_nm,&lt;br/&gt;                tap_status_cd                  =&gt; p_cursor_data_io.tap_status_cd,&lt;br/&gt;                serviceability_status_cd       =&gt; p_cursor_data_io.serviceability_status_cd,&lt;br/&gt;                data_source_type_cd            =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                service_provider_party_id      =&gt; NULL,&lt;br/&gt;                audit_user                     =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (l_action_perform_record IN&lt;br/&gt;                (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                 pkg_utility.c_recon_update_perform&lt;br/&gt;                )&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_table_key :=&lt;br/&gt;                  &apos;LINE_OF_BUSINESS_CD = &apos;&lt;br/&gt;               || p_cursor_data_io.line_of_business_cd&lt;br/&gt;               || &apos;, address_id = &apos;&lt;br/&gt;               || p_cursor_data_io.address_id&lt;br/&gt;               || &apos;, HSE_KEY = &apos;&lt;br/&gt;               || p_cursor_data_io.hse_key;&lt;br/&gt;            pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                             (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                              p_table_name           =&gt; &apos;T_SERVICE_ADDRESS_LINE_OF_BUS&apos;,&lt;br/&gt;                              p_table_key            =&gt; l_table_key,&lt;br/&gt;                              p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                              p_account_details      =&gt; NULL,&lt;br/&gt;                              p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                              p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                             );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, LINE_OF_BUSINESS_CD = &apos;&lt;br/&gt;                                || p_cursor_data_io.line_of_business_cd&lt;br/&gt;                                || &apos;, address_id = &apos;&lt;br/&gt;                                || p_cursor_data_io.address_id&lt;br/&gt;                               );&lt;br/&gt;         p_cursor_data_io.record_load_cd := pkg_utility.c_stg_processed;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                     (p_process_rec_i,&lt;br/&gt;                                         l_proc_name&lt;br/&gt;                                      || &apos;, LINE_OF_BUSINESS_CD = &apos;&lt;br/&gt;                                      || p_cursor_data_io.line_of_business_cd&lt;br/&gt;                                      || &apos;, address_id = &apos;&lt;br/&gt;                                      || p_cursor_data_io.address_id&lt;br/&gt;                                      || &apos;, HSE_KEY = &apos;&lt;br/&gt;                                      || p_cursor_data_io.hse_key&lt;br/&gt;                                      || &apos;, exception=&apos;&lt;br/&gt;                                      || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                     );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END insert_strt_addr_servicability;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   cur_stg_hsl_lob%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for updating the staging table &apos;VNT_HSL_LOB&apos; for the column&lt;br/&gt;      ||                       Record_Cd_Load with value of &apos;P&apos; which indicates the Finished status.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_hsl_lob_rec_delta s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ROWID = &apos;&lt;br/&gt;                                       || p_cursor_data_i.ID&lt;br/&gt;                                       || &apos;, HSE_KEY = &apos;&lt;br/&gt;                                       || p_cursor_data_i.hse_key&lt;br/&gt;                                       || &apos;, LINE_OF_BUSINESS_CD = &apos;&lt;br/&gt;                                       || p_cursor_data_i.line_of_business_cd&lt;br/&gt;                                       || &apos;, exception=&apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      --Capturing the Processed/error record count&lt;br/&gt;      IF (NVL (p_cursor_data_i.record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_recon_hsl_lob;</source>
</body>
</PackageOracle>
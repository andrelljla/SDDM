<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_OOR_ORDER_OPEN" directorySegmentName="seg_6" id="5A4032E0-0E67-AB6E-E894-7BBF642526AE">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OOR_ORDER_OPEN</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:58 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_OOR_ORDER_OPEN&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_load_oor_order_open&lt;br/&gt;||  Created By      : Knoll&lt;br/&gt;||  Created Date    : 01-Sep-2014&lt;br/&gt;||  Subject Area    : Order&lt;br/&gt;||  Description     : The package pkg_vnt_load_oor_order_open controls the initial load of the&lt;br/&gt;||                    Vantage oor_order_open table into SOLODB.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 );&lt;br/&gt;END pkg_vnt_load_oor_order_open;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_OOR_ORDER_OPEN" id="5A4032E0-0E67-AB6E-E894-7BBF642526AE">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OOR_ORDER_OPEN</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:06 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_OOR_ORDER_OPEN&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_vnt_load_oor_order_open&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 01-Sep-2014&lt;br/&gt;   ||  Subject Area    : Order&lt;br/&gt;   ||  Description     : The package pkg_vnt_load_oor_order_open controls the initial load of the&lt;br/&gt;   ||                    Vantage oor_order_open table into SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  ----------------  -------------- ----------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014    Standardization Changes&lt;br/&gt;   ||&lt;br/&gt;   ||     Senthil        07-Jan-2015    Static data change for bus_interact_type_cd column in t_bus_interaction table&lt;br/&gt;   ||                                          and request_type_cd column in t_request table&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_in_progress CONSTANT VARCHAR2 (1) := &apos;I&apos;;&lt;br/&gt;   c_stg_error CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_pkg_name CONSTANT t_unit_name := &apos;PKG_VNT_LOAD_OOR_ORDER_OPEN&apos;;&lt;br/&gt;   c_null_date CONSTANT DATE := TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;);&lt;br/&gt;   c_special_request_cd CONSTANT VARCHAR2 (1) := &apos;M&apos;;&lt;br/&gt;   c_ts_format CONSTANT VARCHAR2 (21) := &apos;YYYY.MM.DD.HH24.MI.SS&apos;;&lt;br/&gt;   c_bad_parameter EXCEPTION;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread NUMBER := 1;&lt;br/&gt;   g_max_thread NUMBER := 1;&lt;br/&gt;   g_batchsize NUMBER := 1000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged oor_order_open for loading&lt;br/&gt;   CURSOR cur_stg_oor_order_open&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         CASE&lt;br/&gt;            WHEN oor.sys_oor = 8313&lt;br/&gt;            THEN &apos;BRS&apos;&lt;br/&gt;            ELSE &apos;VNT&apos;&lt;br/&gt;         END AS data_source_type_cd,&lt;br/&gt;&lt;br/&gt;         -- staging control data&lt;br/&gt;         oor.ROWID AS ID,&lt;br/&gt;         oor.record_load_cd,&lt;br/&gt;&lt;br/&gt;         -- surrogate keys&lt;br/&gt;         s_bus_interact_id.NEXTVAL AS bus_interact_id,&lt;br/&gt;         xref.address_id AS service_address_id,&lt;br/&gt;         cust_xref.party_id AS customer_id,&lt;br/&gt;         -- columns&lt;br/&gt;         oor.cust_acct_no_oor,&lt;br/&gt;         oor.hse_key_oor,&lt;br/&gt;         oor.order_no_oor AS order_num,&lt;br/&gt;         oor.ord_class_oor,&lt;br/&gt;         DECODE (oor.ord_class_oor, c_special_request_cd, &apos;SPLREQ&apos;, &apos;PRDORD&apos; ) request_type_cd,&lt;br/&gt;		 &apos;REQ&apos; bus_interact_type_cd,&lt;br/&gt;         TRIM (oor.ord_rsn_oor) AS reason_cd,&lt;br/&gt;         TRIM (SUBSTR (oor.ord_rsn_oor, 1, 2)) AS reason_cd1,&lt;br/&gt;         TRIM (SUBSTR (oor.ord_rsn_oor, 3, 2)) AS reason_cd2,&lt;br/&gt;         TRIM (SUBSTR (oor.ord_rsn_oor, 5, 2)) AS reason_cd3,&lt;br/&gt;         TRIM (SUBSTR (oor.ord_rsn_oor, 7, 2)) AS reason_cd4,&lt;br/&gt;         oor.ord_stat_oor AS product_order_status_cd,&lt;br/&gt;         TRIM (oor.compl_cde_oor) AS completion_cd,&lt;br/&gt;         TRIM (SUBSTR (oor.compl_cde_oor, 1, 3)) AS completion_cd1,&lt;br/&gt;         TRIM (SUBSTR (oor.compl_cde_oor, 4, 3)) AS completion_cd2,&lt;br/&gt;         TRIM (SUBSTR (oor.compl_cde_oor, 7, 3)) AS completion_cd3,&lt;br/&gt;         TRIM (SUBSTR (oor.compl_cde_oor, 10, 3)) AS completion_cd4,&lt;br/&gt;         TRIM (SUBSTR (oor.compl_cde_oor, 13, 3)) AS completion_cd5,&lt;br/&gt;         TRIM (SUBSTR (oor.compl_cde_oor, 16, 3)) AS completion_cd6,&lt;br/&gt;         DECODE (oor.create_dte_oor, c_null_date, NULL, TO_CHAR (oor.create_dte_oor, &apos;YYYY.MM.DD&apos;) ) AS&lt;br/&gt;         product_order_create_date,&lt;br/&gt;         oor.create_tme_oor AS product_order_create_time,&lt;br/&gt;         DECODE (oor.compl_dte_oor, c_null_date, NULL, TO_CHAR (oor.compl_dte_oor, &apos;YYYY.MM.DD&apos;) ) AS&lt;br/&gt;         actual_completion_date,&lt;br/&gt;         oor.compl_tme_oor AS actual_completion_time&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_oor_order_open oor&lt;br/&gt;      LEFT OUTER JOIN t_service_address_vantage_xref xref&lt;br/&gt;      ON&lt;br/&gt;         xref.hs_key = oor.hse_key_oor&lt;br/&gt;         --AND xref.record_stat = &apos;A&apos;&lt;br/&gt;      INNER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;      ON&lt;br/&gt;         cust_xref.cust_acct_num = oor.cust_acct_no_oor&lt;br/&gt;         --AND cust_xref.record_stat = &apos;A&apos;&lt;br/&gt;      WHERE&lt;br/&gt;         oor.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (oor.ROWID, LENGTH (oor.ROWID), 1)), g_max_thread ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;TYPE t_cursor_data_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF cur_stg_oor_order_open%ROWTYPE INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;TYPE t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;PROCEDURE insert_bus_interact(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_inter_order_xref(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_party_role(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_request(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_status(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_1(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_2(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_3(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_4(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_5(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_6(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_1(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_2(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_3(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_4(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_customer_order(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_status(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_1(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_2(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_3(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_4(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_5(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_6(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_1(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_2(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_3(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_4(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_order(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_select_special_request IN BOOLEAN )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_reason_code(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;         p_select_reason_code_i IN INTEGER )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_completion_code(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;         p_select_completion_code_i IN INTEGER )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The will insert the records into the following table based on the order, t_bus_interact,&lt;br/&gt;      ||                       t_bus_inter_vantage_ord_xref , t_bus_interact_party_role, t_special_request,&lt;br/&gt;      ||                       t_special_request_status, t_special_request_cancel , t_special_request_reason,&lt;br/&gt;      ||                       t_customer_order, t_prod_order, t_prod_order_status , t_prod_order_cancel ,&lt;br/&gt;      ||                       t_prod_order_reason&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name t_unit_name := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name t_process_log.process_name%TYPE := c_pkg_name;&lt;br/&gt;      l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr t_ptr_tbl;&lt;br/&gt;      -- for filtering orders in the cursor table&lt;br/&gt;      l_secondary_filter_ptr t_ptr_tbl;&lt;br/&gt;      -- for second level filtering of orders&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec, &apos;p_audit_user_i=&apos; || p_audit_user_i );&lt;br/&gt;      g_this_thread := p_this_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name) THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_oor_order_open%ISOPEN) THEN&lt;br/&gt;         CLOSE cur_stg_oor_order_open;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_oor_order_open;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH&lt;br/&gt;            cur_stg_oor_order_open BULK COLLECT&lt;br/&gt;         INTO&lt;br/&gt;            l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0) THEN&lt;br/&gt;            -- Insert bus_interact&lt;br/&gt;            insert_bus_interact (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert bus_inter_vantage_order_xref&lt;br/&gt;            insert_bus_inter_order_xref (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert bus_interact_party_role&lt;br/&gt;            insert_bus_interact_party_role (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert request&lt;br/&gt;            insert_request (l_process_rec, l_cursor_data);&lt;br/&gt;            -- BEGIN SPECIAL_REQUEST - select only special requests&lt;br/&gt;            l_filter_ptr := filter_order (l_process_rec, l_cursor_data, p_select_special_request =&gt; TRUE );&lt;br/&gt;            -- Insert special_request&lt;br/&gt;            insert_special_request (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            -- Insert special_request_status&lt;br/&gt;            insert_special_request_status (l_process_rec, l_cursor_data, l_filter_ptr );&lt;br/&gt;            -- If cancelled with completion codes, insert special_request_cancel(s)&lt;br/&gt;            -- cancel code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_can_1 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_can_2 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_can_3 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_can_4 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 5&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 5 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_can_5 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 6&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 6 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_can_6 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- Insert special_request_reason(s)&lt;br/&gt;            -- reason code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_rsn_1 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_rsn_2 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_rsn_3 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_special_request_rsn_4 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- END SPECIAL_REQUEST&lt;br/&gt;            -- BEGIN PROD_ORDER - select only product orders&lt;br/&gt;            l_filter_ptr := filter_order (l_process_rec, l_cursor_data, p_select_special_request =&gt; FALSE );&lt;br/&gt;            -- Insert customer_order&lt;br/&gt;            insert_customer_order (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            -- Insert prod_order&lt;br/&gt;            insert_prod_order (l_process_rec, l_cursor_data, l_filter_ptr);&lt;br/&gt;            -- Insert prod_order_status&lt;br/&gt;            insert_prod_order_status (l_process_rec, l_cursor_data, l_filter_ptr );&lt;br/&gt;            -- If cancelled with completion codes, insert prod_order_cancel(s)&lt;br/&gt;            -- cancel code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_can_1 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_can_2 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_can_3 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_can_4 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 5&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 5 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_can_5 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 6&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 6 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_can_6 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- Insert prod_order_reason(s)&lt;br/&gt;            -- reason code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_rsn_1 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_rsn_2 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_rsn_3 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_reason_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_prod_order_rsn_4 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- END PROD_ORDER&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN&lt;br/&gt;         (&lt;br/&gt;            l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;         )&lt;br/&gt;         OR&lt;br/&gt;         (&lt;br/&gt;            pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;         )&lt;br/&gt;         ;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_oor_order_open;&lt;br/&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN OTHERS THEN&lt;br/&gt;      ROLLBACK;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_oor_order_open%ISOPEN) THEN&lt;br/&gt;         CLOSE cur_stg_oor_order_open;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;	  RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_bus_interact&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This will inserting the records into the table t_bus_interact&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTERACT&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_interact a&lt;br/&gt;         (&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.source_system_id,&lt;br/&gt;            a.bus_interact_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).order_num,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_interact;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_inter_order_xref&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_bus_inter_order_xref&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :The procedure insert_bus_inter_order_xref will load table t_bus_inter_vantage_ord_xref.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTER_ORDER_XREF&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_inter_vantage_ord_xref a&lt;br/&gt;         (&lt;br/&gt;            a.ord_no,&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).order_num,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_inter_order_xref;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_party_role&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_bus_interact_party_role&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_bus_interact_party_role will load table t_bus_interact_party_role.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTERACT_PARTY_ROLE&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_interact_party_role a&lt;br/&gt;         (&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.party_id,&lt;br/&gt;            a.party_role_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.source_system_party_id,&lt;br/&gt;            a.bus_interact_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).customer_id,&lt;br/&gt;            &apos;CUST&apos;,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).cust_acct_no_oor,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_interact_party_role;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_request&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_request&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_request load the table t_request&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_REQUEST&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_request a&lt;br/&gt;         (&lt;br/&gt;            a.request_interaction_id,&lt;br/&gt;            a.request_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).request_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_request;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request will load the t_special_request table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.actual_completion_dttm,&lt;br/&gt;            a.create_dttm,&lt;br/&gt;            a.requested_completion_dt,&lt;br/&gt;            a.reason_cd,&lt;br/&gt;            a.completion_cd,&lt;br/&gt;            a.cancel_cd,&lt;br/&gt;            a.service_address_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            DECODE (p_cursor_data_io (i).actual_completion_date, NULL, NULL, TO_TIMESTAMP ( p_cursor_data_io (i)&lt;br/&gt;            .actual_completion_date || &apos;.&apos; || p_cursor_data_io (i).actual_completion_time, c_ts_format ) ),&lt;br/&gt;            DECODE (p_cursor_data_io (i).product_order_create_date, NULL, NULL, TO_TIMESTAMP ( p_cursor_data_io (i)&lt;br/&gt;            .product_order_create_date || &apos;.&apos; || p_cursor_data_io (i).product_order_create_time, c_ts_format ) ),&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).reason_cd,&lt;br/&gt;            p_cursor_data_io (i).completion_cd,&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_status&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_status&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_status will load the t_special_request_status table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_STATUS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_status a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_status_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).product_order_status_cd,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_status;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_1&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_can_1&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_can_1 will load the table t_special_request_cancel.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_CAN_1&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd1,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            1,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_can_1;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_2&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_can_2&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_can_2 will load the t_special_request_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_CAN_2&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd2,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            2,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_can_2;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_3&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_can_3&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_can_3 will load the t_special_request_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_CAN_3&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd3,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            3,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_can_3;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_4&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_can_4&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :The procedure insert_special_request_can_4 will load the t_special_request_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_CAN_4&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd4,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            4,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_can_4;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_5&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_can_5&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_can_5 will load the t_special_request_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_CAN_5&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd5,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            5,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_can_5;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_can_6&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_can_6&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_can_6 will load the t_special_request_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_CAN_6&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd6,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            6,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_can_6;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_1&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_rsn_1&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_rsn_1 will load the t_special_request_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_RSN_1&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_reason a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd1,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            1,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_rsn_1;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_2&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_rsn_2&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_rsn_2 will load the t_special_request_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_RSN_2&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_reason a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd2,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            2,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_rsn_2;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_3&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_rsn_3&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_rsn_3 will load the t_special_request_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_RSN_3&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_reason a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd3,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            3,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_rsn_3;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_special_request_rsn_4&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_special_request_rsn_4&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_special_request_rsn_4 will load the t_special_request_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_SPECIAL_REQUEST_RSN_4&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_special_request_reason a&lt;br/&gt;         (&lt;br/&gt;            a.special_request_id,&lt;br/&gt;            a.special_request_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd4,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            4,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_special_request_rsn_4;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_customer_order&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_customer_order&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :  The procedure insert_customer_order will insert the t_customer_order&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_CUSTOMER_ORDER&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_customer_order a&lt;br/&gt;         (&lt;br/&gt;            a.customer_order_id,&lt;br/&gt;            a.customer_id,&lt;br/&gt;            a.customer_order_type_cd,&lt;br/&gt;            a.customer_order_action_cd,&lt;br/&gt;            a.assigned_priority_cd,&lt;br/&gt;            a.due_dt,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).customer_id,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_customer_order;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order will insert the t_prod_order&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.actual_completion_dttm,&lt;br/&gt;            a.product_order_create_dttm,&lt;br/&gt;            a.requested_completion_dt,&lt;br/&gt;            a.reason_cd,&lt;br/&gt;            a.completion_cd,&lt;br/&gt;            a.dnis_cd,&lt;br/&gt;            a.cancel_cd,&lt;br/&gt;            a.service_address_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            DECODE (p_cursor_data_io (i).actual_completion_date, NULL, NULL, TO_TIMESTAMP ( p_cursor_data_io (i)&lt;br/&gt;            .actual_completion_date || &apos;.&apos; || p_cursor_data_io (i).actual_completion_time, c_ts_format ) ),&lt;br/&gt;            DECODE (p_cursor_data_io (i).product_order_create_date, NULL, NULL, TO_TIMESTAMP ( p_cursor_data_io (i)&lt;br/&gt;            .product_order_create_date || &apos;.&apos; || p_cursor_data_io (i).product_order_create_time, c_ts_format ) ),&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).reason_cd,&lt;br/&gt;            p_cursor_data_io (i).completion_cd,&lt;br/&gt;            NULL,&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_status&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_status&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :The procedure insert_prod_order_status will load the t_prod_order_status&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_STATUS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_status a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_status_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).product_order_status_cd,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_status;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_1&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_can_1&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_can1 will laod the t_prod_order_cancel table&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_CAN_1&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd1,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            1,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_can_1;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_2&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_can_2&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_can_2 will laod the t_prod_order_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_CAN_2&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd2,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            2,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_can_2;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_3&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_can_3&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_can_3 will laod the t_prod_order_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_CAN_3&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd3,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            3,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_can_3;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_4&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_can_4&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_can_4 will laod the t_prod_order_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_CAN_4&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd4,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            4,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_can_4;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_5&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_can_5&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_can_5 will laod the t_prod_order_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_CAN_5&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd5,&lt;br/&gt;            --c_vantage_data_src, -- Commented for implementing data_src CASE statement by Cognizant Team on 14/Nov/&lt;br/&gt;            -- 2014&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            5,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_can_5;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_can_6&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_can_6&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :The procedure insert_prod_order_can_6 will laod the t_prod_order_cancel table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_CAN_6&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd6,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            6,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_can_6;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_1&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_rsn_1&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_rsn_1 will load the table t_prod_order_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_RSN_1&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_reason a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd1,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            1,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_rsn_1;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_2&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_rsn_2&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_rsn_2 will load the table t_prod_order_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_RSN_2&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_reason a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd2,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            2,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_rsn_2;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_3&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_rsn_3&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_rsn_3 will load the table t_prod_order_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_RSN_3&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_reason a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd3,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            3,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_rsn_3;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_prod_order_rsn_4&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure insert_prod_order_rsn_4&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure insert_prod_order_rsn_4 will load the table t_prod_order_reason&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_PROD_ORDER_RSN_4&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_prod_order_reason a&lt;br/&gt;         (&lt;br/&gt;            a.product_order_id,&lt;br/&gt;            a.product_order_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd4,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            4,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_prod_order_rsn_4;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure update_staging&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :  The procedure update_staging will update the staging table.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   UPDATE&lt;br/&gt;      stg.vnt_oor_order_open s&lt;br/&gt;   SET&lt;br/&gt;      s.record_load_cd = NVL (p_cursor_data_i (i).record_load_cd, c_stg_processed),&lt;br/&gt;      s.record_dttm = SYSTIMESTAMP&lt;br/&gt;   WHERE&lt;br/&gt;      ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END update_staging;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_order(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_select_special_request IN BOOLEAN )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Function load_initial_data&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The function filter_order will return the filter order.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_ORDER&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      IF ( ( p_cursor_data_i (i).ord_class_oor = c_special_request_cd AND p_select_special_request ) OR&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_i (i).ord_class_oor &lt;&gt; c_special_request_cd AND&lt;br/&gt;            (&lt;br/&gt;               NOT p_select_special_request&lt;br/&gt;            )&lt;br/&gt;         )&lt;br/&gt;         ) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := i;&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_order;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_completion_code(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;      p_select_completion_code_i IN INTEGER )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Functions filter_completion_code&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The function filter_completion_code will return the filter condition code.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_COMPLETION_CODE&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;   l_selected BOOLEAN;&lt;br/&gt;BEGIN&lt;br/&gt;   IF (p_select_completion_code_i &lt; 1 OR p_select_completion_code_i &gt; 6) THEN&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bad p_select_completion_code_i value passed!&apos; );&lt;br/&gt;      RAISE c_bad_parameter;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, p_select_completion_code_i = &apos; ||&lt;br/&gt;   p_select_completion_code_i );&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_selected_orders_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      l_selected := FALSE;&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_data_i (p_selected_orders_i (i)).product_order_status_cd = &apos;X&apos; ) THEN&lt;br/&gt;         CASE p_select_completion_code_i&lt;br/&gt;         WHEN 1 THEN&lt;br/&gt;            IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 IS NOT NULL ) THEN&lt;br/&gt;               l_selected := TRUE;&lt;br/&gt;            END IF;&lt;br/&gt;         WHEN 2 THEN&lt;br/&gt;            IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd2 IS NOT NULL ) AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd2 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd1, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               l_selected := TRUE;&lt;br/&gt;            END IF;&lt;br/&gt;         WHEN 3 THEN&lt;br/&gt;            IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd3 IS NOT NULL ) AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd3 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd1, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd3 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd2, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               l_selected := TRUE;&lt;br/&gt;            END IF;&lt;br/&gt;         WHEN 4 THEN&lt;br/&gt;            IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 IS NOT NULL ) AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd1, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd2, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd3, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               l_selected := TRUE;&lt;br/&gt;            END IF;&lt;br/&gt;         WHEN 5 THEN&lt;br/&gt;            IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 IS NOT NULL ) AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd1, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd2, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd3, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd4, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               l_selected := TRUE;&lt;br/&gt;            END IF;&lt;br/&gt;         WHEN 6 THEN&lt;br/&gt;            IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 IS NOT NULL ) AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd1, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd2, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd3, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd4, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               AND&lt;br/&gt;               (&lt;br/&gt;                  p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i&lt;br/&gt;                  (i)).completion_cd5, &apos; &apos; )&lt;br/&gt;               )&lt;br/&gt;               THEN&lt;br/&gt;               l_selected := TRUE;&lt;br/&gt;            END IF;&lt;br/&gt;         END CASE;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (l_selected) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := p_selected_orders_i (i);&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_completion_code;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_reason_code(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;      p_select_reason_code_i IN INTEGER )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure filter_reason_code&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The function filter_reason_code will return the count.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_REASON_CODE&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;   l_selected BOOLEAN;&lt;br/&gt;BEGIN&lt;br/&gt;   IF (p_select_reason_code_i &lt; 1 OR p_select_reason_code_i &gt; 4) THEN&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bad p_select_reason_code_i value passed!&apos; );&lt;br/&gt;      RAISE c_bad_parameter;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, p_select_reason_code_i = &apos; || p_select_reason_code_i );&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_selected_orders_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      l_selected := FALSE;&lt;br/&gt;&lt;br/&gt;      CASE p_select_reason_code_i&lt;br/&gt;      WHEN 1 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).reason_cd1 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 2 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).reason_cd2 IS NOT NULL ) AND&lt;br/&gt;            (&lt;br/&gt;               p_cursor_data_i (p_selected_orders_i (i)).reason_cd1 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;               .reason_cd1, &apos; &apos; )&lt;br/&gt;            )&lt;br/&gt;            THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 3 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).reason_cd3 IS NOT NULL ) AND&lt;br/&gt;            (&lt;br/&gt;               p_cursor_data_i (p_selected_orders_i (i)).reason_cd3 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;               .reason_cd1, &apos; &apos; )&lt;br/&gt;            )&lt;br/&gt;            AND&lt;br/&gt;            (&lt;br/&gt;               p_cursor_data_i (p_selected_orders_i (i)).reason_cd3 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;               .reason_cd2, &apos; &apos; )&lt;br/&gt;            )&lt;br/&gt;            THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 4 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).reason_cd4 IS NOT NULL ) AND&lt;br/&gt;            (&lt;br/&gt;               p_cursor_data_i (p_selected_orders_i (i)).reason_cd4 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;               .reason_cd1, &apos; &apos; )&lt;br/&gt;            )&lt;br/&gt;            AND&lt;br/&gt;            (&lt;br/&gt;               p_cursor_data_i (p_selected_orders_i (i)).reason_cd4 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;               .reason_cd2, &apos; &apos; )&lt;br/&gt;            )&lt;br/&gt;            AND&lt;br/&gt;            (&lt;br/&gt;               p_cursor_data_i (p_selected_orders_i (i)).reason_cd4 &lt;&gt; NVL (p_cursor_data_i (p_selected_orders_i (i))&lt;br/&gt;               .reason_cd3, &apos; &apos; )&lt;br/&gt;            )&lt;br/&gt;            THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      END CASE;&lt;br/&gt;&lt;br/&gt;      IF (l_selected) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := p_selected_orders_i (i);&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_reason_code;&lt;br/&gt;END pkg_vnt_load_oor_order_open;</source>
</body>
</PackageOracle>
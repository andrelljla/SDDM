<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_LOAD_OTR_TROUBLE_CALL" directorySegmentName="seg_6" id="D89D8FE6-D469-3F72-6850-4C8C859136B8">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OTR_TROUBLE_CALL</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:09 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_LOAD_OTR_TROUBLE_CALL&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_OTR_TROUBLE_CALL&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 04-AUG-2014&lt;br/&gt;   ||  Subject Area    : ORDER&lt;br/&gt;   ||  Description     : This is for loading details from staging table VNT_OTR_TROUBLE_CALL&lt;br/&gt;   ||&lt;br/&gt;   ||   Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 );&lt;br/&gt;END pkg_vnt_load_otr_trouble_call;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_LOAD_OTR_TROUBLE_CALL" id="D89D8FE6-D469-3F72-6850-4C8C859136B8">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_LOAD_OTR_TROUBLE_CALL</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:16 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_LOAD_OTR_TROUBLE_CALL&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : PKG_VNT_LOAD_OTR_TROUBLE_CALL&lt;br/&gt;   ||  Created By      : Knoll&lt;br/&gt;   ||  Created Date    : 04-AUG-2014&lt;br/&gt;   ||  Subject Area    : ORDER&lt;br/&gt;   ||  Description     : This is for loading details from staging table VNT_OTR_TROUBLE_CALL&lt;br/&gt;   ||&lt;br/&gt;   ||   Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_stg_processed CONSTANT VARCHAR2 (1) := &apos;P&apos;;&lt;br/&gt;   c_stg_in_progress CONSTANT VARCHAR2 (1) := &apos;I&apos;;&lt;br/&gt;   c_stg_error CONSTANT VARCHAR2 (1) := &apos;E&apos;;&lt;br/&gt;   c_pkg_name CONSTANT t_unit_name := &apos;PKG_VNT_LOAD_OTR_TROUBLE_CALL&apos;;&lt;br/&gt;   c_null_date CONSTANT DATE := TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;);&lt;br/&gt;   c_ticket_cd CONSTANT VARCHAR2 (1) := &apos;T&apos;;&lt;br/&gt;   c_ticket_closed CONSTANT VARCHAR2 (1) := &apos;C&apos;;&lt;br/&gt;   c_ticket_cancelled CONSTANT VARCHAR2 (1) := &apos;X&apos;;&lt;br/&gt;   c_ts_format CONSTANT VARCHAR2 (21) := &apos;YYYY.MM.DD.HH24.MI.SS&apos;;&lt;br/&gt;   c_bad_parameter EXCEPTION;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   -- THREADING BIND VARIABLES&lt;br/&gt;   g_this_thread NUMBER := 1;&lt;br/&gt;   g_max_thread NUMBER := 1;&lt;br/&gt;   g_batchsize NUMBER := 1000;&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged otr_trouble_call for loading&lt;br/&gt;   CURSOR cur_stg_otr_trouble_call&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;         -- staging control data&lt;br/&gt;         otr.ROWID AS ID,&lt;br/&gt;         otr.record_load_cd,&lt;br/&gt;&lt;br/&gt;         -- surrogate keys&lt;br/&gt;         s_bus_interact_id.NEXTVAL AS bus_interact_id,&lt;br/&gt;         xref.address_id AS service_address_id,&lt;br/&gt;         cust_xref.party_id AS customer_id,&lt;br/&gt;&lt;br/&gt;         -- columns&lt;br/&gt;         --Added on 14-Nov-2014&lt;br/&gt;         CASE&lt;br/&gt;            WHEN sys_otr = 8313&lt;br/&gt;            THEN &apos;BRS&apos;&lt;br/&gt;            ELSE &apos;VNT&apos;&lt;br/&gt;         END AS data_source_type_cd,&lt;br/&gt;         otr.cust_acct_no_otr,&lt;br/&gt;         otr.hse_key_otr,&lt;br/&gt;         otr.order_no_otr AS order_num,&lt;br/&gt;         otr.ord_class_otr,&lt;br/&gt;         DECODE (otr.ord_class_otr, c_ticket_cd, &apos;TKT&apos;, &apos;TKT&apos; ) bus_interact_type_cd,&lt;br/&gt;         TRIM (otr.ord_rsn_otr) AS reason_cd,&lt;br/&gt;         TRIM (SUBSTR (otr.ord_rsn_otr, 1, 2)) AS reason_cd1,&lt;br/&gt;         TRIM (SUBSTR (otr.ord_rsn_otr, 3, 2)) AS reason_cd2,&lt;br/&gt;         TRIM (SUBSTR (otr.ord_rsn_otr, 5, 2)) AS reason_cd3,&lt;br/&gt;         TRIM (SUBSTR (otr.ord_rsn_otr, 7, 2)) AS reason_cd4,&lt;br/&gt;         otr.ord_stat_otr AS ticket_status_cd,&lt;br/&gt;         TRIM (otr.compl_cde_otr) AS completion_cd,&lt;br/&gt;         TRIM (SUBSTR (otr.compl_cde_otr, 1, 3)) AS completion_cd1,&lt;br/&gt;         TRIM (SUBSTR (otr.compl_cde_otr, 4, 3)) AS completion_cd2,&lt;br/&gt;         TRIM (SUBSTR (otr.compl_cde_otr, 7, 3)) AS completion_cd3,&lt;br/&gt;         TRIM (SUBSTR (otr.compl_cde_otr, 10, 3)) AS completion_cd4,&lt;br/&gt;         TRIM (SUBSTR (otr.compl_cde_otr, 13, 3)) AS completion_cd5,&lt;br/&gt;         TRIM (SUBSTR (otr.compl_cde_otr, 16, 3)) AS completion_cd6,&lt;br/&gt;         TO_DATE (DECODE (otr.create_dte_otr, c_null_date, NULL, otr.create_dte_otr ) ) AS ticket_create_date,&lt;br/&gt;         otr.create_tme_otr AS ticket_create_time,&lt;br/&gt;         TO_DATE (DECODE (otr.compl_dte_otr, c_null_date, NULL, otr.compl_dte_otr ) ) AS actual_completion_date,&lt;br/&gt;         otr.compl_tme_otr AS actual_completion_time,&lt;br/&gt;         TRIM (otr.ord_comments_otr) AS comment_txt,&lt;br/&gt;         TRIM (otr.custom_field02_otr) AS dnis_cd&lt;br/&gt;      FROM&lt;br/&gt;         stg.vnt_otr_trouble_call otr&lt;br/&gt;      LEFT OUTER JOIN t_service_address_vantage_xref xref&lt;br/&gt;      ON&lt;br/&gt;         xref.hs_key = otr.hse_key_otr&lt;br/&gt;         --AND xref.record_stat = &apos;A&apos;&lt;br/&gt;      INNER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;      ON&lt;br/&gt;         cust_xref.cust_acct_num = otr.cust_acct_no_otr&lt;br/&gt;         --AND cust_xref.record_stat = &apos;A&apos;&lt;br/&gt;      WHERE&lt;br/&gt;         otr.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (otr.ROWID, LENGTH (otr.ROWID), 1)), g_max_thread ) = (g_this_thread - 1);&lt;br/&gt;&lt;br/&gt;TYPE t_cursor_data_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF cur_stg_otr_trouble_call%ROWTYPE INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;TYPE t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;PROCEDURE insert_bus_interact(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_inter_order_xref(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_party_role(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_status(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_1(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_2(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_3(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_4(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_5(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_6(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_1(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_2(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_3(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_4(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_5(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_6(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_1(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_2(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_3(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_4(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_ticket(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_select_ticket_status IN VARCHAR2 )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_reason_code(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_select_reason_code_i IN INTEGER )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_completion_code(&lt;br/&gt;         p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;         p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;         p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;         p_select_completion_code_i IN INTEGER )&lt;br/&gt;      RETURN t_ptr_tbl;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;         p_audit_user_i IN VARCHAR2,&lt;br/&gt;         p_this_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_max_thread NUMBER DEFAULT 1,&lt;br/&gt;         p_batchsize NUMBER DEFAULT 1000 )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This is for loading Order and Ticket details from the staging table &apos;&lt;br/&gt;      VNT_OTR_TROUBLE_CALL&apos;.&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name t_unit_name := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name t_process_log.process_name%TYPE := c_pkg_name;&lt;br/&gt;      l_process_rec pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data t_cursor_data_tbl;&lt;br/&gt;      l_filter_ptr t_ptr_tbl;&lt;br/&gt;      -- for filtering orders in the cursor table&lt;br/&gt;      l_secondary_filter_ptr t_ptr_tbl;&lt;br/&gt;      -- for second level filtering of orders&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec, &apos;p_audit_user_i=&apos; || p_audit_user_i );&lt;br/&gt;      g_this_thread := p_this_thread;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name) THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      --Added on 10-Nov-2014 as part of Code Standardization Changes&lt;br/&gt;      IF (cur_stg_otr_trouble_call%ISOPEN) THEN&lt;br/&gt;         CLOSE cur_stg_otr_trouble_call;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_otr_trouble_call;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH&lt;br/&gt;            cur_stg_otr_trouble_call BULK COLLECT&lt;br/&gt;         INTO&lt;br/&gt;            l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0) THEN&lt;br/&gt;            -- Insert bus_interact&lt;br/&gt;            insert_bus_interact (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert bus_inter_vantage_order_xref&lt;br/&gt;            insert_bus_inter_order_xref (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert bus_interact_party_role&lt;br/&gt;            insert_bus_interact_party_role (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert ticket&lt;br/&gt;            insert_ticket (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Insert ticket_status&lt;br/&gt;            insert_ticket_status (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Select completed tickets&lt;br/&gt;            l_filter_ptr := filter_ticket (l_process_rec, l_cursor_data, p_select_ticket_status =&gt; c_ticket_closed );&lt;br/&gt;            -- If completed with completion codes, insert ticket_completion(s)&lt;br/&gt;            -- completion code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_cpt_1 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_cpt_2 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_cpt_3 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_cpt_4 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 5&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 5 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_cpt_5 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- completion code 6&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 6 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_cpt_6 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- Select cancelled tickets&lt;br/&gt;            l_filter_ptr := filter_ticket (l_process_rec, l_cursor_data, p_select_ticket_status =&gt; c_ticket_cancelled )&lt;br/&gt;            ;&lt;br/&gt;            -- If cancelled with completion codes, insert ticket_cancel(s)&lt;br/&gt;            -- cancel code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_can_1 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_can_2 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_can_3 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_can_4 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 5&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 5 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_can_5 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- cancel code 6&lt;br/&gt;            l_secondary_filter_ptr := filter_completion_code (l_process_rec, l_cursor_data, p_selected_orders_i =&gt;&lt;br/&gt;            l_filter_ptr, p_select_completion_code_i =&gt; 6 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_can_6 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- Insert ticket_reason(s)&lt;br/&gt;            -- reason code 1&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_select_reason_code_i =&gt; 1 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_rsn_1 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 2&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_select_reason_code_i =&gt; 2 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_rsn_2 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 3&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_select_reason_code_i =&gt; 3 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_rsn_3 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            -- reason code 4&lt;br/&gt;            l_secondary_filter_ptr := filter_reason_code (l_process_rec, l_cursor_data, p_select_reason_code_i =&gt; 4 );&lt;br/&gt;&lt;br/&gt;            IF (l_secondary_filter_ptr.COUNT &gt; 0) THEN&lt;br/&gt;               insert_ticket_rsn_4 (l_process_rec, l_cursor_data, l_secondary_filter_ptr );&lt;br/&gt;               l_secondary_filter_ptr.DELETE;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            l_filter_ptr.DELETE;&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT&lt;br/&gt;      WHEN&lt;br/&gt;         (&lt;br/&gt;            l_cursor_data.COUNT () &lt; g_batchsize&lt;br/&gt;         )&lt;br/&gt;         OR&lt;br/&gt;         (&lt;br/&gt;            pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;         )&lt;br/&gt;         ;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_otr_trouble_call;&lt;br/&gt;&lt;br/&gt;      pkg_logging.end_process (l_process_rec);&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN OTHERS THEN&lt;br/&gt;      ROLLBACK;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_otr_trouble_call%ISOPEN) THEN&lt;br/&gt;         CLOSE cur_stg_otr_trouble_call;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_exception (l_process_rec, DBMS_UTILITY.format_error_stack () );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, &apos;ERROR WHILE PROCESSING&apos;);&lt;br/&gt;	  RAISE;&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUS_INTERACT&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                       &apos;T_BUS_INTERACT&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTERACT&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_interact a&lt;br/&gt;         (&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.source_system_id,&lt;br/&gt;            a.bus_interact_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).order_num,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_interact;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_inter_order_xref&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUS_INTER_ORDER_XREF&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   T_BUS_INTER_VANTAGE_ORD_XREF&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTER_ORDER_XREF&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_inter_vantage_ord_xref a&lt;br/&gt;         (&lt;br/&gt;            a.ord_no,&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).order_num,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_inter_order_xref;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_bus_interact_party_role&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_BUS_INTERACT_PARTY_ROLE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   T_BUS_INTERACT_PARTY_ROLE&apos; via Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_BUS_INTERACT_PARTY_ROLE&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_bus_interact_party_role a&lt;br/&gt;         (&lt;br/&gt;            a.bus_interact_id,&lt;br/&gt;            a.party_id,&lt;br/&gt;            a.party_role_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.source_system_party_id,&lt;br/&gt;            a.bus_interact_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).customer_id,&lt;br/&gt;            &apos;CUST&apos;,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).cust_acct_no_otr,&lt;br/&gt;            p_cursor_data_io (i).bus_interact_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_bus_interact_party_role;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET&apos; via Bilk&lt;br/&gt;   Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.create_dttm,&lt;br/&gt;            a.requested_completion_dttm,&lt;br/&gt;            a.completion_dt,&lt;br/&gt;            a.reason_cd,&lt;br/&gt;            a.completion_cd,&lt;br/&gt;            a.cancel_cd,&lt;br/&gt;            a.comment_txt,&lt;br/&gt;            a.service_address_id,&lt;br/&gt;            a.dnis_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            p_cursor_data_io (i).ticket_create_date,&lt;br/&gt;            NULL,&lt;br/&gt;            p_cursor_data_io (i).actual_completion_date,&lt;br/&gt;            p_cursor_data_io (i).reason_cd,&lt;br/&gt;            DECODE (p_cursor_data_io (i).ticket_status_cd, c_ticket_closed, p_cursor_data_io (i).completion_cd, NULL ),&lt;br/&gt;            DECODE (p_cursor_data_io (i).ticket_status_cd, c_ticket_cancelled, p_cursor_data_io (i).completion_cd, NULL&lt;br/&gt;            ),&lt;br/&gt;            p_cursor_data_io (i).comment_txt,&lt;br/&gt;            p_cursor_data_io (i).service_address_id,&lt;br/&gt;            p_cursor_data_io (i).dnis_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_status&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_STATUS&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET_STATUS&apos; via&lt;br/&gt;   Bilk Load Mechanism.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_STATUS&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_io.COUNT SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_status a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_status_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).ticket_status_cd,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := SQL%BULK_EXCEPTIONS (i).ERROR_INDEX;&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_status;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_1&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CPT_1&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET_COMPLETION&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CPT_1&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_completion a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_completion_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd1,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            1,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_cpt_1;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_2&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CPT_2&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET_COMPLETION&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CPT_2&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_completion a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_completion_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd2,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            2,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_cpt_2;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_3&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CPT_3&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET_COMPLETION&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CPT_3&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_completion a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_completion_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd3,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            3,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_cpt_3;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_4&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CPT_4&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET_COMPLETION&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CPT_4&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_completion a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_completion_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd4,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            4,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_cpt_4;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_5&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CPT_5&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET_COMPLETION&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CPT_5&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_completion a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_completion_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd5,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            5,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_cpt_5;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_cpt_6&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CPT_6&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;T_TICKET_COMPLETION&apos;&lt;br/&gt;   ||                       via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CPT_6&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_completion a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_completion_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd6,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            6,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_cpt_6;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_1&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CAN_1&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                       T_TICKET_CANCEL&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CAN_1&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd1,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            1,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_can_1;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_2&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CAN_2&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                       T_TICKET_CANCEL&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CAN_2&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd2,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            2,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_can_2;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_3&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CAN_3&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                       T_TICKET_CANCEL&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CAN_3&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd3,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            3,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_can_3;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_4&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CAN_4&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                       T_TICKET_CANCEL&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CAN_4&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd4,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            4,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_can_4;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_5&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CAN_5&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                       T_TICKET_CANCEL&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CAN_5&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd5,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            5,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_can_5;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_can_6&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_CAN_6&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                       T_TICKET_CANCEL&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_CAN_6&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_cancel a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_cancel_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).completion_cd6,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            6,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_can_6;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_1&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_RSN_1&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :  This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                        T_TICKET_REASON&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_RSN_1&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_reason a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd1,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            1,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_rsn_1;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_2&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_RSN_2&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :  This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                        T_TICKET_REASON&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_RSN_2&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_reason a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd2,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            2,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_rsn_2;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_3&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_RSN_3&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :  This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                        T_TICKET_REASON&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_RSN_3&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_reason a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd3,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            3,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_rsn_3;&lt;br/&gt;&lt;br/&gt;PROCEDURE insert_ticket_rsn_4&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io IN OUT NOCOPY t_cursor_data_tbl,&lt;br/&gt;      p_filter_i IN t_ptr_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : INSERT_TICKET_RSN_4&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :  This is for loading Order details specifically into the target table &apos;&lt;br/&gt;   ||                        T_TICKET_REASON&apos; via Bilk Load Mechanism for code_sequence_num = 1&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;INSERT_TICKET_RSN_4&apos;;&lt;br/&gt;   l_errors NUMBER;&lt;br/&gt;   l_coll_idx PLS_INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, cnt=&apos; || p_cursor_data_io.COUNT () );&lt;br/&gt;&lt;br/&gt;   BEGIN&lt;br/&gt;      FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;      INSERT&lt;br/&gt;      INTO&lt;br/&gt;         t_ticket_reason a&lt;br/&gt;         (&lt;br/&gt;            a.ticket_interaction_id,&lt;br/&gt;            a.ticket_reason_cd,&lt;br/&gt;            a.data_source_type_cd,&lt;br/&gt;            a.code_sequence_num,&lt;br/&gt;            a.record_stat,&lt;br/&gt;            a.created_dttm,&lt;br/&gt;            a.created_by&lt;br/&gt;         )&lt;br/&gt;         VALUES&lt;br/&gt;         (&lt;br/&gt;            p_cursor_data_io (i).bus_interact_id,&lt;br/&gt;            p_cursor_data_io (i).reason_cd4,&lt;br/&gt;            p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;            4,&lt;br/&gt;            &apos;A&apos;,&lt;br/&gt;            SYSTIMESTAMP,&lt;br/&gt;            c_pkg_name&lt;br/&gt;         );&lt;br/&gt;   EXCEPTION&lt;br/&gt;   WHEN c_bulk_errors THEN&lt;br/&gt;      l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;      FOR i IN 1 .. l_errors&lt;br/&gt;      LOOP&lt;br/&gt;         NULL;&lt;br/&gt;         l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;         p_cursor_data_io (l_coll_idx).record_load_cd := c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;         (l_coll_idx).order_num || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;      END LOOP;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END insert_ticket_rsn_4;&lt;br/&gt;&lt;br/&gt;PROCEDURE update_staging&lt;br/&gt;   (&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : UPDATE_STAGING&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for updating the staging table &apos;VNT_OTR_TROUBLE_CALL&apos; for the&lt;br/&gt;   ||                       column Record_Cd_Load with value of &apos;P&apos; which indicates the Finished state.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;   FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   UPDATE&lt;br/&gt;      stg.vnt_otr_trouble_call s&lt;br/&gt;   SET&lt;br/&gt;      s.record_load_cd = NVL (p_cursor_data_i (i).record_load_cd, c_stg_processed),&lt;br/&gt;      s.record_dttm = SYSTIMESTAMP&lt;br/&gt;   WHERE&lt;br/&gt;      ROWID = p_cursor_data_i (i).ID;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;END update_staging;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_ticket(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_select_ticket_status IN VARCHAR2 )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : FILTER_TICKET&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for selecting and building set of records from the passed lot&lt;br/&gt;   ||                       according to the given Ticket Status.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_TICKET&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name);&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      IF (p_cursor_data_i (i).ticket_status_cd = p_select_ticket_status) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := i;&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_ticket;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_completion_code(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_selected_orders_i IN t_ptr_tbl,&lt;br/&gt;      p_select_completion_code_i IN INTEGER )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : FILTER_COMPLETION_CODE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : This is for selecting and building set of records from the passed lot&lt;br/&gt;   ||                       according to the given Completion Code value.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_COMPLETION_CODE&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;   l_selected BOOLEAN;&lt;br/&gt;BEGIN&lt;br/&gt;   IF (p_select_completion_code_i &lt; 1 OR p_select_completion_code_i &gt; 6) THEN&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bad p_select_completion_code_i value passed!&apos; );&lt;br/&gt;      RAISE c_bad_parameter;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, p_select_completion_code_i = &apos; ||&lt;br/&gt;   p_select_completion_code_i );&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_selected_orders_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      l_selected := FALSE;&lt;br/&gt;&lt;br/&gt;      CASE p_select_completion_code_i&lt;br/&gt;      WHEN 1 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd1 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 2 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd2 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 3 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd3 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 4 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd4 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 5 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd5 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 6 THEN&lt;br/&gt;         IF (p_cursor_data_i (p_selected_orders_i (i)).completion_cd6 IS NOT NULL ) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      END CASE;&lt;br/&gt;&lt;br/&gt;      IF (l_selected) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := p_selected_orders_i (i);&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_completion_code;&lt;br/&gt;&lt;br/&gt;FUNCTION filter_reason_code(&lt;br/&gt;      p_process_rec_i IN pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i IN t_cursor_data_tbl,&lt;br/&gt;      p_select_reason_code_i IN INTEGER )&lt;br/&gt;   RETURN t_ptr_tbl&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : FILTER_REASON_CODE&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :  This is for selecting and building set of records from the passed lot&lt;br/&gt;   ||                        according to the given Reason Code value.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   l_proc_name t_unit_name := &apos;FILTER_REASON_CODE&apos;;&lt;br/&gt;   l_temp t_ptr_tbl;&lt;br/&gt;   l_idx PLS_INTEGER := 0;&lt;br/&gt;   l_selected BOOLEAN;&lt;br/&gt;BEGIN&lt;br/&gt;   IF (p_select_reason_code_i &lt; 1 OR p_select_reason_code_i &gt; 4) THEN&lt;br/&gt;      pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bad p_select_reason_code_i value passed!&apos; );&lt;br/&gt;      RAISE c_bad_parameter;&lt;br/&gt;   END IF;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, p_select_reason_code_i = &apos; || p_select_reason_code_i );&lt;br/&gt;&lt;br/&gt;   FOR i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;   LOOP&lt;br/&gt;      l_selected := FALSE;&lt;br/&gt;&lt;br/&gt;      CASE p_select_reason_code_i&lt;br/&gt;      WHEN 1 THEN&lt;br/&gt;         IF (p_cursor_data_i (i).reason_cd1 IS NOT NULL) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 2 THEN&lt;br/&gt;         IF (p_cursor_data_i (i).reason_cd2 IS NOT NULL) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 3 THEN&lt;br/&gt;         IF (p_cursor_data_i (i).reason_cd3 IS NOT NULL) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      WHEN 4 THEN&lt;br/&gt;         IF (p_cursor_data_i (i).reason_cd4 IS NOT NULL) THEN&lt;br/&gt;            l_selected := TRUE;&lt;br/&gt;         END IF;&lt;br/&gt;      END CASE;&lt;br/&gt;&lt;br/&gt;      IF (l_selected) THEN&lt;br/&gt;         l_idx := l_idx + 1;&lt;br/&gt;         l_temp (l_idx) := i;&lt;br/&gt;      END IF;&lt;br/&gt;   END LOOP;&lt;br/&gt;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, end&apos;);&lt;br/&gt;   RETURN l_temp;&lt;br/&gt;END filter_reason_code;&lt;br/&gt;END pkg_vnt_load_otr_trouble_call;</source>
</body>
</PackageOracle>
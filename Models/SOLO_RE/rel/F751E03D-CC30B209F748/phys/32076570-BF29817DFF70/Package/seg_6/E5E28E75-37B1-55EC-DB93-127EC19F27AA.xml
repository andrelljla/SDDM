<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_PROCESS_RRT_OOR_ORDER" directorySegmentName="seg_6" id="E5E28E75-37B1-55EC-DB93-127EC19F27AA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_OOR_ORDER</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:46 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_PROCESS_RRT_OOR_ORDER&lt;br/&gt;IS&lt;br/&gt;  /***********************************************************************************************************************&lt;br/&gt;  ||      Program Name                 : pkg_vnt_process_rrt_oor_order&lt;br/&gt;  ||      CREATED BY                   : Knoll&lt;br/&gt;  ||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;  ||      SUBJECT AREA                 : Order&lt;br/&gt;  ||      DESCRIPITION                 : The package pkg_vnt_process_rrt_oor_order controls the processing of the&lt;br/&gt;  || Vantage RRT_OOR_ORDER_OPEN table and applying those updates to SOLODB.&lt;br/&gt;&lt;br/&gt;    Change log:&lt;br/&gt;&lt;br/&gt;  Changed By                  Changed On                 Description&lt;br/&gt;  ------------------------------------------------------------------------------------------------------------&lt;br/&gt;  Cognizant                   10-OCT-2014          Standardization Changes&lt;br/&gt;  ************************************************************************************************************************/&lt;br/&gt;  PROCEDURE process(p_audit_user_i IN VARCHAR2);&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;END pkg_vnt_process_rrt_oor_order;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_PROCESS_RRT_OOR_ORDER" id="E5E28E75-37B1-55EC-DB93-127EC19F27AA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_OOR_ORDER</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:51 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_PROCESS_RRT_OOR_ORDER&lt;br/&gt;IS&lt;br/&gt;   /*******************************************************************************************************************&lt;br/&gt;   ||      Program Name                 : pkg_vnt_process_rrt_oor_order&lt;br/&gt;   ||      CREATED BY                   : Cognizant&lt;br/&gt;   ||      CREATED DATE                 : 10-OCT-2014&lt;br/&gt;   ||      SUBJECT AREA                 : Order&lt;br/&gt;   ||      DESCRIPITION                 : The package pkg_vnt_process_rrt_oor_order controls the processing of the&lt;br/&gt;   ||                                     Vantage RRT_OOR_ORDER_OPEN table and applying those updates to SOLODB.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||  Changed By                 Changed On             Change Description&lt;br/&gt;   ||  -------------------------  --------------------   --------------------------------------------------------------&lt;br/&gt;   ||  Cognizant                  10-OCT-2014            Standardization Changes&lt;br/&gt;   ||  Cognizant                  09-Jan-2015            Data model change, Changed  bus_interact_type_cd&lt;br/&gt;   ||                                                    and request_type_cd.&lt;br/&gt;   ||&lt;br/&gt;   ||  Cognizant                  12-Jan-2015            UAT Defect Fix: Added logic to populate&lt;br/&gt;   ||                                                    t_bus_interact_party_role table&lt;br/&gt;   ||  Cognizant                  03-Apr-2015            UAT Defect Fix: changed logic for column BUS_INTERACT_TYPE_CD&lt;br/&gt;   ||                                                    in table T_BUS_INTERACT_PARTY_ROLE and added update for&lt;br/&gt;   ||                                                    T_PROD_ORDER and T_SPECIAL_REQUEST&lt;br/&gt;   ||  Cognizant                  07-Apr-2015            Code changes to remove the descrepanies between NRT/RRT , Initial Load and Reconciliation.&lt;br/&gt;   ||  Cognizant                  10-Apr-2015            Trim included for character column in cursor query.&lt;br/&gt;   ||  Karthik                    29-Apr-2015            Modified the table structure of T_BUS_INTERACT to have a new column&lt;br/&gt;   ||                                                    BUS_INTERACT_USAGE_TYPE_CD&lt;br/&gt;   ||  Cognizant                  01-May-2015            Removed the table t_bus_inter_itm_vnt_ord_xref&lt;br/&gt;   *******************************************************************************************************************&lt;br/&gt;   */&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_pkg_name             CONSTANT t_unit_name&lt;br/&gt;                                           := &apos;PKG_VNT_PROCESS_RRT_OOR_ORDER&apos;;&lt;br/&gt;   c_special_request_cd   CONSTANT VARCHAR2 (1) := &apos;M&apos;;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors                   EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged RRT_OCR_ORDER_COMP for processing&lt;br/&gt;   CURSOR cur_stg_rrt_oor_order&lt;br/&gt;   IS&lt;br/&gt;      SELECT   CASE&lt;br/&gt;                  WHEN roor.sys_roor = 8313&lt;br/&gt;                     THEN &apos;BRS&apos;&lt;br/&gt;                  ELSE &apos;VNT&apos;&lt;br/&gt;               END AS data_source_type_cd,&lt;br/&gt;&lt;br/&gt;               -- staging control&lt;br/&gt;               roor.ROWID AS ID, roor.record_load_cd,&lt;br/&gt;&lt;br/&gt;               -- surrogate keys&lt;br/&gt;               cust_xref.party_id AS customer_id,&lt;br/&gt;               addr_xref.address_id AS service_address_id,&lt;br/&gt;               ord_xref.bus_interact_id,&lt;br/&gt;&lt;br/&gt;               -- values&lt;br/&gt;               -- DECODE (roor.ord_class_roor, c_special_request_cd, &apos;SPREQ&apos;, &apos;PRORD&apos; ) order_type_cd, --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;               DECODE (roor.ord_class_roor,&lt;br/&gt;                       c_special_request_cd, pkg_utility.c_request_type_cd_splreq,&lt;br/&gt;                       pkg_utility.c_request_type_cd_prdord&lt;br/&gt;                      ) request_type_cd,&lt;br/&gt;               roor.cust_acct_no_roor AS cust_acct_num,&lt;br/&gt;               roor.order_no_roor AS order_no,&lt;br/&gt;               TRIM (roor.ord_stat_roor) AS ord_stat_roor,&lt;br/&gt;&lt;br/&gt;               --bi.bus_interact_type_cd,  --commented in 03-Apr-2015 by Cognizant&lt;br/&gt;               --pkg_utility.c_bus_interact_type_cd_req AS bus_interact_type_cd,  --Added in 03-Apr-2015 by Cognizant&lt;br/&gt;               TRIM (roor.compl_cde_roor) AS completion_cd,&lt;br/&gt;               TRIM (SUBSTR (roor.compl_cde_roor, 1, 3)) AS completion_cd1,&lt;br/&gt;               TRIM (SUBSTR (roor.compl_cde_roor, 4, 3)) AS completion_cd2,&lt;br/&gt;               TRIM (SUBSTR (roor.compl_cde_roor, 7, 3)) AS completion_cd3,&lt;br/&gt;               TRIM (SUBSTR (roor.compl_cde_roor, 10, 3)) AS completion_cd4,&lt;br/&gt;               TRIM (SUBSTR (roor.compl_cde_roor, 13, 3)) AS completion_cd5,&lt;br/&gt;               TRIM (SUBSTR (roor.compl_cde_roor, 16, 3)) AS completion_cd6,&lt;br/&gt;               TRIM (roor.ord_rsn_roor) AS reason_cd,&lt;br/&gt;               TRIM (SUBSTR (roor.ord_rsn_roor, 1, 2)) AS reason_cd1,&lt;br/&gt;               TRIM (SUBSTR (roor.ord_rsn_roor, 3, 2)) AS reason_cd2,&lt;br/&gt;               TRIM (SUBSTR (roor.ord_rsn_roor, 5, 2)) AS reason_cd3,&lt;br/&gt;               TRIM (SUBSTR (roor.ord_rsn_roor, 7, 2)) AS reason_cd4,&lt;br/&gt;               DECODE&lt;br/&gt;                  (roor.create_dte_roor,&lt;br/&gt;                   TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                   TO_TIMESTAMP (   TO_CHAR (roor.create_dte_roor,&lt;br/&gt;                                             &apos;YYYY.MM.DD&apos;&lt;br/&gt;                                            )&lt;br/&gt;                                 || &apos;.&apos;&lt;br/&gt;                                 || roor.create_tme_roor,&lt;br/&gt;                                 &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                                )&lt;br/&gt;                  ) order_create_ts,&lt;br/&gt;               DECODE&lt;br/&gt;                  (roor.compl_dte_roor,&lt;br/&gt;                   TO_DATE (&apos;00010101&apos;, &apos;YYYYMMDD&apos;), NULL,&lt;br/&gt;                   TO_TIMESTAMP (   TO_CHAR (roor.compl_dte_roor,&lt;br/&gt;                                             &apos;YYYY.MM.DD&apos;)&lt;br/&gt;                                 || &apos;.&apos;&lt;br/&gt;                                 || roor.compl_tme_roor,&lt;br/&gt;                                 &apos;YYYY.MM.DD.HH24.MI.SS&apos;&lt;br/&gt;                                )&lt;br/&gt;                  ) order_completion_ts&lt;br/&gt;          FROM stg.vnt_rrt_oor_order_open roor LEFT OUTER JOIN t_party_vantage_xref cust_xref&lt;br/&gt;               ON cust_xref.cust_acct_num = roor.cust_acct_no_roor&lt;br/&gt;             AND cust_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_service_address_vantage_xref addr_xref&lt;br/&gt;               ON addr_xref.hs_key = roor.hse_key_roor&lt;br/&gt;             AND addr_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;               LEFT OUTER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;               ON ord_xref.ord_no = roor.order_no_roor&lt;br/&gt;             AND ord_xref.record_stat = pkg_utility.c_record_active&lt;br/&gt;           /*LEFT OUTER JOIN t_bus_interact bi&lt;br/&gt;           ON bi.bus_interact_id = ord_xref.bus_interact_id&lt;br/&gt;         AND bi.record_stat = pkg_utility.c_record_active*/   --commented in 03-Apr-2015 by Cognizant&lt;br/&gt;      WHERE    roor.record_load_cd IS NULL&lt;br/&gt;      ORDER BY roor.pull_dte_roor,&lt;br/&gt;               DECODE (roor.pull_tme_slot_roor,&lt;br/&gt;                       1, pkg_utility.l_final_slot,&lt;br/&gt;                       roor.pull_tme_slot_roor&lt;br/&gt;                      ),&lt;br/&gt;               --Decode implemented for fixing the Slot issue on 19-Dec-2014 by Cognizant&lt;br/&gt;               roor.order_no_roor;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_rrt_oor_order%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_reason (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_reason (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;--      p_order_no        IN              t_bus_inter_itm_vnt_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_order_no        IN              t_bus_inter_vantage_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ******&lt;br/&gt;      ||      SubProgram Name              :  process&lt;br/&gt;      ||      ESTIMATED RUN TIME           :&lt;br/&gt;      ||      DESCRIPITION                 :  The procedure  process will open the cursor and execute the records  for&lt;br/&gt;      ||                                      create stub customer as needed to support the order, lookup the order in&lt;br/&gt;      ||                                      case it was created earlier in the run, update the order, create the&lt;br/&gt;      order&lt;br/&gt;      ||                                      and update the order with  Update the staging rows with status&lt;br/&gt;      *****************************************************************************************************************&lt;br/&gt;      *******/&lt;br/&gt;      l_proc_name            t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name         t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec          pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data          t_cursor_data_tbl;&lt;br/&gt;      l_svc_processed        VARCHAR2 (1);&lt;br/&gt;      l_ord_processed        VARCHAR2 (1);&lt;br/&gt;      l_bus_interact         t_bus_interact%ROWTYPE;&lt;br/&gt;      l_process_record_cnt   NUMBER                            := 0;&lt;br/&gt;      l_error_record_cnt     NUMBER                            := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_rrt_oor_order%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_rrt_oor_order;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_rrt_oor_order;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_rrt_oor_order&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT pkg_utility.c_rt_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                            l_proc_name&lt;br/&gt;                                         || &apos; ,Processing order_no=&apos;&lt;br/&gt;                                         || l_cursor_data (i).order_no&lt;br/&gt;                                        );&lt;br/&gt;&lt;br/&gt;                  IF (l_cursor_data (i).customer_id IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     -- create stub customer as needed to support the order&lt;br/&gt;                     create_customer (l_process_rec,&lt;br/&gt;                                      p_audit_user_i,&lt;br/&gt;                                      l_cursor_data (i)&lt;br/&gt;                                     );&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  -- if no errors&lt;br/&gt;                  IF (l_cursor_data (i).record_load_cd IS NULL)&lt;br/&gt;                  THEN&lt;br/&gt;                     IF (l_cursor_data (i).bus_interact_id IS NULL)&lt;br/&gt;                     THEN&lt;br/&gt;                        -- lookup the order in case it was created earlier in the run&lt;br/&gt;                        IF (get_bus_interact (l_process_rec,&lt;br/&gt;                                              l_cursor_data (i).order_no,&lt;br/&gt;                                              l_bus_interact&lt;br/&gt;                                             )&lt;br/&gt;                           )&lt;br/&gt;                        THEN&lt;br/&gt;                           -- update the order&lt;br/&gt;                           l_cursor_data (i).bus_interact_id :=&lt;br/&gt;                                               l_bus_interact.bus_interact_id;&lt;br/&gt;                           update_order (l_process_rec,&lt;br/&gt;                                         l_cursor_data (i),&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;                        ELSE&lt;br/&gt;                           -- create the order&lt;br/&gt;                           create_order (l_process_rec,&lt;br/&gt;                                         l_cursor_data (i),&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;                        END IF;&lt;br/&gt;                     ELSE&lt;br/&gt;                        -- update the order&lt;br/&gt;                        update_order (l_process_rec,&lt;br/&gt;                                      l_cursor_data (i),&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;                     END IF;&lt;br/&gt;                  END IF;&lt;br/&gt;&lt;br/&gt;                  update_staging (l_process_rec, l_cursor_data (i));&lt;br/&gt;                  COMMIT;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     ROLLBACK;&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                         (l_process_rec,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, order_no = &apos;&lt;br/&gt;                                          || l_cursor_data (i).order_no&lt;br/&gt;                                          || &apos;, bus_interact_id = &apos;&lt;br/&gt;                                          || l_cursor_data (i).bus_interact_id&lt;br/&gt;                                          || &apos;, exception=&apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                       pkg_utility.c_stg_error;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               --Capturing the Processed/error record count&lt;br/&gt;               SELECT   DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                NULL, 1,&lt;br/&gt;                                pkg_utility.c_stg_processed, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_process_record_cnt,&lt;br/&gt;                        DECODE (l_cursor_data (i).record_load_cd,&lt;br/&gt;                                pkg_utility.c_stg_error, 1,&lt;br/&gt;                                0&lt;br/&gt;                               )&lt;br/&gt;                      + l_error_record_cnt&lt;br/&gt;                 INTO l_process_record_cnt,&lt;br/&gt;                      l_error_record_cnt&lt;br/&gt;                 FROM DUAL;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; pkg_utility.c_rt_batchsize;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_rrt_oor_order;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_rrt_oor_order%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_rrt_oor_order;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_customer (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ***&lt;br/&gt;      ||      SubProgram Name              : PROCEDURE create_customer&lt;br/&gt;      ||      ESTIMATED RUN TIME           :&lt;br/&gt;      ||      DESCRIPITION                 : The procedure  create_customer do execute for party,customer and&lt;br/&gt;      ||                                     party_vantage_xref&lt;br/&gt;      ********************************************************************************************************************&lt;br/&gt;      **/&lt;br/&gt;      l_proc_name     t_unit_name := &apos;CREATE_CUSTOMER&apos;;&lt;br/&gt;      l_account_id    NUMBER;&lt;br/&gt;      l_customer_id   NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cursor_row_io.cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;      -- create customer if doesn&apos;t exist&lt;br/&gt;      l_customer_id :=&lt;br/&gt;              customer_exists (p_process_rec_i, p_cursor_row_io.cust_acct_num);&lt;br/&gt;&lt;br/&gt;      IF (l_customer_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name || &apos;, creating customer&apos;&lt;br/&gt;                               );&lt;br/&gt;         -- party&lt;br/&gt;         p_cursor_row_io.customer_id :=&lt;br/&gt;            da_party.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;--                   party_nm                    =&gt; NULL,&lt;br/&gt;                   party_subtype_cd            =&gt; NULL,&lt;br/&gt;                   party_child_subtype_cd      =&gt; NULL,&lt;br/&gt;                   audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         -- customer&lt;br/&gt;         da_customer.ADD (p_process_rec_i,&lt;br/&gt;                          external_customer_id      =&gt; NULL,&lt;br/&gt;                          customer_id               =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                          first_contact_dt          =&gt; NULL,&lt;br/&gt;                          first_fulfillment         =&gt; NULL,&lt;br/&gt;                          first_payment             =&gt; NULL,&lt;br/&gt;                          audit_user                =&gt; p_audit_user_i&lt;br/&gt;                         );&lt;br/&gt;         -- party_vantage_xref&lt;br/&gt;         da_party_vantage_xref.ADD&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                               cust_acct_num      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;                               party_id           =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                               audit_user         =&gt; p_audit_user_i&lt;br/&gt;                              );&lt;br/&gt;      ELSE&lt;br/&gt;         p_cursor_row_io.customer_id := l_customer_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos; ,order_no=&apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos;, cust_acct_num=&apos;&lt;br/&gt;                                    || p_cursor_row_io.cust_acct_num&lt;br/&gt;                                    || &apos; , Error=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_customer;&lt;br/&gt;&lt;br/&gt;   FUNCTION customer_exists (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cust_acct_num   IN   t_party_vantage_xref.cust_acct_num%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN NUMBER&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ***&lt;br/&gt;      ||      SubProgram Name              :  customer_exists&lt;br/&gt;      ||      ESTIMATED RUN TIME           :&lt;br/&gt;      ||      DESCRIPITION                 :  The function customer_exists will return the details customer exists&lt;br/&gt;      ********************************************************************************************************************&lt;br/&gt;      ***/&lt;br/&gt;      l_proc_name   t_unit_name                          := &apos;CUSTOMER_EXISTS&apos;;&lt;br/&gt;      l_party_id    t_party_vantage_xref.party_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, cust_acct_num=&apos;&lt;br/&gt;                             || p_cust_acct_num&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT xref.party_id&lt;br/&gt;        INTO l_party_id&lt;br/&gt;        FROM t_party_vantage_xref xref&lt;br/&gt;       WHERE xref.cust_acct_num = p_cust_acct_num&lt;br/&gt;         AND xref.record_stat = pkg_utility.c_record_active;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, customer found in t_party_vantage_xref&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN l_party_id;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos;, customer NOT found in t_party_vantage_xref&apos;&lt;br/&gt;                              );&lt;br/&gt;         RETURN NULL;&lt;br/&gt;   END customer_exists;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;--      p_order_no        IN              t_bus_inter_itm_vnt_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_order_no        IN              t_bus_inter_vantage_ord_xref.ord_no%TYPE,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_bus_interact%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ***&lt;br/&gt;      ||      SubProgram Name              :  FUNCTION get_bus_interact&lt;br/&gt;      ||      ESTIMATED RUN TIME           :&lt;br/&gt;      ||      DESCRIPITION                 :  The function get_bus_interact will return the details of get bus interact&lt;br/&gt;      ********************************************************************************************************************&lt;br/&gt;      ***/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BUS_INTERACT&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, p_order_no=&apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT a.*&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_bus_inter_vantage_ord_xref xref INNER JOIN t_bus_interact a&lt;br/&gt;             ON a.bus_interact_id = xref.bus_interact_id&lt;br/&gt;             INNER JOIN t_request b&lt;br/&gt;             ON b.request_interaction_id = a.bus_interact_id&lt;br/&gt;       WHERE xref.ord_no = p_order_no&lt;br/&gt;         -- AND a.bus_interact_type_cd IN (&apos;PRORD&apos;, &apos;SPREQ&apos;) --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;         AND b.request_type_cd IN&lt;br/&gt;                (pkg_utility.c_request_type_cd_prdord,&lt;br/&gt;                 pkg_utility.c_request_type_cd_splreq&lt;br/&gt;                )&lt;br/&gt;         AND b.record_stat = pkg_utility.c_record_active;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, bus_interact found&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, bus_interact NOT found&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_bus_interact;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /***************************************************************************************************************&lt;br/&gt;      ||      SubProgram Name              :  PROCEDURE update_order&lt;br/&gt;      ||      ESTIMATED RUN TIME           :&lt;br/&gt;      ||      DESCRIPITION                 :  The procedure update_order will update t_prod_order_status&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_ORDER&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      -- IF (p_cursor_row_io.order_type_cd = &apos;PRORD&apos;) --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;      IF (p_cursor_row_io.request_type_cd =&lt;br/&gt;                                          pkg_utility.c_request_type_cd_prdord&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         UPDATE t_prod_order_status a&lt;br/&gt;            SET a.product_order_status_cd = p_cursor_row_io.ord_stat_roor,&lt;br/&gt;                a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;                a.modified_by = p_audit_user_i&lt;br/&gt;          --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;         WHERE  a.product_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;         -- 06-Mar-2015            UAT Defect Fix: Starts for T_PROD_ORDER&lt;br/&gt;         UPDATE t_prod_order a&lt;br/&gt;            SET a.data_source_type_cd = p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                a.actual_completion_dttm = p_cursor_row_io.order_completion_ts,&lt;br/&gt;                a.product_order_create_dttm = p_cursor_row_io.order_create_ts,&lt;br/&gt;                a.reason_cd = p_cursor_row_io.reason_cd,&lt;br/&gt;                a.completion_cd = p_cursor_row_io.completion_cd,&lt;br/&gt;                a.service_address_id = p_cursor_row_io.service_address_id,&lt;br/&gt;                a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                a.modified_by = p_audit_user_i&lt;br/&gt;          WHERE a.product_order_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;         -- 06-Mar-2015            UAT Defect Fix: Ends for T_PROD_ORDER&lt;br/&gt;&lt;br/&gt;         -- cancel codes&lt;br/&gt;         IF (p_cursor_row_io.ord_stat_roor = &apos;X&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            update_prod_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd1,&lt;br/&gt;                                      1,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd2,&lt;br/&gt;                                      2,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd3,&lt;br/&gt;                                      3,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd4,&lt;br/&gt;                                      4,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd5,&lt;br/&gt;                                      5,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;            update_prod_order_cancel (p_process_rec_i,&lt;br/&gt;                                      p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                      p_cursor_row_io.completion_cd6,&lt;br/&gt;                                      6,&lt;br/&gt;                                      p_cursor_row_io,&lt;br/&gt;                                      p_audit_user_i&lt;br/&gt;                                     );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         -- reason codes&lt;br/&gt;         update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.reason_cd1,&lt;br/&gt;                                   1,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.reason_cd2,&lt;br/&gt;                                   2,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.reason_cd3,&lt;br/&gt;                                   3,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;         update_prod_order_reason (p_process_rec_i,&lt;br/&gt;                                   p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                   p_cursor_row_io.reason_cd4,&lt;br/&gt;                                   4,&lt;br/&gt;                                   p_cursor_row_io,&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;      ELSE&lt;br/&gt;         UPDATE t_special_request_status a&lt;br/&gt;            SET a.special_request_status_cd = p_cursor_row_io.ord_stat_roor,&lt;br/&gt;                a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;                a.modified_by = p_audit_user_i&lt;br/&gt;          --Added audit fields in the Update by Cognizant on 2-Dec-2014&lt;br/&gt;         WHERE  a.special_request_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;         -- 06-Mar-2015            UAT Defect Fix: Starts for T_SPECIAL_REQUEST&lt;br/&gt;         UPDATE t_special_request a&lt;br/&gt;            SET a.data_source_type_cd = p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                a.actual_completion_dttm = p_cursor_row_io.order_completion_ts,&lt;br/&gt;                a.create_dttm = p_cursor_row_io.order_create_ts,&lt;br/&gt;                a.reason_cd = p_cursor_row_io.reason_cd,&lt;br/&gt;                a.completion_cd = p_cursor_row_io.completion_cd,&lt;br/&gt;                a.service_address_id = p_cursor_row_io.service_address_id,&lt;br/&gt;                a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                a.modified_by = p_audit_user_i&lt;br/&gt;          WHERE a.special_request_id = p_cursor_row_io.bus_interact_id;&lt;br/&gt;&lt;br/&gt;         -- 06-Mar-2015            UAT Defect Fix: Ends for T_SPECIAL_REQUEST&lt;br/&gt;         -- cancel codes&lt;br/&gt;         IF (p_cursor_row_io.ord_stat_roor = &apos;X&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            update_spec_req_cancel (p_process_rec_i,&lt;br/&gt;                                    p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                    p_cursor_row_io.completion_cd1,&lt;br/&gt;                                    1,&lt;br/&gt;                                    p_cursor_row_io,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;            update_spec_req_cancel (p_process_rec_i,&lt;br/&gt;                                    p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                    p_cursor_row_io.completion_cd2,&lt;br/&gt;                                    2,&lt;br/&gt;                                    p_cursor_row_io,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;            update_spec_req_cancel (p_process_rec_i,&lt;br/&gt;                                    p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                    p_cursor_row_io.completion_cd3,&lt;br/&gt;                                    3,&lt;br/&gt;                                    p_cursor_row_io,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;            update_spec_req_cancel (p_process_rec_i,&lt;br/&gt;                                    p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                    p_cursor_row_io.completion_cd4,&lt;br/&gt;                                    4,&lt;br/&gt;                                    p_cursor_row_io,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;            update_spec_req_cancel (p_process_rec_i,&lt;br/&gt;                                    p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                    p_cursor_row_io.completion_cd5,&lt;br/&gt;                                    5,&lt;br/&gt;                                    p_cursor_row_io,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;            update_spec_req_cancel (p_process_rec_i,&lt;br/&gt;                                    p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                    p_cursor_row_io.completion_cd6,&lt;br/&gt;                                    6,&lt;br/&gt;                                    p_cursor_row_io,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         -- reason codes&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd1,&lt;br/&gt;                                 1,&lt;br/&gt;                                 p_cursor_row_io,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd2,&lt;br/&gt;                                 2,&lt;br/&gt;                                 p_cursor_row_io,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd3,&lt;br/&gt;                                 3,&lt;br/&gt;                                 p_cursor_row_io,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;         update_spec_req_reason (p_process_rec_i,&lt;br/&gt;                                 p_cursor_row_io.bus_interact_id,&lt;br/&gt;                                 p_cursor_row_io.reason_cd4,&lt;br/&gt;                                 4,&lt;br/&gt;                                 p_cursor_row_io,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos; ,key = &apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos;, bus_interact_id = &apos;&lt;br/&gt;                                    || p_cursor_row_io.bus_interact_id&lt;br/&gt;                                    || &apos;, ord_stat_roor = &apos;&lt;br/&gt;                                    || p_cursor_row_io.ord_stat_roor&lt;br/&gt;                                    || &apos; , Error=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END update_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE create_order (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ****&lt;br/&gt;      ||      SubProgram Name          : PROCEDURE create_order&lt;br/&gt;      ||      ESTIMATED RUN TIME       :&lt;br/&gt;      ||      DESCRIPITION             : The procedure create_order will load t_bus_inter_vantage_ord_xref&lt;br/&gt;      ||                                 tablefor request,product_order,customer order,prod_order_status,&lt;br/&gt;      prod_order_completion&lt;br/&gt;      ||                                ,prod_order_reason,special request,special_request_status,&lt;br/&gt;      special_request_completion&lt;br/&gt;      ||                                ,special_request_reason,&lt;br/&gt;      ********************************************************************************************************************&lt;br/&gt;      ****/&lt;br/&gt;      l_proc_name         t_unit_name                       := &apos;CREATE_ORDER&apos;;&lt;br/&gt;      l_bus_interact_id   t_bus_interact.bus_interact_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_cursor_row_io.bus_interact_id&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug&lt;br/&gt;         (p_process_rec_i,&lt;br/&gt;             l_proc_name&lt;br/&gt;          || &apos;, &apos;&lt;br/&gt;          || pkg_utility.c_proc_start_text&lt;br/&gt;          || &apos;, bus_interact_type_cd=&apos;&lt;br/&gt;          || pkg_utility.c_bus_interact_type_cd_req&lt;br/&gt;                                            --- Added in 03/04/15 by Cognizant&lt;br/&gt;         );&lt;br/&gt;      -- bus_interact&lt;br/&gt;      l_bus_interact_id :=&lt;br/&gt;         da_bus_interact.ADD&lt;br/&gt;              (p_process_rec_i,&lt;br/&gt;               data_source_type_cd             =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;               source_system_id                =&gt; p_cursor_row_io.order_no,&lt;br/&gt;               bus_interact_type_cd            =&gt; pkg_utility.c_bus_interact_type_cd_req,&lt;br/&gt;               bus_interact_usage_type_cd      =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;               audit_user                      =&gt; p_audit_user_i&lt;br/&gt;              );&lt;br/&gt;      da_bus_inter_vantage_ord_xref.ADD (p_process_rec_i,&lt;br/&gt;                                         p_cursor_row_io.order_no,&lt;br/&gt;                                         l_bus_interact_id,&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;      -- request&lt;br/&gt;      da_request.ADD (p_process_rec_i,&lt;br/&gt;                      request_interaction_id      =&gt; l_bus_interact_id,&lt;br/&gt;                      request_type_cd             =&gt; p_cursor_row_io.request_type_cd,&lt;br/&gt;                      audit_user                  =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;      da_bus_interact_party_role.ADD&lt;br/&gt;              (p_process_rec_i,&lt;br/&gt;               bus_interact_id             =&gt; l_bus_interact_id,&lt;br/&gt;               party_id                    =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;               party_role_cd               =&gt; &apos;CUST&apos;,&lt;br/&gt;               data_source_type_cd         =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;               source_system_party_id      =&gt; p_cursor_row_io.cust_acct_num,&lt;br/&gt;               -- 06-Mar-2015            UAT Defect Fix: Starts&lt;br/&gt;                        --bus_interact_type_cd        =&gt; p_cursor_row_io.bus_interact_type_cd,&lt;br/&gt;               bus_interact_type_cd        =&gt; pkg_utility.c_bus_interact_type_cd_req,&lt;br/&gt;               -- 06-Mar-2015            UAT Defect Fix: Ends&lt;br/&gt;               effective_dttm              =&gt; NULL,&lt;br/&gt;               audit_user                  =&gt; p_audit_user_i&lt;br/&gt;              );&lt;br/&gt;&lt;br/&gt;      -- product_order&lt;br/&gt;      -- IF (p_cursor_row_io.order_type_cd = &apos;PRORD&apos;) --&gt; Commented for Vantage - Data Model Change by Cognizant&lt;br/&gt;      IF (p_cursor_row_io.request_type_cd =&lt;br/&gt;                                          pkg_utility.c_request_type_cd_prdord&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         -- customer order&lt;br/&gt;         da_customer_order.ADD (p_process_rec_i,&lt;br/&gt;                                customer_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                                customer_id                   =&gt; p_cursor_row_io.customer_id,&lt;br/&gt;                                customer_order_type_cd        =&gt; NULL,&lt;br/&gt;                                customer_order_action_cd      =&gt; NULL,&lt;br/&gt;                                assigned_priority_cd          =&gt; NULL,&lt;br/&gt;                                due_dt                        =&gt; NULL,&lt;br/&gt;                                audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;         da_prod_order.ADD&lt;br/&gt;               (p_process_rec_i,&lt;br/&gt;                product_order_id               =&gt; l_bus_interact_id,&lt;br/&gt;                data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                actual_completion_dttm         =&gt; p_cursor_row_io.order_completion_ts,&lt;br/&gt;                product_order_create_dttm      =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;                requested_completion_dt        =&gt; NULL,&lt;br/&gt;                reason_cd                      =&gt; p_cursor_row_io.reason_cd,&lt;br/&gt;                completion_cd                  =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;                dnis_cd                        =&gt; NULL,&lt;br/&gt;                cancel_cd                      =&gt; NULL,&lt;br/&gt;                service_address_id             =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;                bill_start_dt                  =&gt; NULL,&lt;br/&gt;                bill_stop_dt                   =&gt; NULL,&lt;br/&gt;                audit_user                     =&gt; p_audit_user_i&lt;br/&gt;               );&lt;br/&gt;         -- prod_order_status&lt;br/&gt;         da_prod_order_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_status_cd      =&gt; p_cursor_row_io.ord_stat_roor,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.ord_stat_roor = &apos;X&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            -- prod_order_completion&lt;br/&gt;            IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; 1,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; 2,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; 3,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; 4,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; 5,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   product_order_cancel_cd      =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; 6,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         -- prod_order_reason&lt;br/&gt;         IF (p_cursor_row_io.reason_cd1 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_prod_order_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  product_order_reason_cd      =&gt; p_cursor_row_io.reason_cd1,&lt;br/&gt;                  data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num            =&gt; 1,&lt;br/&gt;                  audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.reason_cd2 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_prod_order_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  product_order_reason_cd      =&gt; p_cursor_row_io.reason_cd2,&lt;br/&gt;                  data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num            =&gt; 2,&lt;br/&gt;                  audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.reason_cd3 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_prod_order_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  product_order_reason_cd      =&gt; p_cursor_row_io.reason_cd3,&lt;br/&gt;                  data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num            =&gt; 3,&lt;br/&gt;                  audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.reason_cd4 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_prod_order_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  product_order_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  product_order_reason_cd      =&gt; p_cursor_row_io.reason_cd4,&lt;br/&gt;                  data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num            =&gt; 4,&lt;br/&gt;                  audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;      ELSE&lt;br/&gt;         -- special request&lt;br/&gt;         da_special_request.ADD&lt;br/&gt;              (p_process_rec_i,&lt;br/&gt;               special_request_id           =&gt; l_bus_interact_id,&lt;br/&gt;               data_source_type_cd          =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;               actual_completion_dttm       =&gt; p_cursor_row_io.order_completion_ts,&lt;br/&gt;               create_dttm                  =&gt; p_cursor_row_io.order_create_ts,&lt;br/&gt;               requested_completion_dt      =&gt; NULL,&lt;br/&gt;               reason_cd                    =&gt; p_cursor_row_io.reason_cd,&lt;br/&gt;               completion_cd                =&gt; p_cursor_row_io.completion_cd,&lt;br/&gt;               dnis_cd                      =&gt; NULL,&lt;br/&gt;               cancel_cd                    =&gt; NULL,&lt;br/&gt;               service_address_id           =&gt; p_cursor_row_io.service_address_id,&lt;br/&gt;               bill_start_dt                =&gt; NULL,&lt;br/&gt;               bill_stop_dt                 =&gt; NULL,&lt;br/&gt;               audit_user                   =&gt; p_audit_user_i&lt;br/&gt;              );&lt;br/&gt;         -- special_request_status&lt;br/&gt;         da_special_request_status.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_status_cd      =&gt; p_cursor_row_io.ord_stat_roor,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.ord_stat_roor = &apos;X&apos;)&lt;br/&gt;         THEN&lt;br/&gt;            -- special_request_completion&lt;br/&gt;            IF (p_cursor_row_io.completion_cd1 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_cancel_cd      =&gt; p_cursor_row_io.completion_cd1,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; 1,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd2 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_cancel_cd      =&gt; p_cursor_row_io.completion_cd2,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; 2,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd3 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_cancel_cd      =&gt; p_cursor_row_io.completion_cd3,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; 3,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd4 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_cancel_cd      =&gt; p_cursor_row_io.completion_cd4,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; 4,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd5 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_cancel_cd      =&gt; p_cursor_row_io.completion_cd5,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; 5,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (p_cursor_row_io.completion_cd6 IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                   special_request_cancel_cd      =&gt; p_cursor_row_io.completion_cd6,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; 6,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         -- special_request_reason&lt;br/&gt;         IF (p_cursor_row_io.reason_cd1 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_special_request_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  special_request_reason_cd      =&gt; p_cursor_row_io.reason_cd1,&lt;br/&gt;                  data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num              =&gt; 1,&lt;br/&gt;                  audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.reason_cd2 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_special_request_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  special_request_reason_cd      =&gt; p_cursor_row_io.reason_cd2,&lt;br/&gt;                  data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num              =&gt; 2,&lt;br/&gt;                  audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.reason_cd3 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_special_request_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  special_request_reason_cd      =&gt; p_cursor_row_io.reason_cd3,&lt;br/&gt;                  data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num              =&gt; 3,&lt;br/&gt;                  audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_row_io.reason_cd4 IS NOT NULL)&lt;br/&gt;         THEN&lt;br/&gt;            da_special_request_reason.ADD&lt;br/&gt;                 (p_process_rec_i,&lt;br/&gt;                  special_request_id             =&gt; l_bus_interact_id,&lt;br/&gt;                  special_request_reason_cd      =&gt; p_cursor_row_io.reason_cd4,&lt;br/&gt;                  data_source_type_cd            =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                  code_sequence_num              =&gt; 4,&lt;br/&gt;                  audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;         END IF;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos; ,key : &apos;&lt;br/&gt;                                    || &apos;order_no = &apos;&lt;br/&gt;                                    || p_cursor_row_io.order_no&lt;br/&gt;                                    || &apos; customer_id = &apos;&lt;br/&gt;                                    || p_cursor_row_io.customer_id&lt;br/&gt;                                    || &apos; , Error=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;   END create_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      **&lt;br/&gt;      ||      SubProgram Name          :  PROCEDURE update_prod_order_cancel&lt;br/&gt;      ||      ESTIMATED RUN TIME       :&lt;br/&gt;      ||      DESCRIPITION             :  The procedure update_prod_order_cancel will update t_prod_order_cancel table.&lt;br/&gt;      ********************************************************************************************************************&lt;br/&gt;      **/&lt;br/&gt;      l_proc_name   t_unit_name                 := &apos;UPDATE_PROD_ORDER_CANCEL&apos;;&lt;br/&gt;      l_cancel      t_prod_order_cancel%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_cancel&lt;br/&gt;           FROM t_prod_order_cancel a&lt;br/&gt;          WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_cancel.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN                                                  --&apos;A&apos;) THEN&lt;br/&gt;               da_prod_order_cancel.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_cancel.product_order_id,&lt;br/&gt;                   product_order_cancel_cd      =&gt; l_cancel.product_order_cancel_cd,&lt;br/&gt;                   data_source_type_cd          =&gt; l_cancel.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; l_cancel.code_sequence_num,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_prod_order_cancel a&lt;br/&gt;               SET a.product_order_cancel_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = l_cancel.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos; Record found in T_PROD_ORDER_CANCEL table&apos;&lt;br/&gt;                               );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                   product_order_cancel_cd      =&gt; p_code_i,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; p_sequence_i,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos; &apos;&lt;br/&gt;                              || pkg_utility.c_proc_end_text&lt;br/&gt;                              || &apos; Record Not found in T_PROD_ORDER_CANCEL table&apos;&lt;br/&gt;                             );&lt;br/&gt;      END;&lt;br/&gt;   END update_prod_order_cancel;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_prod_order_reason (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||      SubProgram Name             :  PROCEDURE update_prod_order_reason&lt;br/&gt;      ||      ESTIMATED RUN TIME          :&lt;br/&gt;      ||      DESCRIPITION                :  The procedure update_prod_order_reason will update t_prod_order_reason table.&lt;br/&gt;      *******************************************************************************************************************&lt;br/&gt;      */&lt;br/&gt;      l_proc_name   t_unit_name                 := &apos;UPDATE_PROD_ORDER_REASON&apos;;&lt;br/&gt;      l_reason      t_prod_order_reason%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_reason&lt;br/&gt;           FROM t_prod_order_reason a&lt;br/&gt;          WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_reason.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_reason.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; l_reason.product_order_id,&lt;br/&gt;                   product_order_reason_cd      =&gt; l_reason.product_order_reason_cd,&lt;br/&gt;                   data_source_type_cd          =&gt; l_reason.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; l_reason.code_sequence_num,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_prod_order_reason a&lt;br/&gt;               SET a.product_order_reason_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.product_order_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = l_reason.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos; Record found in T_PROD_ORDER_REASON table&apos;&lt;br/&gt;                               );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_prod_order_reason.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   product_order_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                   product_order_reason_cd      =&gt; p_code_i,&lt;br/&gt;                   data_source_type_cd          =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                   code_sequence_num            =&gt; p_sequence_i,&lt;br/&gt;                   audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                             (p_process_rec_i,&lt;br/&gt;                                 l_proc_name&lt;br/&gt;                              || &apos; &apos;&lt;br/&gt;                              || pkg_utility.c_proc_end_text&lt;br/&gt;                              || &apos; Record Not found in T_PROD_ORDER_REASON table&apos;&lt;br/&gt;                             );&lt;br/&gt;      END;&lt;br/&gt;   END update_prod_order_reason;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_cancel (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||      SubProgram Name          :  PROCEDURE update_spec_req_cancel&lt;br/&gt;      ||      ESTIMATED RUN TIME       :&lt;br/&gt;      ||      DESCRIPITION             :  The procedure update_spec_req_cancel will update t_special_request_cancel table.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                   := &apos;UPDATE_SPEC_REQ_CANCEL&apos;;&lt;br/&gt;      l_cancel      t_special_request_cancel%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_cancel&lt;br/&gt;           FROM t_special_request_cancel a&lt;br/&gt;          WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_cancel.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_cancel.special_request_id,&lt;br/&gt;                   special_request_cancel_cd      =&gt; l_cancel.special_request_cancel_cd,&lt;br/&gt;                   data_source_type_cd            =&gt; l_cancel.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; l_cancel.code_sequence_num,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_special_request_cancel a&lt;br/&gt;               SET a.special_request_cancel_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = l_cancel.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos; Record found in T_SPECIAL_REQUEST_CANCEL table&apos;&lt;br/&gt;                            );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_cancel.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                   special_request_cancel_cd      =&gt; p_code_i,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; p_sequence_i,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos; &apos;&lt;br/&gt;                         || pkg_utility.c_proc_end_text&lt;br/&gt;                         || &apos; Record Not found in T_SPECIAL_REQUEST_CANCEL table&apos;&lt;br/&gt;                        );&lt;br/&gt;      END;&lt;br/&gt;   END update_spec_req_cancel;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_spec_req_reason (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_bus_interact_id_i   IN   t_bus_interact.bus_interact_id%TYPE,&lt;br/&gt;      p_code_i              IN   VARCHAR2,&lt;br/&gt;      p_sequence_i          IN   NUMBER,&lt;br/&gt;      p_cursor_row_i        IN   cur_stg_rrt_oor_order%ROWTYPE,&lt;br/&gt;      p_audit_user_i        IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /******************************************************************************************************************&lt;br/&gt;      ||      SubProgram Name          :  PROCEDURE update_spec_req_cancel&lt;br/&gt;      ||      ESTIMATED RUN TIME       :&lt;br/&gt;      ||      DESCRIPITION             :  The procedure update_spec_req_reason will update t_special_request_reason table.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name                   := &apos;UPDATE_SPEC_REQ_REASON&apos;;&lt;br/&gt;      l_reason      t_special_request_reason%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, bus_interact_id=&apos;&lt;br/&gt;                             || p_bus_interact_id_i&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO l_reason&lt;br/&gt;           FROM t_special_request_reason a&lt;br/&gt;          WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;            AND a.data_source_type_cd = p_cursor_row_i.data_source_type_cd&lt;br/&gt;            AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;&lt;br/&gt;         IF (p_code_i IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            IF (l_reason.record_stat = pkg_utility.c_record_active)&lt;br/&gt;            THEN                                                  --&apos;A&apos;) THEN&lt;br/&gt;               da_special_request_reason.del&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; l_reason.special_request_id,&lt;br/&gt;                   special_request_reason_cd      =&gt; l_reason.special_request_reason_cd,&lt;br/&gt;                   data_source_type_cd            =&gt; l_reason.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; l_reason.code_sequence_num,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;         ELSE&lt;br/&gt;            UPDATE t_special_request_reason a&lt;br/&gt;               SET a.special_request_reason_cd = p_code_i,&lt;br/&gt;                   a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                   a.modified_by = p_audit_user_i&lt;br/&gt;             WHERE a.special_request_id = p_bus_interact_id_i&lt;br/&gt;               AND a.data_source_type_cd = l_reason.data_source_type_cd&lt;br/&gt;               AND a.code_sequence_num = p_sequence_i;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug&lt;br/&gt;                            (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos; Record found in T_SPECIAL_REQUEST_REASON table&apos;&lt;br/&gt;                            );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_code_i IS NOT NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_special_request_reason.ADD&lt;br/&gt;                  (p_process_rec_i,&lt;br/&gt;                   special_request_id             =&gt; p_bus_interact_id_i,&lt;br/&gt;                   special_request_reason_cd      =&gt; p_code_i,&lt;br/&gt;                   data_source_type_cd            =&gt; p_cursor_row_i.data_source_type_cd,&lt;br/&gt;                   code_sequence_num              =&gt; p_sequence_i,&lt;br/&gt;                   audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                        (p_process_rec_i,&lt;br/&gt;                            l_proc_name&lt;br/&gt;                         || &apos; &apos;&lt;br/&gt;                         || pkg_utility.c_proc_end_text&lt;br/&gt;                         || &apos; Record Not found in T_SPECIAL_REQUEST_REASON table&apos;&lt;br/&gt;                        );&lt;br/&gt;      END;&lt;br/&gt;   END update_spec_req_reason;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_rrt_oor_order%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||      SubProgram Name             :  PROCEDURE update_staging&lt;br/&gt;      ||      ESTIMATED RUN TIME          :&lt;br/&gt;      ||      DESCRIPITION                :  The procedure update_staging will update stg.vnt_rrt_oor_order_open table.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         UPDATE stg.vnt_rrt_oor_order_open s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_row_io.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_row_io.ID;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_row_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;ORDER_NO = &apos;&lt;br/&gt;                                       || p_cursor_row_io.order_no&lt;br/&gt;                                       || &apos; CUSTOMER_ID = &apos;&lt;br/&gt;                                       || p_cursor_row_io.customer_id&lt;br/&gt;                                       || &apos;, ROWID  = &apos;&lt;br/&gt;                                       || p_cursor_row_io.ID&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_process_rrt_oor_order;</source>
</body>
</PackageOracle>
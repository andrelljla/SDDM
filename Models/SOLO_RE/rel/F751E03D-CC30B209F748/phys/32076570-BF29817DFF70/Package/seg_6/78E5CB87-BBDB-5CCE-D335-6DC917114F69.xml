<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_RECON_OCI_CUR_ITEM" directorySegmentName="seg_6" id="78E5CB87-BBDB-5CCE-D335-6DC917114F69">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OCI_CUR_ITEM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:24 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_RECON_OCI_CUR_ITEM&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : PKG_VNT_RECON_OCI_CUR_ITEM&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 29-Dec-2014&lt;br/&gt;||  Subject Area    : Product&lt;br/&gt;||  Description     : The package PKG_VNT_RECON_OCI_CUR_ITEM controls the Reconciliation load of the&lt;br/&gt;||                    Vantage oci_cur_item table into SOLODB.  load_order will not&lt;br/&gt;||                    update the staging table - run it before load_service.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   PROCEDURE LOAD(&lt;br/&gt;      p_audit_user_i   IN   VARCHAR2,&lt;br/&gt;      p_max_thread         NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread  NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize           NUMBER DEFAULT 1000&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact_item_order (&lt;br/&gt;      p_process_rec_i               IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_order_no                      IN              t_bus_interact_item_vnt_xref.order_num%TYPE,&lt;br/&gt;      p_serv_id                         IN              t_bus_interact_item_vnt_xref.serv_id%TYPE,&lt;br/&gt;      p_bus_interact_item_type_cd   IN              t_bus_interact_item.bus_interact_item_type_cd%TYPE,&lt;br/&gt;      p_row_io                      IN OUT NOCOPY   t_bus_interact_item%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_billing_prod_inst (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_billing_prod_inst%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN;&lt;br/&gt;END PKG_VNT_RECON_OCI_CUR_ITEM;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_RECON_OCI_CUR_ITEM" id="78E5CB87-BBDB-5CCE-D335-6DC917114F69">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_RECON_OCI_CUR_ITEM</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:19:34 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_VNT_RECON_OCI_CUR_ITEM&lt;br/&gt;IS&lt;br/&gt;/**********************************************************************************************************************&lt;br/&gt;||  Program Name    : PKG_VNT_RECON_OCI_CUR_ITEM&lt;br/&gt;||  Created By      : Cognizant&lt;br/&gt;||  Created Date    : 29-Dec-2014&lt;br/&gt;||  Subject Area    : Product&lt;br/&gt;||  Description     : The package PKG_VNT_RECON_OCI_CUR_ITEM controls the Reconciliation load of the&lt;br/&gt;||                    Vantage oci_cur_item table into SOLODB.  load_order will not&lt;br/&gt;||                    update the staging table - run it before load_service.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||  Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------------&lt;br/&gt;||   Cognizant         26-Jan-2015      Modified procedure load_order to add call to the reference table&lt;br/&gt;||                                      insert_bus_inter_itm_vnt_xref for Work Orders also.&lt;br/&gt;||                                      Modified the function get_bus_interact_item_order to include&lt;br/&gt;||                                      xref table for work orders also.&lt;br/&gt;||   Cognizant         02-Mar-2015      Added procedure update_staging_ord to update the Error records in the&lt;br/&gt;||                                      Delta table&lt;br/&gt;||   Cognizant         05-Mar-2015      Removed  bus_interact_item_type_cd from get_bus_interact function&lt;br/&gt;||   Cognizant         13-Mar-2015      Column mapping update code changes&lt;br/&gt;||   Cognizant         16-Mar-2015      Column mapping update code changes&lt;br/&gt;||   Cognizant         18-Mar-2015      Included condition to bypass the records with dummy order number&lt;br/&gt;||                                      Post production issue fix - Update on t_special_request_item_status&lt;br/&gt;||   Cognizant         27-Mar-2015      Corrected the Population logic of erroneous records of T_PROCESS_LOG_DETAIL&lt;br/&gt;||   Cognizant         07-Apr-2015      Modified cursor query to support ROWID based multi threading.&lt;br/&gt;||   Cognizant         07-Apr-2015      Code changes to remove the discrepancies between NRT/RRT , Initial Load and&lt;br/&gt;||                                      Reconciliation.&lt;br/&gt;||   Cognizant         10-Apr-2015      Trim included for character column in cursor query.&lt;br/&gt;||   Cognizant         14-Apr-2015      Inner join changed to left for the table t_busn_intrn_vnt_job_xref&lt;br/&gt;||   Cognizant         17-Apr-2015      Transformation logic of column item_status_oci modified.&lt;br/&gt;||   Cognizant         27-Apr-2015      Default value in the NVL operator modified in INSERT_PROD_ORDER_ITEM&lt;br/&gt;||   Cognizant         29-Apr-2015      Added TRUNC() function while doing the comparison between new and existing&lt;br/&gt;||                                      record values in INSERT_WORK_ORDER_ITEM&lt;br/&gt;||   Cognizant         15-MAY-2015      Batch Processing introduced as part of performance improvement&lt;br/&gt;||   Cognizant         20-May-2015      Included the Key column values in LOGGING and EXCEPTION Handling&lt;br/&gt;||   Binoy             24-Jun-2015      Populate the data into the column ORIG_BUS_INTERACT_ITEM_ID.T_BILLING_PROD_INST&lt;br/&gt;||                                      as part of XDW change&lt;br/&gt;**********************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   c_pkg_name          CONSTANT t_unit_name   := &apos;PKG_VNT_RECON_OCI_CUR_ITEM&apos;;&lt;br/&gt;   g_max_thread                 NUMBER                                   := 1;&lt;br/&gt;   g_reminder_thread            NUMBER                                   := 1;&lt;br/&gt;   g_batchsize                  NUMBER                                := 1000;&lt;br/&gt;   g_process_record_cnt         NUMBER                                   := 0;&lt;br/&gt;   g_error_record_cnt           NUMBER                                   := 0;&lt;br/&gt;   c_bulk_errors                EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;   l_current_recon_start_time   stg.recon_process_ctrl.recon_start_dttm%TYPE;&lt;br/&gt;&lt;br/&gt;   CURSOR cur_stg_oci_cur_item_svc&lt;br/&gt;   IS&lt;br/&gt;      SELECT oci.ROWID AS ID, oci.record_load_cd, 0 AS billing_prod_inst_id,&lt;br/&gt;             xref.account_id, oci.serv_id_oci AS source_system_id,&lt;br/&gt;             oci.serv_id_oci, oci.cust_acct_no_oci,&lt;br/&gt;             TRIM (oci.bill_cde_oci) AS billing_package_product_cd,&lt;br/&gt;             pack.billing_product_id AS billing_package_product_id,&lt;br/&gt;             TRIM (oci.serv_cde_oci) AS billing_service_product_cd,&lt;br/&gt;             serv.billing_product_id AS billing_service_product_id,&lt;br/&gt;             oci.aft_qty_oci AS billing_prod_inst_qty,&lt;br/&gt;             NVL (TRIM (oci.item_status_oci),&lt;br/&gt;                  &apos;U&apos;&lt;br/&gt;                 ) AS billing_prod_inst_status_cd,&lt;br/&gt;             TO_DATE (DECODE (oci.bill_start_dte_oci,&lt;br/&gt;                              pkg_utility.c_null_date, NULL,&lt;br/&gt;                              oci.bill_start_dte_oci&lt;br/&gt;                             )&lt;br/&gt;                     ) AS billing_start_dttm,&lt;br/&gt;             TO_DATE&lt;br/&gt;                (DECODE (oci.connect_dte_oci,&lt;br/&gt;                         pkg_utility.c_null_date, NULL,&lt;br/&gt;                         oci.connect_dte_oci&lt;br/&gt;                        )&lt;br/&gt;                ) AS blg_prod_inst_vld_st_dttm,&lt;br/&gt;             DECODE (oci.offer_id_oci,&lt;br/&gt;                     0, NULL,&lt;br/&gt;                     oci.offer_id_oci&lt;br/&gt;                    ) AS product_offering_id,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN oci.sys_oci = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd,&lt;br/&gt;             item_xref.bus_interact_item_id&lt;br/&gt;        FROM stg.vnt_oci_cur_item_rec_delta oci INNER JOIN t_account_vantage_xref xref&lt;br/&gt;             ON xref.sub_acct_num = oci.sub_acct_no_oci&lt;br/&gt;             LEFT OUTER JOIN t_billing_product pack&lt;br/&gt;             ON pack.billing_product_cd = oci.bill_cde_oci&lt;br/&gt;           AND pack.data_source_type_cd =&lt;br/&gt;                                 CASE&lt;br/&gt;                                    WHEN oci.sys_oci = 8313&lt;br/&gt;                                       THEN &apos;BRS&apos;&lt;br/&gt;                                    ELSE &apos;VNT&apos;&lt;br/&gt;                                 END&lt;br/&gt;             LEFT OUTER JOIN t_billing_product serv&lt;br/&gt;             ON serv.billing_product_cd = oci.serv_cde_oci&lt;br/&gt;           AND serv.data_source_type_cd =&lt;br/&gt;                                 CASE&lt;br/&gt;                                    WHEN oci.sys_oci = 8313&lt;br/&gt;                                       THEN &apos;BRS&apos;&lt;br/&gt;                                    ELSE &apos;VNT&apos;&lt;br/&gt;                                 END&lt;br/&gt;             LEFT OUTER JOIN t_bus_interact_item_vnt_xref item_xref&lt;br/&gt;             ON item_xref.order_num = oci.order_no_oci&lt;br/&gt;           AND item_xref.serv_id =&lt;br/&gt;                  oci.serv_id_oci&lt;br/&gt;       WHERE oci.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (oci.ROWID, LENGTH (oci.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   -- Staged OCI_CUR_ITEM for loading order items&lt;br/&gt;   CURSOR cur_stg_oci_cur_item_ord&lt;br/&gt;   IS&lt;br/&gt;      SELECT oci.ROWID AS ID, oci.record_load_cd, 0 AS bus_interact_item_id,&lt;br/&gt;             ord_xref.bus_interact_id, acct_xref.account_id,&lt;br/&gt;             job_xref.bus_interact_id job_bus_interact_id, oci.serv_id_oci,&lt;br/&gt;             oci.cust_acct_no_oci,&lt;br/&gt;             oci.order_no_oci || oci.serv_id_oci AS source_system_id,&lt;br/&gt;             oci.order_no_oci AS ord_no,&lt;br/&gt;             DECODE&lt;br/&gt;                (oci.job_seq_no_oci,&lt;br/&gt;                 0, r.request_type_cd,&lt;br/&gt;                 chtr.pkg_utility.c_request_type_cd_wrkord&lt;br/&gt;                ) AS bus_interact_item_type_cd,&lt;br/&gt;             oci.bef_qty_oci AS before_item_qty,&lt;br/&gt;             oci.aft_qty_oci AS after_item_qty,&lt;br/&gt;             TRIM (oci.bill_cde_oci) AS package_billing_product_cd,&lt;br/&gt;             TRIM (oci.serv_cde_oci) AS service_billing_product_cd,&lt;br/&gt;             pack.billing_product_id AS package_billing_product_id,&lt;br/&gt;             serv.billing_product_id AS service_billing_product_id,&lt;br/&gt;             TO_DATE (DECODE (oci.bill_from_dte_oci,&lt;br/&gt;                              pkg_utility.c_null_date, NULL,&lt;br/&gt;                              oci.bill_start_dte_oci&lt;br/&gt;                             )&lt;br/&gt;                     ) AS bill_start_dttm,&lt;br/&gt;             TRIM (oci.lob_act_oci) AS impacted_line_of_business_cd,&lt;br/&gt;             NVL (TRIM (oci.item_status_oci),&lt;br/&gt;                  &apos;U&apos;&lt;br/&gt;                 ) AS product_order_item_status_cd,&lt;br/&gt;             oci.job_seq_no_oci AS sequence_num,&lt;br/&gt;             TO_DATE (DECODE (oci.create_dte_oci,&lt;br/&gt;                              pkg_utility.c_null_date, NULL,&lt;br/&gt;                              oci.create_dte_oci&lt;br/&gt;                             )&lt;br/&gt;                     ) AS create_dttm,&lt;br/&gt;             CASE&lt;br/&gt;                WHEN oci.sys_oci = 8313&lt;br/&gt;                   THEN &apos;BRS&apos;&lt;br/&gt;                ELSE &apos;VNT&apos;&lt;br/&gt;             END AS data_source_type_cd&lt;br/&gt;        FROM stg.vnt_oci_cur_item_rec_delta oci INNER JOIN t_bus_inter_vantage_ord_xref ord_xref&lt;br/&gt;             ON ord_xref.ord_no = oci.order_no_oci&lt;br/&gt;             INNER JOIN t_bus_interact bi&lt;br/&gt;             ON bi.bus_interact_id = ord_xref.bus_interact_id&lt;br/&gt;             INNER JOIN t_request r&lt;br/&gt;             ON r.request_interaction_id = bi.bus_interact_id&lt;br/&gt;             INNER JOIN t_account_vantage_xref acct_xref&lt;br/&gt;             ON acct_xref.sub_acct_num = oci.sub_acct_no_oci&lt;br/&gt;             LEFT OUTER JOIN t_billing_product pack&lt;br/&gt;             ON pack.billing_product_cd = oci.bill_cde_oci&lt;br/&gt;           AND pack.data_source_type_cd =&lt;br/&gt;                                 CASE&lt;br/&gt;                                    WHEN oci.sys_oci = 8313&lt;br/&gt;                                       THEN &apos;BRS&apos;&lt;br/&gt;                                    ELSE &apos;VNT&apos;&lt;br/&gt;                                 END&lt;br/&gt;           AND pack.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_billing_product serv&lt;br/&gt;             ON serv.billing_product_cd = oci.serv_cde_oci&lt;br/&gt;           AND serv.data_source_type_cd =&lt;br/&gt;                                 CASE&lt;br/&gt;                                    WHEN oci.sys_oci = 8313&lt;br/&gt;                                       THEN &apos;BRS&apos;&lt;br/&gt;                                    ELSE &apos;VNT&apos;&lt;br/&gt;                                 END&lt;br/&gt;           AND serv.record_stat = pkg_utility.c_record_active&lt;br/&gt;             LEFT OUTER JOIN t_busn_intrn_vnt_job_xref job_xref&lt;br/&gt;             ON job_xref.order_num = oci.order_no_oci&lt;br/&gt;           AND job_xref.job_seq_num = oci.job_seq_no_oci&lt;br/&gt;           AND oci.job_seq_no_oci &gt; 0&lt;br/&gt;       WHERE oci.record_load_cd IS NULL&lt;br/&gt;         AND MOD (ASCII (SUBSTR (oci.ROWID, LENGTH (oci.ROWID), 1)),&lt;br/&gt;                  g_max_thread&lt;br/&gt;                 ) = (g_reminder_thread - 1);&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl_svc IS TABLE OF cur_stg_oci_cur_item_svc%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl_ord IS TABLE OF cur_stg_oci_cur_item_ord%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   TYPE t_ptr_tbl IS TABLE OF PLS_INTEGER&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE insert_billing_prod_inst (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_svc%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_bus_interact_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_bus_inter_itm_vnt_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i                     VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_ord (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_svc (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_oci_cur_item_svc%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_service (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_order (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_item_for_order (&lt;br/&gt;      p_process_rec_i       IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i       IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_select_order_type   IN              t_bus_interact.bus_interact_type_cd%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2;&lt;br/&gt;&lt;br/&gt;   PROCEDURE LOAD (&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2,&lt;br/&gt;      p_max_thread             NUMBER DEFAULT 1,&lt;br/&gt;      p_reminder_thread        NUMBER DEFAULT 1,&lt;br/&gt;      p_batchsize              NUMBER DEFAULT 1000&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure LOAD&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The procedure LOAD will execute the main procedures i.e. load_order&lt;br/&gt;      ||                       and load_service by logging the details.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name                     := &apos;LOAD&apos;;&lt;br/&gt;      l_process_name                t_process_log.process_name%TYPE&lt;br/&gt;                                                                := c_pkg_name;&lt;br/&gt;      l_process_rec                 pkg_logging.t_process_rec;&lt;br/&gt;      l_error_msg                   VARCHAR2 (512);&lt;br/&gt;      exp_recon_not_started         EXCEPTION;&lt;br/&gt;      exp_multiple_logs_for_recon   EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      g_max_thread := p_max_thread;&lt;br/&gt;      g_reminder_thread := p_reminder_thread;&lt;br/&gt;      g_batchsize := p_batchsize;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;P_AUDIT_USER_I = &apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         SELECT recon_start_dttm&lt;br/&gt;           INTO l_current_recon_start_time&lt;br/&gt;           FROM stg.recon_process_ctrl&lt;br/&gt;          WHERE record_stat = &apos;I&apos;;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN NO_DATA_FOUND&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_recon_not_started;&lt;br/&gt;         WHEN TOO_MANY_ROWS&lt;br/&gt;         THEN&lt;br/&gt;            RAISE exp_multiple_logs_for_recon;&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      load_order (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                  p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                 );&lt;br/&gt;      load_service (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                    p_audit_user_i       =&gt; p_audit_user_i&lt;br/&gt;                   );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN exp_recon_not_started&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, EXCEPTION = &apos;&lt;br/&gt;             || &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;             (-20001,&lt;br/&gt;              &apos;NO ACTIVE RECONCILIATION ENTRY FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;             );&lt;br/&gt;      WHEN exp_multiple_logs_for_recon&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;            (l_process_rec,&lt;br/&gt;                l_proc_name&lt;br/&gt;             || &apos;, EXCEPTION = &apos;&lt;br/&gt;             || &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error&lt;br/&gt;            (-20002,&lt;br/&gt;             &apos;MULTIPLE ACTIVE RECONCILIATION ENTRIES FOUND IN STG.RECON_PROCESS_CTRL&apos;&lt;br/&gt;            );&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         l_error_msg := SUBSTR (SQLERRM, 1, 512);&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_process_error&lt;br/&gt;                               );&lt;br/&gt;         raise_application_error (-20003, &apos; EXCEPTION = &apos; || l_error_msg);&lt;br/&gt;   END LOAD;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_service (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_service&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The procedure load_service will load the oci_items as account services. An inner join&lt;br/&gt;      ||                       is done to t_account_vantage_xref xref, the assumption being that the accounts should&lt;br/&gt;      ||                       have been loaded already, and that all current items map to an account.&lt;br/&gt;      ||                       NOTE: Check for any unprocessed (record_load_cd is null) after the initial load&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD_SERVICE&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl_svc;&lt;br/&gt;      l_filter_ptr     t_ptr_tbl;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_oci_cur_item_svc%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_oci_cur_item_svc;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_oci_cur_item_svc;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_oci_cur_item_svc&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               insert_billing_prod_inst (p_process_rec_i,&lt;br/&gt;                                         l_cursor_data (i),&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;               update_staging_svc (p_process_rec_i,&lt;br/&gt;                                   l_cursor_data (i),&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_oci_cur_item_svc;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_oci_cur_item_svc%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_oci_cur_item_svc;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END load_service;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_order (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure load_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE load_order will load the oci_items into the corresponding &apos;order&apos;&lt;br/&gt;      ||                       item tables.  There won&apos;t always be an existing order for the item.&lt;br/&gt;      ||                       In that case, it won&apos;t be loaded.&lt;br/&gt;      ||                       NOTE: load_order will not update the status on the staging&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;LOAD_ORDER&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_cursor_data    t_cursor_data_tbl_ord;&lt;br/&gt;      l_filter_ptr     VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_oci_cur_item_ord%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_oci_cur_item_ord;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_oci_cur_item_ord;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_oci_cur_item_ord&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT g_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               -- Insert bus_interact_item&lt;br/&gt;               insert_bus_interact_item (p_process_rec_i,&lt;br/&gt;                                         l_cursor_data (i),&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;               l_filter_ptr := &apos;N&apos;;&lt;br/&gt;               -- PROD_ORDER ITEMS&lt;br/&gt;               l_filter_ptr :=&lt;br/&gt;                  filter_item_for_order&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                     l_cursor_data (i),&lt;br/&gt;                                     chtr.pkg_utility.c_request_type_cd_prdord&lt;br/&gt;                                    );&lt;br/&gt;&lt;br/&gt;               IF (l_filter_ptr = &apos;Y&apos;)&lt;br/&gt;               THEN&lt;br/&gt;                  insert_bus_inter_itm_vnt_xref (p_process_rec_i,&lt;br/&gt;                                                 l_cursor_data (i),&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;                  insert_prod_order_item (p_process_rec_i,&lt;br/&gt;                                          l_cursor_data (i),&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;                  insert_prod_order_item_status (p_process_rec_i,&lt;br/&gt;                                                 l_cursor_data (i),&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               l_filter_ptr := &apos;N&apos;;&lt;br/&gt;               -- SPECIAL REQUEST ITEMS&lt;br/&gt;               l_filter_ptr :=&lt;br/&gt;                  filter_item_for_order&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                     l_cursor_data (i),&lt;br/&gt;                                     chtr.pkg_utility.c_request_type_cd_splreq&lt;br/&gt;                                    );&lt;br/&gt;&lt;br/&gt;               IF (l_filter_ptr = &apos;Y&apos;)&lt;br/&gt;               THEN&lt;br/&gt;                  insert_bus_inter_itm_vnt_xref (p_process_rec_i,&lt;br/&gt;                                                 l_cursor_data (i),&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;                  insert_special_req_item (p_process_rec_i,&lt;br/&gt;                                           l_cursor_data (i),&lt;br/&gt;                                           p_audit_user_i&lt;br/&gt;                                          );&lt;br/&gt;                  insert_special_req_item_status (p_process_rec_i,&lt;br/&gt;                                                  l_cursor_data (i),&lt;br/&gt;                                                  p_audit_user_i&lt;br/&gt;                                                 );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               l_filter_ptr := &apos;N&apos;;&lt;br/&gt;               -- WORK_ORDER_ITEM&lt;br/&gt;               l_filter_ptr :=&lt;br/&gt;                  filter_item_for_order&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                     l_cursor_data (i),&lt;br/&gt;                                     chtr.pkg_utility.c_request_type_cd_wrkord&lt;br/&gt;                                    );&lt;br/&gt;&lt;br/&gt;               IF (l_filter_ptr = &apos;Y&apos;)&lt;br/&gt;               THEN&lt;br/&gt;                  insert_bus_inter_itm_vnt_xref (p_process_rec_i,&lt;br/&gt;                                                 l_cursor_data (i),&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;                  insert_work_order_item (p_process_rec_i,&lt;br/&gt;                                          l_cursor_data (i),&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;                  insert_work_order_item_status (p_process_rec_i,&lt;br/&gt;                                                 l_cursor_data (i),&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               -- UPDATE_STAGING_ORD&lt;br/&gt;               update_staging_ord (p_process_rec_i,&lt;br/&gt;                                   l_cursor_data (i),&lt;br/&gt;                                   p_audit_user_i&lt;br/&gt;                                  );&lt;br/&gt;               --Comming the individual Transactions&lt;br/&gt;               COMMIT;&lt;br/&gt;            END LOOP;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN (l_cursor_data.COUNT () &lt; g_batchsize)&lt;br/&gt;               OR (pkg_utility.stopnow (c_pkg_name));&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_oci_cur_item_ord;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos; &apos; || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_oci_cur_item_ord%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_oci_cur_item_ord;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END load_order;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_billing_prod_inst (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_svc%ROWTYPE,&lt;br/&gt;                                                      --t_cursor_data_tbl_svc,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_billing_prod_inst&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE insert_billing_prod_inst will Insert billing_prod_inst&lt;br/&gt;      ||                       rows from staging data&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name     := &apos;INSERT_BILLING_PROD_INST&apos;;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_exist_count             NUMBER;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_billing_prod_inst       t_billing_prod_inst%ROWTYPE;&lt;br/&gt;      l_billing_prod_inst_id    t_billing_prod_inst.billing_prod_inst_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      --        pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                                l_proc_name&lt;br/&gt;      --                             || &apos; &apos;&lt;br/&gt;      --                             || pkg_utility.c_proc_start_text&lt;br/&gt;      --                             || &apos;, cnt = &apos;&lt;br/&gt;      --                             || p_cursor_data_io.COUNT ()&lt;br/&gt;      --                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_action_perform_record := NULL;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_billing_prod_inst_id := NULL;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos;, &apos;&lt;br/&gt;                               || pkg_utility.c_proc_start_text&lt;br/&gt;                               || &apos;ACCOUNT_ID  = &apos;&lt;br/&gt;                               || p_cursor_data_io.account_id&lt;br/&gt;                               || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                               || p_cursor_data_io.billing_service_product_cd&lt;br/&gt;                               || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                               || p_cursor_data_io.source_system_id&lt;br/&gt;                              );&lt;br/&gt;            l_billing_prod_inst.account_id := p_cursor_data_io.account_id;&lt;br/&gt;            l_billing_prod_inst.billing_service_product_cd :=&lt;br/&gt;                                   p_cursor_data_io.billing_service_product_cd;&lt;br/&gt;            l_billing_prod_inst.source_system_id :=&lt;br/&gt;                                             p_cursor_data_io.source_system_id;&lt;br/&gt;&lt;br/&gt;            IF (get_billing_prod_inst (p_process_rec_i, l_billing_prod_inst)&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_billing_prod_inst_id :=&lt;br/&gt;                                     l_billing_prod_inst.billing_prod_inst_id;&lt;br/&gt;&lt;br/&gt;               IF (    NVL (l_billing_prod_inst.modified_dttm,&lt;br/&gt;                            pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt; l_current_recon_start_time&lt;br/&gt;                   AND (   NVL (l_billing_prod_inst.data_source_type_cd,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_billing_prod_inst.source_system_id,&lt;br/&gt;                                pkg_utility.c_recon_null_string&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.source_system_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_string&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL&lt;br/&gt;                              (l_billing_prod_inst.billing_package_product_id,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                              NVL&lt;br/&gt;                                 (p_cursor_data_io.billing_package_product_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 )&lt;br/&gt;                        OR NVL&lt;br/&gt;                              (l_billing_prod_inst.billing_package_product_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                              NVL&lt;br/&gt;                                 (p_cursor_data_io.billing_package_product_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 )&lt;br/&gt;                        OR NVL&lt;br/&gt;                              (l_billing_prod_inst.billing_service_product_id,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                              NVL&lt;br/&gt;                                 (p_cursor_data_io.billing_service_product_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 )&lt;br/&gt;                        OR NVL&lt;br/&gt;                              (l_billing_prod_inst.billing_service_product_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                              NVL&lt;br/&gt;                                 (p_cursor_data_io.billing_service_product_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 )&lt;br/&gt;                        OR NVL (l_billing_prod_inst.account_id,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.account_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_number&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_billing_prod_inst.product_offering_id,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.product_offering_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_number&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL&lt;br/&gt;                              (l_billing_prod_inst.billing_prod_inst_status_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                              NVL&lt;br/&gt;                                 (p_cursor_data_io.billing_prod_inst_status_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 )&lt;br/&gt;                        OR NVL (l_billing_prod_inst.blg_prod_inst_vld_st_dttm,&lt;br/&gt;                                pkg_utility.c_recon_null_date&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.blg_prod_inst_vld_st_dttm,&lt;br/&gt;                                   pkg_utility.c_recon_null_date&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_billing_prod_inst.billing_start_dttm,&lt;br/&gt;                                pkg_utility.c_recon_null_date&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.billing_start_dttm,&lt;br/&gt;                                   pkg_utility.c_recon_null_date&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL (l_billing_prod_inst.billing_prod_inst_qty,&lt;br/&gt;                                pkg_utility.c_recon_null_number&lt;br/&gt;                               ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.billing_prod_inst_qty,&lt;br/&gt;                                   pkg_utility.c_recon_null_number&lt;br/&gt;                                  )&lt;br/&gt;                        OR NVL&lt;br/&gt;                              (l_billing_prod_inst.origin_bus_interact_item_id,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                              NVL (p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                                   pkg_utility.c_recon_null_number&lt;br/&gt;                                  )&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_billing_prod_inst&lt;br/&gt;                     SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                         source_system_id = p_cursor_data_io.source_system_id,&lt;br/&gt;                         billing_package_product_id =&lt;br/&gt;                                   p_cursor_data_io.billing_package_product_id,&lt;br/&gt;                         billing_package_product_cd =&lt;br/&gt;                                   p_cursor_data_io.billing_package_product_cd,&lt;br/&gt;                         billing_service_product_id =&lt;br/&gt;                                   p_cursor_data_io.billing_service_product_id,&lt;br/&gt;                         billing_service_product_cd =&lt;br/&gt;                                   p_cursor_data_io.billing_service_product_cd,&lt;br/&gt;                         account_id = p_cursor_data_io.account_id,&lt;br/&gt;                         product_offering_id =&lt;br/&gt;                                          p_cursor_data_io.product_offering_id,&lt;br/&gt;                         billing_prod_inst_status_cd =&lt;br/&gt;                                  p_cursor_data_io.billing_prod_inst_status_cd,&lt;br/&gt;                         blg_prod_inst_vld_st_dttm =&lt;br/&gt;                                    p_cursor_data_io.blg_prod_inst_vld_st_dttm,&lt;br/&gt;                         billing_start_dttm =&lt;br/&gt;                                           p_cursor_data_io.billing_start_dttm,&lt;br/&gt;                         billing_prod_inst_qty =&lt;br/&gt;                                        p_cursor_data_io.billing_prod_inst_qty,&lt;br/&gt;                         origin_bus_interact_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE billing_prod_inst_id =&lt;br/&gt;                                      l_billing_prod_inst.billing_prod_inst_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.data_source_type_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, SOURCE_SYSTEM_ID : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.source_system_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.source_system_id&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BILLING_PACKAGE_PRODUCT_ID : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.billing_package_product_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.billing_package_product_id&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BILLING_PACKAGE_PRODUCT_CD : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.billing_package_product_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.billing_package_product_cd&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BILLING_SERVICE_PRODUCT_ID : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.billing_service_product_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.billing_service_product_id&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BILLING_SERVICE_PRODUCT_CD : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.billing_service_product_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.billing_service_product_cd&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, ACCOUNT_ID : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.account_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.account_id&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, PRODUCT_OFFERING_ID : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.product_offering_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.product_offering_id&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BILLING_PROD_INST_STATUS_CD : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.billing_prod_inst_status_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.billing_prod_inst_status_cd&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BLG_PROD_INST_VLD_ST_DTTM : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.blg_prod_inst_vld_st_dttm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.blg_prod_inst_vld_st_dttm&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BILLING_START_DTTM : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.billing_start_dttm&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.billing_start_dttm&lt;br/&gt;                     || &apos; ), &apos;&lt;br/&gt;                     || &apos;, BILLING_PROD_INST_QTY : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.billing_prod_inst_qty&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.billing_prod_inst_qty&lt;br/&gt;                     || &apos; )&apos;&lt;br/&gt;                     || &apos;, ORIGIN_BUS_INTERACT_ITEM_ID : (&apos;&lt;br/&gt;                     || l_billing_prod_inst.origin_bus_interact_item_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                     || &apos; )&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;               l_billing_prod_inst_id :=&lt;br/&gt;                  da_billing_prod_inst.ADD&lt;br/&gt;                     (process_rec                      =&gt; p_process_rec_i,&lt;br/&gt;                      seasonal_start_dttm              =&gt; NULL,&lt;br/&gt;                      seasonal_end_dttm                =&gt; NULL,&lt;br/&gt;                      data_source_type_cd              =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      source_system_id                 =&gt; p_cursor_data_io.source_system_id,&lt;br/&gt;                      origin_bus_interact_item_id      =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      billing_package_product_id       =&gt; p_cursor_data_io.billing_package_product_id,&lt;br/&gt;                      billing_package_product_cd       =&gt; p_cursor_data_io.billing_package_product_cd,&lt;br/&gt;                      billing_service_product_id       =&gt; p_cursor_data_io.billing_package_product_id,&lt;br/&gt;                      billing_service_product_cd       =&gt; p_cursor_data_io.billing_service_product_cd,&lt;br/&gt;                      account_id                       =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                      product_offering_id              =&gt; p_cursor_data_io.product_offering_id,&lt;br/&gt;                      billing_prod_inst_status_cd      =&gt; p_cursor_data_io.billing_prod_inst_status_cd,&lt;br/&gt;                      blg_prod_inst_vld_st_dttm        =&gt; p_cursor_data_io.blg_prod_inst_vld_st_dttm,&lt;br/&gt;                      billing_start_dttm               =&gt; p_cursor_data_io.billing_start_dttm,&lt;br/&gt;                      billing_prod_inst_qty            =&gt; p_cursor_data_io.billing_prod_inst_qty,&lt;br/&gt;                      audit_user                       =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            p_cursor_data_io.billing_prod_inst_id := l_billing_prod_inst_id;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos;ACCOUNT_ID  = &apos;&lt;br/&gt;                  || p_cursor_data_io.account_id&lt;br/&gt;                  || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                  || p_cursor_data_io.billing_service_product_cd&lt;br/&gt;                  || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.source_system_id&lt;br/&gt;                  || &apos;, BILLING_PROD_INST_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.billing_prod_inst_id&lt;br/&gt;                  || &apos;, SERV_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.serv_id_oci&lt;br/&gt;                  || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                  || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                                     (p_process_rec_i,&lt;br/&gt;                                                      &apos;T_BILLING_PROD_INST&apos;,&lt;br/&gt;                                                      l_table_key,&lt;br/&gt;                                                      l_modif_val_string,&lt;br/&gt;                                                      NULL,&lt;br/&gt;                                                      l_action_perform_record,&lt;br/&gt;                                                      p_audit_user_i&lt;br/&gt;                                                     );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;ACCOUNT_ID  = &apos;&lt;br/&gt;                                || p_cursor_data_io.account_id&lt;br/&gt;                                || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                                || p_cursor_data_io.billing_service_product_cd&lt;br/&gt;                                || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                || p_cursor_data_io.source_system_id&lt;br/&gt;                               );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                              (p_process_rec_i,&lt;br/&gt;                                  l_proc_name&lt;br/&gt;                               || &apos; ACCOUNT_ID  = &apos;&lt;br/&gt;                               || p_cursor_data_io.account_id&lt;br/&gt;                               || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                               || p_cursor_data_io.billing_service_product_cd&lt;br/&gt;                               || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                               || p_cursor_data_io.source_system_id&lt;br/&gt;                               || &apos;, BILLING_PROD_INST_ID = &apos;&lt;br/&gt;                               || p_cursor_data_io.billing_prod_inst_id&lt;br/&gt;                               || &apos;, EXCEPTION = &apos;&lt;br/&gt;                               || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                              );&lt;br/&gt;      END;&lt;br/&gt;   --        pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                                l_proc_name&lt;br/&gt;   --                             || &apos; &apos;&lt;br/&gt;   --                             || pkg_utility.c_proc_end_text&lt;br/&gt;   --                             || &apos;, cnt = &apos;&lt;br/&gt;   --                             || p_cursor_data_io.COUNT ()&lt;br/&gt;   --                            );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_billing_prod_inst;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_bus_interact_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_bus_interact_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :  This PROCEDURE insert_bus_interact_item will Insert t_bus_interact_item data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                    t_unit_name&lt;br/&gt;                                                := &apos;INSERT_BUS_INTERACT_ITEM&apos;;&lt;br/&gt;      l_bus_interact_item            t_bus_interact_item%ROWTYPE;&lt;br/&gt;      l_bus_interact_item_id         t_bus_interact_item.bus_interact_item_id%TYPE;&lt;br/&gt;      l_bus_interact_id              t_bus_interact_item.bus_interact_id%TYPE;&lt;br/&gt;      l_systimestamp                 TIMESTAMP;&lt;br/&gt;      l_action_perform_record        stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string             stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                    stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_bus_interact_id_miss_table   VARCHAR2 (30);&lt;br/&gt;      exp_null_bus_interact_id       EXCEPTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      --      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                                l_proc_name&lt;br/&gt;      --                             || &apos; &apos;&lt;br/&gt;      --                             || pkg_utility.c_proc_start_text&lt;br/&gt;      --                             || &apos;, cnt = &apos;&lt;br/&gt;      --                             || p_cursor_data_io.COUNT ()&lt;br/&gt;      --                            );&lt;br/&gt;      BEGIN&lt;br/&gt;         l_action_perform_record := NULL;&lt;br/&gt;         l_modif_val_string := NULL;&lt;br/&gt;         l_table_key := NULL;&lt;br/&gt;         l_bus_interact_item_id := NULL;&lt;br/&gt;         l_bus_interact_id := NULL;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_start_text&lt;br/&gt;                                || &apos;, order_no = &apos;&lt;br/&gt;                                || p_cursor_data_io.ord_no&lt;br/&gt;                                || &apos;, serv_id = &apos;&lt;br/&gt;                                || p_cursor_data_io.serv_id_oci&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;         THEN&lt;br/&gt;            SELECT DECODE (p_cursor_data_io.bus_interact_item_type_cd,&lt;br/&gt;                           chtr.pkg_utility.c_request_type_cd_wrkord, p_cursor_data_io.job_bus_interact_id,&lt;br/&gt;                           p_cursor_data_io.bus_interact_id&lt;br/&gt;                          ),&lt;br/&gt;                   DECODE (p_cursor_data_io.bus_interact_item_type_cd,&lt;br/&gt;                           chtr.pkg_utility.c_request_type_cd_wrkord, &apos;T_BUSN_INTRN_VNT_JOB_XREF&apos;,&lt;br/&gt;                           &apos;T_BUS_INTER_VANTAGE_ORD_XREF&apos;&lt;br/&gt;                          )&lt;br/&gt;              INTO l_bus_interact_id,&lt;br/&gt;                   l_bus_interact_id_miss_table&lt;br/&gt;              FROM DUAL;&lt;br/&gt;&lt;br/&gt;            IF l_bus_interact_id IS NULL&lt;br/&gt;            THEN&lt;br/&gt;               RAISE exp_null_bus_interact_id;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF (get_bus_interact_item_order&lt;br/&gt;                                  (p_process_rec_i,&lt;br/&gt;                                   p_cursor_data_io.ord_no,&lt;br/&gt;                                   p_cursor_data_io.serv_id_oci,&lt;br/&gt;                                   p_cursor_data_io.bus_interact_item_type_cd,&lt;br/&gt;                                   l_bus_interact_item&lt;br/&gt;                                  )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_bus_interact_item_id :=&lt;br/&gt;                                     l_bus_interact_item.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;               IF     NVL (l_bus_interact_item.modified_dttm,&lt;br/&gt;                           pkg_utility.c_recon_null_date&lt;br/&gt;                          ) &lt; l_current_recon_start_time&lt;br/&gt;                  AND (   NVL (l_bus_interact_item.data_source_type_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                             NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 )&lt;br/&gt;                       OR NVL (l_bus_interact_item.source_system_id,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                             NVL (p_cursor_data_io.source_system_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 )&lt;br/&gt;                       OR NVL (l_bus_interact_item.bus_interact_id,&lt;br/&gt;                               pkg_utility.c_recon_null_number&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                             NVL (l_bus_interact_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 )&lt;br/&gt;                       OR NVL (l_bus_interact_item.bus_interact_item_type_cd,&lt;br/&gt;                               pkg_utility.c_recon_null_string&lt;br/&gt;                              ) &lt;&gt;&lt;br/&gt;                             NVL (p_cursor_data_io.bus_interact_item_type_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 )&lt;br/&gt;                      )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_bus_interact_item&lt;br/&gt;                     SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                         source_system_id = p_cursor_data_io.source_system_id,&lt;br/&gt;                         bus_interact_id = l_bus_interact_id,&lt;br/&gt;                         bus_interact_item_type_cd =&lt;br/&gt;                                    p_cursor_data_io.bus_interact_item_type_cd,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active&lt;br/&gt;                   WHERE bus_interact_item_id = l_bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                  l_modif_val_string :=&lt;br/&gt;                        &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                     || l_bus_interact_item.data_source_type_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                     || &apos;)&apos;&lt;br/&gt;                     || &apos;, SOURCE_SYSTEM_ID : (&apos;&lt;br/&gt;                     || l_bus_interact_item.source_system_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.source_system_id&lt;br/&gt;                     || &apos;)&apos;&lt;br/&gt;                     || &apos;, BUS_INTERACT_ID : (&apos;&lt;br/&gt;                     || l_bus_interact_item.bus_interact_id&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || l_bus_interact_id&lt;br/&gt;                     || &apos;)&apos;&lt;br/&gt;                     || &apos;, BUS_INTERACT_ITEM_TYPE_CD : (&apos;&lt;br/&gt;                     || l_bus_interact_item.bus_interact_item_type_cd&lt;br/&gt;                     || &apos; =&gt; &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_type_cd&lt;br/&gt;                     || &apos;)&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               l_bus_interact_item_id :=&lt;br/&gt;                  da_bus_interact_item.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      data_source_type_cd            =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      source_system_id               =&gt; p_cursor_data_io.source_system_id,&lt;br/&gt;                      bus_interact_id                =&gt; l_bus_interact_id,&lt;br/&gt;                      bus_interact_item_type_cd      =&gt; p_cursor_data_io.bus_interact_item_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               l_action_perform_record := pkg_utility.c_recon_insert_perform;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            p_cursor_data_io.bus_interact_item_id := l_bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;            IF (l_action_perform_record IN&lt;br/&gt;                   (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                    pkg_utility.c_recon_update_perform&lt;br/&gt;                   )&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               l_table_key :=&lt;br/&gt;                     &apos; BUS_INTERACT_ITEM_ID = &apos;&lt;br/&gt;                  || l_bus_interact_item_id&lt;br/&gt;                  || &apos;, ORD_NO = &apos;&lt;br/&gt;                  || p_cursor_data_io.ord_no&lt;br/&gt;                  || &apos;, SERV_ID = &apos;&lt;br/&gt;                  || p_cursor_data_io.serv_id_oci&lt;br/&gt;                  || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                  || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;               pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_BUS_INTERACT_ITEM&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, order_no = &apos;&lt;br/&gt;                                || p_cursor_data_io.ord_no&lt;br/&gt;                                || &apos;, serv_id = &apos;&lt;br/&gt;                                || p_cursor_data_io.serv_id_oci&lt;br/&gt;                               );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN exp_null_bus_interact_id&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                   (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, ORD_NO = &apos;&lt;br/&gt;                                    || p_cursor_data_io.ord_no&lt;br/&gt;                                    || &apos;, SERV_ID_OCI = &apos;&lt;br/&gt;                                    || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || &apos; BUS_INTERACT_ITEM_ID is missing in &apos;&lt;br/&gt;                                    || l_bus_interact_id_miss_table&lt;br/&gt;                                    || &apos; Table&apos;&lt;br/&gt;                                   );&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, BUS_INTERACT_ITEM_ID = &apos;&lt;br/&gt;                                       || l_bus_interact_item_id&lt;br/&gt;                                       || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                       || p_cursor_data_io.ord_no&lt;br/&gt;                                       || &apos;, SERV_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   --  pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                            l_proc_name&lt;br/&gt;   --                         || &apos; &apos;&lt;br/&gt;   --                         || pkg_utility.c_proc_end_text&lt;br/&gt;   --                         || &apos;, cnt = &apos;&lt;br/&gt;   --                         || p_cursor_data_io.COUNT ()&lt;br/&gt;   --                        );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_bus_interact_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_bus_inter_itm_vnt_xref (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : INSERT_BUS_INTER_ITM_VNT_XREF&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : The PROCEDURE insert_bus_inter_itm_vnt_xref will load the table t_bus_interact_item_vnt_xref.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name           t_unit_name    := &apos;INSERT_BUS_INTER_ITM_VNT_XREF&apos;;&lt;br/&gt;      l_errors              NUMBER;&lt;br/&gt;      l_coll_idx            PLS_INTEGER;&lt;br/&gt;      l_systimestamp        TIMESTAMP;&lt;br/&gt;      l_bus_interact_item   t_bus_interact_item%ROWTYPE;&lt;br/&gt;      l_tgt_order_num       t_bus_interact_item_vnt_xref.order_num%TYPE;&lt;br/&gt;      l_tgt_serv_id         t_bus_interact_item_vnt_xref.serv_id%TYPE;&lt;br/&gt;      l_table_key           stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_exist_count         NUMBER;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                              l_proc_name&lt;br/&gt;                           || &apos; &apos;&lt;br/&gt;                           || pkg_utility.c_proc_start_text&lt;br/&gt;                          );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ORD_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos; , SERV_ID_OCI = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;            THEN&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT order_num, serv_id&lt;br/&gt;                    INTO l_tgt_order_num, l_tgt_serv_id&lt;br/&gt;                    FROM t_bus_interact_item_vnt_xref&lt;br/&gt;                   WHERE order_num = p_cursor_data_io.ord_no&lt;br/&gt;                     AND serv_id = p_cursor_data_io.serv_id_oci&lt;br/&gt;                     AND bus_interact_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count = 0)&lt;br/&gt;               THEN&lt;br/&gt;                  da_bus_interact_item_vnt_xref.ADD&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      order_num                      =&gt; p_cursor_data_io.ord_no,&lt;br/&gt;                      serv_id                        =&gt; p_cursor_data_io.serv_id_oci,&lt;br/&gt;                      bus_interact_item_id           =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      bus_interact_item_type_cd      =&gt; p_cursor_data_io.bus_interact_item_type_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;ORD_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.ord_no&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                          (p_process_rec_i,&lt;br/&gt;                                           &apos;T_BUS_INTERACT_ITEM_VNT_XREF&apos;,&lt;br/&gt;                                           l_table_key,&lt;br/&gt;                                           NULL,&lt;br/&gt;                                           NULL,&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform,&lt;br/&gt;                                           p_audit_user_i&lt;br/&gt;                                          );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, ORD_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos; , SERV_ID_OCI = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ORD_NO = &apos;&lt;br/&gt;                                       || p_cursor_data_io.ord_no&lt;br/&gt;                                       || &apos;, SERV_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                           l_proc_name&lt;br/&gt;                        || &apos; &apos;&lt;br/&gt;                        || pkg_utility.c_proc_end_text&lt;br/&gt;                       );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_bus_inter_itm_vnt_xref;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_prod_order_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE insert_prod_order_item will Insert t_prod_order_item data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name     := &apos;INSERT_PROD_ORDER_ITEM&apos;;&lt;br/&gt;      l_errors                    NUMBER;&lt;br/&gt;      l_coll_idx                  PLS_INTEGER;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_tgt_prod_order_item_row   t_prod_order_item%ROWTYPE;&lt;br/&gt;      l_exist_count               NUMBER;&lt;br/&gt;      l_action_perform_record     stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string          stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                 stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_filter_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                   || &apos;, PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;            THEN&lt;br/&gt;               l_exist_count := 1;&lt;br/&gt;               l_action_perform_record := NULL;&lt;br/&gt;               l_modif_val_string := NULL;&lt;br/&gt;               l_table_key := NULL;&lt;br/&gt;&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT *&lt;br/&gt;                    INTO l_tgt_prod_order_item_row&lt;br/&gt;                    FROM t_prod_order_item&lt;br/&gt;                   WHERE product_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF     NVL (l_tgt_prod_order_item_row.modified_dttm,&lt;br/&gt;                              pkg_utility.c_recon_null_dttm&lt;br/&gt;                             ) &lt; l_current_recon_start_time&lt;br/&gt;                     AND (   NVL&lt;br/&gt;                                (l_tgt_prod_order_item_row.data_source_type_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                     pkg_utility.c_recon_null_string&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_prod_order_item_row.product_order_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.bus_interact_id,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_prod_order_item_row.account_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.account_id,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_prod_order_item_row.before_item_qty,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.before_item_qty,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_prod_order_item_row.after_item_qty,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.after_item_qty,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_prod_order_item_row.package_billing_product_id,&lt;br/&gt;                                 pkg_utility.c_recon_null_number&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                                    pkg_utility.c_recon_null_number&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_prod_order_item_row.package_billing_product_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_prod_order_item_row.service_billing_product_id,&lt;br/&gt;                                 pkg_utility.c_recon_null_number&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                                    pkg_utility.c_recon_null_number&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_prod_order_item_row.service_billing_product_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL (l_tgt_prod_order_item_row.bill_start_dttm,&lt;br/&gt;                                  pkg_utility.c_recon_null_dttm&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.bill_start_dttm,&lt;br/&gt;                                     pkg_utility.c_recon_null_dttm&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_prod_order_item_row.impacted_line_of_business_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                         )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_prod_order_item a&lt;br/&gt;                        SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            product_order_id =&lt;br/&gt;                                              p_cursor_data_io.bus_interact_id,&lt;br/&gt;                            account_id = p_cursor_data_io.account_id,&lt;br/&gt;                            before_item_qty = p_cursor_data_io.before_item_qty,&lt;br/&gt;                            after_item_qty = p_cursor_data_io.after_item_qty,&lt;br/&gt;                            package_billing_product_id =&lt;br/&gt;                                   p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                            package_billing_product_cd =&lt;br/&gt;                                   p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                            service_billing_product_id =&lt;br/&gt;                                   p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                            service_billing_product_cd =&lt;br/&gt;                                   p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                            bill_start_dttm = p_cursor_data_io.bill_start_dttm,&lt;br/&gt;                            impacted_line_of_business_cd =&lt;br/&gt;                                 p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE product_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, PRODUCT_ORDER_ID : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.product_order_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.bus_interact_id&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, ACCOUNT_ID : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.account_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.account_id&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, BEFORE_ITEM_QTY : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.before_item_qty&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.before_item_qty&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, AFTER_ITEM_QTY : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.after_item_qty&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.after_item_qty&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, PACKAGE_BILLING_PRODUCT_ID : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.package_billing_product_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.package_billing_product_id&lt;br/&gt;                        || &apos;, PACKAGE_BILLING_PRODUCT_CD : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.package_billing_product_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.package_billing_product_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, SERVICE_BILLING_PRODUCT_ID : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.service_billing_product_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.service_billing_product_id&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, SERVICE_BILLING_PRODUCT_CD : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.service_billing_product_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.service_billing_product_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, BILL_START_DTTM : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.bill_start_dttm&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.bill_start_dttm&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;, IMPACTED_LINE_OF_BUSINESS_CD : (&apos;&lt;br/&gt;                        || l_tgt_prod_order_item_row.impacted_line_of_business_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.impacted_line_of_business_cd&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_prod_order_item.ADD&lt;br/&gt;                     (p_process_rec_i,&lt;br/&gt;                      product_order_item_id             =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd               =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      product_order_id                  =&gt; p_cursor_data_io.bus_interact_id,&lt;br/&gt;                      account_id                        =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                      before_item_qty                   =&gt; p_cursor_data_io.before_item_qty,&lt;br/&gt;                      after_item_qty                    =&gt; p_cursor_data_io.after_item_qty,&lt;br/&gt;                      item_action_cd                    =&gt; NULL,&lt;br/&gt;                      package_billing_product_id        =&gt; p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                      package_billing_product_cd        =&gt; p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                      service_billing_product_id        =&gt; p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                      service_billing_product_cd        =&gt; p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                      billed_amt                        =&gt; NULL,&lt;br/&gt;                      bill_start_dttm                   =&gt; p_cursor_data_io.bill_start_dttm,&lt;br/&gt;                      account_impact_cd                 =&gt; NULL,&lt;br/&gt;                      line_of_business_impact_cd        =&gt; NULL,&lt;br/&gt;                      impacted_line_of_business_cd      =&gt; p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                      audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.ord_no&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_PROD_ORDER_ITEM&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                     || p_cursor_data_io.ord_no&lt;br/&gt;                                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                     || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.source_system_id&lt;br/&gt;                                     || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;      END;&lt;br/&gt;   --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                        l_proc_name&lt;br/&gt;   --                     || &apos; &apos;&lt;br/&gt;   --                     || pkg_utility.c_proc_end_text&lt;br/&gt;   --                     || &apos;, cnt = &apos;&lt;br/&gt;   --                     || p_filter_i.COUNT ()&lt;br/&gt;   --                    );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_prod_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_prod_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_prod_order_item_status&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE insert_prod_order_item_status will Insert t_prod_order_item_status data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name&lt;br/&gt;                                           := &apos;INSERT_PROD_ORDER_ITEM_STATUS&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_tgt_data_source_type_cd        t_prod_order_item_status.data_source_type_cd%TYPE;&lt;br/&gt;      l_tgt_produt_ord_item_statu_cd   t_prod_order_item_status.product_order_item_status_cd%TYPE;&lt;br/&gt;      l_tgt_modified_dttm              t_prod_order_item_status.modified_dttm%TYPE;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_exist_count                    NUMBER;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_filter_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            l_action_perform_record := NULL;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;            THEN&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT data_source_type_cd,&lt;br/&gt;                         product_order_item_status_cd, modified_dttm&lt;br/&gt;                    INTO l_tgt_data_source_type_cd,&lt;br/&gt;                         l_tgt_produt_ord_item_statu_cd, l_tgt_modified_dttm&lt;br/&gt;                    FROM t_prod_order_item_status&lt;br/&gt;                   WHERE product_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF     NVL (l_tgt_modified_dttm,&lt;br/&gt;                              pkg_utility.c_recon_null_date&lt;br/&gt;                             ) &lt; l_current_recon_start_time&lt;br/&gt;                     AND (   NVL (l_tgt_data_source_type_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                     pkg_utility.c_recon_null_string&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_produt_ord_item_statu_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                         )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_prod_order_item_status&lt;br/&gt;                        SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            product_order_item_status_cd =&lt;br/&gt;                                 p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE product_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;PRODUCT_ORDER_ITEM_STATUS_CD : (&apos;&lt;br/&gt;                        || l_tgt_produt_ord_item_statu_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.product_order_item_status_cd&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_prod_order_item_status.ADD&lt;br/&gt;                     (process_rec                       =&gt; p_process_rec_i,&lt;br/&gt;                      product_order_item_id             =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd               =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      product_order_item_status_cd      =&gt; p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                      audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.ord_no&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_PROD_ORDER_ITEM_STATUS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, PRODUCT_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                     || p_cursor_data_io.ord_no&lt;br/&gt;                                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                     || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.source_system_id&lt;br/&gt;                                     || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;      END;&lt;br/&gt;   --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                        l_proc_name&lt;br/&gt;   --                     || &apos; &apos;&lt;br/&gt;   --                     || pkg_utility.c_proc_end_text&lt;br/&gt;   --                     || &apos;, cnt = &apos;&lt;br/&gt;   --                     || p_filter_i.COUNT()&lt;br/&gt;   --                    );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_prod_order_item_status;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_special_req_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE insert_special_req_item will Insert t_special_request_item data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name      := &apos;INSERT_SPECIAL_REQ_ITEM&apos;;&lt;br/&gt;      l_errors                  NUMBER;&lt;br/&gt;      l_coll_idx                PLS_INTEGER;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_exist_count             NUMBER;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_tgt_exist_record        t_special_request_item%ROWTYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_filter_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_action_perform_record := NULL;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;            THEN&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT *&lt;br/&gt;                    INTO l_tgt_exist_record&lt;br/&gt;                    FROM t_special_request_item&lt;br/&gt;                   WHERE special_request_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF     NVL (l_tgt_exist_record.modified_dttm,&lt;br/&gt;                              pkg_utility.c_recon_null_date&lt;br/&gt;                             ) &lt; l_current_recon_start_time&lt;br/&gt;                     AND (   NVL (l_tgt_exist_record.data_source_type_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                     pkg_utility.c_recon_null_string&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.special_request_order_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.bus_interact_id,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.account_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.account_id,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.before_item_qty,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.before_item_qty,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.after_item_qty,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.after_item_qty,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.package_billing_product_id,&lt;br/&gt;                                 pkg_utility.c_recon_null_number&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                                    pkg_utility.c_recon_null_number&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.package_billing_product_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.service_billing_product_id,&lt;br/&gt;                                 pkg_utility.c_recon_null_number&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                                    pkg_utility.c_recon_null_number&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.service_billing_product_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.impacted_line_of_business_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                         )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_special_request_item&lt;br/&gt;                        SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            special_request_order_id =&lt;br/&gt;                                              p_cursor_data_io.bus_interact_id,&lt;br/&gt;                            account_id = p_cursor_data_io.account_id,&lt;br/&gt;                            before_item_qty = p_cursor_data_io.before_item_qty,&lt;br/&gt;                            after_item_qty = p_cursor_data_io.after_item_qty,&lt;br/&gt;                            package_billing_product_id =&lt;br/&gt;                                   p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                            package_billing_product_cd =&lt;br/&gt;                                   p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                            service_billing_product_id =&lt;br/&gt;                                   p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                            service_billing_product_cd =&lt;br/&gt;                                   p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                            impacted_line_of_business_cd =&lt;br/&gt;                                 p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE special_request_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;SPECIAL_REQUEST_ORDER_ID : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.special_request_order_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.bus_interact_id&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;ACCOUNT_ID : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.account_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.account_id&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;BEFORE_ITEM_QTY : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.before_item_qty&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.before_item_qty&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;AFTER_ITEM_QTY : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.after_item_qty&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.after_item_qty&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;PACKAGE_BILLING_PRODUCT_ID : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.package_billing_product_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.package_billing_product_id&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;PACKAGE_BILLING_PRODUCT_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.package_billing_product_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.package_billing_product_cd&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;SERVICE_BILLING_PRODUCT_ID : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.service_billing_product_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.service_billing_product_id&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;SERVICE_BILLING_PRODUCT_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.service_billing_product_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.service_billing_product_cd&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos;IMPACTED_LINE_OF_BUSINESS_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.impacted_line_of_business_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.impacted_line_of_business_cd&lt;br/&gt;                        || &apos;,&apos;&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_special_request_item.ADD&lt;br/&gt;                     (process_rec                       =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_item_id           =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd               =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      special_request_order_id          =&gt; p_cursor_data_io.bus_interact_id,&lt;br/&gt;                      account_id                        =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                      before_item_qty                   =&gt; p_cursor_data_io.before_item_qty,&lt;br/&gt;                      after_item_qty                    =&gt; p_cursor_data_io.after_item_qty,&lt;br/&gt;                      item_action_cd                    =&gt; NULL,&lt;br/&gt;                      package_billing_product_id        =&gt; p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                      package_billing_product_cd        =&gt; p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                      service_billing_product_id        =&gt; p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                      service_billing_product_cd        =&gt; p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                      account_impact_cd                 =&gt; NULL,&lt;br/&gt;                      line_of_business_impact_cd        =&gt; NULL,&lt;br/&gt;                      impacted_line_of_business_cd      =&gt; p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                      audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.ord_no&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_SPECIAL_REQUEST_ITEM&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                     || p_cursor_data_io.ord_no&lt;br/&gt;                                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                     || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.source_system_id&lt;br/&gt;                                     || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;      END;&lt;br/&gt;   --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                        l_proc_name&lt;br/&gt;   --                     || &apos; &apos;&lt;br/&gt;   --                     || pkg_utility.c_proc_end_text&lt;br/&gt;   --                     || &apos;, cnt = &apos;&lt;br/&gt;   --                     || p_filter_i.COUNT ()&lt;br/&gt;   --                    );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, END&apos;);&lt;br/&gt;   END insert_special_req_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_special_req_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i                     VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_special_req_item_status&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE insert_special_req_item_status will&lt;br/&gt;      ||                       Insert t_special_request_item_status data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                      t_unit_name&lt;br/&gt;                                          := &apos;INSERT_SPECIAL_REQ_ITEM_STATUS&apos;;&lt;br/&gt;      l_errors                         NUMBER;&lt;br/&gt;      l_coll_idx                       PLS_INTEGER;&lt;br/&gt;      l_systimestamp                   TIMESTAMP;&lt;br/&gt;      l_exist_count                    NUMBER;&lt;br/&gt;      l_action_perform_record          stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string               stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                      stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_tgt_special_req_item_stat_cd   t_special_request_item_status.special_request_item_status_cd%TYPE;&lt;br/&gt;      l_tgt_data_source_type_cd        t_special_request_item_status.data_source_type_cd%TYPE;&lt;br/&gt;      l_tgt_modified_dttm              t_special_request_item_status.modified_dttm%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_filter_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_action_perform_record := NULL;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;            THEN&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT special_request_item_status_cd,&lt;br/&gt;                         data_source_type_cd, modified_dttm&lt;br/&gt;                    INTO l_tgt_special_req_item_stat_cd,&lt;br/&gt;                         l_tgt_data_source_type_cd, l_tgt_modified_dttm&lt;br/&gt;                    FROM t_special_request_item_status&lt;br/&gt;                   WHERE special_request_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF     NVL (l_tgt_modified_dttm,&lt;br/&gt;                              pkg_utility.c_recon_null_date&lt;br/&gt;                             ) &lt; l_current_recon_start_time&lt;br/&gt;                     AND (   NVL (l_tgt_data_source_type_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                     pkg_utility.c_recon_null_string&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_special_req_item_stat_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                         )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_special_request_item_status&lt;br/&gt;                        SET special_request_item_status_cd =&lt;br/&gt;                                 p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                            data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE special_request_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;SPECIAL_REQUEST_ITEM_STATUS_CD : (&apos;&lt;br/&gt;                        || l_tgt_special_req_item_stat_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_special_request_item_status.ADD&lt;br/&gt;                     (process_rec                         =&gt; p_process_rec_i,&lt;br/&gt;                      special_request_item_id             =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd                 =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      special_request_item_status_cd      =&gt; p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                      audit_user                          =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.ord_no&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                             (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                              p_table_name           =&gt; &apos;T_SPECIAL_REQUEST_ITEM_STATUS&apos;,&lt;br/&gt;                              p_table_key            =&gt; l_table_key,&lt;br/&gt;                              p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                              p_account_details      =&gt; NULL,&lt;br/&gt;                              p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                              p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                             );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, SPECIAL_REQUEST_ITEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                     || p_cursor_data_io.ord_no&lt;br/&gt;                                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                     || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.source_system_id&lt;br/&gt;                                     || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;      END;&lt;br/&gt;   --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                        l_proc_name&lt;br/&gt;   --                     || &apos; &apos;&lt;br/&gt;   --                     || pkg_utility.c_proc_end_text&lt;br/&gt;   --                     || &apos;, cnt = &apos;&lt;br/&gt;   --                     || p_filter_i.COUNT ()&lt;br/&gt;   --                    );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i, l_proc_name || &apos;, END&apos;);&lt;br/&gt;   END insert_special_req_item_status;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_work_order_item&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :  This PROCEDURE insert_work_order_item will Insert t_work_order_item data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name               t_unit_name       := &apos;INSERT_WORK_ORDER_ITEM&apos;;&lt;br/&gt;      l_errors                  NUMBER;&lt;br/&gt;      l_coll_idx                PLS_INTEGER;&lt;br/&gt;      l_tgt_exist_record        t_work_order_item%ROWTYPE;&lt;br/&gt;      l_systimestamp            TIMESTAMP;&lt;br/&gt;      l_exist_count             NUMBER;&lt;br/&gt;      l_action_perform_record   stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string        stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key               stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_filter_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_action_perform_record := NULL;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;            THEN&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT *&lt;br/&gt;                    INTO l_tgt_exist_record&lt;br/&gt;                    FROM t_work_order_item&lt;br/&gt;                   WHERE work_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF     NVL (l_tgt_exist_record.modified_dttm,&lt;br/&gt;                              pkg_utility.c_recon_null_date&lt;br/&gt;                             ) &lt; l_current_recon_start_time&lt;br/&gt;                     AND (   NVL (l_tgt_exist_record.data_source_type_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                     pkg_utility.c_recon_null_string&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.work_order_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.job_bus_interact_id,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.account_id,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.account_id,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (TRUNC (l_tgt_exist_record.create_dttm),&lt;br/&gt;                                  pkg_utility.c_recon_null_date&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.create_dttm,&lt;br/&gt;                                     pkg_utility.c_recon_null_date&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.sequence_num,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.sequence_num,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.before_item_qty,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.before_item_qty,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_exist_record.after_item_qty,&lt;br/&gt;                                  pkg_utility.c_recon_null_number&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.after_item_qty,&lt;br/&gt;                                     pkg_utility.c_recon_null_number&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.package_billing_product_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.service_billing_product_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.impacted_line_of_business_cd,&lt;br/&gt;                                 pkg_utility.c_recon_null_string&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.package_billing_product_id,&lt;br/&gt;                                 pkg_utility.c_recon_null_number&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                                    pkg_utility.c_recon_null_number&lt;br/&gt;                                   )&lt;br/&gt;                          OR NVL&lt;br/&gt;                                (l_tgt_exist_record.service_billing_product_id,&lt;br/&gt;                                 pkg_utility.c_recon_null_number&lt;br/&gt;                                ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                                    pkg_utility.c_recon_null_number&lt;br/&gt;                                   )&lt;br/&gt;                         )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_work_order_item&lt;br/&gt;                        SET data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            work_order_id =&lt;br/&gt;                                          p_cursor_data_io.job_bus_interact_id,&lt;br/&gt;                            account_id = p_cursor_data_io.account_id,&lt;br/&gt;                            create_dttm = p_cursor_data_io.create_dttm,&lt;br/&gt;                            sequence_num = p_cursor_data_io.sequence_num,&lt;br/&gt;                            before_item_qty = p_cursor_data_io.before_item_qty,&lt;br/&gt;                            after_item_qty = p_cursor_data_io.after_item_qty,&lt;br/&gt;                            package_billing_product_cd =&lt;br/&gt;                                   p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                            service_billing_product_cd =&lt;br/&gt;                                   p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                            impacted_line_of_business_cd =&lt;br/&gt;                                 p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active,&lt;br/&gt;                            package_billing_product_id =&lt;br/&gt;                                   p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                            service_billing_product_id =&lt;br/&gt;                                   p_cursor_data_io.service_billing_product_id&lt;br/&gt;                      WHERE work_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;WORK_ORDER_ID : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.work_order_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.job_bus_interact_id&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;ACCOUNT_ID : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.account_id&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.account_id&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;CREATE_DTTM : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.create_dttm&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.create_dttm&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;SEQUENCE_NUM : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.sequence_num&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.sequence_num&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;BEFORE_ITEM_QTY : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.before_item_qty&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.before_item_qty&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;AFTER_ITEM_QTY : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.after_item_qty&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.after_item_qty&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;PACKAGE_BILLING_PRODUCT_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.package_billing_product_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.package_billing_product_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;SERVICE_BILLING_PRODUCT_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.service_billing_product_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.service_billing_product_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;IMPACTED_LINE_OF_BUSINESS_CD : (&apos;&lt;br/&gt;                        || l_tgt_exist_record.impacted_line_of_business_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.impacted_line_of_business_cd&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_work_order_item.ADD&lt;br/&gt;                     (process_rec                       =&gt; p_process_rec_i,&lt;br/&gt;                      work_order_item_id                =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd               =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      work_order_id                     =&gt; p_cursor_data_io.job_bus_interact_id,&lt;br/&gt;                      account_id                        =&gt; p_cursor_data_io.account_id,&lt;br/&gt;                      create_dttm                       =&gt; p_cursor_data_io.create_dttm,&lt;br/&gt;                      sequence_num                      =&gt; p_cursor_data_io.sequence_num,&lt;br/&gt;                      before_item_qty                   =&gt; p_cursor_data_io.before_item_qty,&lt;br/&gt;                      after_item_qty                    =&gt; p_cursor_data_io.after_item_qty,&lt;br/&gt;                      item_action_cd                    =&gt; NULL,&lt;br/&gt;                      package_billing_product_id        =&gt; p_cursor_data_io.package_billing_product_id,&lt;br/&gt;                      package_billing_product_cd        =&gt; p_cursor_data_io.package_billing_product_cd,&lt;br/&gt;                      service_billing_product_id        =&gt; p_cursor_data_io.service_billing_product_id,&lt;br/&gt;                      service_billing_product_cd        =&gt; p_cursor_data_io.service_billing_product_cd,&lt;br/&gt;                      account_impact_cd                 =&gt; NULL,&lt;br/&gt;                      line_of_business_impact_cd        =&gt; NULL,&lt;br/&gt;                      impacted_line_of_business_cd      =&gt; p_cursor_data_io.impacted_line_of_business_cd,&lt;br/&gt;                      audit_user                        =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.ord_no&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, CUST_ACCT_NO = &apos;;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_WORK_ORDER_ITEM&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                     || p_cursor_data_io.ord_no&lt;br/&gt;                                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                     || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.source_system_id&lt;br/&gt;                                     || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;      END;&lt;br/&gt;   --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                        l_proc_name&lt;br/&gt;   --                     || &apos; &apos;&lt;br/&gt;   --                     || pkg_utility.c_proc_end_text&lt;br/&gt;   --                     || &apos;, cnt = &apos;&lt;br/&gt;   --                     || p_filter_i.COUNT ()&lt;br/&gt;   --                    );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_work_order_item;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_work_order_item_status (&lt;br/&gt;      p_process_rec_i    IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_io   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i     IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_work_order_item_status&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :  This PROCEDURE insert_work_order_item will Insert t_work_order_item_status data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                     t_unit_name&lt;br/&gt;                                           := &apos;INSERT_WORK_ORDER_ITEM_STATUS&apos;;&lt;br/&gt;      l_errors                        NUMBER;&lt;br/&gt;      l_coll_idx                      PLS_INTEGER;&lt;br/&gt;      l_systimestamp                  TIMESTAMP;&lt;br/&gt;      l_exist_count                   NUMBER;&lt;br/&gt;      l_action_perform_record         stg.audit_recon_process.operation_perf%TYPE;&lt;br/&gt;      l_modif_val_string              stg.audit_recon_process.modif_values%TYPE;&lt;br/&gt;      l_table_key                     stg.audit_recon_process.table_key%TYPE;&lt;br/&gt;      l_tgt_work_order_item_stat_cd   t_work_order_item_status.work_order_item_status_cd%TYPE;&lt;br/&gt;      l_tgt_data_source_type_cd       t_work_order_item_status.data_source_type_cd%TYPE;&lt;br/&gt;      l_tgt_modified_dttm             t_work_order_item_status.modified_dttm%TYPE;&lt;br/&gt;   /* BEGIN&lt;br/&gt;       FORALL i IN VALUES OF p_filter_i SAVE EXCEPTIONS&lt;br/&gt;       INSERT INTO t_work_order_item_status a&lt;br/&gt;          (&lt;br/&gt;             a.work_order_item_id,&lt;br/&gt;             a.data_source_type_cd,&lt;br/&gt;             a.work_order_item_status_cd,&lt;br/&gt;             a.record_stat,&lt;br/&gt;             a.created_dttm,&lt;br/&gt;             a.created_by&lt;br/&gt;          )&lt;br/&gt;          VALUES&lt;br/&gt;          (&lt;br/&gt;             p_cursor_data_io (i).bus_interact_item_id,&lt;br/&gt;             p_cursor_data_io (i).data_source_type_cd,&lt;br/&gt;             p_cursor_data_io (i).product_order_item_status_cd,&lt;br/&gt;             &apos;A&apos;,&lt;br/&gt;             SYSTIMESTAMP,&lt;br/&gt;             c_pkg_name&lt;br/&gt;          );&lt;br/&gt;    EXCEPTION&lt;br/&gt;    WHEN c_bulk_errors THEN&lt;br/&gt;       l_errors := SQL%BULK_EXCEPTIONS.COUNT;&lt;br/&gt;&lt;br/&gt;       FOR i IN 1 .. l_errors&lt;br/&gt;       LOOP&lt;br/&gt;          NULL;&lt;br/&gt;          l_coll_idx := p_filter_i (SQL%BULK_EXCEPTIONS (i).ERROR_INDEX);&lt;br/&gt;          p_cursor_data_io (l_coll_idx).record_load_cd := PKG_UTILITY.c_stg_error;&lt;br/&gt;          pkg_logging.log_exception (p_process_rec_i, l_proc_name || &apos;, bulk insert exception, key=&apos; || p_cursor_data_io&lt;br/&gt;          (l_coll_idx).source_system_id || &apos;, exception=&apos; || SQL%BULK_EXCEPTIONS (i).ERROR_CODE );&lt;br/&gt;       END LOOP;&lt;br/&gt;    END;*/&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_filter_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         IF (NVL (p_cursor_data_io.record_load_cd,&lt;br/&gt;                  pkg_utility.c_stg_processed) &lt;&gt; pkg_utility.c_stg_error&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            l_action_perform_record := NULL;&lt;br/&gt;            l_modif_val_string := NULL;&lt;br/&gt;            l_table_key := NULL;&lt;br/&gt;            l_exist_count := 1;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_start_text&lt;br/&gt;                                   || &apos;, WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;&lt;br/&gt;            IF p_cursor_data_io.ord_no != pkg_utility.c_dummy_order_no&lt;br/&gt;            THEN&lt;br/&gt;               BEGIN&lt;br/&gt;                  SELECT work_order_item_status_cd,&lt;br/&gt;                         data_source_type_cd, modified_dttm&lt;br/&gt;                    INTO l_tgt_work_order_item_stat_cd,&lt;br/&gt;                         l_tgt_data_source_type_cd, l_tgt_modified_dttm&lt;br/&gt;                    FROM t_work_order_item_status&lt;br/&gt;                   WHERE work_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN NO_DATA_FOUND&lt;br/&gt;                  THEN&lt;br/&gt;                     l_exist_count := 0;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               IF (l_exist_count &gt; 0)&lt;br/&gt;               THEN&lt;br/&gt;                  IF     NVL (l_tgt_modified_dttm,&lt;br/&gt;                              pkg_utility.c_recon_null_date&lt;br/&gt;                             ) &lt; l_current_recon_start_time&lt;br/&gt;                     AND (   NVL (l_tgt_data_source_type_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL (p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                                     pkg_utility.c_recon_null_string&lt;br/&gt;                                    )&lt;br/&gt;                          OR NVL (l_tgt_work_order_item_stat_cd,&lt;br/&gt;                                  pkg_utility.c_recon_null_string&lt;br/&gt;                                 ) &lt;&gt;&lt;br/&gt;                                NVL&lt;br/&gt;                                   (p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                                    pkg_utility.c_recon_null_string&lt;br/&gt;                                   )&lt;br/&gt;                         )&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_work_order_item_status&lt;br/&gt;                        SET work_order_item_status_cd =&lt;br/&gt;                                 p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                            data_source_type_cd =&lt;br/&gt;                                          p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                            modified_dttm = l_systimestamp,&lt;br/&gt;                            modified_by = p_audit_user_i,&lt;br/&gt;                            record_stat = pkg_utility.c_record_active&lt;br/&gt;                      WHERE work_order_item_id =&lt;br/&gt;                                         p_cursor_data_io.bus_interact_item_id;&lt;br/&gt;&lt;br/&gt;                     l_action_perform_record :=&lt;br/&gt;                                            pkg_utility.c_recon_update_perform;&lt;br/&gt;                     l_modif_val_string :=&lt;br/&gt;                           &apos;WORK_ORDER_ITEM_STATUS_CD : (&apos;&lt;br/&gt;                        || l_tgt_work_order_item_stat_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.product_order_item_status_cd&lt;br/&gt;                        || &apos; ), &apos;&lt;br/&gt;                        || &apos;DATA_SOURCE_TYPE_CD : (&apos;&lt;br/&gt;                        || l_tgt_data_source_type_cd&lt;br/&gt;                        || &apos; =&gt; &apos;&lt;br/&gt;                        || p_cursor_data_io.data_source_type_cd&lt;br/&gt;                        || &apos; )&apos;;&lt;br/&gt;                  END IF;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_action_perform_record :=&lt;br/&gt;                                           pkg_utility.c_recon_insert_perform;&lt;br/&gt;                  da_work_order_item_status.ADD&lt;br/&gt;                     (process_rec                    =&gt; p_process_rec_i,&lt;br/&gt;                      work_order_item_id             =&gt; p_cursor_data_io.bus_interact_item_id,&lt;br/&gt;                      data_source_type_cd            =&gt; p_cursor_data_io.data_source_type_cd,&lt;br/&gt;                      work_order_item_status_cd      =&gt; p_cursor_data_io.product_order_item_status_cd,&lt;br/&gt;                      audit_user                     =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;               END IF;&lt;br/&gt;&lt;br/&gt;               IF (l_action_perform_record IN&lt;br/&gt;                      (pkg_utility.c_recon_insert_perform,&lt;br/&gt;                       pkg_utility.c_recon_update_perform&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_table_key :=&lt;br/&gt;                        &apos;WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.ord_no&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                     || &apos;, CUST_ACCT_NO = &apos;&lt;br/&gt;                     || p_cursor_data_io.cust_acct_no_oci;&lt;br/&gt;                  pkg_vnt_recon_process.audit_recon_process_populate&lt;br/&gt;                                 (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                                  p_table_name           =&gt; &apos;T_WORK_ORDER_ITEM_STATUS&apos;,&lt;br/&gt;                                  p_table_key            =&gt; l_table_key,&lt;br/&gt;                                  p_modif_values         =&gt; l_modif_val_string,&lt;br/&gt;                                  p_account_details      =&gt; NULL,&lt;br/&gt;                                  p_operation_perf       =&gt; l_action_perform_record,&lt;br/&gt;                                  p_audit_user_i         =&gt; p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                      l_proc_name&lt;br/&gt;                                   || &apos;, &apos;&lt;br/&gt;                                   || pkg_utility.c_proc_end_text&lt;br/&gt;                                   || &apos;, WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                   || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                   || p_cursor_data_io.ord_no&lt;br/&gt;                                   || &apos;, SERV_ID = &apos;&lt;br/&gt;                                   || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                  );&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_io.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                                    (p_process_rec_i,&lt;br/&gt;                                        l_proc_name&lt;br/&gt;                                     || &apos;, WORK_ORDER_ITEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.bus_interact_item_id&lt;br/&gt;                                     || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                     || p_cursor_data_io.ord_no&lt;br/&gt;                                     || &apos;, SERV_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.serv_id_oci&lt;br/&gt;                                     || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                     || p_cursor_data_io.source_system_id&lt;br/&gt;                                     || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                     || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                    );&lt;br/&gt;      END;&lt;br/&gt;   --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                        l_proc_name&lt;br/&gt;   --                     || &apos; &apos;&lt;br/&gt;   --                     || pkg_utility.c_proc_end_text&lt;br/&gt;   --                     || &apos;, cnt = &apos;&lt;br/&gt;   --                     || p_filter_i.COUNT ()&lt;br/&gt;   --                    );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END insert_work_order_item_status;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_ord (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_ord&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE update_staging_svc will update  stg.vnt_oci_cur_item data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name            t_unit_name := &apos;UPDATE_STAGING_ORD&apos;;&lt;br/&gt;      l_process_record_cnt   NUMBER;&lt;br/&gt;      l_error_record_cnt     NUMBER;&lt;br/&gt;      l_systimestamp         TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_cursor_data_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      l_process_record_cnt := 0;&lt;br/&gt;      l_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_start_text&lt;br/&gt;                                || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                || p_cursor_data_i.ord_no&lt;br/&gt;                                || &apos;, SERV_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.serv_id_oci&lt;br/&gt;                                || &apos;RECORD_LOAD_CD = &apos;&lt;br/&gt;                                || p_cursor_data_i.record_load_cd&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         IF NVL (p_cursor_data_i.record_load_cd, pkg_utility.c_stg_processed) =&lt;br/&gt;                                                       pkg_utility.c_stg_error&lt;br/&gt;         THEN&lt;br/&gt;            g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;&lt;br/&gt;            UPDATE stg.vnt_oci_cur_item_rec_delta s&lt;br/&gt;               SET s.record_load_cd = pkg_utility.c_stg_error,&lt;br/&gt;                   s.record_dttm = l_systimestamp&lt;br/&gt;             WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                || p_cursor_data_i.ord_no&lt;br/&gt;                                || &apos;, SERV_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.serv_id_oci&lt;br/&gt;                                || &apos;RECORD_LOAD_CD = &apos;&lt;br/&gt;                                || p_cursor_data_i.record_load_cd&lt;br/&gt;                               );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_i.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                       || p_cursor_data_i.ord_no&lt;br/&gt;                                       || &apos;, SERV_ID = &apos;&lt;br/&gt;                                       || p_cursor_data_i.serv_id_oci&lt;br/&gt;                                       || &apos;, CUST_ACCT_NO_OCI = &apos;&lt;br/&gt;                                       || p_cursor_data_i.cust_acct_no_oci&lt;br/&gt;                                       || &apos;, ROWID = &apos;&lt;br/&gt;                                       || p_cursor_data_i.ID&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;   --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;   --                        l_proc_name&lt;br/&gt;   --                     || &apos; &apos;&lt;br/&gt;   --                     || pkg_utility.c_proc_end_text&lt;br/&gt;   --                     || &apos;, cnt = &apos;&lt;br/&gt;   --                     || p_cursor_data_i.COUNT ()&lt;br/&gt;   --                    );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END update_staging_ord;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging_svc (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN OUT NOCOPY   cur_stg_oci_cur_item_svc%ROWTYPE,&lt;br/&gt;      p_audit_user_i    IN              VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_staging_svc&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This PROCEDURE update_staging_svc will update  stg.vnt_oci_cur_item data.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name            t_unit_name := &apos;UPDATE_STAGING_SVC&apos;;&lt;br/&gt;      l_process_record_cnt   NUMBER;&lt;br/&gt;      l_error_record_cnt     NUMBER;&lt;br/&gt;      l_systimestamp         TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      l_process_record_cnt := 0;&lt;br/&gt;      l_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      BEGIN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_start_text&lt;br/&gt;                                || &apos;ACCOUNT_ID  = &apos;&lt;br/&gt;                                || p_cursor_data_i.account_id&lt;br/&gt;                                || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                                || p_cursor_data_i.billing_service_product_cd&lt;br/&gt;                                || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.source_system_id&lt;br/&gt;                                || &apos;, SERV_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.serv_id_oci&lt;br/&gt;                                || &apos;, CUST_ACCT_NO_OCI = &apos;&lt;br/&gt;                                || p_cursor_data_i.cust_acct_no_oci&lt;br/&gt;                                || &apos;RECORD_LOAD_CD = &apos;&lt;br/&gt;                                || p_cursor_data_i.record_load_cd&lt;br/&gt;                               );&lt;br/&gt;&lt;br/&gt;         UPDATE stg.vnt_oci_cur_item_rec_delta s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i.record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = l_systimestamp&lt;br/&gt;          WHERE ROWID = p_cursor_data_i.ID;&lt;br/&gt;&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;, &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;ACCOUNT_ID  = &apos;&lt;br/&gt;                                || p_cursor_data_i.account_id&lt;br/&gt;                                || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                                || p_cursor_data_i.billing_service_product_cd&lt;br/&gt;                                || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.source_system_id&lt;br/&gt;                                || &apos;, SERV_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.serv_id_oci&lt;br/&gt;                                || &apos;, CUST_ACCT_NO_OCI = &apos;&lt;br/&gt;                                || p_cursor_data_i.cust_acct_no_oci&lt;br/&gt;                                || &apos;RECORD_LOAD_CD = &apos;&lt;br/&gt;                                || p_cursor_data_i.record_load_cd&lt;br/&gt;                               );&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            ROLLBACK;&lt;br/&gt;            p_cursor_data_i.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception&lt;br/&gt;                               (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos;ACCOUNT_ID  = &apos;&lt;br/&gt;                                || p_cursor_data_i.account_id&lt;br/&gt;                                || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                                || p_cursor_data_i.billing_service_product_cd&lt;br/&gt;                                || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.source_system_id&lt;br/&gt;                                || &apos;, SERV_ID = &apos;&lt;br/&gt;                                || p_cursor_data_i.serv_id_oci&lt;br/&gt;                                || &apos;, ROWID = &apos;&lt;br/&gt;                                || p_cursor_data_i.ID&lt;br/&gt;                                || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                               );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_cursor_data_i.record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_cursor_data_i.record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END update_staging_svc;&lt;br/&gt;&lt;br/&gt;   FUNCTION filter_item_for_order (&lt;br/&gt;      p_process_rec_i       IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i       IN OUT NOCOPY   cur_stg_oci_cur_item_ord%ROWTYPE,&lt;br/&gt;      p_select_order_type   IN              t_bus_interact.bus_interact_type_cd%TYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN VARCHAR2&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure filter_item_for_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This filters WO or Spl Request/Prod Order&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name    := &apos;FILTER_ITEM_FOR_ORDER&apos;;&lt;br/&gt;      l_temp                        t_ptr_tbl;&lt;br/&gt;      l_idx                         PLS_INTEGER                          := 0;&lt;br/&gt;      l_bus_interact_item_type_cd   t_bus_interact_item.bus_interact_item_type_cd%TYPE;&lt;br/&gt;      l_select_order_type           VARCHAR2 (30);&lt;br/&gt;      l_job_bus_interact_id         t_bus_interact_item.bus_interact_id%TYPE;&lt;br/&gt;      l_sequence_num                NUMBER;&lt;br/&gt;      l_proceed_flag                VARCHAR2 (1);&lt;br/&gt;   BEGIN&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_start_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_cursor_data_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      BEGIN&lt;br/&gt;         l_bus_interact_item_type_cd :=&lt;br/&gt;                                    p_cursor_data_i.bus_interact_item_type_cd;&lt;br/&gt;         l_select_order_type := p_select_order_type;&lt;br/&gt;         l_job_bus_interact_id := p_cursor_data_i.job_bus_interact_id;&lt;br/&gt;         l_sequence_num := p_cursor_data_i.sequence_num;&lt;br/&gt;         l_proceed_flag := &apos;N&apos;;&lt;br/&gt;&lt;br/&gt;         IF (p_cursor_data_i.bus_interact_item_type_cd = p_select_order_type&lt;br/&gt;            )&lt;br/&gt;         THEN&lt;br/&gt;            IF (p_select_order_type =&lt;br/&gt;                                     chtr.pkg_utility.c_request_type_cd_wrkord&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               IF (    p_cursor_data_i.sequence_num &gt; 0&lt;br/&gt;                   AND p_cursor_data_i.job_bus_interact_id IS NOT NULL&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  l_proceed_flag := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            ELSE&lt;br/&gt;               IF (p_cursor_data_i.sequence_num = 0)&lt;br/&gt;               THEN&lt;br/&gt;                  l_proceed_flag := &apos;Y&apos;;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;      EXCEPTION&lt;br/&gt;         WHEN OTHERS&lt;br/&gt;         THEN&lt;br/&gt;            p_cursor_data_i.record_load_cd := pkg_utility.c_stg_error;&lt;br/&gt;            pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                          l_proc_name&lt;br/&gt;                                       || &apos;, bus_interact_item_type_cd = &apos;&lt;br/&gt;                                       || l_bus_interact_item_type_cd&lt;br/&gt;                                       || &apos;, p_select_order_type = &apos;&lt;br/&gt;                                       || l_select_order_type&lt;br/&gt;                                       || &apos;, job_bus_interact_id = &apos;&lt;br/&gt;                                       || l_job_bus_interact_id&lt;br/&gt;                                       || &apos;, sequence_num = &apos;&lt;br/&gt;                                       || l_sequence_num&lt;br/&gt;                                       || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                       || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                      );&lt;br/&gt;      END;&lt;br/&gt;&lt;br/&gt;      --pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;      --                        l_proc_name&lt;br/&gt;      --                     || &apos; &apos;&lt;br/&gt;      --                     || pkg_utility.c_proc_end_text&lt;br/&gt;      --                     || &apos;, cnt = &apos;&lt;br/&gt;      --                     || p_cursor_data_i.COUNT ()&lt;br/&gt;      --                    );&lt;br/&gt;      RETURN l_proceed_flag;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, bus_interact_item_type_cd = &apos;&lt;br/&gt;                                    || l_bus_interact_item_type_cd&lt;br/&gt;                                    || &apos;, p_select_order_type = &apos;&lt;br/&gt;                                    || l_select_order_type&lt;br/&gt;                                    || &apos;, job_bus_interact_id = &apos;&lt;br/&gt;                                    || l_job_bus_interact_id&lt;br/&gt;                                    || &apos;, sequence_num = &apos;&lt;br/&gt;                                    || l_sequence_num&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i,&lt;br/&gt;                                  pkg_utility.c_process_error);&lt;br/&gt;   END filter_item_for_order;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_bus_interact_item_order (&lt;br/&gt;      p_process_rec_i               IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_order_no                    IN              t_bus_interact_item_vnt_xref.order_num%TYPE,&lt;br/&gt;      p_serv_id                     IN              t_bus_interact_item_vnt_xref.serv_id%TYPE,&lt;br/&gt;      p_bus_interact_item_type_cd   IN              t_bus_interact_item.bus_interact_item_type_cd%TYPE,&lt;br/&gt;      p_row_io                      IN OUT NOCOPY   t_bus_interact_item%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FUNCTION get_bus_interact_item_order&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_bus_interact_item_vnt_xref&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BUS_INTERACT_ITEM_ORDER&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                             || &apos;, SERV_ID = &apos;&lt;br/&gt;                             || p_serv_id&lt;br/&gt;                             || &apos;, BUS_INTERACT_ITEM_TYPE_CD = &apos;&lt;br/&gt;                             || p_bus_interact_item_type_cd&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (p_bus_interact_item_type_cd IN&lt;br/&gt;             (chtr.pkg_utility.c_request_type_cd_prdord,&lt;br/&gt;              chtr.pkg_utility.c_request_type_cd_splreq,&lt;br/&gt;              chtr.pkg_utility.c_request_type_cd_wrkord&lt;br/&gt;             )&lt;br/&gt;         )&lt;br/&gt;      THEN&lt;br/&gt;         SELECT a.*&lt;br/&gt;           INTO p_row_io&lt;br/&gt;           FROM t_bus_interact_item_vnt_xref xref INNER JOIN t_bus_interact_item a&lt;br/&gt;                ON a.bus_interact_item_id = xref.bus_interact_item_id&lt;br/&gt;          WHERE xref.order_num = p_order_no AND xref.serv_id = p_serv_id;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ORDER_NO = &apos;&lt;br/&gt;                             || p_order_no&lt;br/&gt;                             || &apos;, SERV_ID = &apos;&lt;br/&gt;                             || p_serv_id&lt;br/&gt;                             || &apos;, BUS_INTERACT_ITEM_TYPE_CD = &apos;&lt;br/&gt;                             || p_bus_interact_item_type_cd&lt;br/&gt;                             || &apos;, BUS_INTER_ITEM_ORDER FOUND&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                || p_order_no&lt;br/&gt;                                || &apos;, SERV_ID = &apos;&lt;br/&gt;                                || p_serv_id&lt;br/&gt;                                || &apos;, BUS_INTERACT_ITEM_TYPE_CD = &apos;&lt;br/&gt;                                || p_bus_interact_item_type_cd&lt;br/&gt;                                || &apos;, bus_inter_item_order NOT found&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, ORDER_NO = &apos;&lt;br/&gt;                                    || p_order_no&lt;br/&gt;                                    || &apos;, SERV_ID = &apos;&lt;br/&gt;                                    || p_serv_id&lt;br/&gt;                                    || &apos;, BUS_INTERACT_ITEM_TYPE_CD = &apos;&lt;br/&gt;                                    || p_bus_interact_item_type_cd&lt;br/&gt;                                    || &apos;, EXCEPTION = &apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_bus_interact_item_order;&lt;br/&gt;&lt;br/&gt;   FUNCTION get_billing_prod_inst (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_row_io          IN OUT NOCOPY   t_billing_prod_inst%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;      RETURN BOOLEAN&lt;br/&gt;   IS&lt;br/&gt;      /**************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : FUNCTION get_billing_prod_inst&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This function will return the records from t_billing_prod_inst&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name   t_unit_name := &apos;GET_BILLING_PROD_INST&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                             || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                             || p_row_io.account_id&lt;br/&gt;                             || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                             || p_row_io.billing_service_product_cd&lt;br/&gt;                             || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                             || p_row_io.source_system_id&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      SELECT *&lt;br/&gt;        INTO p_row_io&lt;br/&gt;        FROM t_billing_prod_inst a&lt;br/&gt;       WHERE a.account_id = p_row_io.account_id&lt;br/&gt;         AND a.billing_service_product_cd =&lt;br/&gt;                                           p_row_io.billing_service_product_cd&lt;br/&gt;         AND a.source_system_id = p_row_io.source_system_id;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos; &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                             || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                             || p_row_io.account_id&lt;br/&gt;                             || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                             || p_row_io.billing_service_product_cd&lt;br/&gt;                             || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                             || p_row_io.source_system_id&lt;br/&gt;                             || &apos;, BILLING_PROD_INST FOUND&apos;&lt;br/&gt;                            );&lt;br/&gt;      RETURN TRUE;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN NO_DATA_FOUND&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                   l_proc_name&lt;br/&gt;                                || &apos; &apos;&lt;br/&gt;                                || pkg_utility.c_proc_end_text&lt;br/&gt;                                || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                || p_row_io.account_id&lt;br/&gt;                                || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                                || p_row_io.billing_service_product_cd&lt;br/&gt;                                || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                || p_row_io.source_system_id&lt;br/&gt;                                || &apos;, BILLING_PROD_INST NOT FOUND&apos;&lt;br/&gt;                               );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         pkg_logging.log_exception (p_process_rec_i,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, ACCOUNT_ID = &apos;&lt;br/&gt;                                    || p_row_io.account_id&lt;br/&gt;                                    || &apos;, BILLING_SERVICE_PRODUCT_CD = &apos;&lt;br/&gt;                                    || p_row_io.billing_service_product_cd&lt;br/&gt;                                    || &apos;, SOURCE_SYSTEM_ID = &apos;&lt;br/&gt;                                    || p_row_io.source_system_id&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         RETURN FALSE;&lt;br/&gt;   END get_billing_prod_inst;&lt;br/&gt;END pkg_vnt_recon_oci_cur_item;</source>
</body>
</PackageOracle>
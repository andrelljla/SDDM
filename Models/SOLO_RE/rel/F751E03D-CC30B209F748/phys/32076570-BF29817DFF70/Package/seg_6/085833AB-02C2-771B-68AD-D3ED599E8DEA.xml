<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_LOGGING" directorySegmentName="seg_6" id="085833AB-02C2-771B-68AD-D3ED599E8DEA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_LOGGING</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:21 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_LOGGING&lt;br/&gt;IS&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_logging&lt;br/&gt;||  Created By      : KNOLL, Charter Communications&lt;br/&gt;||  Created Date    : 23-JUN-2014&lt;br/&gt;||  Subject Area    : General&lt;br/&gt;||  Description     : The package pkg_logging is for SOLO process logging. All package and stored procedure&lt;br/&gt;||                    code should use this package&apos;s functions to control logging.&lt;br/&gt;||&lt;br/&gt;||  How to use the package&lt;br/&gt;||  ----------------------&lt;br/&gt;||&lt;br/&gt;|| 1. In the program unit, create a &apos;t_process_rec type&apos; variable;&lt;br/&gt;|| 2. Assign a name to the &apos;process_name&apos;, ideally one that has a&lt;br/&gt;||    corresponding entry in the &apos;process_log_config&apos; table;&lt;br/&gt;|| 3. Call &apos;begin_process&apos; to start logging;&lt;br/&gt;|| 4. Call &apos;log_debug&apos;, &apos;log_information&apos;, and &apos;log_exception&apos; as needed,&lt;br/&gt;||    throughout the program unit;&lt;br/&gt;|| 5. Call &apos;end_process&apos; to stop logging.&lt;br/&gt;||&lt;br/&gt;|| NOTE: &apos;log_exception&apos; can be used to log exceptions outside this framework,&lt;br/&gt;|| by passing a null &apos;t_process_rec&apos;.  The exception information will be logged,&lt;br/&gt;|| but without a corresponding &apos;process_log&apos; entry.  This will not work for&lt;br/&gt;|| &apos;log_debug&apos; and &apos;log_information&apos;, as &apos;logging_off&apos; is the default; only&lt;br/&gt;|| exceptions will be logged when logging is off.&lt;br/&gt;||&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||  Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;   TYPE t_process_rec IS RECORD (&lt;br/&gt;      process_id     t_process_log.process_id%TYPE,&lt;br/&gt;      process_name   t_process_log.process_name%TYPE,&lt;br/&gt;      log_level      t_process_config.log_lvl%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE begin_process (&lt;br/&gt;      p_process_rec_io   IN OUT NOCOPY   pkg_logging.t_process_rec,&lt;br/&gt;      p_parm_in_i        IN              t_process_log.parm_in%TYPE&lt;br/&gt;            DEFAULT NULL&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE end_process (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_parm_out_i      IN   t_process_log.parm_out%TYPE DEFAULT NULL&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_log_detail_populate (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_bucket_i    IN   t_process_log_detail.audit_bucket%TYPE,&lt;br/&gt;      p_audit_value_i     IN   t_process_log_detail.audit_value%TYPE,&lt;br/&gt;      p_process_id_i      IN   t_process_log_detail.process_id%TYPE,&lt;br/&gt;      p_in_audit_user_i   IN   t_process_log_detail.created_by%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_information (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_information_i   IN   t_msg_log.msg%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_debug (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_debug_i         IN   t_msg_log.msg%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_exception (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_exception_i     IN   t_msg_log.msg%TYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_exception (p_exception_i IN t_msg_log.msg%TYPE);&lt;br/&gt;&lt;br/&gt;   PROCEDURE refresh_cache;&lt;br/&gt;&lt;br/&gt;   PROCEDURE dump_cache;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_log_detail_category (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_process_id_i        IN   t_process_log_detail.process_id%TYPE,&lt;br/&gt;      p_in_audit_user_i     IN   t_process_log_detail.created_by%TYPE,&lt;br/&gt;      p_audit_bucket_i      IN   t_process_log_detail.audit_bucket%TYPE,&lt;br/&gt;      p_insert_count_i      IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL,&lt;br/&gt;      p_update_count_i      IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL,&lt;br/&gt;      p_delete_count_i      IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL,&lt;br/&gt;      p_exception_count_i   IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL&lt;br/&gt;   );&lt;br/&gt;END pkg_logging;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_LOGGING" id="085833AB-02C2-771B-68AD-D3ED599E8DEA">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_LOGGING</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:23 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_LOGGING&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_logging&lt;br/&gt;   ||  Created By      : KNOLL, Charter Communications&lt;br/&gt;   ||  Created Date    : 23-JUN-2014&lt;br/&gt;   ||  Subject Area    : General&lt;br/&gt;   ||  Description     : The package pkg_logging is for SOLO process logging. All package and stored procedure&lt;br/&gt;   ||                    code should use this package&apos;s functions to control logging.&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||    Changed By      Changed On      Change Description&lt;br/&gt;   ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;   ||     Cognizant      10-Nov-2014     Standardization Changes&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   TYPE t_log_config_cache IS TABLE OF NUMBER&lt;br/&gt;      INDEX BY t_process_config.process_name%TYPE;&lt;br/&gt;&lt;br/&gt;   TYPE t_log_config_load IS TABLE OF t_process_config%ROWTYPE;&lt;br/&gt;&lt;br/&gt;   g_log_config_cache   t_log_config_cache;&lt;br/&gt;   g_log_config_load    t_log_config_load;&lt;br/&gt;&lt;br/&gt;   PROCEDURE get_logging_level (&lt;br/&gt;      p_process_rec_io   IN OUT NOCOPY   pkg_logging.t_process_rec&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure get_logging_level&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        :get_logging_level procedure will Populates log_lvl in p_process_rec based on process_name.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   BEGIN&lt;br/&gt;      p_process_rec_io.log_level :=&lt;br/&gt;                           g_log_config_cache (p_process_rec_io.process_name);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         p_process_rec_io.log_level := pkg_utility.c_logging_off;&lt;br/&gt;         p_process_rec_io.process_id := NULL;&lt;br/&gt;   END get_logging_level;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_process_log (&lt;br/&gt;      p_process_rec_io   IN OUT NOCOPY   pkg_logging.t_process_rec,&lt;br/&gt;      p_parm_in_i        IN              t_process_log.parm_in%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_process_log&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : insert_process_log procedure will Inserts a row into the process_log table based on the&lt;br/&gt;      input parms.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      INSERT INTO t_process_log pl&lt;br/&gt;                  (pl.process_id,&lt;br/&gt;                   pl.process_name,&lt;br/&gt;                   pl.start_dttm, pl.parm_in&lt;br/&gt;                  )&lt;br/&gt;           VALUES (s_process_log.NEXTVAL,&lt;br/&gt;                   insert_process_log.p_process_rec_io.process_name,&lt;br/&gt;                   SYSTIMESTAMP, insert_process_log.p_parm_in_i&lt;br/&gt;                  )&lt;br/&gt;        RETURNING pl.process_id&lt;br/&gt;             INTO insert_process_log.p_process_rec_io.process_id;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         p_process_rec_io.process_id := NULL;&lt;br/&gt;         ROLLBACK;&lt;br/&gt;   END insert_process_log;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_process_log (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_parm_out_i      IN   t_process_log.parm_out%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure update_process_log&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : update_process_log procedure Updates the specified process_log row,&lt;br/&gt;      ||                       with parm out and end time.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      UPDATE t_process_log pl&lt;br/&gt;         SET pl.stop_dttm = SYSTIMESTAMP,&lt;br/&gt;             pl.parm_out = update_process_log.p_parm_out_i&lt;br/&gt;       WHERE pl.process_id = update_process_log.p_process_rec_i.process_id;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;   END update_process_log;&lt;br/&gt;&lt;br/&gt;   PROCEDURE insert_msg_log (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_msg_type_i      IN   t_msg_log.msg_type%TYPE,&lt;br/&gt;      p_pgm_name_i      IN   t_msg_log.pgm_name%TYPE,&lt;br/&gt;      p_pgm_type_i      IN   t_msg_log.pgm_type%TYPE,&lt;br/&gt;      p_pgm_lineno_i    IN   t_msg_log.pgm_lineno%TYPE,&lt;br/&gt;      p_msg_i           IN   t_msg_log.msg%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure insert_msg_log&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : insert_msg_log procedure Insert a row into the msg_log table given the inputs.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;   BEGIN&lt;br/&gt;      INSERT INTO t_msg_log ml&lt;br/&gt;                  (ml.msg_id, ml.msg_type,&lt;br/&gt;                   ml.msg_dttm, ml.pgm_name,&lt;br/&gt;                   ml.pgm_type,&lt;br/&gt;                   ml.pgm_lineno, ml.msg,&lt;br/&gt;                   ml.process_id&lt;br/&gt;                  )&lt;br/&gt;           VALUES (s_msg_log.NEXTVAL, insert_msg_log.p_msg_type_i,&lt;br/&gt;                   SYSTIMESTAMP, insert_msg_log.p_pgm_name_i,&lt;br/&gt;                   insert_msg_log.p_pgm_type_i,&lt;br/&gt;                   insert_msg_log.p_pgm_lineno_i, insert_msg_log.p_msg_i,&lt;br/&gt;                   insert_msg_log.p_process_rec_i.process_id&lt;br/&gt;                  );&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;   END insert_msg_log;&lt;br/&gt;&lt;br/&gt;   FUNCTION build_name (p_pgm_owner_i IN VARCHAR2, p_pgm_unit_i IN VARCHAR2)&lt;br/&gt;      RETURN VARCHAR2&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure build_name&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : build_name function Formats the calling program unit owner and name into one output.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_pgm_name   t_msg_log.pgm_name%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      IF (p_pgm_owner_i IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         l_pgm_name := p_pgm_unit_i;&lt;br/&gt;      ELSE&lt;br/&gt;         l_pgm_name := p_pgm_owner_i || &apos;.&apos; || p_pgm_unit_i;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      RETURN l_pgm_name;&lt;br/&gt;   END;&lt;br/&gt;&lt;br/&gt;   PROCEDURE begin_process (&lt;br/&gt;      p_process_rec_io   IN OUT NOCOPY   pkg_logging.t_process_rec,&lt;br/&gt;      p_parm_in_i        IN              t_process_log.parm_in%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure begin_process&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : begin_process procedure  Assigns a process_id, looks up the process_name in&lt;br/&gt;   ||                       the process_log_config table to retrieve the log_level and if logging is on,&lt;br/&gt;   ||                       creates a process_log entry, logging the start time and input parameters.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   BEGIN&lt;br/&gt;      get_logging_level (p_process_rec_io);&lt;br/&gt;&lt;br/&gt;      IF (p_process_rec_io.log_level &gt; pkg_utility.c_logging_off)&lt;br/&gt;      THEN&lt;br/&gt;         insert_process_log (p_process_rec_io, p_parm_in_i);&lt;br/&gt;      END IF;&lt;br/&gt;   END begin_process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE end_process (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_parm_out_i      IN   t_process_log.parm_out%TYPE DEFAULT NULL&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure end_process&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Procedure end_process  Logs the end time and output parameters for the process,&lt;br/&gt;   ||                       if the logging is on.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   BEGIN&lt;br/&gt;      IF (p_process_rec_i.log_level &gt; pkg_utility.c_logging_off)&lt;br/&gt;      THEN&lt;br/&gt;         update_process_log (p_process_rec_i, p_parm_out_i);&lt;br/&gt;      END IF;&lt;br/&gt;   END end_process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_log_detail_populate (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_bucket_i    IN   t_process_log_detail.audit_bucket%TYPE,&lt;br/&gt;      p_audit_value_i     IN   t_process_log_detail.audit_value%TYPE,&lt;br/&gt;      p_process_id_i      IN   t_process_log_detail.process_id%TYPE,&lt;br/&gt;      p_in_audit_user_i   IN   t_process_log_detail.created_by%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;      l_process_rec_i   pkg_logging.t_process_rec;&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure process_log_detail_populate&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Procedure process_log_detail_populate  makes the entries int he Child Table of Process_log&lt;br/&gt;   via DA mechanism&lt;br/&gt;   ||                       if the logging is on.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec_i := p_process_rec_i;&lt;br/&gt;      get_logging_level (l_process_rec_i);&lt;br/&gt;&lt;br/&gt;      IF (p_process_rec_i.log_level &gt; pkg_utility.c_logging_off)&lt;br/&gt;      THEN&lt;br/&gt;         da_process_log_detail.ADD (p_process_rec_i,&lt;br/&gt;                                    p_audit_bucket_i,&lt;br/&gt;                                    p_audit_value_i,&lt;br/&gt;                                    p_process_id_i,&lt;br/&gt;                                    p_in_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      COMMIT;&lt;br/&gt;   END process_log_detail_populate;&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_information (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_information_i   IN   t_msg_log.msg%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure log_information&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        :  Procedure log_information  Logs an informational message to msg_log, if logging is on.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_pgm_owner   t_unit_name;&lt;br/&gt;      l_pgm_unit    t_unit_name;&lt;br/&gt;      l_pgm_name    t_msg_log.pgm_name%TYPE;&lt;br/&gt;      l_lineno      t_msg_log.pgm_lineno%TYPE;&lt;br/&gt;      l_pgm_type    t_msg_log.pgm_type%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      IF (p_process_rec_i.log_level &gt; pkg_utility.c_logging_off)&lt;br/&gt;      THEN&lt;br/&gt;         OWA_UTIL.who_called_me (l_pgm_owner,&lt;br/&gt;                                 l_pgm_unit,&lt;br/&gt;                                 l_lineno,&lt;br/&gt;                                 l_pgm_type&lt;br/&gt;                                );&lt;br/&gt;         l_pgm_name := build_name (l_pgm_owner, l_pgm_unit);&lt;br/&gt;         insert_msg_log (p_process_rec_i,&lt;br/&gt;                         pkg_utility.c_information,&lt;br/&gt;                         l_pgm_name,&lt;br/&gt;                         l_pgm_type,&lt;br/&gt;                         l_lineno,&lt;br/&gt;                         p_information_i&lt;br/&gt;                        );&lt;br/&gt;      END IF;&lt;br/&gt;   END log_information;&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_debug (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_debug_i         IN   t_msg_log.msg%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure log_debug&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : Procedure log_debug Logs a debug message to msg_log, if debug logging is on.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_pgm_owner   t_unit_name;&lt;br/&gt;      l_pgm_unit    t_unit_name;&lt;br/&gt;      l_pgm_name    t_msg_log.pgm_name%TYPE;&lt;br/&gt;      l_lineno      t_msg_log.pgm_lineno%TYPE;&lt;br/&gt;      l_pgm_type    t_msg_log.pgm_type%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      IF (p_process_rec_i.log_level &gt;= pkg_utility.c_logging_debug)&lt;br/&gt;      THEN&lt;br/&gt;         OWA_UTIL.who_called_me (l_pgm_owner,&lt;br/&gt;                                 l_pgm_unit,&lt;br/&gt;                                 l_lineno,&lt;br/&gt;                                 l_pgm_type&lt;br/&gt;                                );&lt;br/&gt;         l_pgm_name := build_name (l_pgm_owner, l_pgm_unit);&lt;br/&gt;         insert_msg_log (p_process_rec_i,&lt;br/&gt;                         pkg_utility.c_debug,&lt;br/&gt;                         l_pgm_name,&lt;br/&gt;                         l_pgm_type,&lt;br/&gt;                         l_lineno,&lt;br/&gt;                         p_debug_i&lt;br/&gt;                        );&lt;br/&gt;      END IF;&lt;br/&gt;   END log_debug;&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_exception (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_exception_i     IN   t_msg_log.msg%TYPE&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure log_exception&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : Procedure log_exception    Logs an exception to msg_log.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_pgm_owner   t_unit_name;&lt;br/&gt;      l_pgm_unit    t_unit_name;&lt;br/&gt;      l_pgm_name    t_msg_log.pgm_name%TYPE;&lt;br/&gt;      l_lineno      t_msg_log.pgm_lineno%TYPE;&lt;br/&gt;      l_pgm_type    t_msg_log.pgm_type%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      OWA_UTIL.who_called_me (l_pgm_owner, l_pgm_unit, l_lineno, l_pgm_type);&lt;br/&gt;      l_pgm_name := build_name (l_pgm_owner, l_pgm_unit);&lt;br/&gt;      insert_msg_log (p_process_rec_i,&lt;br/&gt;                      pkg_utility.c_exception,&lt;br/&gt;                      l_pgm_name,&lt;br/&gt;                      l_pgm_type,&lt;br/&gt;                      l_lineno,&lt;br/&gt;                      p_exception_i&lt;br/&gt;                     );&lt;br/&gt;   END log_exception;&lt;br/&gt;&lt;br/&gt;   PROCEDURE log_exception (p_exception_i IN t_msg_log.msg%TYPE)&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure log_exception&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : Procedure log_exception   Logs an exception to msg_log.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_pgm_owner   t_unit_name;&lt;br/&gt;      l_pgm_unit    t_unit_name;&lt;br/&gt;      l_pgm_name    t_msg_log.pgm_name%TYPE;&lt;br/&gt;      l_lineno      t_msg_log.pgm_lineno%TYPE;&lt;br/&gt;      l_pgm_type    t_msg_log.pgm_type%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      OWA_UTIL.who_called_me (l_pgm_owner, l_pgm_unit, l_lineno, l_pgm_type);&lt;br/&gt;      l_pgm_name := build_name (l_pgm_owner, l_pgm_unit);&lt;br/&gt;      insert_msg_log (NULL,&lt;br/&gt;                      pkg_utility.c_exception,&lt;br/&gt;                      l_pgm_name,&lt;br/&gt;                      l_pgm_type,&lt;br/&gt;                      l_lineno,&lt;br/&gt;                      p_exception_i&lt;br/&gt;                     );&lt;br/&gt;   END log_exception;&lt;br/&gt;&lt;br/&gt;   PROCEDURE refresh_cache&lt;br/&gt;   IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure refresh_cache&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Procedure refresh_cache   Refresh the log config cache.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   BEGIN&lt;br/&gt;      SELECT *&lt;br/&gt;      BULK COLLECT INTO pkg_logging.g_log_config_load&lt;br/&gt;        FROM t_process_config plc;&lt;br/&gt;&lt;br/&gt;      g_log_config_cache.DELETE ();&lt;br/&gt;&lt;br/&gt;      IF g_log_config_load.COUNT &gt; 0&lt;br/&gt;      THEN&lt;br/&gt;         FOR i IN g_log_config_load.FIRST .. g_log_config_load.LAST&lt;br/&gt;         LOOP&lt;br/&gt;            g_log_config_cache (g_log_config_load (i).process_name) :=&lt;br/&gt;                                                g_log_config_load (i).log_lvl;&lt;br/&gt;         END LOOP;&lt;br/&gt;      END IF;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         DBMS_OUTPUT.put_line (   &apos;pkg_logging.refresh_cache: &apos;&lt;br/&gt;                               || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                              );&lt;br/&gt;   END refresh_cache;&lt;br/&gt;&lt;br/&gt;   PROCEDURE dump_cache&lt;br/&gt;   IS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : Procedure dump_cache&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : Procedure dump_cache   Dump the log to dbms_output.&lt;br/&gt;      ******************************************************************************************************************/&lt;br/&gt;      l_process_name   t_unit_name;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_name := g_log_config_cache.FIRST;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         EXIT WHEN l_process_name IS NULL;&lt;br/&gt;         DBMS_OUTPUT.put_line (   &apos;process_name=&apos;&lt;br/&gt;                               || l_process_name&lt;br/&gt;                               || &apos;, log_lvl=&apos;&lt;br/&gt;                               || g_log_config_cache (l_process_name)&lt;br/&gt;                              );&lt;br/&gt;         l_process_name := g_log_config_cache.NEXT (l_process_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;   END dump_cache;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_log_detail_category (&lt;br/&gt;      p_process_rec_i       IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_process_id_i        IN   t_process_log_detail.process_id%TYPE,&lt;br/&gt;      p_in_audit_user_i     IN   t_process_log_detail.created_by%TYPE,&lt;br/&gt;      p_audit_bucket_i      IN   t_process_log_detail.audit_bucket%TYPE,&lt;br/&gt;      p_insert_count_i      IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL,&lt;br/&gt;      p_update_count_i      IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL,&lt;br/&gt;      p_delete_count_i      IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL,&lt;br/&gt;      p_exception_count_i   IN   t_process_log_detail.audit_value%TYPE&lt;br/&gt;            DEFAULT NULL&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure process_log_detail_category&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : Procedure process_log_detail_category makes the entries inserted,updated,deleted and&lt;br/&gt;   ||                          Exceptions the Child Table of Process_log via DA mechanism if the logging is on.&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   BEGIN&lt;br/&gt;      IF p_insert_count_i IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         --Inserting inserted record count.&lt;br/&gt;         pkg_logging.process_log_detail_populate&lt;br/&gt;                      (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                       p_audit_bucket_i       =&gt;    p_audit_bucket_i&lt;br/&gt;                                                 || &apos; &apos;&lt;br/&gt;                                                 || pkg_utility.c_dst_inst_dtl_bucket,&lt;br/&gt;                       p_audit_value_i        =&gt; p_insert_count_i,&lt;br/&gt;                       p_process_id_i         =&gt; p_process_id_i,&lt;br/&gt;                       p_in_audit_user_i      =&gt; p_in_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF p_update_count_i IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         --Inserting updated record count.&lt;br/&gt;         pkg_logging.process_log_detail_populate&lt;br/&gt;                      (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                       p_audit_bucket_i       =&gt;    p_audit_bucket_i&lt;br/&gt;                                                 || &apos; &apos;&lt;br/&gt;                                                 || pkg_utility.c_dst_updt_dtl_bucket,&lt;br/&gt;                       p_audit_value_i        =&gt; p_update_count_i,&lt;br/&gt;                       p_process_id_i         =&gt; p_process_id_i,&lt;br/&gt;                       p_in_audit_user_i      =&gt; p_in_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF p_delete_count_i IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         --Inserting deleted record count.&lt;br/&gt;         pkg_logging.process_log_detail_populate&lt;br/&gt;                      (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                       p_audit_bucket_i       =&gt;    p_audit_bucket_i&lt;br/&gt;                                                 || &apos; &apos;&lt;br/&gt;                                                 || pkg_utility.c_dst_delt_dtl_bucket,&lt;br/&gt;                       p_audit_value_i        =&gt; p_delete_count_i,&lt;br/&gt;                       p_process_id_i         =&gt; p_process_id_i,&lt;br/&gt;                       p_in_audit_user_i      =&gt; p_in_audit_user_i&lt;br/&gt;                      );&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF p_exception_count_i IS NOT NULL&lt;br/&gt;      THEN&lt;br/&gt;         --Inserting Exception record count.&lt;br/&gt;         pkg_logging.process_log_detail_populate&lt;br/&gt;                     (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                      p_audit_bucket_i       =&gt;    p_audit_bucket_i&lt;br/&gt;                                                || &apos; &apos;&lt;br/&gt;                                                || pkg_utility.c_dst_exptn_dtl_bucket,&lt;br/&gt;                      p_audit_value_i        =&gt; p_exception_count_i,&lt;br/&gt;                      p_process_id_i         =&gt; p_process_id_i,&lt;br/&gt;                      p_in_audit_user_i      =&gt; p_in_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;      END IF;&lt;br/&gt;   END process_log_detail_category;&lt;br/&gt;BEGIN&lt;br/&gt;   refresh_cache ();&lt;br/&gt;END pkg_logging;</source>
</body>
</PackageOracle>
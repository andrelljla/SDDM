<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_VNT_PROCESS_RRT_EQP_BASE" directorySegmentName="seg_6" id="A9CFCC51-3D06-FB61-8F42-EB28AFEE1199">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_EQP_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:30 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_VNT_PROCESS_RRT_EQP_BASE&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt; ||  Program Name    : pkg_vnt_process_rrt_eqp_base&lt;br/&gt; ||  Created By      : knoll&lt;br/&gt; ||  Created Date    : 04-Sep-2014&lt;br/&gt; ||  Subject Area    : Equipment&lt;br/&gt; ||  Description     : The package pkg_vnt_process_rrt_eqp_base controls the processing of the&lt;br/&gt; || Vantage NRT_EQP_BASE table and applying those updates to SOLODB.&lt;br/&gt; ||  Change log:&lt;br/&gt; ||&lt;br/&gt; ||    Changed By      Changed On      Change Description&lt;br/&gt; ||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt; ||     Cognizant      18-Nov-2014     Standardization Changes&lt;br/&gt; ||     knoll           Feb-2015       Rework.&lt;br/&gt; ******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2);&lt;br/&gt;END pkg_vnt_process_rrt_eqp_base;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_VNT_PROCESS_RRT_EQP_BASE" id="A9CFCC51-3D06-FB61-8F42-EB28AFEE1199">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_VNT_PROCESS_RRT_EQP_BASE</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:18:31 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY CHTR.PKG_VNT_PROCESS_RRT_EQP_BASE&lt;br/&gt;/****************************************************************************************************************&lt;br/&gt;||  Program Name    : pkg_vnt_process_rrt_eqp_base&lt;br/&gt;||  Created By      : knoll&lt;br/&gt;||  Created Date    : 04-Aug-2014&lt;br/&gt;||  Subject Area    : Equipment&lt;br/&gt;||  Description     : The package pkg_vnt_process_rrt_eqp_base controls the processing of the&lt;br/&gt;||                    Vantage NRT_EQP_BASE table and applying those updates to SOLODB.&lt;br/&gt;||  Change log:&lt;br/&gt;||&lt;br/&gt;||    Changed By      Changed On      Change Description&lt;br/&gt;||  -------------------------------------------------------------------------------------------------------------&lt;br/&gt;||     Cognizant      18-Nov-2014     Standardization Changes&lt;br/&gt;||     Senthil        04-Jan-2015     Main Cursor Query Change: Changed to use equip_prod_inst_id insted of account_id&lt;br/&gt;||                                     in the JOIN for t_equip_instance_account table.&lt;br/&gt;||&lt;br/&gt;||     Senthil        05-Jan-2015     Added new function get_equip_instance_account to check if the row exits before&lt;br/&gt;||                                     inserting into t_equip_instance_account table.&lt;br/&gt;||&lt;br/&gt;||     knoll          08-Feb-2015     Rework it all, along with rrt_elo_location.&lt;br/&gt;||     Senthil        20-Apr-2015     Removed the BRS value in main cursor for data_source_type_cd and code format&lt;br/&gt;******************************************************************************************************************/&lt;br/&gt;IS&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   -- CONSTANTS&lt;br/&gt;   c_pkg_name   CONSTANT t_unit_name := &apos;PKG_VNT_PROCESS_RRT_EQP_BASE&apos;;&lt;br/&gt;   -- EXCEPTION CONSTANTS&lt;br/&gt;   c_bulk_errors         EXCEPTION;&lt;br/&gt;   PRAGMA EXCEPTION_INIT (c_bulk_errors, -24381);&lt;br/&gt;&lt;br/&gt;   -- CURSORS&lt;br/&gt;   -- Staged NRT_EQP_BASE for processing&lt;br/&gt;   CURSOR cur_stg_nrt_eqp_base&lt;br/&gt;   IS&lt;br/&gt;      SELECT&lt;br/&gt;               -- staging control data&lt;br/&gt;               eqp.ROWID AS ID, eqp.record_load_cd,&lt;br/&gt;               &apos;VNT&apos; AS data_source_type_cd,&lt;br/&gt;                                            -- data columns&lt;br/&gt;                                            epi.equip_prod_inst_id,&lt;br/&gt;               TRIM (eqp.eqp_stat_reqp) eqp_stat_reqp,&lt;br/&gt;               TRIM (UPPER (eqp.eqp_serial_reqp)) AS eqp_serial_reqp,&lt;br/&gt;               TRIM (eqp.eqp_typ_reqp) eqp_typ_reqp,&lt;br/&gt;               REGEXP_REPLACE&lt;br/&gt;                            (TRIM (UPPER (eqp_addr_reqp)),&lt;br/&gt;                             &apos;[^a-zA-Z0-9]+&apos;,&lt;br/&gt;                             &apos;&apos;&lt;br/&gt;                            ) equip_mac_address_id,&lt;br/&gt;               REGEXP_REPLACE&lt;br/&gt;                       (TRIM (UPPER (estb_addr_reqp)),&lt;br/&gt;                        &apos;[^a-zA-Z0-9]+&apos;,&lt;br/&gt;                        &apos;&apos;&lt;br/&gt;                       ) equip_sec_mac_address_id,&lt;br/&gt;               NVL (TRIM (UPPER (eqp_model_reqp)), &apos;UNKNOWN&apos;) eqp_model_reqp,&lt;br/&gt;               TRIM (UPPER (eqp_make_reqp)) AS manufacturer,&lt;br/&gt;               TRIM (eqp.eqp_cmpnt_reqp) AS eqp_cmpnt_reqp, pull_dte_reqp,&lt;br/&gt;               DECODE (eqp.pull_tme_slot_reqp,&lt;br/&gt;                       1, pkg_utility.l_final_slot,&lt;br/&gt;                       eqp.pull_tme_slot_reqp&lt;br/&gt;                      ) pull_tme_slot_reqp,&lt;br/&gt;               ls_chg_dte_reqp, ls_chg_tme_reqp, create_dte_reqp&lt;br/&gt;          FROM stg.vnt_rrt_eqp_base eqp LEFT OUTER JOIN t_equip_prod_inst epi&lt;br/&gt;               ON epi.equipment_esn_val = TRIM (UPPER (eqp.eqp_serial_reqp))&lt;br/&gt;         WHERE eqp.record_load_cd IS NULL&lt;br/&gt;      UNION ALL&lt;br/&gt;      SELECT&lt;br/&gt;               -- staging control data&lt;br/&gt;               eqp.ROWID AS ID, eqp.record_load_cd,&lt;br/&gt;               &apos;VNT&apos; AS data_source_type_cd,&lt;br/&gt;                                            -- data columns&lt;br/&gt;                                            epi.equip_prod_inst_id,&lt;br/&gt;               TRIM (eqp.eqp_stat_reqp) eqp_stat_reqp,&lt;br/&gt;               TRIM (UPPER (eqp.eqp_serial_reqp)) AS eqp_serial_reqp,&lt;br/&gt;               TRIM (eqp.eqp_typ_reqp) eqp_typ_reqp,&lt;br/&gt;               REGEXP_REPLACE&lt;br/&gt;                            (TRIM (UPPER (eqp_addr_reqp)),&lt;br/&gt;                             &apos;[^a-zA-Z0-9]+&apos;,&lt;br/&gt;                             &apos;&apos;&lt;br/&gt;                            ) equip_mac_address_id,&lt;br/&gt;               REGEXP_REPLACE&lt;br/&gt;                       (TRIM (UPPER (estb_addr_reqp)),&lt;br/&gt;                        &apos;[^a-zA-Z0-9]+&apos;,&lt;br/&gt;                        &apos;&apos;&lt;br/&gt;                       ) equip_sec_mac_address_id,&lt;br/&gt;               NVL (TRIM (UPPER (eqp_model_reqp)), &apos;UNKNOWN&apos;) eqp_model_reqp,&lt;br/&gt;               TRIM (UPPER (eqp_make_reqp)) AS manufacturer,&lt;br/&gt;               TRIM (eqp.eqp_cmpnt_reqp) AS eqp_cmpnt_reqp, pull_dte_reqp,&lt;br/&gt;               DECODE (eqp.pull_tme_slot_reqp,&lt;br/&gt;                       1, pkg_utility.l_final_slot,&lt;br/&gt;                       eqp.pull_tme_slot_reqp&lt;br/&gt;                      ) pull_tme_slot_reqp,&lt;br/&gt;               ls_chg_dte_reqp, ls_chg_tme_reqp, create_dte_reqp&lt;br/&gt;          FROM stg.vnt_rrt_eqp_base eqp LEFT OUTER JOIN t_equip_prod_inst epi&lt;br/&gt;               ON epi.equipment_esn_val = TRIM (UPPER (eqp.assoc_equip_reqp))&lt;br/&gt;         WHERE eqp.assoc_equip_reqp &gt; &apos; &apos; AND eqp.record_load_cd IS NULL&lt;br/&gt;      ORDER BY pull_dte_reqp,&lt;br/&gt;               pull_tme_slot_reqp,&lt;br/&gt;               eqp_serial_reqp,&lt;br/&gt;               eqp_cmpnt_reqp,&lt;br/&gt;               ls_chg_dte_reqp,&lt;br/&gt;               ls_chg_tme_reqp;&lt;br/&gt;&lt;br/&gt;   TYPE t_cursor_data_tbl IS TABLE OF cur_stg_nrt_eqp_base%ROWTYPE&lt;br/&gt;      INDEX BY PLS_INTEGER;&lt;br/&gt;&lt;br/&gt;   -- Forward declarations&lt;br/&gt;   PROCEDURE process_row (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_nrt_eqp_base%ROWTYPE&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure process&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure  opens the main cursor and Calls the procedure process_row, only if the row&lt;br/&gt;   || selected is a Video Equipment.&lt;br/&gt;   *****************************************************************************************************************&lt;br/&gt;   */&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name            t_unit_name               := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_rec          pkg_logging.t_process_rec;&lt;br/&gt;      l_cursor_data          t_cursor_data_tbl;&lt;br/&gt;      l_process_record_cnt   NUMBER                    := 0;&lt;br/&gt;      l_error_record_cnt     NUMBER                    := 0;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_process_rec.process_name := c_pkg_name || &apos;.&apos; || l_proc_name;&lt;br/&gt;      pkg_logging.begin_process (l_process_rec,&lt;br/&gt;                                 &apos;p_audit_user_i=&apos; || p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      OPEN cur_stg_nrt_eqp_base;&lt;br/&gt;&lt;br/&gt;      LOOP&lt;br/&gt;         FETCH cur_stg_nrt_eqp_base&lt;br/&gt;         BULK COLLECT INTO l_cursor_data LIMIT pkg_utility.c_rt_batchsize;&lt;br/&gt;&lt;br/&gt;         IF (l_cursor_data.COUNT () &gt; 0)&lt;br/&gt;         THEN&lt;br/&gt;            -- process the updates&lt;br/&gt;            FOR i IN 1 .. l_cursor_data.COUNT&lt;br/&gt;            LOOP&lt;br/&gt;               BEGIN&lt;br/&gt;                  process_row (l_process_rec,&lt;br/&gt;                               p_audit_user_i,&lt;br/&gt;                               l_cursor_data (i)&lt;br/&gt;                              );&lt;br/&gt;               EXCEPTION&lt;br/&gt;                  WHEN OTHERS&lt;br/&gt;                  THEN&lt;br/&gt;                     pkg_logging.log_exception&lt;br/&gt;                                         (l_process_rec,&lt;br/&gt;                                             l_proc_name&lt;br/&gt;                                          || &apos;, serial=&apos;&lt;br/&gt;                                          || l_cursor_data (i).eqp_serial_reqp&lt;br/&gt;                                          || &apos;, component=&apos;&lt;br/&gt;                                          || l_cursor_data (i).eqp_cmpnt_reqp&lt;br/&gt;                                          || &apos;, &apos;&lt;br/&gt;                                          || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                                         );&lt;br/&gt;                     l_cursor_data (i).record_load_cd :=&lt;br/&gt;                                                       pkg_utility.c_stg_error;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               --Capturing the Processed/error record count&lt;br/&gt;               IF l_cursor_data (i).record_load_cd = pkg_utility.c_stg_error&lt;br/&gt;               THEN&lt;br/&gt;                  l_error_record_cnt := l_error_record_cnt + 1;&lt;br/&gt;               ELSE&lt;br/&gt;                  l_process_record_cnt := l_process_record_cnt + 1;&lt;br/&gt;               END IF;&lt;br/&gt;            END LOOP;&lt;br/&gt;&lt;br/&gt;            -- Update the staging rows with status&lt;br/&gt;            update_staging (l_process_rec, l_cursor_data);&lt;br/&gt;            -- Commit the batch&lt;br/&gt;            COMMIT;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN l_cursor_data.COUNT () &lt; pkg_utility.c_rt_batchsize;&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      CLOSE cur_stg_nrt_eqp_base;&lt;br/&gt;&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; l_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; l_process_rec,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; l_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; l_process_rec.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (l_process_rec,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.end_process (l_process_rec, pkg_utility.c_process_success);&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception (l_process_rec,&lt;br/&gt;                                       l_proc_name&lt;br/&gt;                                    || &apos;, exception=&apos;&lt;br/&gt;                                    || DBMS_UTILITY.format_error_stack ()&lt;br/&gt;                                   );&lt;br/&gt;         pkg_logging.end_process (l_process_rec, pkg_utility.c_process_error);&lt;br/&gt;&lt;br/&gt;         IF (cur_stg_nrt_eqp_base%ISOPEN)&lt;br/&gt;         THEN&lt;br/&gt;            CLOSE cur_stg_nrt_eqp_base;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE process_row (&lt;br/&gt;      p_process_rec_i   IN              pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN              t_userid,&lt;br/&gt;      p_cursor_row_io   IN OUT NOCOPY   cur_stg_nrt_eqp_base%ROWTYPE&lt;br/&gt;   )&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : Procedure process _row&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure  calls the functions for checking the existance of the equipment combination&lt;br/&gt;   || and performs inserts/updates on various equipment tables.&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name                t_unit_name                 := &apos;PROCESS_ROW&apos;;&lt;br/&gt;      l_equip_component          t_equip_component%ROWTYPE;&lt;br/&gt;      l_equip_component_status   t_equip_component_status%ROWTYPE;&lt;br/&gt;      l_equip_prod_inst          t_equip_prod_inst%ROWTYPE;&lt;br/&gt;      l_settop_box_instance      t_settop_box_instance%ROWTYPE;&lt;br/&gt;      l_equipment_product_id     t_equip_product.equipment_product_id%TYPE;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, eqp_serial_reqp=&apos;&lt;br/&gt;                             || p_cursor_row_io.eqp_serial_reqp&lt;br/&gt;                             || &apos;, component=&apos;&lt;br/&gt;                             || p_cursor_row_io.eqp_cmpnt_reqp&lt;br/&gt;                            );&lt;br/&gt;&lt;br/&gt;      IF (p_cursor_row_io.equip_prod_inst_id IS NULL)&lt;br/&gt;      THEN&lt;br/&gt;         p_cursor_row_io.record_load_cd := &apos;S&apos;;&lt;br/&gt;      ELSE&lt;br/&gt;         -- update or create the component&lt;br/&gt;         INSERT INTO stg.work_queue_vnt_eqp&lt;br/&gt;                     (keycol,&lt;br/&gt;                      valcol&lt;br/&gt;                     )&lt;br/&gt;              VALUES (&apos;EQUIP_PROD_INST_ID&apos;,&lt;br/&gt;                      p_cursor_row_io.equip_prod_inst_id&lt;br/&gt;                     );&lt;br/&gt;&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_equip_component&lt;br/&gt;              FROM t_equip_component ec&lt;br/&gt;             WHERE ec.equip_prod_inst_id = p_cursor_row_io.equip_prod_inst_id&lt;br/&gt;               AND ec.equip_esn_val = p_cursor_row_io.eqp_serial_reqp&lt;br/&gt;               AND ec.equip_type_cd = p_cursor_row_io.eqp_typ_reqp&lt;br/&gt;               AND ec.equip_component_type_cd = p_cursor_row_io.eqp_cmpnt_reqp;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               l_equip_component.equip_component_id := NULL;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         IF (l_equip_component.equip_component_id IS NULL)&lt;br/&gt;         THEN&lt;br/&gt;            l_equip_component.equip_component_id :=&lt;br/&gt;               da_equip_component.ADD&lt;br/&gt;                  (process_rec                   =&gt; p_process_rec_i,&lt;br/&gt;                   equip_prod_inst_id            =&gt; p_cursor_row_io.equip_prod_inst_id,&lt;br/&gt;                   equip_component_type_cd       =&gt; p_cursor_row_io.eqp_cmpnt_reqp,&lt;br/&gt;                   equip_type_cd                 =&gt; p_cursor_row_io.eqp_typ_reqp,&lt;br/&gt;                   data_source_type_cd           =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   equip_esn_val                 =&gt; p_cursor_row_io.eqp_serial_reqp,&lt;br/&gt;                   equip_mac_address_id          =&gt; p_cursor_row_io.equip_mac_address_id,&lt;br/&gt;                   equip_sec_mac_address_id      =&gt; p_cursor_row_io.equip_sec_mac_address_id,&lt;br/&gt;                   audit_user                    =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            da_equip_component_status.ADD&lt;br/&gt;                  (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                   equip_component_id       =&gt; l_equip_component.equip_component_id,&lt;br/&gt;                   equip_status_cd          =&gt; p_cursor_row_io.eqp_stat_reqp,&lt;br/&gt;                   data_source_type_cd      =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   effective_dttm           =&gt; p_cursor_row_io.ls_chg_dte_reqp,&lt;br/&gt;                   audit_user               =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;         ELSE&lt;br/&gt;            IF (   l_equip_component.equip_mac_address_id &lt;&gt;&lt;br/&gt;                                          p_cursor_row_io.equip_mac_address_id&lt;br/&gt;                OR l_equip_component.equip_sec_mac_address_id &lt;&gt;&lt;br/&gt;                                      p_cursor_row_io.equip_sec_mac_address_id&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_equip_component ec&lt;br/&gt;                  SET equip_mac_address_id =&lt;br/&gt;                                          p_cursor_row_io.equip_mac_address_id,&lt;br/&gt;                      equip_sec_mac_address_id =&lt;br/&gt;                                      p_cursor_row_io.equip_sec_mac_address_id,&lt;br/&gt;                      modified_dttm = SYSDATE,&lt;br/&gt;                      modified_by = p_audit_user_i,&lt;br/&gt;                      record_stat = &apos;A&apos;&lt;br/&gt;                WHERE ec.equip_component_id =&lt;br/&gt;                                          l_equip_component.equip_component_id;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            BEGIN&lt;br/&gt;               SELECT *&lt;br/&gt;                 INTO l_equip_component_status&lt;br/&gt;                 FROM t_equip_component_status ecs&lt;br/&gt;                WHERE ecs.equip_component_id =&lt;br/&gt;                                          l_equip_component.equip_component_id;&lt;br/&gt;            EXCEPTION&lt;br/&gt;               WHEN NO_DATA_FOUND&lt;br/&gt;               THEN&lt;br/&gt;                  l_equip_component_status.equip_status_cd := NULL;&lt;br/&gt;            END;&lt;br/&gt;&lt;br/&gt;            IF (l_equip_component_status.equip_status_cd IS NULL)&lt;br/&gt;            THEN&lt;br/&gt;               da_equip_component_status.ADD&lt;br/&gt;                  (process_rec              =&gt; p_process_rec_i,&lt;br/&gt;                   equip_component_id       =&gt; l_equip_component.equip_component_id,&lt;br/&gt;                   equip_status_cd          =&gt; p_cursor_row_io.eqp_stat_reqp,&lt;br/&gt;                   data_source_type_cd      =&gt; p_cursor_row_io.data_source_type_cd,&lt;br/&gt;                   effective_dttm           =&gt; p_cursor_row_io.ls_chg_dte_reqp,&lt;br/&gt;                   audit_user               =&gt; p_audit_user_i&lt;br/&gt;                  );&lt;br/&gt;            ELSE&lt;br/&gt;               IF (l_equip_component_status.equip_status_cd &lt;&gt;&lt;br/&gt;                                                 p_cursor_row_io.eqp_stat_reqp&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_equip_component_status ecs&lt;br/&gt;                     SET equip_status_cd = p_cursor_row_io.eqp_stat_reqp,&lt;br/&gt;                         modified_by = p_audit_user_i,&lt;br/&gt;                         modified_dttm = SYSDATE&lt;br/&gt;                   WHERE ecs.equip_component_id =&lt;br/&gt;                                          l_equip_component.equip_component_id;&lt;br/&gt;               END IF;&lt;br/&gt;            END IF;&lt;br/&gt;         END IF;&lt;br/&gt;&lt;br/&gt;         -- update t_equip_prod_inst&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_equip_prod_inst&lt;br/&gt;              FROM t_equip_prod_inst epi&lt;br/&gt;             WHERE epi.equip_prod_inst_id = p_cursor_row_io.equip_prod_inst_id&lt;br/&gt;               AND epi.equipment_esn_val = p_cursor_row_io.eqp_serial_reqp;&lt;br/&gt;&lt;br/&gt;            SELECT equipment_product_id&lt;br/&gt;              INTO l_equipment_product_id&lt;br/&gt;              FROM t_equip_product ep&lt;br/&gt;             WHERE equipment_model_num = p_cursor_row_io.eqp_model_reqp;&lt;br/&gt;&lt;br/&gt;            IF (l_equip_prod_inst.equipment_product_id &lt;&gt;&lt;br/&gt;                                                        l_equipment_product_id&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_equip_prod_inst epi&lt;br/&gt;                  SET equipment_product_id = l_equipment_product_id,&lt;br/&gt;                      modified_by = p_audit_user_i,&lt;br/&gt;                      modified_dttm = SYSDATE&lt;br/&gt;                WHERE epi.equip_prod_inst_id =&lt;br/&gt;                                            p_cursor_row_io.equip_prod_inst_id&lt;br/&gt;                  AND epi.equipment_esn_val = p_cursor_row_io.eqp_serial_reqp;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               NULL;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         -- update t_settop_box_instance&lt;br/&gt;         BEGIN&lt;br/&gt;            SELECT *&lt;br/&gt;              INTO l_settop_box_instance&lt;br/&gt;              FROM t_settop_box_instance sbi&lt;br/&gt;             WHERE sbi.settop_box_instance_id =&lt;br/&gt;                                            p_cursor_row_io.equip_prod_inst_id&lt;br/&gt;               AND sbi.serial_num = p_cursor_row_io.eqp_serial_reqp;&lt;br/&gt;&lt;br/&gt;            IF (   l_settop_box_instance.manufacturer &lt;&gt;&lt;br/&gt;                                                  p_cursor_row_io.manufacturer&lt;br/&gt;                OR l_settop_box_instance.model_nm &lt;&gt;&lt;br/&gt;                                                p_cursor_row_io.eqp_model_reqp&lt;br/&gt;                OR NVL (l_settop_box_instance.manufacturer_date, SYSDATE) &lt;&gt;&lt;br/&gt;                                               p_cursor_row_io.create_dte_reqp&lt;br/&gt;               )&lt;br/&gt;            THEN&lt;br/&gt;               UPDATE t_settop_box_instance sbi&lt;br/&gt;                  SET model_nm = p_cursor_row_io.eqp_model_reqp,&lt;br/&gt;                      manufacturer = p_cursor_row_io.manufacturer,&lt;br/&gt;                      manufacturer_date = p_cursor_row_io.create_dte_reqp,&lt;br/&gt;                      cas_id =&lt;br/&gt;                         DECODE (p_cursor_row_io.manufacturer,&lt;br/&gt;                                 &apos;WLDBX&apos;, &apos;UNKNOWN&apos;,&lt;br/&gt;                                 cas_id&lt;br/&gt;                                ),&lt;br/&gt;                      modified_by = p_audit_user_i,&lt;br/&gt;                      modified_dttm = SYSDATE&lt;br/&gt;                WHERE settop_box_instance_id =&lt;br/&gt;                                            p_cursor_row_io.equip_prod_inst_id;&lt;br/&gt;            END IF;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN NO_DATA_FOUND&lt;br/&gt;            THEN&lt;br/&gt;               NULL;&lt;br/&gt;         END;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      p_cursor_row_io.record_load_cd := pkg_utility.c_stg_processed;&lt;br/&gt;      COMMIT;&lt;br/&gt;   END process_row;&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_staging (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_cursor_data_i   IN   t_cursor_data_tbl&lt;br/&gt;   )&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  SubProgram Name    : PROCEDURE update_staging&lt;br/&gt;   ||  Estimated Run Time :&lt;br/&gt;   ||  Description        : The procedure  updates the staging tables with record load code=&apos;P&apos; and record_dttm=&lt;br/&gt;   systimestamp&lt;br/&gt;   ******************************************************************************************************************/&lt;br/&gt;   IS&lt;br/&gt;      l_proc_name   t_unit_name := &apos;UPDATE_STAGING&apos;;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      FORALL i IN 1 .. p_cursor_data_i.COUNT&lt;br/&gt;         UPDATE stg.vnt_rrt_eqp_base s&lt;br/&gt;            SET s.record_load_cd =&lt;br/&gt;                   NVL (p_cursor_data_i (i).record_load_cd,&lt;br/&gt;                        pkg_utility.c_stg_processed&lt;br/&gt;                       ),&lt;br/&gt;                s.record_dttm = SYSTIMESTAMP&lt;br/&gt;          WHERE ROWID = p_cursor_data_i (i).ID&lt;br/&gt;            AND NVL (s.record_load_cd, &apos; &apos;) &lt;&gt; pkg_utility.c_stg_error;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_staging;&lt;br/&gt;END pkg_vnt_process_rrt_eqp_base;</source>
</body>
</PackageOracle>
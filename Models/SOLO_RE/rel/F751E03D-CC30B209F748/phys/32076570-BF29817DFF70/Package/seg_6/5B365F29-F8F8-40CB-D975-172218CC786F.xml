<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="PKG_EPC" directorySegmentName="seg_6" id="5B365F29-F8F8-40CB-D975-172218CC786F">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_EPC</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:07 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE      CHTR.PKG_EPC&lt;br/&gt;IS&lt;br/&gt; /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_epc&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 26-FEB-2015&lt;br/&gt;   ||  Subject Area    : EPC&lt;br/&gt;   ||  Description     : The package is a wrapper package which loads EPC offer details tables&lt;br/&gt;   ||                    into SOLODB Core Area from EPC Tables in SOLODB Staging area.&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||&lt;br/&gt;   ||  Changed By            Changed On        Change Description&lt;br/&gt;   ||  --------------------------------------  ---------------------------------------------------------------------&lt;br/&gt;   ||  &lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   PROCEDURE PROCESS (p_audit_user_i IN VARCHAR2);&lt;br/&gt;END PKG_EPC;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="PKG_EPC" id="5B365F29-F8F8-40CB-D975-172218CC786F">
<sourceConnName>SOLO_Prod</sourceConnName>
<sourceObjSchema>CHTR</sourceObjSchema>
<sourceObjName>PKG_EPC</sourceObjName>
<createdBy>jandrews1</createdBy>
<createdTime>2015-08-11 13:17:13 UTC</createdTime>
<ownerDesignName>SOLO_RE</ownerDesignName>
<owner>5AF9E3FC-7A76-C437-3E83-BF29D7EA2FC7</owner>
<source>CREATE OR REPLACE PACKAGE BODY      CHTR.PKG_EPC&lt;br/&gt;IS&lt;br/&gt;   /****************************************************************************************************************&lt;br/&gt;   ||  Program Name    : pkg_epc&lt;br/&gt;   ||  Created By      : Cognizant&lt;br/&gt;   ||  Created Date    : 26-FEB-2015&lt;br/&gt;   ||  Subject Area    : EPC&lt;br/&gt;   ||  Description     : The package is a wrapper package, which loads EPC offer details tables&lt;br/&gt;   ||                    in the SOLODB Core Area from EPC Staging area.&lt;br/&gt;   ||&lt;br/&gt;   ||  Change log:&lt;br/&gt;   ||  Changed By            Changed On        Change Description&lt;br/&gt;   ||  --------------------------------------  ---------------------------------------------------------------------&lt;br/&gt;   ||  Cognizant              03-25-2015        Oracle Clean for Character set issue&lt;br/&gt;   ****************************************************************************************************************/&lt;br/&gt;   SUBTYPE t_unit_name IS VARCHAR2 (30);&lt;br/&gt;&lt;br/&gt;   SUBTYPE t_userid IS VARCHAR2 (100 BYTE);&lt;br/&gt;&lt;br/&gt;   c_pkg_name    CONSTANT t_unit_name := &apos;PKG_EPC&apos;;&lt;br/&gt;   l_delete_flag          NUMBER      := 0;&lt;br/&gt;   l_del_rec_count        NUMBER      := 0;&lt;br/&gt;   g_process_record_cnt   NUMBER      := 0;&lt;br/&gt;   g_error_record_cnt     NUMBER      := 0;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_offering (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_customization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_offering_customization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_customization_detail (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_choice (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_choiceid         IN   stg.epc_choice.choiceid%TYPE,&lt;br/&gt;      p_record_load_cd   IN   stg.epc_choice.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_cust_choice (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_customizationid   IN   stg.epc_customization_choice.customizationid%TYPE,&lt;br/&gt;      p_record_load_cd    IN   stg.epc_customization_choice.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_offer_customization (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_customizationid   IN   stg.epc_offer_customization.customizationid%TYPE,&lt;br/&gt;      p_offerid           IN   stg.epc_offer_customization.offerid%TYPE,&lt;br/&gt;      p_record_load_cd    IN   stg.epc_offer_customization.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_customization (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_customizationid   IN   stg.epc_customization.customizationid%TYPE,&lt;br/&gt;      p_record_load_cd    IN   stg.epc_customization.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE update_stg_offer (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_offerid          IN   stg.epc_offer.offerid%TYPE,&lt;br/&gt;      p_record_load_cd   IN   stg.epc_offer.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   );&lt;br/&gt;&lt;br/&gt;   PROCEDURE process (p_audit_user_i IN VARCHAR2)&lt;br/&gt;   AS&lt;br/&gt;      l_proc_name      t_unit_name                       := &apos;PROCESS&apos;;&lt;br/&gt;      l_process_name   t_process_log.process_name%TYPE   := c_pkg_name;&lt;br/&gt;      l_process_rec    pkg_logging.t_process_rec;&lt;br/&gt;      l_audit_user     t_userid;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_audit_user := NVL (p_audit_user_i, c_pkg_name);&lt;br/&gt;      l_process_rec.process_name := l_process_name;&lt;br/&gt;      pkg_logging.begin_process (p_process_rec_io      =&gt; l_process_rec,&lt;br/&gt;                                 p_parm_in_i           =&gt;    &apos;, p_audit_user_i = &apos;&lt;br/&gt;                                                          || l_audit_user&lt;br/&gt;                                );&lt;br/&gt;      load_offering (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                     p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                    );&lt;br/&gt;      load_customization (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                          p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                         );&lt;br/&gt;      load_offering_customization (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                   p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                                  );&lt;br/&gt;      load_customization_detail (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                 p_audit_user_i       =&gt; l_audit_user&lt;br/&gt;                                );&lt;br/&gt;      pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                               p_parm_out_i         =&gt; pkg_utility.c_process_success&lt;br/&gt;                              );&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, exception=&apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;         pkg_logging.end_process (p_process_rec_i      =&gt; l_process_rec,&lt;br/&gt;                                  p_parm_out_i         =&gt; pkg_utility.c_process_error&lt;br/&gt;                                 );&lt;br/&gt;         RAISE;&lt;br/&gt;   END process;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_offering (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : load_offering&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_OFFERING from the&lt;br/&gt;      ||                       Staging table EPC_OFFER. This is a insert/update process&lt;br/&gt;      ||                       wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name              t_unit_name                 := &apos;LOAD_OFFERING&apos;;&lt;br/&gt;      l_systimestamp           TIMESTAMP;&lt;br/&gt;      l_insert_count           NUMBER                        := 0;&lt;br/&gt;      l_update_count           NUMBER                        := 0;&lt;br/&gt;      l_delete_count           NUMBER                        := 0;&lt;br/&gt;      l_exception_count        NUMBER                        := 0;&lt;br/&gt;      l_count_rec_t_offering   NUMBER                        := 0;&lt;br/&gt;      l_offering_id            t_offering.offering_id%TYPE;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_epc_offering&lt;br/&gt;      IS&lt;br/&gt;         SELECT eof.offerid AS eof_offerid,&lt;br/&gt;                tof.offering_id AS tof_offering_id,&lt;br/&gt;                TRIM (eof.externalid) AS eof_externalid,&lt;br/&gt;                UTL_I18N.unescape_reference&lt;br/&gt;                                        (TRIM (eof.shortname)&lt;br/&gt;                                        ) AS eof_shortname,&lt;br/&gt;                UTL_I18N.unescape_reference&lt;br/&gt;                                          (TRIM (eof.longname)&lt;br/&gt;                                          ) AS eof_longname,&lt;br/&gt;                eof.startdate AS eof_startdate, eof.enddate AS eof_enddate,&lt;br/&gt;                TRIM (eof.record_load_cd) AS eof_record_load_cd,&lt;br/&gt;                TRIM (tof.record_stat) AS tof_record_stat,&lt;br/&gt;                TRIM (tof.offering_cd) AS tof_offering_cd,&lt;br/&gt;                TRIM (tof.offering_nm) AS tof_offering_nm,&lt;br/&gt;                TRIM (tof.offering_desc) AS tof_offering_desc,&lt;br/&gt;                TRIM (tof.offering_start_dt) AS tof_offering_start_dt,&lt;br/&gt;                TRIM (tof.offering_end_dt) AS tof_offering_end_dt&lt;br/&gt;           FROM stg.epc_offer eof FULL OUTER JOIN t_offering tof&lt;br/&gt;                ON (tof.offering_id = eof.offerid)&lt;br/&gt;          WHERE eof.record_load_cd IS NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_epc_offering%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_epc_offering;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_epc_offering&lt;br/&gt;      LOOP&lt;br/&gt;         BEGIN&lt;br/&gt;            IF     (cur_rec.eof_offerid IS NOT NULL)&lt;br/&gt;               AND (cur_rec.tof_offering_id IS NULL)&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_offering.ADD (process_rec            =&gt; p_process_rec_i,&lt;br/&gt;                                offering_id            =&gt; cur_rec.eof_offerid,&lt;br/&gt;                                offering_cd            =&gt; cur_rec.eof_externalid,&lt;br/&gt;                                offering_nm            =&gt; cur_rec.eof_shortname,&lt;br/&gt;                                offering_desc          =&gt; cur_rec.eof_longname,&lt;br/&gt;                                offering_start_dt      =&gt; cur_rec.eof_startdate,&lt;br/&gt;                                offering_end_dt        =&gt; cur_rec.eof_enddate,&lt;br/&gt;                                audit_user             =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                                (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                 p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                         || &apos;, offering_id = &apos;&lt;br/&gt;                                                         || cur_rec.eof_offerid&lt;br/&gt;                                                         || &apos;, offering_cd = &apos;&lt;br/&gt;                                                         || cur_rec.eof_externalid&lt;br/&gt;                                                         || &apos;, offering_nm = &apos;&lt;br/&gt;                                                         || cur_rec.eof_shortname&lt;br/&gt;                                                         || &apos;, offering_desc = &apos;&lt;br/&gt;                                                         || cur_rec.eof_longname&lt;br/&gt;                                                         || &apos;, offering_start_dt = &apos;&lt;br/&gt;                                                         || cur_rec.eof_startdate&lt;br/&gt;                                                         || &apos;, offering_end_dt = &apos;&lt;br/&gt;                                                         || cur_rec.eof_enddate&lt;br/&gt;                                                         || &apos;, Status = New Record Inserted&apos;&lt;br/&gt;                                );&lt;br/&gt;            ELSIF (    (cur_rec.eof_offerid IS NOT NULL)&lt;br/&gt;                   AND (cur_rec.tof_offering_id IS NOT NULL)&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               IF (   (cur_rec.tof_record_stat &lt;&gt; pkg_utility.c_record_active&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.tof_offering_cd,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.eof_externalid,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.tof_offering_nm,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.eof_shortname,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.tof_offering_desc,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.eof_longname,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.tof_offering_start_dt,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.eof_startdate,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_date&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.tof_offering_end_dt,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_date&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.eof_enddate,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_date&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_offering&lt;br/&gt;                     SET offering_cd = cur_rec.eof_externalid,&lt;br/&gt;                         offering_nm = cur_rec.eof_shortname,&lt;br/&gt;                         offering_desc = cur_rec.eof_longname,&lt;br/&gt;                         offering_start_dt = cur_rec.eof_startdate,&lt;br/&gt;                         offering_end_dt = cur_rec.eof_enddate,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE offering_id = cur_rec.eof_offerid;&lt;br/&gt;&lt;br/&gt;                  l_update_count := l_update_count + 1;&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                                     (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, offering_id = &apos;&lt;br/&gt;                                                              || cur_rec.eof_offerid&lt;br/&gt;                                                              || &apos;, offering_cd = &apos;&lt;br/&gt;                                                              || cur_rec.eof_externalid&lt;br/&gt;                                                              || &apos;, offering_nm = &apos;&lt;br/&gt;                                                              || cur_rec.eof_shortname&lt;br/&gt;                                                              || &apos;, offering_desc = &apos;&lt;br/&gt;                                                              || cur_rec.eof_longname&lt;br/&gt;                                                              || &apos;, offering_start_dt = &apos;&lt;br/&gt;                                                              || cur_rec.eof_startdate&lt;br/&gt;                                                              || &apos;, offering_end_dt = &apos;&lt;br/&gt;                                                              || cur_rec.eof_enddate&lt;br/&gt;                                                              || &apos;, Status = Record Updated&apos;&lt;br/&gt;                                     );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSIF (    (    (cur_rec.eof_offerid IS NULL)&lt;br/&gt;                        AND (cur_rec.tof_offering_id IS NOT NULL)&lt;br/&gt;                       )&lt;br/&gt;                   AND (cur_rec.tof_record_stat = pkg_utility.c_record_active&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            --Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               l_delete_flag := 1;&lt;br/&gt;&lt;br/&gt;               --Child Table Deletion&lt;br/&gt;               BEGIN&lt;br/&gt;                  l_del_rec_count := 0;&lt;br/&gt;&lt;br/&gt;                  SELECT COUNT (*)&lt;br/&gt;                    INTO l_del_rec_count&lt;br/&gt;                    FROM t_offering_customization&lt;br/&gt;                   WHERE offering_id = cur_rec.tof_offering_id;&lt;br/&gt;&lt;br/&gt;                  IF l_del_rec_count &gt; 0&lt;br/&gt;                  THEN&lt;br/&gt;                     /*      da_offering_customization.del&lt;br/&gt;                            (process_rec               =&gt; p_process_rec_i,&lt;br/&gt;                             offering_id               =&gt; cur_rec.tof_offering_id,&lt;br/&gt;                             audit_user                =&gt; p_audit_user_i&lt;br/&gt;                            );*/&lt;br/&gt;                     UPDATE t_offering_customization a&lt;br/&gt;                        SET a.record_stat = &apos;D&apos;,&lt;br/&gt;                            a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                            a.modified_by = p_audit_user_i&lt;br/&gt;                      WHERE offering_id = cur_rec.tof_offering_id;&lt;br/&gt;&lt;br/&gt;                     pkg_logging.log_debug&lt;br/&gt;                                      (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                       p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                               || &apos;, offering_id = &apos;&lt;br/&gt;                                                               || cur_rec.tof_offering_id&lt;br/&gt;                                                               || &apos;, Status = &apos;&lt;br/&gt;                                                               || l_del_rec_count&lt;br/&gt;                                                               || &apos; Record/s Deleted&apos;&lt;br/&gt;                                      );&lt;br/&gt;                     l_del_rec_count := 0;&lt;br/&gt;                  END IF;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               --&lt;br/&gt;               da_offering.del (process_rec      =&gt; p_process_rec_i,&lt;br/&gt;                                offering_id      =&gt; cur_rec.tof_offering_id,&lt;br/&gt;                                audit_user       =&gt; p_audit_user_i&lt;br/&gt;                               );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                      p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                              || &apos;, offering_id = &apos;&lt;br/&gt;                                                              || cur_rec.tof_offering_id&lt;br/&gt;                                                              || &apos;, Status = &apos;&lt;br/&gt;                                                              || &apos; Record Deleted&apos;&lt;br/&gt;                                     );&lt;br/&gt;               l_del_rec_count := 0;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_delete_flag = 0&lt;br/&gt;            THEN&lt;br/&gt;               update_stg_offer (p_process_rec_i,&lt;br/&gt;                                 cur_rec.eof_offerid,&lt;br/&gt;                                 cur_rec.eof_record_load_cd,&lt;br/&gt;                                 p_audit_user_i&lt;br/&gt;                                );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, offering_id = &apos;&lt;br/&gt;                                                  || cur_rec.eof_offerid&lt;br/&gt;                                                  || &apos;, offering_cd = &apos;&lt;br/&gt;                                                  || cur_rec.eof_externalid&lt;br/&gt;                                                  || &apos;, offering_nm = &apos;&lt;br/&gt;                                                  || cur_rec.eof_shortname&lt;br/&gt;                                                  || &apos;, offering_desc = &apos;&lt;br/&gt;                                                  || cur_rec.eof_longname&lt;br/&gt;                                                  || &apos;, offering_start_dt = &apos;&lt;br/&gt;                                                  || cur_rec.eof_startdate&lt;br/&gt;                                                  || &apos;, offering_end_dt = &apos;&lt;br/&gt;                                                  || cur_rec.eof_enddate&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;&lt;br/&gt;               IF l_delete_flag = 0&lt;br/&gt;               THEN&lt;br/&gt;                  cur_rec.eof_record_load_cd := chtr.pkg_utility.c_stg_error;&lt;br/&gt;                  update_stg_offer (p_process_rec_i,&lt;br/&gt;                                    cur_rec.eof_offerid,&lt;br/&gt;                                    cur_rec.eof_record_load_cd,&lt;br/&gt;                                    p_audit_user_i&lt;br/&gt;                                   );&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END load_offering;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_customization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : load_customization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_customization from the Data&lt;br/&gt;      ||                       Standard Staging table EPC_CUSTOMIZATION. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                 t_unit_name         := &apos;LOAD_CUSTOMIZATION&apos;;&lt;br/&gt;      l_systimestamp              TIMESTAMP;&lt;br/&gt;      l_insert_count              NUMBER                                 := 0;&lt;br/&gt;      l_update_count              NUMBER                                 := 0;&lt;br/&gt;      l_delete_count              NUMBER                                 := 0;&lt;br/&gt;      l_exception_count           NUMBER                                 := 0;&lt;br/&gt;      l_count_rec_customization   NUMBER                                 := 0;&lt;br/&gt;      l_customization_id          t_customization.customization_id%TYPE;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_epc_cust&lt;br/&gt;      IS&lt;br/&gt;         SELECT ecu.customizationid AS ecu_customizationid,&lt;br/&gt;                tcu.customization_id AS tcu_customization_id,&lt;br/&gt;                UTL_I18N.unescape_reference&lt;br/&gt;                                    (TRIM (ecu.description)&lt;br/&gt;                                    ) AS ecu_description,&lt;br/&gt;                TRIM (ecu.record_load_cd) AS ecu_record_load_cd,&lt;br/&gt;                TRIM (tcu.customization_desc) AS tcu_customization_desc,&lt;br/&gt;                TRIM (tcu.record_stat) AS tcu_record_stat&lt;br/&gt;           FROM stg.epc_customization ecu FULL OUTER JOIN t_customization tcu&lt;br/&gt;                ON (tcu.customization_id = ecu.customizationid)&lt;br/&gt;          WHERE ecu.record_load_cd IS NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_epc_cust%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_epc_cust;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_epc_cust&lt;br/&gt;      LOOP&lt;br/&gt;         BEGIN&lt;br/&gt;            IF     (cur_rec.ecu_customizationid IS NOT NULL)&lt;br/&gt;               AND (cur_rec.tcu_customization_id IS NULL)&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_customization.ADD&lt;br/&gt;                            (process_rec             =&gt; p_process_rec_i,&lt;br/&gt;                             customization_id        =&gt; cur_rec.ecu_customizationid,&lt;br/&gt;                             customization_desc      =&gt; cur_rec.ecu_description,&lt;br/&gt;                             audit_user              =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                                (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                 p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                         || &apos;, customization_id = &apos;&lt;br/&gt;                                                         || cur_rec.ecu_customizationid&lt;br/&gt;                                                         || &apos;, customization_desc = &apos;&lt;br/&gt;                                                         || cur_rec.ecu_description&lt;br/&gt;                                                         || &apos;, Status = New Record Inserted&apos;&lt;br/&gt;                                );&lt;br/&gt;            ELSIF (    (cur_rec.ecu_customizationid IS NOT NULL)&lt;br/&gt;                   AND (cur_rec.tcu_customization_id IS NOT NULL)&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               IF (   (NVL (cur_rec.tcu_customization_desc,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.ecu_description,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                   OR (cur_rec.tcu_record_stat &lt;&gt; pkg_utility.c_record_active&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_customization&lt;br/&gt;                     SET customization_desc = cur_rec.ecu_description,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE customization_id = cur_rec.ecu_customizationid;&lt;br/&gt;&lt;br/&gt;                  l_update_count := l_update_count + 1;&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                                  (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                   p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                           || &apos;, customization_id = &apos;&lt;br/&gt;                                                           || cur_rec.ecu_customizationid&lt;br/&gt;                                                           || &apos;, customization_desc = &apos;&lt;br/&gt;                                                           || cur_rec.ecu_description&lt;br/&gt;                                                           || &apos;, Status = Record Updated&apos;&lt;br/&gt;                                  );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSIF (    (    (cur_rec.ecu_customizationid IS NULL)&lt;br/&gt;                        AND (cur_rec.tcu_customization_id IS NOT NULL)&lt;br/&gt;                       )                                    -- added By venkat&lt;br/&gt;                   AND (cur_rec.tcu_record_stat = pkg_utility.c_record_active&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               --Soft delete records&lt;br/&gt;               l_delete_flag := 1;&lt;br/&gt;&lt;br/&gt;               --Child Table Deletion&lt;br/&gt;               BEGIN&lt;br/&gt;                  l_del_rec_count := 0;&lt;br/&gt;&lt;br/&gt;                  SELECT COUNT (*)&lt;br/&gt;                    INTO l_del_rec_count&lt;br/&gt;                    FROM t_offering_customization&lt;br/&gt;                   WHERE customization_id = cur_rec.tcu_customization_id;&lt;br/&gt;&lt;br/&gt;                  IF l_del_rec_count &gt; 0&lt;br/&gt;                  THEN&lt;br/&gt;                     UPDATE t_offering_customization a&lt;br/&gt;                        SET a.record_stat = &apos;D&apos;,&lt;br/&gt;                            a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                            a.modified_by = p_audit_user_i&lt;br/&gt;                      WHERE customization_id = cur_rec.tcu_customization_id;&lt;br/&gt;&lt;br/&gt;                     pkg_logging.log_debug&lt;br/&gt;                                 (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                  p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                          || &apos;, customization_id = &apos;&lt;br/&gt;                                                          || cur_rec.tcu_customization_id&lt;br/&gt;                                                          || &apos;, Status = &apos;&lt;br/&gt;                                                          || l_del_rec_count&lt;br/&gt;                                                          || &apos; Record/s Deleted&apos;&lt;br/&gt;                                 );&lt;br/&gt;                     l_del_rec_count := 0;&lt;br/&gt;                  END IF;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               --&lt;br/&gt;               BEGIN&lt;br/&gt;                  l_del_rec_count := 0;&lt;br/&gt;&lt;br/&gt;                  SELECT COUNT (*)&lt;br/&gt;                    INTO l_del_rec_count&lt;br/&gt;                    FROM t_customization_detail&lt;br/&gt;                   WHERE customization_id = cur_rec.tcu_customization_id;&lt;br/&gt;&lt;br/&gt;                  IF l_del_rec_count &gt; 0&lt;br/&gt;                  THEN&lt;br/&gt;                     /*da_customization_detail.del&lt;br/&gt;                         (&lt;br/&gt;                          process_rec             =&gt; p_process_rec_i,&lt;br/&gt;                          customization_id        =&gt; cur_rec. tcu_customization_id,&lt;br/&gt;                          audit_user              =&gt; p_audit_user_i&lt;br/&gt;                         );*/&lt;br/&gt;                     UPDATE t_customization_detail a&lt;br/&gt;                        SET a.record_stat = &apos;D&apos;,&lt;br/&gt;                            a.modified_dttm = SYSTIMESTAMP,&lt;br/&gt;                            a.modified_by = p_audit_user_i&lt;br/&gt;                      WHERE customization_id = cur_rec.tcu_customization_id;&lt;br/&gt;&lt;br/&gt;                     pkg_logging.log_debug&lt;br/&gt;                        (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                         p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                 || &apos;, customization_id = &apos;&lt;br/&gt;                                                 || cur_rec.tcu_customization_id&lt;br/&gt;                                                        -- commenetd by venkat&lt;br/&gt;                                                 || &apos;, Status = &apos;&lt;br/&gt;                                                 || l_del_rec_count&lt;br/&gt;                                                 || &apos; Record Deleted&apos;&lt;br/&gt;                        );&lt;br/&gt;                     l_del_rec_count := 0;&lt;br/&gt;                  END IF;&lt;br/&gt;               END;&lt;br/&gt;&lt;br/&gt;               --&lt;br/&gt;               da_customization.del&lt;br/&gt;                            (process_rec           =&gt; p_process_rec_i,&lt;br/&gt;                             customization_id      =&gt; cur_rec.tcu_customization_id,&lt;br/&gt;                             audit_user            =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                                 (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                  p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                          || &apos;, customization_id = &apos;&lt;br/&gt;                                                          || cur_rec.tcu_customization_id&lt;br/&gt;                                                          || &apos;, Status = Record Deleted&apos;&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_delete_flag = 0&lt;br/&gt;            THEN&lt;br/&gt;               update_stg_customization (p_process_rec_i,&lt;br/&gt;                                         cur_rec.ecu_customizationid,&lt;br/&gt;                                         cur_rec.ecu_record_load_cd,&lt;br/&gt;                                         p_audit_user_i&lt;br/&gt;                                        );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, customization_id = &apos;&lt;br/&gt;                                                  || cur_rec.ecu_customizationid&lt;br/&gt;                                                  || &apos;, customization_desc = &apos;&lt;br/&gt;                                                  || cur_rec.ecu_description&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;&lt;br/&gt;               IF l_delete_flag = 0&lt;br/&gt;               THEN&lt;br/&gt;                  cur_rec.ecu_record_load_cd := chtr.pkg_utility.c_stg_error;&lt;br/&gt;                  update_stg_customization (p_process_rec_i,&lt;br/&gt;                                            cur_rec.ecu_customizationid,&lt;br/&gt;                                            cur_rec.ecu_record_load_cd,&lt;br/&gt;                                            p_audit_user_i&lt;br/&gt;                                           );&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END load_customization;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_offering_customization (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : load_offering_customization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_OFFERING_CUSTOMIZATION from the Data&lt;br/&gt;      ||                       Standard Staging table T_OFFER_CUSTOMIZATION. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name                   t_unit_name&lt;br/&gt;                                             := &apos;LOAD_OFFERING_CUSTOMIZATION&apos;;&lt;br/&gt;      l_systimestamp                TIMESTAMP;&lt;br/&gt;      l_insert_count                NUMBER                               := 0;&lt;br/&gt;      l_update_count                NUMBER                               := 0;&lt;br/&gt;      l_delete_count                NUMBER                               := 0;&lt;br/&gt;      l_exception_count             NUMBER                               := 0;&lt;br/&gt;      l_offering_customization_id   t_offering_customization.offering_id%TYPE;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_epc_off_cust&lt;br/&gt;      IS&lt;br/&gt;         SELECT eoc.offerid AS eoc_offerid,&lt;br/&gt;                eoc.customizationid AS eoc_customizationid,&lt;br/&gt;                TRIM (eoc.record_load_cd) AS eoc_record_load_cd,&lt;br/&gt;                toc.offering_id AS toc_offering_id,&lt;br/&gt;                toc.customization_id AS toc_customizationid,&lt;br/&gt;                TRIM (toc.record_stat) AS toc_record_stat&lt;br/&gt;           FROM stg.epc_offer_customization eoc FULL OUTER JOIN t_offering_customization toc&lt;br/&gt;                ON (    (toc.offering_id = eoc.offerid)&lt;br/&gt;                    AND (toc.customization_id = eoc.customizationid)&lt;br/&gt;                   )&lt;br/&gt;          WHERE eoc.record_load_cd IS NULL;&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_epc_off_cust%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_epc_off_cust;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_epc_off_cust&lt;br/&gt;      LOOP&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (    (    (cur_rec.eoc_offerid IS NOT NULL)&lt;br/&gt;                     AND (cur_rec.toc_offering_id IS NULL)&lt;br/&gt;                    )&lt;br/&gt;                AND (    (cur_rec.eoc_customizationid IS NOT NULL)&lt;br/&gt;                     AND (cur_rec.toc_customizationid IS NULL)&lt;br/&gt;                    )&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_offering_customization.ADD&lt;br/&gt;                            (process_rec           =&gt; p_process_rec_i,&lt;br/&gt;                             offering_id           =&gt; cur_rec.eoc_offerid,&lt;br/&gt;                             customization_id      =&gt; cur_rec.eoc_customizationid,&lt;br/&gt;                             audit_user            =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                                (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                 p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                         || &apos;, offering_id = &apos;&lt;br/&gt;                                                         || cur_rec.eoc_offerid&lt;br/&gt;                                                         || &apos;, customization_id = &apos;&lt;br/&gt;                                                         || cur_rec.eoc_customizationid&lt;br/&gt;                                                         || &apos;, Status = New Record Inserted&apos;&lt;br/&gt;                                );&lt;br/&gt;            ELSIF (    (    (cur_rec.eoc_offerid IS NOT NULL)&lt;br/&gt;                        AND (cur_rec.toc_offering_id IS NOT NULL)&lt;br/&gt;                       )&lt;br/&gt;                   AND (    (cur_rec.eoc_customizationid IS NOT NULL)&lt;br/&gt;                        AND (cur_rec.toc_customizationid IS NOT NULL)&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               IF cur_rec.toc_record_stat &lt;&gt; pkg_utility.c_record_active&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_offering_customization&lt;br/&gt;                     SET record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE offering_id = cur_rec.eoc_offerid&lt;br/&gt;                     AND customization_id = cur_rec.eoc_customizationid;&lt;br/&gt;&lt;br/&gt;                  l_update_count := l_update_count + 1;&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                                  (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                   p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                           || &apos;, offering_id = &apos;&lt;br/&gt;                                                           || cur_rec.eoc_offerid&lt;br/&gt;                                                           || &apos;, customization_id    = &apos;&lt;br/&gt;                                                           || cur_rec.eoc_customizationid&lt;br/&gt;                                                           || &apos;, Status = Record Updated&apos;&lt;br/&gt;                                  );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSIF (    (   (    (cur_rec.eoc_offerid IS NULL)&lt;br/&gt;                            AND (cur_rec.toc_offering_id IS NOT NULL)&lt;br/&gt;                           )&lt;br/&gt;                        OR (    (cur_rec.eoc_customizationid IS NULL)&lt;br/&gt;                            AND (cur_rec.toc_customizationid IS NOT NULL)&lt;br/&gt;                           )&lt;br/&gt;                       )&lt;br/&gt;                   AND cur_rec.toc_record_stat = pkg_utility.c_record_active&lt;br/&gt;                  )&lt;br/&gt;            --Soft delete records&lt;br/&gt;            THEN&lt;br/&gt;               l_delete_flag := 1;&lt;br/&gt;               da_offering_customization.del&lt;br/&gt;                            (process_rec           =&gt; p_process_rec_i,&lt;br/&gt;                             offering_id           =&gt; cur_rec.toc_offering_id,&lt;br/&gt;                             customization_id      =&gt; cur_rec.toc_customizationid,&lt;br/&gt;                             audit_user            =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;               l_delete_count := l_delete_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                                  (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                   p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                           || &apos;, offering_id = &apos;&lt;br/&gt;                                                           || cur_rec.toc_offering_id&lt;br/&gt;                                                           || &apos;, customization_id    = &apos;&lt;br/&gt;                                                           || cur_rec.toc_customizationid&lt;br/&gt;                                                           || &apos;, Status = Record Deleted&apos;&lt;br/&gt;                                  );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_delete_flag = 0&lt;br/&gt;            THEN&lt;br/&gt;               update_stg_offer_customization (p_process_rec_i,&lt;br/&gt;                                               cur_rec.eoc_customizationid,&lt;br/&gt;                                               cur_rec.eoc_offerid,&lt;br/&gt;                                               cur_rec.eoc_record_load_cd,&lt;br/&gt;                                               p_audit_user_i&lt;br/&gt;                                              );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, offering_cd = &apos;&lt;br/&gt;                                                  || cur_rec.eoc_offerid&lt;br/&gt;                                                  || &apos; ,customization_id    = &apos;&lt;br/&gt;                                                  || cur_rec.eoc_customizationid&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;&lt;br/&gt;               IF l_delete_flag = 0&lt;br/&gt;               THEN&lt;br/&gt;                  cur_rec.eoc_record_load_cd := chtr.pkg_utility.c_stg_error;&lt;br/&gt;                  update_stg_offer_customization&lt;br/&gt;                                                (p_process_rec_i,&lt;br/&gt;                                                 cur_rec.eoc_customizationid,&lt;br/&gt;                                                 cur_rec.eoc_offerid,&lt;br/&gt;                                                 cur_rec.eoc_record_load_cd,&lt;br/&gt;                                                 p_audit_user_i&lt;br/&gt;                                                );&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END load_offering_customization;&lt;br/&gt;&lt;br/&gt;   PROCEDURE load_customization_detail (&lt;br/&gt;      p_process_rec_i   IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_audit_user_i    IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   AS&lt;br/&gt;      /****************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : load_customization_detail&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure is to load SoloDB Core reference table T_CUSTOMIZATION_DETAIL from the Data&lt;br/&gt;      ||                       Standard Staging tables EPC_Choice and EPC_Customization_Choice. This is a insert-or-update process&lt;br/&gt;      ||                        wish soft delete.&lt;br/&gt;      ****************************************************************************************************************/&lt;br/&gt;      l_proc_name             t_unit_name      := &apos;LOAD_CUSTOMIZATION_DETAIL&apos;;&lt;br/&gt;      l_systimestamp          TIMESTAMP;&lt;br/&gt;      l_insert_count          NUMBER                                     := 0;&lt;br/&gt;      l_update_count          NUMBER                                     := 0;&lt;br/&gt;      l_delete_count          NUMBER                                     := 0;&lt;br/&gt;      l_exception_count       NUMBER                                     := 0;&lt;br/&gt;      l_count_rec_cust_dtls   NUMBER                                     := 0;&lt;br/&gt;      l_cust_dtls_id          t_customization_detail.customization_detail_id%TYPE;&lt;br/&gt;&lt;br/&gt;      CURSOR cur_stg_epc_cust_ch&lt;br/&gt;      IS&lt;br/&gt;         SELECT a.ecc_customizationid AS ecc_customizationid,&lt;br/&gt;                tcd.customization_id AS tcd_customizationid,&lt;br/&gt;                UTL_I18N.unescape_reference&lt;br/&gt;                                  (TRIM (a.ech_description)&lt;br/&gt;                                  ) AS ech_description,&lt;br/&gt;                TRIM (tcd.choice_desc) AS tcd_choice_desc,&lt;br/&gt;                UTL_I18N.unescape_reference&lt;br/&gt;                                          (TRIM (a.ech_comment)&lt;br/&gt;                                          ) AS ech_comment,&lt;br/&gt;                TRIM (tcd.option_text) AS tcd_option_text,&lt;br/&gt;                TRIM (tcd.record_stat) AS tcd_record_stat,&lt;br/&gt;                TRIM (a.ech_record_load_cd) AS ech_record_load_cd,&lt;br/&gt;                TRIM (a.ecc_record_load_cd) AS ecc_record_load_cd,&lt;br/&gt;                a.ech_choiceid AS ech_choiceid,&lt;br/&gt;                tcd.customization_detail_id AS tcd_customization_detail_id&lt;br/&gt;           FROM (SELECT ech.choiceid AS ech_choiceid,&lt;br/&gt;                        ecc.customizationid AS ecc_customizationid,&lt;br/&gt;                        ech.description AS ech_description,&lt;br/&gt;                        ech.comment_ AS ech_comment,&lt;br/&gt;                        ech.record_load_cd AS ech_record_load_cd,&lt;br/&gt;                        ecc.record_load_cd AS ecc_record_load_cd&lt;br/&gt;                   FROM stg.epc_customization_choice ecc INNER JOIN stg.epc_choice ech&lt;br/&gt;                        ON (ech.choiceid = ecc.choiceid)&lt;br/&gt;                        ) a&lt;br/&gt;                FULL OUTER JOIN&lt;br/&gt;                t_customization_detail tcd&lt;br/&gt;                ON (    (tcd.customization_id = a.ecc_customizationid)&lt;br/&gt;                    AND (tcd.customization_detail_id = a.ech_choiceid)&lt;br/&gt;                   )&lt;br/&gt;          WHERE (ech_record_load_cd IS NULL OR ecc_record_load_cd IS NULL);&lt;br/&gt;   BEGIN&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      g_process_record_cnt := 0;&lt;br/&gt;      g_error_record_cnt := 0;&lt;br/&gt;&lt;br/&gt;      IF pkg_utility.stopnow (c_pkg_name)&lt;br/&gt;      THEN&lt;br/&gt;         RETURN;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      IF (cur_stg_epc_cust_ch%ISOPEN)&lt;br/&gt;      THEN&lt;br/&gt;         CLOSE cur_stg_epc_cust_ch;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      FOR cur_rec IN cur_stg_epc_cust_ch&lt;br/&gt;      LOOP&lt;br/&gt;         BEGIN&lt;br/&gt;            IF (    (    (cur_rec.ecc_customizationid IS NOT NULL)&lt;br/&gt;                     AND (cur_rec.tcd_customizationid IS NULL)&lt;br/&gt;                    )&lt;br/&gt;                AND (    (cur_rec.ech_choiceid IS NOT NULL)&lt;br/&gt;                     AND (cur_rec.tcd_customization_detail_id IS NULL)&lt;br/&gt;                    )&lt;br/&gt;               )&lt;br/&gt;            -- Insert new records&lt;br/&gt;            THEN&lt;br/&gt;               da_customization_detail.ADD&lt;br/&gt;                            (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                             customization_detail_id      =&gt; cur_rec.ech_choiceid,&lt;br/&gt;                             customization_id             =&gt; cur_rec.ecc_customizationid,&lt;br/&gt;                             choice_desc                  =&gt; cur_rec.ech_description,&lt;br/&gt;                             option_text                  =&gt; cur_rec.ech_comment,&lt;br/&gt;                             audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;               l_insert_count := l_insert_count + 1;&lt;br/&gt;               pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, customization_detail_id = &apos;&lt;br/&gt;                                                        || cur_rec.ech_choiceid&lt;br/&gt;                                                        || &apos;, customization_id = &apos;&lt;br/&gt;                                                        || cur_rec.ecc_customizationid&lt;br/&gt;                                                        || &apos;, choice_desc = &apos;&lt;br/&gt;                                                        || cur_rec.ech_description&lt;br/&gt;                                                        || &apos;, option_text = &apos;&lt;br/&gt;                                                        || cur_rec.ech_comment&lt;br/&gt;                                                        || &apos;, Status = New Record Inserted&apos;&lt;br/&gt;                               );&lt;br/&gt;            ELSIF (    (    (cur_rec.ecc_customizationid IS NOT NULL)&lt;br/&gt;                        AND (cur_rec.tcd_customizationid IS NOT NULL)&lt;br/&gt;                       )&lt;br/&gt;                   AND (    (cur_rec.ech_choiceid IS NOT NULL)&lt;br/&gt;                        AND (cur_rec.tcd_customization_detail_id IS NOT NULL&lt;br/&gt;                            )&lt;br/&gt;                       )&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               IF (   (cur_rec.tcd_record_stat &lt;&gt; pkg_utility.c_record_active&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.tcd_choice_desc,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.ech_description,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                   OR (NVL (cur_rec.tcd_option_text,&lt;br/&gt;                            chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                           ) &lt;&gt;&lt;br/&gt;                          NVL (cur_rec.ech_comment,&lt;br/&gt;                               chtr.pkg_utility.c_recon_null_string&lt;br/&gt;                              )&lt;br/&gt;                      )&lt;br/&gt;                  )&lt;br/&gt;               THEN&lt;br/&gt;                  UPDATE t_customization_detail&lt;br/&gt;                     SET choice_desc = cur_rec.ech_description,&lt;br/&gt;                         option_text = cur_rec.ech_comment,&lt;br/&gt;                         record_stat = pkg_utility.c_record_active,&lt;br/&gt;                         modified_dttm = l_systimestamp,&lt;br/&gt;                         modified_by = p_audit_user_i&lt;br/&gt;                   WHERE customization_id = cur_rec.ecc_customizationid&lt;br/&gt;                     AND customization_detail_id = cur_rec.ech_choiceid;&lt;br/&gt;&lt;br/&gt;                  l_update_count := l_update_count + 1;&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                               (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                                p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                        || &apos;, customization_detail_id = &apos;&lt;br/&gt;                                                        || cur_rec.ech_choiceid&lt;br/&gt;                                                        || &apos;, customization_id = &apos;&lt;br/&gt;                                                        || cur_rec.ecc_customizationid&lt;br/&gt;                                                        || &apos;, choice_desc = &apos;&lt;br/&gt;                                                        || cur_rec.ech_description&lt;br/&gt;                                                        || &apos;, option_text = &apos;&lt;br/&gt;                                                        || cur_rec.ech_comment&lt;br/&gt;                                                        || &apos;, Status = Record Updated&apos;&lt;br/&gt;                               );&lt;br/&gt;               END IF;&lt;br/&gt;            ELSIF (    (   (    (cur_rec.ecc_customizationid IS NULL)&lt;br/&gt;                            AND (cur_rec.tcd_customizationid IS NOT NULL)&lt;br/&gt;                           )&lt;br/&gt;                        OR (    (cur_rec.ech_choiceid IS NULL)&lt;br/&gt;                            AND (cur_rec.tcd_customization_detail_id IS NOT NULL&lt;br/&gt;                                )&lt;br/&gt;                           )&lt;br/&gt;                       )&lt;br/&gt;                   AND cur_rec.tcd_record_stat = pkg_utility.c_record_active&lt;br/&gt;                  )&lt;br/&gt;            THEN&lt;br/&gt;               BEGIN&lt;br/&gt;                  --Soft delete records&lt;br/&gt;                  l_delete_flag := 1;&lt;br/&gt;                  da_customization_detail.del&lt;br/&gt;                     (process_rec                  =&gt; p_process_rec_i,&lt;br/&gt;                      customization_detail_id      =&gt; cur_rec.tcd_customization_detail_id,&lt;br/&gt;                      customization_id             =&gt; cur_rec.tcd_customizationid,&lt;br/&gt;                      audit_user                   =&gt; p_audit_user_i&lt;br/&gt;                     );&lt;br/&gt;                  l_delete_count := l_delete_count + 1;&lt;br/&gt;                  pkg_logging.log_debug&lt;br/&gt;                          (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                           p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                   || &apos;, customization_detail_id = &apos;&lt;br/&gt;                                                   || cur_rec.tcd_customization_detail_id&lt;br/&gt;                                                   || &apos;, customization_id = &apos;&lt;br/&gt;                                                   || cur_rec.tcd_customizationid&lt;br/&gt;                                                   || &apos;, Status = Record Deleted&apos;&lt;br/&gt;                          );&lt;br/&gt;               END;&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            IF l_delete_flag = 0&lt;br/&gt;            THEN&lt;br/&gt;               update_stg_cust_choice (p_process_rec_i,&lt;br/&gt;                                       cur_rec.ecc_customizationid,&lt;br/&gt;                                       cur_rec.ecc_record_load_cd,&lt;br/&gt;                                       p_audit_user_i&lt;br/&gt;                                      );&lt;br/&gt;               update_stg_choice (p_process_rec_i,&lt;br/&gt;                                  cur_rec.ech_choiceid,&lt;br/&gt;                                  cur_rec.ech_record_load_cd,&lt;br/&gt;                                  p_audit_user_i&lt;br/&gt;                                 );&lt;br/&gt;            END IF;&lt;br/&gt;&lt;br/&gt;            COMMIT;&lt;br/&gt;         EXCEPTION&lt;br/&gt;            WHEN OTHERS&lt;br/&gt;            THEN&lt;br/&gt;               ROLLBACK;&lt;br/&gt;               l_exception_count := l_exception_count + 1;&lt;br/&gt;               pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, customization_detail_id = &apos;&lt;br/&gt;                                                  || cur_rec.ech_choiceid&lt;br/&gt;                                                  || &apos;, customization_id = &apos;&lt;br/&gt;                                                  || cur_rec.ecc_customizationid&lt;br/&gt;                                                  || &apos;, choice_desc = &apos;&lt;br/&gt;                                                  || cur_rec.ech_description&lt;br/&gt;                                                  || &apos;, option_text = &apos;&lt;br/&gt;                                                  || cur_rec.ech_comment&lt;br/&gt;                                                  || &apos; exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;&lt;br/&gt;               IF l_delete_flag = 0&lt;br/&gt;               THEN&lt;br/&gt;                  cur_rec.ecc_record_load_cd := chtr.pkg_utility.c_stg_error;&lt;br/&gt;                  update_stg_cust_choice (p_process_rec_i,&lt;br/&gt;                                          cur_rec.ecc_customizationid,&lt;br/&gt;                                          cur_rec.ecc_record_load_cd,&lt;br/&gt;                                          p_audit_user_i&lt;br/&gt;                                         );&lt;br/&gt;                  cur_rec.ech_record_load_cd := chtr.pkg_utility.c_stg_error;&lt;br/&gt;                  update_stg_choice (p_process_rec_i,&lt;br/&gt;                                     cur_rec.ech_choiceid,&lt;br/&gt;                                     cur_rec.ech_record_load_cd,&lt;br/&gt;                                     p_audit_user_i&lt;br/&gt;                                    );&lt;br/&gt;               END IF;&lt;br/&gt;         END;&lt;br/&gt;&lt;br/&gt;         EXIT WHEN pkg_utility.stopnow (c_pkg_name);&lt;br/&gt;      END LOOP;&lt;br/&gt;&lt;br/&gt;      pkg_logging.process_log_detail_category&lt;br/&gt;                                (p_process_rec_i          =&gt; p_process_rec_i,&lt;br/&gt;                                 p_process_id_i           =&gt; p_process_rec_i.process_id,&lt;br/&gt;                                 p_in_audit_user_i        =&gt; p_audit_user_i,&lt;br/&gt;                                 p_audit_bucket_i         =&gt; l_proc_name,&lt;br/&gt;                                 p_insert_count_i         =&gt; l_insert_count,&lt;br/&gt;                                 p_update_count_i         =&gt; l_update_count,&lt;br/&gt;                                 p_delete_count_i         =&gt; l_delete_count,&lt;br/&gt;                                 p_exception_count_i      =&gt; l_exception_count&lt;br/&gt;                                );&lt;br/&gt;      --Making entry to the Process Child table against Total Processed Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                          (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                           p_audit_bucket_i       =&gt; pkg_utility.c_prcssed_rec_text,&lt;br/&gt;                           p_audit_value_i        =&gt; g_process_record_cnt,&lt;br/&gt;                           p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                           p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                          );&lt;br/&gt;      --Making entry to the Process Child table against Total Error Record Count&lt;br/&gt;      pkg_logging.process_log_detail_populate&lt;br/&gt;                            (p_process_rec_i        =&gt; p_process_rec_i,&lt;br/&gt;                             p_audit_bucket_i       =&gt; pkg_utility.c_error_rec_text,&lt;br/&gt;                             p_audit_value_i        =&gt; g_error_record_cnt,&lt;br/&gt;                             p_process_id_i         =&gt; p_process_rec_i.process_id,&lt;br/&gt;                             p_in_audit_user_i      =&gt; p_audit_user_i&lt;br/&gt;                            );&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                             p_debug_i            =&gt;    l_proc_name&lt;br/&gt;                                                     || &apos;, &apos;&lt;br/&gt;                                                     || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;      COMMIT;&lt;br/&gt;   EXCEPTION&lt;br/&gt;      WHEN OTHERS&lt;br/&gt;      THEN&lt;br/&gt;         ROLLBACK;&lt;br/&gt;         pkg_logging.log_exception&lt;br/&gt;                         (p_process_rec_i      =&gt; p_process_rec_i,&lt;br/&gt;                          p_exception_i        =&gt;    l_proc_name&lt;br/&gt;                                                  || &apos;, exception = &apos;&lt;br/&gt;                                                  || DBMS_UTILITY.format_error_stack&lt;br/&gt;                                                                           ()&lt;br/&gt;                         );&lt;br/&gt;   END load_customization_detail;&lt;br/&gt;&lt;br/&gt;--&lt;br/&gt;   PROCEDURE update_stg_offer (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_offerid          IN   stg.epc_offer.offerid%TYPE,&lt;br/&gt;      p_record_load_cd   IN   stg.epc_offer.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_stg_offer&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.epc_offer.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STG_OFFER&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.epc_offer s&lt;br/&gt;         SET s.record_load_cd =&lt;br/&gt;                           NVL (p_record_load_cd, pkg_utility.c_stg_processed),&lt;br/&gt;             s.record_dttm = l_systimestamp&lt;br/&gt;       WHERE s.offerid = p_offerid;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_stg_offer;&lt;br/&gt;&lt;br/&gt;--&lt;br/&gt;   PROCEDURE update_stg_customization (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_customizationid   IN   stg.epc_customization.customizationid%TYPE,&lt;br/&gt;      p_record_load_cd    IN   stg.epc_customization.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_stg_customization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.vnt_ojb_jobs_rec.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STG_CUSTOMIZATION&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.epc_customization s&lt;br/&gt;         SET s.record_load_cd =&lt;br/&gt;                           NVL (p_record_load_cd, pkg_utility.c_stg_processed),&lt;br/&gt;             s.record_dttm = l_systimestamp&lt;br/&gt;       WHERE s.customizationid = p_customizationid;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_stg_customization;&lt;br/&gt;&lt;br/&gt;--&lt;br/&gt;   PROCEDURE update_stg_offer_customization (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_customizationid   IN   stg.epc_offer_customization.customizationid%TYPE,&lt;br/&gt;      p_offerid           IN   stg.epc_offer_customization.offerid%TYPE,&lt;br/&gt;      p_record_load_cd    IN   stg.epc_offer_customization.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_stg_offer_customization&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.vnt_ojb_jobs_rec.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STG_OFFER_CUSTOMIZATION&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.epc_offer_customization s&lt;br/&gt;         SET s.record_load_cd =&lt;br/&gt;                           NVL (p_record_load_cd, pkg_utility.c_stg_processed),&lt;br/&gt;             s.record_dttm = l_systimestamp&lt;br/&gt;       WHERE s.offerid = p_offerid AND s.customizationid = p_customizationid;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_stg_offer_customization;&lt;br/&gt;&lt;br/&gt;--&lt;br/&gt;   PROCEDURE update_stg_cust_choice (&lt;br/&gt;      p_process_rec_i     IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_customizationid   IN   stg.epc_customization_choice.customizationid%TYPE,&lt;br/&gt;      p_record_load_cd    IN   stg.epc_customization_choice.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i      IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_stg_Cust_Choice&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.vnt_ojb_jobs_rec.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STG_CUST_CHOICE&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.epc_customization_choice s&lt;br/&gt;         SET s.record_load_cd =&lt;br/&gt;                           NVL (p_record_load_cd, pkg_utility.c_stg_processed),&lt;br/&gt;             s.record_dttm = l_systimestamp&lt;br/&gt;       WHERE s.customizationid = p_customizationid;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_stg_cust_choice;&lt;br/&gt;&lt;br/&gt;--&lt;br/&gt;   PROCEDURE update_stg_choice (&lt;br/&gt;      p_process_rec_i    IN   pkg_logging.t_process_rec,&lt;br/&gt;      p_choiceid         IN   stg.epc_choice.choiceid%TYPE,&lt;br/&gt;      p_record_load_cd   IN   stg.epc_choice.record_load_cd%TYPE,&lt;br/&gt;      p_audit_user_i     IN   VARCHAR2&lt;br/&gt;   )&lt;br/&gt;   IS&lt;br/&gt;      /*******************************************************************************************************************&lt;br/&gt;      ||  SubProgram Name    : PROCEDURE update_stg_Choice&lt;br/&gt;      ||  Estimated Run Time :&lt;br/&gt;      ||  Description        : This procedure will update staging table stg.vnt_ojb_jobs_rec.&lt;br/&gt;      *******************************************************************************************************************/&lt;br/&gt;      l_proc_name      t_unit_name := &apos;UPDATE_STG_CHOICE&apos;;&lt;br/&gt;      l_systimestamp   TIMESTAMP;&lt;br/&gt;   BEGIN&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                                l_proc_name&lt;br/&gt;                             || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_start_text&lt;br/&gt;                            );&lt;br/&gt;      l_systimestamp := SYSTIMESTAMP;&lt;br/&gt;&lt;br/&gt;      UPDATE stg.epc_choice s&lt;br/&gt;         SET s.record_load_cd =&lt;br/&gt;                           NVL (p_record_load_cd, pkg_utility.c_stg_processed),&lt;br/&gt;             s.record_dttm = l_systimestamp&lt;br/&gt;       WHERE s.choiceid = p_choiceid;&lt;br/&gt;&lt;br/&gt;      IF (NVL (p_record_load_cd, pkg_utility.c_stg_processed)) =&lt;br/&gt;                                                   pkg_utility.c_stg_processed&lt;br/&gt;      THEN&lt;br/&gt;         g_process_record_cnt := g_process_record_cnt + 1;&lt;br/&gt;      ELSIF (p_record_load_cd = pkg_utility.c_stg_error)&lt;br/&gt;      THEN&lt;br/&gt;         g_error_record_cnt := g_error_record_cnt + 1;&lt;br/&gt;      END IF;&lt;br/&gt;&lt;br/&gt;      pkg_logging.log_debug (p_process_rec_i,&lt;br/&gt;                             l_proc_name || &apos;, &apos;&lt;br/&gt;                             || pkg_utility.c_proc_end_text&lt;br/&gt;                            );&lt;br/&gt;   END update_stg_choice;&lt;br/&gt;END pkg_epc;</source>
</body>
</PackageOracle>